modules = ["nodejs-20", "web"]
run = "npm run dev"

[nix]
channel = "stable-24_05"

[deployment]
run = ["sh", "-c", "npm run dev"]
deploymentTarget = "cloudrun"

[[ports]]
localPort = 3001
externalPort = 5000

[[ports]]
localPort = 5173
externalPort = 80

[[ports]]
localPort = 5174
externalPort = 3000

[[ports]]
localPort = 5175
externalPort = 3001

[[ports]]
localPort = 5176
externalPort = 3002

[[ports]]
localPort = 5177
externalPort = 3003

[[ports]]
localPort = 5178
externalPort = 4200

[[ports]]
localPort = 5180
externalPort = 5173

[[ports]]
localPort = 5181
externalPort = 6000

[workflows]
runButton = "Run App"

[[workflows.workflow]]
name = "Run App"
author = 41255696
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npm run dev"

[[workflows.workflow]]
name = "Inicialização Completa"
author = 41255696
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node scripts/start-app.js"

[[workflows.workflow]]
name = "Configurar Banco de Dados"
author = 41255696
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node scripts/setup-supabase.js"

[[workflows.workflow]]
name = "Configurar Storage"
author = 41255696
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node scripts/setup-storage.js"

[[workflows.workflow]]
name = "API Server"
author = 41255696
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node scripts/api-server.js"

[[workflows.workflow]]
name = "Aplicar Migrações"
author = 42059808
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npx supabase migration up"

[[workflows.workflow]]
name = "Aplicar Migrações SQL"
author = 42059808
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npx supabase migration up"

[[workflows.workflow]]
name = "Inicializar DB Simples"
author = 42059808
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node scripts/setup-simple-db.js"

[[workflows.workflow]]
name = "Restaurar Grupos Estudo"
author = 42059808
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node scripts/setup-simple-db.js"

[[workflows.workflow]]
name = "Sincronizar Códigos Grupos"
author = 42059808
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node -e \""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "const { createClient } = require('@supabase/supabase-js');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "async function sincronizarGruposTabela() {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  console.log('Verificando tabelas e sincronizando grupos...');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  try {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    // Verificar se tabela codigos_grupos_estudo existe"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    try {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      const { count, error: codigosError } = await supabase"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        .from('codigos_grupos_estudo')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        .select('*', { count: 'exact', head: true });"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      if (codigosError && codigosError.code === '42P01') {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        console.log('Tabela codigos_grupos_estudo não existe. Criando...');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        // Criar a tabela"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        await supabase.query(`"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          CREATE TABLE IF NOT EXISTS public.codigos_grupos_estudo ("

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            codigo VARCHAR(15) PRIMARY KEY,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            grupo_id UUID NOT NULL,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            nome VARCHAR NOT NULL,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            descricao TEXT,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            data_criacao TIMESTAMP WITH TIME ZONE DEFAULT now(),"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            user_id UUID,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            privado BOOLEAN DEFAULT false,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            membros INTEGER DEFAULT 1,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            visibilidade VARCHAR,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            disciplina VARCHAR,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            cor VARCHAR DEFAULT '#FF6B00',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            membros_ids JSONB DEFAULT '[]'::jsonb,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            ultima_atualizacao TIMESTAMP WITH TIME ZONE DEFAULT now()"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          );"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        `);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        console.log('Tabela codigos_grupos_estudo criada com sucesso!');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      } else {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        console.log(`Tabela codigos_grupos_estudo existe com ${count || 0} registros.`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    } catch (error) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.error('Erro ao verificar tabela codigos_grupos_estudo:', error);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    // Buscar todos grupos de estudo"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    const { data: grupos, error: gruposError } = await supabase"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      .from('grupos_estudo')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      .select('*');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    if (gruposError) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.error('Erro ao buscar grupos:', gruposError);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      return;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log(`Encontrados ${grupos?.length || 0} grupos para sincronizar.`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    // Sincronizar grupos com tabela de códigos"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    let sucessos = 0;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    let ignorados = 0;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    let erros = 0;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    for (const grupo of grupos || []) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      try {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        if (!grupo.codigo) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          console.log(`Grupo ID ${grupo.id} não possui código. Ignorando.`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ignorados++;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          continue;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        // Verificar se já existe código na tabela de códigos"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        const { data: existente } = await supabase"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          .from('codigos_grupos_estudo')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          .select('codigo')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          .eq('codigo', grupo.codigo)"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          .single();"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        if (existente) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          console.log(`Código ${grupo.codigo} já existe na tabela.`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          continue;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        // Inserir código na tabela de códigos"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        const { error: insertError } = await supabase"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          .from('codigos_grupos_estudo')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          .insert({"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            codigo: grupo.codigo,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            grupo_id: grupo.id,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            nome: grupo.nome || 'Grupo sem nome',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            descricao: grupo.descricao || '',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            user_id: grupo.user_id,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            privado: grupo.privado || false,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            membros: grupo.membros || 1,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            visibilidade: grupo.visibilidade || 'todos',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            disciplina: grupo.disciplina || '',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            cor: grupo.cor || '#FF6B00',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            membros_ids: grupo.membros_ids || [],"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            data_criacao: grupo.data_criacao || new Date().toISOString(),"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            ultima_atualizacao: new Date().toISOString()"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          });"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        if (insertError) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          console.error(`Erro ao sincronizar código ${grupo.codigo}:`, insertError);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          erros++;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        } else {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          console.log(`Código ${grupo.codigo} sincronizado com sucesso!`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          sucessos++;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      } catch (error) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        console.error(`Erro ao processar grupo ${grupo.id}:`, error);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        erros++;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '''    console.log('\n--- RELATÓRIO DE SINCRONIZAÇÃO ---');'''

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log(`Total de grupos: ${grupos?.length || 0}`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log(`Sucessos: ${sucessos}`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log(`Ignorados: ${ignorados}`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log(`Erros: ${erros}`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '''    console.log('--------------------------------\n');'''

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log('Sincronização concluída!');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  } catch (error) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.error('Erro durante a sincronização:', error);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "}"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "sincronizarGruposTabela()"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  .then(() => console.log('Processo finalizado'))"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  .catch(err => console.error('Falha no processo:', err));"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "\""

[[workflows.workflow]]
name = "Sync Códigos Grupos"
author = 42059808
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node -e \""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "const { createClient } = require('@supabase/supabase-js');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "async function syncGruposCodigos() {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  console.log('Iniciando sincronização de códigos de grupos...');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  try {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    // Buscar todos os grupos de estudo"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    const { data: grupos, error } = await supabase"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      .from('grupos_estudo')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      .select('*');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    if (error) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      throw new Error(`Erro ao buscar grupos: ${error.message}`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log(`Encontrados ${grupos?.length || 0} grupos para sincronizar`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    // Contador de sucessos"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    let successCount = 0;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    let errorCount = 0;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    let skippedCount = 0;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    // Processar cada grupo"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    for (const grupo of grupos || []) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      try {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        // Verificar se o grupo já tem código"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        if (!grupo.codigo) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          console.log(`Grupo ID ${grupo.id} não possui código, será ignorado`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          skippedCount++;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          continue;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        // Inserir no banco de códigos"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        const { error: insertError } = await supabase"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          .from('codigos_grupos_estudo')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          .upsert({"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            codigo: grupo.codigo,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            grupo_id: grupo.id,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            nome: grupo.nome || 'Grupo sem nome',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            descricao: grupo.descricao || '',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            user_id: grupo.user_id,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            privado: grupo.privado || false,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            membros: grupo.membros || 1,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            visibilidade: grupo.visibilidade || 'todos',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            disciplina: grupo.disciplina || '',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            cor: grupo.cor || '#FF6B00',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            membros_ids: grupo.membros_ids || [],"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            data_criacao: grupo.data_criacao || new Date().toISOString(),"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            ultima_atualizacao: new Date().toISOString()"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          }, { onConflict: 'codigo' });"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        if (insertError) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          console.error(`Erro ao inserir código ${grupo.codigo} para grupo ${grupo.id}: ${insertError.message}`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          errorCount++;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        } else {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          console.log(`Código ${grupo.codigo} sincronizado com sucesso para grupo ${grupo.id}`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          successCount++;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      } catch (itemError) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        console.error(`Erro ao processar grupo ${grupo.id}: ${itemError.message}`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        errorCount++;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log('--------- RESUMO DA SINCRONIZAÇÃO ---------');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log(`Total de grupos: ${grupos?.length || 0}`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log(`Códigos sincronizados com sucesso: ${successCount}`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log(`Grupos sem código (ignorados): ${skippedCount}`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log(`Erros: ${errorCount}`);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log('-------------------------------------------');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  } catch (error) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.error('Erro durante sincronização:', error);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    process.exit(1);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "}"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "syncGruposCodigos()"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  .then(() => {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log('Sincronização concluída!');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    process.exit(0);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  })"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  .catch(err => {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.error('Falha na sincronização:', err);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    process.exit(1);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  });"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "\""

[[workflows.workflow]]
name = "Corrigir Tabelas de Grupos"
author = 42059808
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node scripts/fix-missing-tables.js"

[[workflows.workflow]]
name = "Corrigir Estrutura DB Grupos"
author = 42059808
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node -e \""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "const { createClient } = require('@supabase/supabase-js');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "async function criarTabelas() {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  console.log('Iniciando criação de tabelas necessárias...');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  try {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    // Verificar e criar extensão uuid"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    try {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '      await supabase.query(`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";`);'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.log('Extensão uuid-ossp verificada/criada');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    } catch (extError) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.log('Nota: Não foi possível verificar/criar extensão uuid-ossp:', extError);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    // Criar tabela grupos_estudo"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log('Criando tabela grupos_estudo...');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    try {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      await supabase.query(`"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        CREATE TABLE IF NOT EXISTS public.grupos_estudo ("

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          user_id UUID NOT NULL,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          nome TEXT NOT NULL,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          descricao TEXT,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          cor TEXT NOT NULL DEFAULT '#FF6B00',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          membros INTEGER NOT NULL DEFAULT 1,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          membros_ids JSONB DEFAULT '[]'::jsonb,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          topico TEXT,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          topico_nome TEXT,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          topico_icon TEXT,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          privado BOOLEAN DEFAULT false,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          visibilidade TEXT DEFAULT 'todos',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          codigo TEXT,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          disciplina TEXT DEFAULT 'Geral',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          data_criacao TIMESTAMP WITH TIME ZONE DEFAULT now()"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        );"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        CREATE INDEX IF NOT EXISTS grupos_estudo_user_id_idx ON public.grupos_estudo(user_id);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        ALTER TABLE public.grupos_estudo ENABLE ROW LEVEL SECURITY;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        DROP POLICY IF EXISTS \"Usuários podem visualizar grupos\" ON public.grupos_estudo;'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        CREATE POLICY \"Usuários podem visualizar grupos\"'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ON public.grupos_estudo FOR SELECT"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          USING (true);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        DROP POLICY IF EXISTS \"Usuários podem inserir grupos\" ON public.grupos_estudo;'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        CREATE POLICY \"Usuários podem inserir grupos\"'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ON public.grupos_estudo FOR INSERT"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          WITH CHECK (true);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      `);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.log('Tabela grupos_estudo criada com sucesso!');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    } catch (gruposError) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.error('Erro ao criar tabela grupos_estudo:', gruposError);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      throw gruposError;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    // Criar tabela codigos_grupos_estudo"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log('Criando tabela codigos_grupos_estudo...');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    try {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      await supabase.query(`"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        CREATE TABLE IF NOT EXISTS public.codigos_grupos_estudo ("

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          codigo VARCHAR(15) PRIMARY KEY,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          grupo_id UUID NOT NULL,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          nome VARCHAR NOT NULL,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          descricao TEXT,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          data_criacao TIMESTAMP WITH TIME ZONE DEFAULT now(),"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          user_id UUID,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          privado BOOLEAN DEFAULT false,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          membros INTEGER DEFAULT 1,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          visibilidade VARCHAR,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          disciplina VARCHAR,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          cor VARCHAR DEFAULT '#FF6B00',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          membros_ids JSONB DEFAULT '[]'::jsonb,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ultima_atualizacao TIMESTAMP WITH TIME ZONE DEFAULT now()"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        );"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        CREATE INDEX IF NOT EXISTS idx_codigos_grupos_estudo_grupo_id ON public.codigos_grupos_estudo(grupo_id);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        CREATE INDEX IF NOT EXISTS idx_codigos_grupos_estudo_user_id ON public.codigos_grupos_estudo(user_id);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        ALTER TABLE public.codigos_grupos_estudo ENABLE ROW LEVEL SECURITY;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        DROP POLICY IF EXISTS \"Todos podem visualizar códigos\" ON public.codigos_grupos_estudo;'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        CREATE POLICY \"Todos podem visualizar códigos\"'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ON public.codigos_grupos_estudo FOR SELECT"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          USING (true);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        DROP POLICY IF EXISTS \"Todos podem inserir códigos\" ON public.codigos_grupos_estudo;'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        CREATE POLICY \"Todos podem inserir códigos\"'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ON public.codigos_grupos_estudo FOR INSERT"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          WITH CHECK (true);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        DROP POLICY IF EXISTS \"Todos podem atualizar códigos\" ON public.codigos_grupos_estudo;'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        CREATE POLICY \"Todos podem atualizar códigos\"'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ON public.codigos_grupos_estudo FOR UPDATE"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          USING (true);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      `);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.log('Tabela codigos_grupos_estudo criada com sucesso!');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    } catch (codigosError) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.error('Erro ao criar tabela codigos_grupos_estudo:', codigosError);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      throw codigosError;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log('Todas as tabelas foram criadas com sucesso!');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    return true;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  } catch (error) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.error('Erro durante a criação das tabelas:', error);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    return false;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "}"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "criarTabelas()"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  .then(result => {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    if (result) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.log('SUCESSO: Banco de dados configurado corretamente.');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      process.exit(0);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    } else {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.error('ERRO: Falha ao configurar banco de dados.');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      process.exit(1);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  })"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  .catch(err => {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.error('EXCEÇÃO:', err);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    process.exit(1);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  });"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "\""

[[workflows.workflow]]
name = "Corrigir Tabelas de Grupos Automaticamente"
author = 42059808
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node -e \""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "require('dotenv').config();"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "const { createClient } = require('@supabase/supabase-js');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "async function criarTabelas() {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  console.log('Iniciando criação de tabelas necessárias...');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  try {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log('Criando extensão uuid-ossp...');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    try {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '      await supabase.query(`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";`);'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.log('✅ Extensão uuid-ossp verificada/criada');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    } catch (extError) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.log('ℹ️ Não foi possível criar extensão uuid-ossp:', extError);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log('Criando tabela grupos_estudo...');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    try {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      await supabase.query(`"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        CREATE TABLE IF NOT EXISTS public.grupos_estudo ("

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          user_id UUID NOT NULL,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          nome TEXT NOT NULL,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          descricao TEXT,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          cor TEXT NOT NULL DEFAULT '#FF6B00',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          membros INTEGER NOT NULL DEFAULT 1,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          membros_ids JSONB DEFAULT '[]'::jsonb,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          topico TEXT,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          topico_nome TEXT,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          topico_icon TEXT,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          privado BOOLEAN DEFAULT false,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          visibilidade TEXT DEFAULT 'todos',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          codigo TEXT,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          disciplina TEXT DEFAULT 'Geral',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          data_criacao TIMESTAMP WITH TIME ZONE DEFAULT now()"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        );"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        CREATE INDEX IF NOT EXISTS grupos_estudo_user_id_idx ON public.grupos_estudo(user_id);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        ALTER TABLE public.grupos_estudo ENABLE ROW LEVEL SECURITY;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        DROP POLICY IF EXISTS \"Usuários podem visualizar grupos\" ON public.grupos_estudo;'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        CREATE POLICY \"Usuários podem visualizar grupos\"'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ON public.grupos_estudo FOR SELECT"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          USING (true);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        DROP POLICY IF EXISTS \"Usuários podem inserir grupos\" ON public.grupos_estudo;'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        CREATE POLICY \"Usuários podem inserir grupos\"'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ON public.grupos_estudo FOR INSERT"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          WITH CHECK (true);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        DROP POLICY IF EXISTS \"Usuários podem atualizar grupos\" ON public.grupos_estudo;'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        CREATE POLICY \"Usuários podem atualizar grupos\"'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ON public.grupos_estudo FOR UPDATE"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          USING (true);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        DROP POLICY IF EXISTS \"Usuários podem excluir grupos\" ON public.grupos_estudo;'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        CREATE POLICY \"Usuários podem excluir grupos\"'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ON public.grupos_estudo FOR DELETE"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          USING (true);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      `);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.log('✅ Tabela grupos_estudo criada com sucesso!');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    } catch (gruposError) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.error('❌ Erro ao criar tabela grupos_estudo:', gruposError);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      throw gruposError;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.log('Criando tabela codigos_grupos_estudo...');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    try {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      await supabase.query(`"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        CREATE TABLE IF NOT EXISTS public.codigos_grupos_estudo ("

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          codigo VARCHAR(15) PRIMARY KEY,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          grupo_id UUID NOT NULL,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          nome VARCHAR NOT NULL,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          descricao TEXT,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          data_criacao TIMESTAMP WITH TIME ZONE DEFAULT now(),"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          user_id UUID,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          privado BOOLEAN DEFAULT false,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          membros INTEGER DEFAULT 1,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          visibilidade VARCHAR,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          disciplina VARCHAR,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          cor VARCHAR DEFAULT '#FF6B00',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          membros_ids JSONB DEFAULT '[]'::jsonb,"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ultima_atualizacao TIMESTAMP WITH TIME ZONE DEFAULT now()"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        );"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        CREATE INDEX IF NOT EXISTS idx_codigos_grupos_estudo_grupo_id ON public.codigos_grupos_estudo(grupo_id);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        CREATE INDEX IF NOT EXISTS idx_codigos_grupos_estudo_user_id ON public.codigos_grupos_estudo(user_id);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        ALTER TABLE public.codigos_grupos_estudo ENABLE ROW LEVEL SECURITY;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        DROP POLICY IF EXISTS \"Todos podem visualizar códigos\" ON public.codigos_grupos_estudo;'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        CREATE POLICY \"Todos podem visualizar códigos\"'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ON public.codigos_grupos_estudo FOR SELECT"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          USING (true);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        DROP POLICY IF EXISTS \"Todos podem inserir códigos\" ON public.codigos_grupos_estudo;'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        CREATE POLICY \"Todos podem inserir códigos\"'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ON public.codigos_grupos_estudo FOR INSERT"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          WITH CHECK (true);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        DROP POLICY IF EXISTS \"Todos podem atualizar códigos\" ON public.codigos_grupos_estudo;'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '        CREATE POLICY \"Todos podem atualizar códigos\"'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          ON public.codigos_grupos_estudo FOR UPDATE"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "          USING (true);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      `);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.log('✅ Tabela codigos_grupos_estudo criada com sucesso!');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    } catch (codigosError) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.error('❌ Erro ao criar tabela codigos_grupos_estudo:', codigosError);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      throw codigosError;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    // Verificar se conseguimos acessar as tabelas"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    try {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      const { data: gruposCheck, error: gruposCheckError } = await supabase"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        .from('grupos_estudo')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        .select('*')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        .limit(1);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      if (gruposCheckError) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        console.error('❌ Não foi possível acessar a tabela grupos_estudo após criação:', gruposCheckError);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        return false;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      const { data: codigosCheck, error: codigosCheckError } = await supabase"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        .from('codigos_grupos_estudo')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        .select('*')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        .limit(1);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      if (codigosCheckError) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        console.error('❌ Não foi possível acessar a tabela codigos_grupos_estudo após criação:', codigosCheckError);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        return false;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.log('✅ Ambas as tabelas estão acessíveis!');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      return true;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    } catch (checkError) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.error('❌ Erro ao verificar acesso às tabelas:', checkError);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      return false;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  } catch (error) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.error('❌ Erro durante a criação das tabelas:', error);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    return false;"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "}"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "criarTabelas()"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  .then(result => {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    if (result) {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.log('✅ SUCESSO: Todas as tabelas foram criadas com sucesso!');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    } else {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      console.error('❌ FALHA: Não foi possível criar todas as tabelas.');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  })"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  .catch(err => {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    console.error('❌ ERRO CRÍTICO:', err);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  });"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "\""

[[workflows.workflow]]
name = "API de Correção de Tabelas"
author = 42059808
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node scripts/fix-tables-api.js"

[[workflows.workflow]]
name = "Sincronizar Códigos de Grupos"
author = 42059808
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node scripts/sync-grupos-codigos.js"

[auth]
pageEnabled = false
buttonEnabled = false
