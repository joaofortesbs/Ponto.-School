
/**
 * EpictusIAChatFormatter
 * 
 * Este servi√ßo √© respons√°vel por formatar as respostas da Epictus IA
 * no chat de conversa, aplicando formata√ß√µes visuais ricas, elementos
 * interativos e adapta√ß√µes baseadas no perfil do usu√°rio.
 */

import { EpictusIAChatBehavior } from '../config/epictusIAChatBehavior';

export class EpictusIAChatFormatter {
  private behavior = EpictusIAChatBehavior;

  /**
   * Formata a resposta da IA para ser exibida no chat
   * @param content Conte√∫do original da resposta
   * @param userProfile Perfil do usu√°rio (student, teacher, etc)
   * @param context Contexto da conversa (hist√≥rico, tema, etc)
   * @returns Resposta formatada com elementos visuais ricos
   */
  formatResponse(content: string, userProfile: string = 'student', context: any = {}) {
    // Analisa o conte√∫do para determinar o melhor formato
    const contentType = this.determineContentType(content);
    
    // Aplica formata√ß√£o b√°sica ao conte√∫do
    let formattedContent = this.applyBasicFormatting(content);
    
    // Adiciona elementos visuais de acordo com o tipo de conte√∫do
    formattedContent = this.addVisualElements(formattedContent, contentType);
    
    // Adapta o tom com base no perfil do usu√°rio
    formattedContent = this.adaptToUserProfile(formattedContent, userProfile);
    
    // Adiciona a√ß√µes proativas sugeridas ao final
    formattedContent = this.addProactiveActions(formattedContent, contentType);
    
    // Retorna o conte√∫do formatado em markdown para renderiza√ß√£o
    return this.wrapInMarkdown(formattedContent);
  }

  /**
   * Determina o tipo de conte√∫do mais adequado para a resposta
   */
  private determineContentType(content: string): string {
    // Analisa o tamanho e complexidade do conte√∫do
    const wordCount = content.split(' ').length;
    
    if (wordCount < 50) return 'quickReference';
    if (wordCount > 500) return 'academicAnalysis';
    if (content.includes('?') && content.split('?').length > 3) return 'detailedExplanation';
    
    // Padr√£o
    return 'summary';
  }

  /**
   * Aplica formata√ß√£o b√°sica ao conte√∫do
   */
  private applyBasicFormatting(content: string): string {
    // Divide o conte√∫do em par√°grafos
    const paragraphs = content.split('\n\n');
    
    // Formata cada par√°grafo
    const formattedParagraphs = paragraphs.map(paragraph => {
      // Detecta e formata listas
      if (paragraph.match(/^\d+\.\s/m) || paragraph.match(/^[\-\*]\s/m)) {
        return paragraph; // Mant√©m listas como est√£o
      }
      
      // Detecta e formata t√≠tulos
      if (paragraph.trim().length < 50 && !paragraph.endsWith('.')) {
        return `\n## ${paragraph.trim()}\n`;
      }
      
      // Destaca termos importantes
      return this.highlightImportantTerms(paragraph);
    });
    
    return formattedParagraphs.join('\n\n');
  }

  /**
   * Destaca termos importantes no texto
   */
  private highlightImportantTerms(text: string): string {
    // Identifica e destaca termos importantes (em negrito)
    const keyTermPattern = /\b(conceito|princ√≠pio|importante|essencial|fundamental|crucial|chave|central|cr√≠tico|vital|principal)\b\s+\w+\s+\w+/gi;
    return text.replace(keyTermPattern, match => `**${match}**`);
  }

  /**
   * Adiciona elementos visuais baseados no tipo de conte√∫do
   */
  private addVisualElements(content: string, contentType: string): string {
    let enhancedContent = content;
    
    // Adiciona cabe√ßalho baseado no tipo de conte√∫do
    const headerIcon = this.getHeaderIconForContentType(contentType);
    enhancedContent = `${headerIcon}\n\n${enhancedContent}`;
    
    // Adiciona blocos de destaque para conceitos importantes
    enhancedContent = this.addHighlightBlocks(enhancedContent);
    
    // Adiciona elementos espec√≠ficos para cada tipo de conte√∫do
    switch (contentType) {
      case 'detailedExplanation':
        enhancedContent = this.addExplanationStructure(enhancedContent);
        break;
      case 'summary':
        enhancedContent = this.addSummaryStructure(enhancedContent);
        break;
      case 'quickReference':
        enhancedContent = this.addQuickReferenceStructure(enhancedContent);
        break;
      case 'academicAnalysis':
        enhancedContent = this.addAcademicStructure(enhancedContent);
        break;
    }
    
    return enhancedContent;
  }

  /**
   * Retorna o √≠cone de cabe√ßalho para o tipo de conte√∫do
   */
  private getHeaderIconForContentType(contentType: string): string {
    const icons = {
      detailedExplanation: 'üìö **Explica√ß√£o Detalhada**',
      summary: '‚ú® **Resumo Essencial**',
      quickReference: '‚ö° **Refer√™ncia R√°pida**',
      academicAnalysis: 'üîç **An√°lise Acad√™mica**',
    };
    
    return icons[contentType] || 'üí° **Informa√ß√£o**';
  }

  /**
   * Adiciona blocos de destaque para conceitos importantes
   */
  private addHighlightBlocks(content: string): string {
    // Procura por defini√ß√µes e conceitos para destacar
    const definitionPattern = /([A-Z][a-z]+(?:\s[A-Z][a-z]+)*) √© (?:um|uma|o|a) .{10,100}?\./g;
    
    return content.replace(definitionPattern, match => {
      return `\n> üí° **Defini√ß√£o:** ${match}\n`;
    });
  }

  /**
   * Adiciona estrutura para explica√ß√µes detalhadas
   */
  private addExplanationStructure(content: string): string {
    // Verifica se j√° tem subt√≠tulos
    if (content.includes('##')) return content;
    
    // Divide o conte√∫do para adicionar subt√≠tulos
    const parts = content.split('\n\n');
    
    if (parts.length >= 3) {
      parts[0] = `## üìå Contexto\n${parts[0]}`;
      
      const middleIndex = Math.floor(parts.length / 2);
      parts[middleIndex] = `## üîë Pontos Principais\n${parts[middleIndex]}`;
      
      parts[parts.length - 1] = `## üéØ Conclus√£o\n${parts[parts.length - 1]}`;
    }
    
    return parts.join('\n\n');
  }

  /**
   * Adiciona estrutura para resumos
   */
  private addSummaryStructure(content: string): string {
    // Adiciona um box de resumo ao final
    return content + '\n\n' + this.createSummaryBox(content);
  }

  /**
   * Cria um box de resumo
   */
  private createSummaryBox(content: string): string {
    // Extrai frases importantes para o resumo
    const sentences = content.split(/[.!?]+/).filter(s => s.trim().length > 20 && s.trim().length < 100);
    const keyPoints = sentences.slice(0, 3).map(s => s.trim());
    
    if (keyPoints.length === 0) return '';
    
    return `
üìã **Resumo dos Pontos-Chave:**
${keyPoints.map(point => `- ${point}`).join('\n')}
`;
  }

  /**
   * Adiciona estrutura para refer√™ncias r√°pidas
   */
  private addQuickReferenceStructure(content: string): string {
    // Adiciona um estilo conciso e direto
    return `üîñ **Resumo R√°pido**\n\n${content}`;
  }

  /**
   * Adiciona estrutura acad√™mica
   */
  private addAcademicStructure(content: string): string {
    // Divide o conte√∫do em se√ß√µes mais formais
    if (!content.includes('##')) {
      const parts = content.split('\n\n');
      const structuredParts = [];
      
      if (parts.length >= 5) {
        structuredParts.push(`## Introdu√ß√£o\n${parts[0]}`);
        structuredParts.push(`## Desenvolvimento\n${parts.slice(1, parts.length - 2).join('\n\n')}`);
        structuredParts.push(`## Metodologia\n${parts[parts.length - 2]}`);
        structuredParts.push(`## Conclus√£o\n${parts[parts.length - 1]}`);
        
        return structuredParts.join('\n\n');
      }
    }
    
    return content;
  }

  /**
   * Adapta o conte√∫do ao perfil do usu√°rio
   */
  private adaptToUserProfile(content: string, userProfile: string): string {
    const profile = this.behavior.userProfiles[userProfile] || this.behavior.userProfiles.student;
    
    // Adiciona uma sauda√ß√£o personalizada
    const greeting = this.createPersonalizedGreeting(userProfile);
    
    // Adiciona uma conclus√£o adaptada ao perfil
    const conclusion = this.createPersonalizedConclusion(userProfile);
    
    return `${greeting}\n\n${content}\n\n${conclusion}`;
  }

  /**
   * Cria uma sauda√ß√£o personalizada com base no perfil
   */
  private createPersonalizedGreeting(userProfile: string): string {
    const greetings = {
      student: 'üëã Oi! Vamos explorar esse assunto juntos!',
      teacher: 'üëã Ol√°, professor(a)! Aqui est√° a informa√ß√£o solicitada.',
      specialist: 'üëã Sauda√ß√µes! Detalhando o tema conforme solicitado.',
      coordinator: 'üëã Ol√°! Preparei esta an√°lise conforme solicitado.'
    };
    
    return greetings[userProfile] || greetings.student;
  }

  /**
   * Cria uma conclus√£o personalizada com base no perfil
   */
  private createPersonalizedConclusion(userProfile: string): string {
    const conclusions = {
      student: '‚ú® **Espero que isso ajude nos seus estudos!** Se tiver mais d√∫vidas, √© s√≥ me perguntar.',
      teacher: 'üìö **Espero que essa informa√ß√£o seja √∫til para suas atividades pedag√≥gicas.** Estou √† disposi√ß√£o para aprofundar qualquer ponto.',
      specialist: 'üîç **Esta an√°lise atende √†s suas necessidades?** Podemos examinar aspectos espec√≠ficos em mais detalhes.',
      coordinator: 'üìä **Estas informa√ß√µes ajudam na sua tomada de decis√£o?** Posso fornecer dados adicionais se necess√°rio.'
    };
    
    return conclusions[userProfile] || conclusions.student;
  }

  /**
   * Adiciona a√ß√µes proativas sugeridas ao final
   */
  private addProactiveActions(content: string, contentType: string): string {
    // Seleciona a√ß√µes adequadas com base no tipo de conte√∫do
    const actionsToOffer = this.selectProactiveActions(contentType);
    
    if (actionsToOffer.length === 0) return content;
    
    const actionsSection = `
---
### üöÄ O que voc√™ gostaria de fazer agora?

${actionsToOffer.map(action => `- ${action}`).join('\n')}
`;
    
    return content + '\n\n' + actionsSection;
  }

  /**
   * Seleciona a√ß√µes proativas com base no tipo de conte√∫do
   */
  private selectProactiveActions(contentType: string): string[] {
    const allActions = this.behavior.behaviorGuidelines.proactiveActions.actionTemplates;
    
    // Seleciona at√© 3 a√ß√µes adequadas para o tipo de conte√∫do
    switch (contentType) {
      case 'detailedExplanation':
        return [
          'Quer que eu transforme essa explica√ß√£o em flashcards para estudo?',
          'Posso gerar quest√µes de prova sobre esse tema para voc√™ praticar?',
          'Deseja que eu crie um resumo visual deste conte√∫do?'
        ];
      case 'summary':
        return [
          'Gostaria que eu aprofundasse algum ponto espec√≠fico?',
          'Quer que eu monte um plano de estudos baseado nesse tema?',
          'Deseja exemplos pr√°ticos de aplica√ß√£o desse conhecimento?'
        ];
      case 'quickReference':
        return [
          'Precisa de uma explica√ß√£o mais detalhada sobre esse tema?',
          'Quer ver exemplos pr√°ticos de aplica√ß√£o?'
        ];
      case 'academicAnalysis':
        return [
          'Posso listar refer√™ncias bibliogr√°ficas sobre esse tema?',
          'Quer que eu crie um fluxograma relacionando os conceitos apresentados?',
          'Deseja uma an√°lise comparativa com outras teorias/abordagens?'
        ];
      default:
        return allActions.slice(0, 3);
    }
  }

  /**
   * Envolve o conte√∫do em markdown para renderiza√ß√£o
   */
  private wrapInMarkdown(content: string): string {
    // Garante que o conte√∫do seja renderizado como markdown
    return content;
  }
}

export default new EpictusIAChatFormatter();
