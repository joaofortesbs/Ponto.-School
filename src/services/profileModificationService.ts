import { supabase } from '@/lib/supabase';
import { profileService } from './profileService';
import type { UserProfile } from '@/types/user-profile';

/**
 * Servi√ßo para permitir que a IA modifique informa√ß√µes do perfil do usu√°rio
 */
export const ProfileModificationService = {
  async getDetailedUserProfile() {
    try {
      const { supabase } = await import('@/lib/supabase');
      const { data } = await supabase.auth.getSession();
      const userId = data.session?.user?.id;

      if (!userId) {
        console.log('Usu√°rio n√£o autenticado');
        return { success: false, message: 'Usu√°rio n√£o autenticado', profile: null, formattedInfo: null };
      }

      // Obter o perfil do usu√°rio
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('user_id', userId)
        .single();

      if (profileError) {
        console.error('Erro ao buscar perfil:', profileError);
        return { success: false, message: 'Perfil n√£o encontrado', profile: null, formattedInfo: null };
      }

      // Se n√£o encontrou perfil, tentar usar dados do localStorage
      if (!profileData) {
        const localUsername = localStorage.getItem('username') || 'Usu√°rio';
        const localEmail = localStorage.getItem('userEmail') || 'email@exemplo.com';
        const localDisplayName = localStorage.getItem('userDisplayName') || localUsername;
        const localFullName = localStorage.getItem('userFullName') || localDisplayName;

        const mockProfile = {
          user_id: userId,
          username: localUsername,
          email: localEmail,
          display_name: localDisplayName,
          full_name: localFullName,
          created_at: new Date().toISOString(),
          level: 1,
          plan_type: 'lite',
          bio: 'Biografia n√£o dispon√≠vel'
        };

        // Formatar as informa√ß√µes
        const formattedInfo = `
üÜî **ID do Usu√°rio**: ${userId}
üìÖ **Conta criada**: Recentemente
üë§ **Nome**: ${localFullName || 'N√£o fornecido'}
üë§ **Nome de Usu√°rio**: ${localUsername}
üé≠ **Nome de Exibi√ß√£o**: ${localDisplayName}
üìß **Email**: ${localEmail}
üéñÔ∏è **N√≠vel**: 1
üèÜ **Plano**: Lite
        `;

        return { 
          success: true, 
          profile: mockProfile, 
          formattedInfo: formattedInfo.trim() 
        };
      }

      // Formatar as informa√ß√µes para uma visualiza√ß√£o mais amig√°vel
      const formattedInfo = `
üÜî **ID do Usu√°rio**: ${profileData.user_id || userId}
üìÖ **Conta criada em**: ${profileData.created_at ? new Date(profileData.created_at).toLocaleDateString('pt-BR') : 'Data n√£o dispon√≠vel'}
üë§ **Nome Completo**: ${profileData.full_name || 'N√£o fornecido'}
üë§ **Nome de Usu√°rio**: ${profileData.username || 'N√£o definido'}
üé≠ **Nome de Exibi√ß√£o**: ${profileData.display_name || 'N√£o definido'}
üìß **Email**: ${profileData.email || 'N√£o dispon√≠vel'}
üì± **Telefone**: ${profileData.phone || 'N√£o fornecido'}
üìç **Localiza√ß√£o**: ${profileData.location || 'N√£o fornecida'}
üéñÔ∏è **N√≠vel**: ${profileData.level || '1'}
üèÜ **Plano**: ${profileData.plan_type || 'Lite'}
üìù **Biografia**: ${profileData.bio || 'Nenhuma biografia adicionada'}
      `;

      return { 
        success: true, 
        profile: profileData, 
        formattedInfo: formattedInfo.trim() 
      };
    } catch (error) {
      console.error('Erro ao obter perfil detalhado:', error);
      return { success: false, message: 'Erro ao obter informa√ß√µes do perfil', profile: null, formattedInfo: null };
    }
  },

  async updateUserBio(newBio) {
    try {
      if (!newBio || newBio.trim() === '') {
        return { success: false, message: 'A biografia n√£o pode estar vazia' };
      }

      if (newBio.length > 500) {
        return { success: false, message: 'A biografia deve ter no m√°ximo 500 caracteres' };
      }

      const { supabase } = await import('@/lib/supabase');
      const { data } = await supabase.auth.getSession();
      const userId = data.session?.user?.id;

      if (!userId) {
        return { success: false, message: 'Usu√°rio n√£o autenticado' };
      }

      try {
        // Verificar se o perfil existe
        const { data: profileExists } = await supabase
          .from('profiles')
          .select('user_id')
          .eq('user_id', userId)
          .single();

        if (!profileExists) {
          // Se n√£o existir, criar um novo perfil
          const { error: insertError } = await supabase
            .from('profiles')
            .insert({ 
              user_id: userId, 
              bio: newBio,
              username: localStorage.getItem('username') || 'usuario',
              email: localStorage.getItem('userEmail') || null
            });

          if (insertError) {
            console.error('Erro ao criar perfil:', insertError);
            return { success: false, message: 'Erro ao criar perfil com biografia' };
          }
        } else {
          // Se existir, atualizar a bio
          const { error: updateError } = await supabase
            .from('profiles')
            .update({ bio: newBio })
            .eq('user_id', userId);

          if (updateError) {
            console.error('Erro ao atualizar bio:', updateError);
            return { success: false, message: 'Erro ao atualizar biografia' };
          }
        }

        return { success: true, message: 'Biografia atualizada com sucesso' };
      } catch (dbError) {
        console.error('Erro na opera√ß√£o do banco de dados:', dbError);
        return { success: false, message: 'Erro no banco de dados ao atualizar biografia' };
      }
    } catch (error) {
      console.error('Erro ao atualizar biografia:', error);
      return { success: false, message: 'Erro ao processar a solicita√ß√£o' };
    }
  },

  async updateDisplayName(newDisplayName) {
    try {
      if (!newDisplayName || newDisplayName.trim() === '') {
        return { success: false, message: 'O nome de exibi√ß√£o n√£o pode estar vazio' };
      }

      if (newDisplayName.length > 50) {
        return { success: false, message: 'O nome de exibi√ß√£o deve ter no m√°ximo 50 caracteres' };
      }

      const { supabase } = await import('@/lib/supabase');
      const { data } = await supabase.auth.getSession();
      const userId = data.session?.user?.id;

      if (!userId) {
        return { success: false, message: 'Usu√°rio n√£o autenticado' };
      }

      try {
        // Verificar se o perfil existe
        const { data: profileExists } = await supabase
          .from('profiles')
          .select('user_id')
          .eq('user_id', userId)
          .single();

        if (!profileExists) {
          // Se n√£o existir, criar um novo perfil
          const { error: insertError } = await supabase
            .from('profiles')
            .insert({ 
              user_id: userId, 
              display_name: newDisplayName,
              username: localStorage.getItem('username') || 'usuario',
              email: localStorage.getItem('userEmail') || null
            });

          if (insertError) {
            console.error('Erro ao criar perfil:', insertError);
            return { success: false, message: 'Erro ao criar perfil com nome de exibi√ß√£o' };
          }
        } else {
          // Se existir, atualizar o nome de exibi√ß√£o
          const { error: updateError } = await supabase
            .from('profiles')
            .update({ display_name: newDisplayName })
            .eq('user_id', userId);

          if (updateError) {
            console.error('Erro ao atualizar nome de exibi√ß√£o:', updateError);
            return { success: false, message: 'Erro ao atualizar nome de exibi√ß√£o' };
          }
        }

        // Atualizar tamb√©m no localStorage para uso imediato em outros componentes
        localStorage.setItem('userDisplayName', newDisplayName);

        return { success: true, message: 'Nome de exibi√ß√£o atualizado com sucesso' };
      } catch (dbError) {
        console.error('Erro na opera√ß√£o do banco de dados:', dbError);
        return { success: false, message: 'Erro no banco de dados ao atualizar nome de exibi√ß√£o' };
      }
    } catch (error) {
      console.error('Erro ao atualizar nome de exibi√ß√£o:', error);
      return { success: false, message: 'Erro ao processar a solicita√ß√£o' };
    }
  }
};