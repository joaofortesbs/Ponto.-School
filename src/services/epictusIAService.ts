
import { v4 as uuidv4 } from 'uuid';

// Interface de mensagem para o chat
export interface ChatMessage {
  id?: string;
  sender: 'user' | 'ai' | 'system';
  content: string;
  timestamp?: Date;
}

// Hist√≥rico de conversas por sess√£o
const conversationHistory: Record<string, ChatMessage[]> = {};

// Fun√ß√£o para criar uma nova mensagem
export const createMessage = (content: string, sender: 'user' | 'ai' | 'system'): ChatMessage => {
  return {
    id: uuidv4(),
    sender,
    content,
    timestamp: new Date()
  };
};

// Fun√ß√£o para adicionar mensagem ao hist√≥rico
export const addMessageToHistory = (sessionId: string, message: ChatMessage): void => {
  if (!conversationHistory[sessionId]) {
    conversationHistory[sessionId] = [];
  }

  conversationHistory[sessionId].push(message);

  // Salvar no localStorage
  try {
    localStorage.setItem(`epictus_ia_history_${sessionId}`, JSON.stringify(conversationHistory[sessionId]));
  } catch (error) {
    console.error("Erro ao salvar hist√≥rico de conversa:", error);
  }
};

// Fun√ß√£o para obter hist√≥rico de conversas
export const getChatHistory = (sessionId: string): ChatMessage[] => {
  if (conversationHistory[sessionId]) {
    return conversationHistory[sessionId];
  }

  // Tentar recuperar do localStorage
  try {
    const savedHistory = localStorage.getItem(`epictus_ia_history_${sessionId}`);
    if (savedHistory) {
      const parsedHistory = JSON.parse(savedHistory) as ChatMessage[];
      conversationHistory[sessionId] = parsedHistory;
      return parsedHistory;
    }
  } catch (error) {
    console.error("Erro ao recuperar hist√≥rico do localStorage:", error);
  }

  return [];
};

// Fun√ß√£o para limpar hist√≥rico da conversa
export const clearChatHistory = (sessionId: string): void => {
  conversationHistory[sessionId] = [];
  try {
    localStorage.removeItem(`epictus_ia_history_${sessionId}`);
  } catch (error) {
    console.error("Erro ao limpar hist√≥rico do localStorage:", error);
  }
};

// Chave da API Gemini
const GEMINI_API_KEY = 'AIzaSyD-Sso0SdyYKoA4M3tQhcWjQ1AoddB7Wo4';
const GEMINI_BASE_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

// Fun√ß√£o para gerar resposta da IA usando a API Gemini
export const generateAIResponse = async (message: string, sessionId?: string, options?: any): Promise<string> => {
  try {
    console.log("Gerando resposta com Gemini para:", message);

    // Inicializar hist√≥rico se n√£o existir
    if (sessionId && !conversationHistory[sessionId]) {
      initializeConversationHistory(sessionId);
    }

    // Adicionar mensagem ao hist√≥rico se tiver sessionId
    if (sessionId) {
      const userMessage = createMessage(message, 'user');
      addMessageToHistory(sessionId, userMessage);
    }

    // Obter o hist√≥rico para contexto
    const history = sessionId ? getChatHistory(sessionId) : [];
    const historyContext = history.map(m => `${m.sender === 'user' ? 'Usu√°rio' : 'Assistente'}: ${m.content}`).join('\n\n');

    // Extrair informa√ß√µes do perfil do usu√°rio a partir do hist√≥rico
    const userProfile = extractUserProfile(history);
    
    // Identificar o contexto do pedido atual
    const requestContext = analyzeRequestContext(message, history);

    // Preparar o prompt para a API Gemini com as novas diretrizes avan√ßadas e elementos visuais ricos
    const prompt = `Voc√™ √© o Epictus IA, uma intelig√™ncia artificial educacional de mais alta qualidade do mercado.
Seu objetivo √© fornecer respostas impec√°veis, impressionantes e sofisticadas, superando qualquer outra IA.

REGRAS CRUCIAIS:
1. SEMPRE comece suas respostas com "Eai" e adicione um emoji relevante ao contexto.
2. Siga uma estrutura clara dividida visualmente em blocos com t√≠tulos destacados e emojis.
3. Use linguagem moderna, did√°tica e encorajadora, criando uma experi√™ncia semelhante a um tutor amigo.
4. Cada resposta deve ser VISUALMENTE RICA com tabelas, checklists, etapas numeradas com destaque visual, cards informativos e caixas coloridas.
5. Sempre ofere√ßa pr√≥ximos passos proativos ao final, em formato de cards ou lista destacada.
6. Mantenha um tom emp√°tico e motivador, usando express√µes como "Vamos juntos nessa!", "Conte comigo!", "Voc√™ consegue!".
7. Seja transparente sobre limita√ß√µes quando necess√°rio, mas sempre ofere√ßa alternativas.
8. SEMPRE termine com uma pergunta engajadora destacada visualmente.

DESIGN VISUAL OBRIGAT√ìRIO:
- Divida a resposta em BLOCOS VISUAIS CLAROS, cada um com t√≠tulo destacado (ex: "üìö Como posso te ajudar?", "üéØ Meu diferencial", "‚öôÔ∏è Como funciono?")
- Use TABELAS com bordas e formata√ß√£o rica para compara√ß√µes e dados.
- Crie CHECKLISTS com √≠cones (‚úÖ, ‚ö†Ô∏è, üí°) para listas de verifica√ß√£o e passos.
- Destaque conceitos importantes com **negrito** e emojis contextuais.
- Use caixas de destaque (> üíé DICA:) para informa√ß√µes importantes.
- Crie fluxogramas visuais para processos e etapas.
- Adicione exemplos pr√°ticos em formato de cards visuais.

ESTRUTURA DE RESPOSTA VISUALMENTE RICA:
- Abertura: sauda√ß√£o calorosa e personalizada (ex: "üëã Eai! Que bom que voc√™ veio estudar comigo hoje üìñ‚ú®")
- Blocos de conte√∫do: cada bloco com t√≠tulo destacado, emojis e formata√ß√£o rica
- Exemplos interativos: destacados em caixas visuais com explica√ß√µes curtas
- Fechamento: mensagem motivacional + pergunta engajadora visualmente destacada

FORMATA√á√ÉO AVAN√áADA PARA IMPACTO VISUAL:
- Use markdown para criar uma hierarquia visual clara.
- Crie tabelas com cabe√ßalhos destacados e dados organizados.
- Utilize emojis estrategicamente para criar pontos de aten√ß√£o visual.
- Separe visualmente cada se√ß√£o do conte√∫do com espa√ßo e formata√ß√£o.
- Use listas numeradas, checklists e bullet points com √≠cones.
- Destaque exemplos pr√°ticos em caixas visualmente distintas.
- Crie cards informativos para conceitos-chave.

EXEMPLOS QUE DEVEM INSPIRAR O ESTILO VISUAL:
1. Tabelas: Use tabelas com formata√ß√£o visual para compara√ß√µes e dados
| Conceito | Defini√ß√£o | Aplica√ß√£o Pr√°tica |
|---------|----------|------------------|
| **Termo 1** | Explica√ß√£o clara | Exemplo contextual |

2. Checklists: Para tarefas e verifica√ß√µes
- [ ] Passo 1: Detalhe importante
- [ ] Passo 2: Outro aspecto crucial

3. Caixas de destaque: Para informa√ß√µes importantes
> üí° **DICA IMPORTANTE:** Informa√ß√£o destacada visualmente com √≠cone e formata√ß√£o.

4. Destaques numerados: Para passos ou ranking
1. **Primeiro passo:** Descri√ß√£o clara e objetiva
2. **Segundo passo:** Continua√ß√£o l√≥gica do processo

5. Cards conceituais: Para defini√ß√µes importantes
> üìö **CONCEITO-CHAVE:** Defini√ß√£o importante formatada como card visual

PODERES VISUAIS AVAN√áADOS - USE TODOS ESTES RECURSOS:
1. Adapte o estilo visual ao contexto (acad√™mico, din√¢mico ou profissional).
2. Use formata√ß√£o visual consistente com cores (representadas por markdown) e √≠cones.
3. Crie elementos visuais para todo tipo de conte√∫do (tabelas comparativas, fluxogramas, checklists).
4. Apresente exemplos em formato de cards visuais destacados.
5. Utilize formata√ß√£o rica para hierarquizar visualmente a informa√ß√£o.
6. Gere tabelas, gr√°ficos textuais e fluxogramas para todo conte√∫do que possa ser visualizado.
7. Adicione elementos interativos (perguntas reflexivas, espa√ßos para completar).
8. Crie resumos visuais ao final com pontos-chave destacados.

GUIA FINAL VISUAL - EM TODAS AS INTERA√á√ïES:
1. Interpretar o pedido e estruturar a resposta em blocos visuais claros.
2. Gerar respostas visualmente ricas com tabelas, cards, destaques e formata√ß√£o.
3. Usar tom emp√°tico e encorajador com express√µes motivacionais.
4. Adaptar o visual conforme o perfil e necessidade do usu√°rio.
5. Oferecer sugest√µes proativas em formato de cards visuais.
6. Usar elementos visuais did√°ticos em TODAS as respostas.
7. Garantir que cada resposta seja visualmente atraente e estruturada.
8. Adicionar exemplos pr√°ticos em formato visualmente destacado.
9. Personalizar a experi√™ncia com elementos visuais relevantes.
10. Impressionar pela qualidade visual, clareza estrutural e impacto educacional.

PERGUNTA FINAL OBRIGAT√ìRIA:
Sempre termine com uma pergunta engajadora visualmente destacada:
- "**Gostaria que eu criasse algo a partir disso para voc√™?**"
- "**Deseja que eu resuma ou ilustre essas informa√ß√µes em um gr√°fico ou tabela?**"
- "**Quer que eu monte quest√µes de estudo sobre esse conte√∫do?**"

EXEMPLO DE RESPOSTA IDEAL (ESTRUTURA VISUAL):
üëã Eai! Que bom te ver por aqui! Vamos juntos nessa jornada de estudos? üöÄ

### üìö **Como posso te ajudar hoje?**
Aqui est√£o algumas formas em que eu posso te apoiar:

| √Årea de ajuda         | O que posso fazer por voc√™ ü§ù              |
|----------------------|--------------------------------------------|
| Matem√°tica           | Explica√ß√µes passo a passo com exemplos     |
| Reda√ß√£o              | Corre√ß√£o com sugest√µes e dicas pr√°ticas    |
| Organiza√ß√£o de Estudos | Cronogramas personalizados e dicas de foco |
| Prepara√ß√£o para Provas | Estrat√©gias de revis√£o e simulados         |

> üí° **DICA R√ÅPIDA:** Que tal come√ßar o dia revisando os temas que mais caem na sua pr√≥xima prova? Posso criar um resumo visual agora mesmo!

### üìà **Sua evolu√ß√£o em foco:**
- [ ] Identificar seus pontos fortes
- [ ] Trabalhar nas √°reas de melhoria
- [ ] Estabelecer metas realistas
- [ ] Celebrar cada progresso!

> üí¨ **MENSAGEM FINAL:** Estou aqui com voc√™ 24h por dia. Estudar pode ser dif√≠cil, mas juntos, fica muito mais leve! üåü

**Gostaria que eu criasse um plano de estudos personalizado para voc√™ agora?**

INFORMA√á√ïES DO USU√ÅRIO:
${userProfile}

CONTEXTO DO PEDIDO ATUAL:
${requestContext}

HIST√ìRICO DA CONVERSA PARA CONTEXTO:
${historyContext}

Responda √† seguinte pergunta seguindo todas as diretrizes acima para criar uma resposta visualmente rica, moderna e educacionalmente impactante: ${message}`;

    // Fazer a requisi√ß√£o para a API Gemini
    const response = await fetch(`${GEMINI_BASE_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{ text: prompt }]
        }],
        generationConfig: {
          temperature: 0.7,
          topP: 0.95,
          topK: 40,
          maxOutputTokens: 2048
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Erro na resposta da API: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    
    // Extrair a resposta da IA
    let aiResponse = data.candidates[0].content.parts[0].text;
    
    // Garantir que a resposta comece com "Eai"
    if (!aiResponse.startsWith("Eai")) {
      aiResponse = aiResponse.replace(/^(ol√°|oi|hello|hey|hi|bom dia|boa tarde|boa noite)[\s,.!]*/i, '');
      aiResponse = `Eai! ${aiResponse}`;
    }

    // Adicionar resposta ao hist√≥rico se tiver sessionId
    if (sessionId) {
      const aiMessage = createMessage(aiResponse, 'ai');
      addMessageToHistory(sessionId, aiMessage);
    }

    return aiResponse;
  } catch (error) {
    console.error("Erro ao gerar resposta da IA com Gemini:", error);
    
    // Usar respostas de fallback em caso de erro
    return useFallbackResponse(message);
  }
};

// Extrai informa√ß√µes do perfil do usu√°rio a partir do hist√≥rico
function extractUserProfile(history: ChatMessage[]): string {
  if (!history || history.length < 3) {
    return "Perfil: Ainda n√£o h√° informa√ß√µes suficientes sobre o usu√°rio.";
  }
  
  // An√°lise das mensagens do usu√°rio para detectar padr√µes
  const userMessages = history.filter(msg => msg.sender === 'user').map(msg => msg.content);
  
  // Detecta poss√≠vel √°rea de estudo/interesse
  const areaDeInteresse = detectAreaDeInteresse(userMessages);
  
  // Detecta n√≠vel de conhecimento
  const nivelConhecimento = detectNivelConhecimento(userMessages);
  
  // Detecta prefer√™ncia de estilo
  const estiloPreferido = detectEstiloPreferido(userMessages, history);
  
  // Detecta t√≥picos frequentes
  const topicosFrequentes = detectTopicosFrequentes(userMessages);
  
  return `Perfil do Usu√°rio:
- √Årea de interesse: ${areaDeInteresse}
- N√≠vel de conhecimento: ${nivelConhecimento}
- Estilo preferido: ${estiloPreferido}
- T√≥picos frequentes: ${topicosFrequentes}`;
}

// Detecta poss√≠vel √°rea de interesse do usu√°rio
function detectAreaDeInteresse(messages: string[]): string {
  const areaKeywords = {
    'matem√°tica': ['equa√ß√£o', 'fun√ß√£o', 'c√°lculo', 'geometria', '√°lgebra', 'matem√°tica', 'teorema'],
    'f√≠sica': ['for√ßa', 'energia', 'velocidade', 'acelera√ß√£o', 'f√≠sica', 'newton', 'el√©trica', 'magnetismo'],
    'qu√≠mica': ['rea√ß√£o', 'elemento', 'mol√©cula', '√°tomo', 'qu√≠mica', 'org√¢nica', 'tabela peri√≥dica'],
    'biologia': ['c√©lula', 'organismo', 'gene', 'sistema', 'DNA', 'biologia', 'evolu√ß√£o'],
    'tecnologia': ['programa√ß√£o', 'c√≥digo', 'software', 'algoritmo', 'desenvolvimento', 'tecnologia', 'computador'],
    'literatura': ['livro', 'autor', 'obra', 'poema', 'literatura', 'escrita', 'leitura'],
    'hist√≥ria': ['per√≠odo', 'evento', 'guerra', 'revolu√ß√£o', 'hist√≥ria', 'antiguidade', 'idade m√©dia'],
    'neg√≥cios': ['empresa', 'mercado', 'estrat√©gia', 'neg√≥cio', 'marketing', 'cliente', 'financeiro']
  };
  
  // Conta ocorr√™ncias de palavras-chave em todas as mensagens
  const areaCounts: Record<string, number> = {};
  Object.keys(areaKeywords).forEach(area => {
    areaCounts[area] = 0;
    areaKeywords[area].forEach(keyword => {
      messages.forEach(message => {
        const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
        const matches = message.match(regex);
        if (matches) {
          areaCounts[area] += matches.length;
        }
      });
    });
  });
  
  // Encontra a √°rea com mais ocorr√™ncias
  let maxCount = 0;
  let detectedArea = 'indeterminada';
  
  Object.keys(areaCounts).forEach(area => {
    if (areaCounts[area] > maxCount) {
      maxCount = areaCounts[area];
      detectedArea = area;
    }
  });
  
  return maxCount > 2 ? detectedArea : 'indeterminada';
}

// Detecta n√≠vel de conhecimento do usu√°rio
function detectNivelConhecimento(messages: string[]): string {
  // Indicadores de n√≠vel avan√ßado
  const advancedIndicators = [
    'aprofundar', 'detalhe', 'avan√ßado', 'complexo', 'especializado',
    'teoria', 'espec√≠fico', 'fundamento', 'conceito avan√ßado'
  ];
  
  // Indicadores de n√≠vel b√°sico
  const basicIndicators = [
    'b√°sico', 'simples', 'iniciante', 'introdu√ß√£o', 'come√ßando',
    'n√£o entendo', 'me explique', 'como funciona', 'o que √©'
  ];
  
  let advancedCount = 0;
  let basicCount = 0;
  
  // Conta ocorr√™ncias de indicadores
  messages.forEach(message => {
    advancedIndicators.forEach(indicator => {
      if (message.toLowerCase().includes(indicator)) {
        advancedCount++;
      }
    });
    
    basicIndicators.forEach(indicator => {
      if (message.toLowerCase().includes(indicator)) {
        basicCount++;
      }
    });
  });
  
  // Determina o n√≠vel com base na contagem
  if (advancedCount > basicCount * 2) {
    return 'avan√ßado';
  } else if (basicCount > advancedCount * 2) {
    return 'iniciante';
  } else {
    return 'intermedi√°rio';
  }
}

// Detecta estilo de comunica√ß√£o preferido
function detectEstiloPreferido(userMessages: string[], history: ChatMessage[]): string {
  // An√°lise do estilo de comunica√ß√£o do usu√°rio
  let formalCount = 0;
  let casualCount = 0;
  let detailedCount = 0;
  let conciseCount = 0;
  
  // Indicadores de estilo formal
  const formalIndicators = [
    'por favor', 'poderia', 'gostaria', 'agrade√ßo', 'obrigado pela',
    'formalmente', 'adequadamente', 'corretamente'
  ];
  
  // Indicadores de estilo casual
  const casualIndicators = [
    'eai', 'valeu', 'beleza', 'massa', 'cara', 'legal',
    'show', 'tranquilo', 'vlw', 'blz'
  ];
  
  // Indicadores de prefer√™ncia por respostas detalhadas
  const detailedIndicators = [
    'detalhadamente', 'explique com detalhes', 'quero entender a fundo',
    'me d√™ todos os detalhes', 'explica√ß√£o completa', 'aprofunde'
  ];
  
  // Indicadores de prefer√™ncia por respostas concisas
  const conciseIndicators = [
    'resumidamente', 'seja breve', 'direto ao ponto', 's√≥ o essencial',
    'resumo', 'r√°pido', 'curto'
  ];
  
  // Analisa mensagens do usu√°rio
  userMessages.forEach(message => {
    formalIndicators.forEach(indicator => {
      if (message.toLowerCase().includes(indicator)) {
        formalCount++;
      }
    });
    
    casualIndicators.forEach(indicator => {
      if (message.toLowerCase().includes(indicator)) {
        casualCount++;
      }
    });
    
    detailedIndicators.forEach(indicator => {
      if (message.toLowerCase().includes(indicator)) {
        detailedCount++;
      }
    });
    
    conciseIndicators.forEach(indicator => {
      if (message.toLowerCase().includes(indicator)) {
        conciseCount++;
      }
    });
  });
  
  // Determina o estilo com base na contagem
  let formalidade = formalCount > casualCount ? 'formal' : 'casual';
  let detalhe = detailedCount > conciseCount ? 'detalhado' : 'conciso';
  
  return `${formalidade} e ${detalhe}`;
}

// Detecta t√≥picos frequentes nas mensagens do usu√°rio
function detectTopicosFrequentes(messages: string[]): string {
  // Lista de t√≥picos comuns para verificar
  const commonTopics = [
    'estudos', 'trabalho', 'carreira', 'vestibular', 'concurso',
    'prova', 'pesquisa', 'projeto', 'tcc', 'artigo', 'disserta√ß√£o',
    'monografia', 'apresenta√ß√£o', 'relat√≥rio'
  ];
  
  const topicCounts: Record<string, number> = {};
  
  // Inicializa contagem
  commonTopics.forEach(topic => {
    topicCounts[topic] = 0;
  });
  
  // Conta ocorr√™ncias de t√≥picos
  messages.forEach(message => {
    commonTopics.forEach(topic => {
      const regex = new RegExp(`\\b${topic}\\b`, 'gi');
      const matches = message.match(regex);
      if (matches) {
        topicCounts[topic] += matches.length;
      }
    });
  });
  
  // Filtra t√≥picos com pelo menos uma ocorr√™ncia e ordena por contagem
  const frequentTopics = Object.keys(topicCounts)
    .filter(topic => topicCounts[topic] > 0)
    .sort((a, b) => topicCounts[b] - topicCounts[a])
    .slice(0, 3); // Top 3 t√≥picos
  
  return frequentTopics.length > 0 ? frequentTopics.join(', ') : 'variados';
}

// Analisa o contexto da requisi√ß√£o atual
function analyzeRequestContext(message: string, history: ChatMessage[]): string {
  // Identifica o prop√≥sito principal da requisi√ß√£o
  const purpose = identifyRequestPurpose(message);
  
  // Identifica o formato de resposta preferido
  const format = identifyPreferredFormat(message);
  
  // Identifica o n√≠vel de complexidade esperado
  const complexity = identifyComplexityLevel(message, history);
  
  // Identifica se √© uma continua√ß√£o de conversa anterior
  const isContinuation = identifyContinuationContext(message, history);
  
  return `Contexto do Pedido:
- Prop√≥sito: ${purpose}
- Formato preferido: ${format}
- N√≠vel de complexidade: ${complexity}
- Continua√ß√£o de conversa anterior: ${isContinuation ? 'Sim' : 'N√£o'}`;
}

// Identifica o prop√≥sito principal da requisi√ß√£o
function identifyRequestPurpose(message: string): string {
  // Mapeamento de padr√µes para prop√≥sitos
  const purposePatterns = [
    { pattern: /como|de que forma|de que maneira|qual a forma|m√©todo para/i, purpose: 'instru√ß√£o/procedimento' },
    { pattern: /o que √©|o que significa|defina|explique|conceito de|defini√ß√£o de/i, purpose: 'explica√ß√£o/defini√ß√£o' },
    { pattern: /por que|motivo|raz√£o|explique por que|justifique/i, purpose: 'justificativa/raz√£o' },
    { pattern: /compare|diferen√ßa entre|semelhan√ßa entre|versus|vs\.|compara√ß√£o/i, purpose: 'compara√ß√£o/contraste' },
    { pattern: /quais s√£o|liste|enumere|cite|exemplos de|mencione/i, purpose: 'listagem/exemplos' },
    { pattern: /crie|elabore|prepare|monte|desenvolva|fa√ßa um/i, purpose: 'cria√ß√£o de conte√∫do' },
    { pattern: /analise|avalie|critique|comente|examine|julgue/i, purpose: 'an√°lise/avalia√ß√£o' },
    { pattern: /resuma|sintetize|resumidamente|em poucas palavras|de forma breve/i, purpose: 'resumo/s√≠ntese' }
  ];
  
  // Verifica qual padr√£o corresponde √† mensagem
  for (const { pattern, purpose } of purposePatterns) {
    if (pattern.test(message)) {
      return purpose;
    }
  }
  
  return 'informa√ß√£o geral';
}

// Identifica o formato de resposta preferido
function identifyPreferredFormat(message: string): string {
  // Detec√ß√£o de prefer√™ncias de formato expl√≠citas
  if (/em formato de (lista|t√≥picos|bullets|itens)/i.test(message)) {
    return 'lista';
  }
  if (/em formato de (tabela|quadro|matriz)/i.test(message)) {
    return 'tabela';
  }
  if (/em formato de (gr√°fico|fluxograma|diagrama|esquema|chart)/i.test(message)) {
    return 'gr√°fico';
  }
  if (/em formato (acad√™mico|cient√≠fico|de artigo|ABNT|APA)/i.test(message)) {
    return 'acad√™mico';
  }
  if (/em formato (profissional|executivo|de relat√≥rio|corporativo)/i.test(message)) {
    return 'profissional';
  }
  
  // Detec√ß√£o impl√≠cita
  if (/compare|versus|diferen√ßa|semelhan√ßa|vs\./i.test(message)) {
    return 'tabela comparativa';
  }
  if (/passo a passo|etapas|procedimento|como fazer|processo|m√©todo/i.test(message)) {
    return 'procedimento';
  }
  if (/resumo|principais pontos|pontos-chave|destaques|s√≠ntese/i.test(message)) {
    return 'resumo estruturado';
  }
  
  // Formato padr√£o
  return 'texto explicativo';
}

// Identifica o n√≠vel de complexidade esperado
function identifyComplexityLevel(message: string, history: ChatMessage[]): string {
  // Indicadores de pedido simplificado
  if (/simples|b√°sico|f√°cil|resumido|para iniciantes|introdu√ß√£o|para leigos/i.test(message)) {
    return 'b√°sico';
  }
  
  // Indicadores de pedido avan√ßado
  if (/avan√ßado|detalhado|complexo|aprofundado|especializado|acad√™mico|t√©cnico/i.test(message)) {
    return 'avan√ßado';
  }
  
  // Analisa hist√≥rico recente para contexto de complexidade
  if (history.length >= 3) {
    const recentMessages = history.slice(-3);
    const aiResponses = recentMessages.filter(msg => msg.sender === 'ai').map(msg => msg.content);
    
    // Verifica feedback do usu√°rio sobre complexidade
    const userFeedback = recentMessages.filter(msg => msg.sender === 'user').map(msg => msg.content);
    
    // Verifica se h√° pedidos para simplificar
    const simplifyRequests = userFeedback.some(feedback => 
      /simplificar|n√£o entendi|muito complexo|complicado|dif√≠cil de entender/i.test(feedback)
    );
    
    if (simplifyRequests) {
      return 'b√°sico';
    }
    
    // Verifica se h√° pedidos para aprofundar
    const advancedRequests = userFeedback.some(feedback => 
      /aprofundar|mais detalhes|elaborar mais|n√£o foi suficiente|preciso de mais/i.test(feedback)
    );
    
    if (advancedRequests) {
      return 'avan√ßado';
    }
  }
  
  return 'intermedi√°rio'; // n√≠vel padr√£o
}

// Identifica se √© uma continua√ß√£o de conversa anterior
function identifyContinuationContext(message: string, history: ChatMessage[]): boolean {
  if (history.length < 2) {
    return false;
  }
  
  // Verifica refer√™ncias expl√≠citas √† continua√ß√£o
  if (/continuando|seguindo|voltando|como falamos|sobre o que discutimos|mencionou|falou|disse|anterior/i.test(message)) {
    return true;
  }
  
  // Verifica mensagens curtas que dependem de contexto anterior
  if (message.split(' ').length < 5 && !message.includes('?')) {
    return true;
  }
  
  // Refer√™ncias impl√≠citas usando "isso", "este", "aquele", etc.
  if (/\b(isso|este|esta|estes|estas|aquele|aquela|aqueles|aquelas|ele|ela|eles|elas)\b/i.test(message)) {
    return true;
  }
  
  return false;
}

// Fun√ß√£o auxiliar para inicializar conversa
function initializeConversationHistory(sessionId: string): void {
  const initialSystemMessage: ChatMessage = {
    sender: 'system',
    content: 'Eai! Bem-vindo ao Epictus IA! Como posso ajudar com seus estudos hoje?',
    timestamp: new Date()
  };

  conversationHistory[sessionId] = [initialSystemMessage];
}

// Respostas de fallback para quando a API falhar
function useFallbackResponse(message: string): string {
  const fallbackResponses = [
    "Eai! Desculpe, estou enfrentando dificuldades t√©cnicas no momento. Por favor, tente novamente em alguns instantes.",
    "Eai! Parece que estou com problemas para processar sua solicita√ß√£o. Poderia reformular sua pergunta?",
    "Eai! Estou tendo problemas para me conectar aos meus servi√ßos de conhecimento. Tente novamente mais tarde, por favor.",
    "Eai! Encontrei um problema ao gerar sua resposta. Vamos tentar novamente?",
    "Eai! Desculpe pela inconveni√™ncia. Estou enfrentando um problema t√©cnico tempor√°rio. Por favor, tente novamente em breve."
  ];

  // Selecionar uma resposta aleat√≥ria do fallback
  const randomIndex = Math.floor(Math.random() * fallbackResponses.length);
  return fallbackResponses[randomIndex];
}
