import { v4 as uuidv4 } from 'uuid';

// Interface de mensagem para o chat
export interface ChatMessage {
  id?: string;
  sender: 'user' | 'ai' | 'system';
  content: string;
  timestamp?: Date;
}

// Hist√≥rico de conversas por sess√£o
const conversationHistory: Record<string, ChatMessage[]> = {};

// Fun√ß√£o para criar uma nova mensagem
export const createMessage = (content: string, sender: 'user' | 'ai' | 'system'): ChatMessage => {
  return {
    id: uuidv4(),
    sender,
    content,
    timestamp: new Date()
  };
};

// Fun√ß√£o para adicionar mensagem ao hist√≥rico
export const addMessageToHistory = (sessionId: string, message: ChatMessage): void => {
  if (!conversationHistory[sessionId]) {
    conversationHistory[sessionId] = [];
  }

  conversationHistory[sessionId].push(message);

  // Salvar no localStorage
  try {
    localStorage.setItem(`epictus_ia_history_${sessionId}`, JSON.stringify(conversationHistory[sessionId]));
  } catch (error) {
    console.error("Erro ao salvar hist√≥rico de conversa:", error);
  }
};

// Fun√ß√£o para obter hist√≥rico de conversas
export const getChatHistory = (sessionId: string): ChatMessage[] => {
  if (conversationHistory[sessionId]) {
    return conversationHistory[sessionId];
  }

  // Tentar recuperar do localStorage
  try {
    const savedHistory = localStorage.getItem(`epictus_ia_history_${sessionId}`);
    if (savedHistory) {
      const parsedHistory = JSON.parse(savedHistory) as ChatMessage[];
      conversationHistory[sessionId] = parsedHistory;
      return parsedHistory;
    }
  } catch (error) {
    console.error("Erro ao recuperar hist√≥rico do localStorage:", error);
  }

  return [];
};

// Fun√ß√£o para limpar hist√≥rico da conversa
export const clearChatHistory = (sessionId: string): void => {
  conversationHistory[sessionId] = [];
  try {
    localStorage.removeItem(`epictus_ia_history_${sessionId}`);
  } catch (error) {
    console.error("Erro ao limpar hist√≥rico do localStorage:", error);
  }
};

// Chave da API Gemini (substitua pela sua chave real)
const GEMINI_API_KEY = 'AIzaSyD-Sso0SdyYKoA4M3tQhcWjQ1AoddB7Wo4';
const GEMINI_BASE_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';


//Classe para formata√ß√£o de respostas do chat (implementa√ß√£o b√°sica)
class EpictusIAChatFormatter {
    formatChatResponse(response: string): string {
        //implementa√ß√£o b√°sica -  pode ser aprimorada para lidar com mais elementos markdown
        return response;
    }
}


// Fun√ß√£o para gerar resposta da IA usando a API Gemini
export const generateAIResponse = async (input: string, sessionId: string = 'default'): Promise<string> => {
  try {
    // Simula√ß√£o de processamento - pode ser substitu√≠do por chamada de API real
    await new Promise(resolve => setTimeout(resolve, 1500));

    // Use o formatter para processar e melhorar a resposta
    const formatter = new EpictusIAChatFormatter();

    // Gerar resposta baseada em contexto e padr√µes
    let response = '';

    // Detecta tipos espec√≠ficos de perguntas para responder adequadamente
    if (input.match(/(?:ol[a√°]|oi|bom\s+dia|boa\s+tarde|boa\s+noite)/i)) {
      response = "### üëã Boas-vindas!\n\nOl√°! Em que posso ajudar voc√™ hoje? Posso responder suas d√∫vidas ou criar materiais educacionais para voc√™.\n\n**Dica r√°pida:** Experimente fazer perguntas espec√≠ficas para obter respostas mais detalhadas.";
    }
    else if (input.match(/(?:quem\s+[√©e]s?\s+voc[√™e]|o\s+que\s+voc[√™e]\s+[√©e]|como\s+voc[√™e]\s+funciona)/i)) {
      response = "### ü§ñ Sobre a Epictus IA\n\nEu sou a **Epictus IA**, um assistente educacional avan√ßado projetado para ajudar estudantes e professores. Posso responder perguntas, criar materiais did√°ticos, explicar conceitos e muito mais.\n\n| Capacidade | Descri√ß√£o |\n|------------|------------|\n| **Explica√ß√µes** | Explica√ß√µes claras e did√°ticas sobre qualquer assunto |\n| **Materiais** | Cria√ß√£o de resumos, exerc√≠cios e materiais de estudo |\n| **Organiza√ß√£o** | Ajuda com cronogramas e planos de estudo |\n| **Feedback** | Corre√ß√£o de textos e exerc√≠cios com feedback personalizado |\n\nEstou sempre em evolu√ß√£o para oferecer a melhor experi√™ncia de aprendizado poss√≠vel!";
    }
    else if (input.match(/(?:como\s+posso\s+usar|o\s+que\s+voc[√™e]\s+faz|recursos|funcionalidades)/i)) {
      response = "### üöÄ Como me utilizar\n\nVoc√™ pode aproveitar meus recursos de v√°rias formas:\n\n- Tire d√∫vidas sobre qualquer mat√©ria escolar\n- Pe√ßa explica√ß√µes detalhadas de conceitos\n- Solicite resumos e s√≠nteses de conte√∫dos\n- Crie materiais did√°ticos e listas de exerc√≠cios\n- Obtenha ajuda para organizar seus estudos\n- Solicite corre√ß√µes de reda√ß√µes e atividades\n\n> üí° **DICA IMPORTANTE:** Quanto mais espec√≠fica for sua pergunta, mais personalizada ser√° minha resposta!\n\n```\n// Exemplo de uso:\nPergunte: \"Explique o teorema de Pit√°goras e d√™ 3 exemplos pr√°ticos\"\nAo inv√©s de: \"Me fale sobre matem√°tica\"\n```\n\nApenas me diga o que voc√™ precisa, e eu farei o melhor para ajudar!";
    }
    else if (input.match(/matem[√°a]tica/i)) {
      response = "### üìê Explorando a Matem√°tica\n\nA matem√°tica √© fundamental para o desenvolvimento do pensamento l√≥gico e anal√≠tico. Posso ajudar com diversos t√≥picos matem√°ticos, desde opera√ß√µes b√°sicas at√© c√°lculo avan√ßado.\n\n**Principais √°reas matem√°ticas:**\n\n1. **Aritm√©tica** - opera√ß√µes b√°sicas e propriedades num√©ricas\n2. **√Ålgebra** - equa√ß√µes, fun√ß√µes e estruturas alg√©bricas\n3. **Geometria** - formas, medidas e propriedades espaciais\n4. **Trigonometria** - estudo dos tri√¢ngulos e fun√ß√µes trigonom√©tricas\n5. **C√°lculo** - limites, derivadas e integrais\n\n> üìå **RESUMO:** A matem√°tica √© uma linguagem universal que nos ajuda a modelar e compreender o mundo ao nosso redor.\n\nQual conceito espec√≠fico de matem√°tica voc√™ gostaria de explorar?";
    }
    else {
      // Resposta gen√©rica para outras perguntas com formata√ß√£o Markdown
      response = `### üí≠ Sobre ${input.substring(0, 30)}...\n\nEntendo sua pergunta sobre ${input.substring(0, 30)}... Este √© um tema interessante! \n\nPosso ajudar com:\n\n- **Informa√ß√µes detalhadas** sobre este t√≥pico\n- **Explica√ß√µes did√°ticas** com exemplos pr√°ticos\n- **Sugest√µes de estudo** para aprofundamento\n\n> ‚ú® **EXEMPLO:** Para um conte√∫do mais completo, experimente fazer perguntas espec√≠ficas como "quais s√£o os principais conceitos de [este tema]?" ou "como aplicar [este tema] na pr√°tica?"\n\nGostaria que eu aprofundasse em algum aspecto espec√≠fico?`;
    }

    // Aplica formata√ß√£o avan√ßada atrav√©s do formatter
    return formatter.formatChatResponse(response);

  } catch (error) {
    console.error("Erro ao gerar resposta da IA:", error);
    return "### ‚ö†Ô∏è Ops, algo deu errado\n\nDesculpe, ocorreu um erro ao processar sua solicita√ß√£o. Por favor, tente novamente.";
  }
};

// Extrai informa√ß√µes do perfil do usu√°rio a partir do hist√≥rico
function extractUserProfile(history: ChatMessage[]): string {
  if (!history || history.length < 3) {
    return "Perfil: Ainda n√£o h√° informa√ß√µes suficientes sobre o usu√°rio.";
  }

  // An√°lise das mensagens do usu√°rio para detectar padr√µes
  const userMessages = history.filter(msg => msg.sender === 'user').map(msg => msg.content);

  // Detecta poss√≠vel √°rea de estudo/interesse
  const areaDeInteresse = detectAreaDeInteresse(userMessages);

  // Detecta n√≠vel de conhecimento
  const nivelConhecimento = detectNivelConhecimento(userMessages);

  // Detecta prefer√™ncia de estilo
  const estiloPreferido = detectEstiloPreferido(userMessages, history);

  // Detecta t√≥picos frequentes
  const topicosFrequentes = detectTopicosFrequentes(userMessages);

  return `Perfil do Usu√°rio:
- √Årea de interesse: ${areaDeInteresse}
- N√≠vel de conhecimento: ${nivelConhecimento}
- Estilo preferido: ${estiloPreferido}
- T√≥picos frequentes: ${topicosFrequentes}`;
}

// Detecta poss√≠vel √°rea de interesse do usu√°rio
function detectAreaDeInteresse(messages: string[]): string {
  const areaKeywords = {
    'matem√°tica': ['equa√ß√£o', 'fun√ß√£o', 'c√°lculo', 'geometria', '√°lgebra', 'matem√°tica', 'teorema'],
    'f√≠sica': ['for√ßa', 'energia', 'velocidade', 'acelera√ß√£o', 'f√≠sica', 'newton', 'el√©trica', 'magnetismo'],
    'qu√≠mica': ['rea√ß√£o', 'elemento', 'mol√©cula', '√°tomo', 'qu√≠mica', 'org√¢nica', 'tabela peri√≥dica'],
    'biologia': ['c√©lula', 'organismo', 'gene', 'sistema', 'DNA', 'biologia', 'evolu√ß√£o'],
    'tecnologia': ['programa√ß√£o', 'c√≥digo', 'software', 'algoritmo', 'desenvolvimento', 'tecnologia', 'computador'],
    'literatura': ['livro', 'autor', 'obra', 'poema', 'literatura', 'escrita', 'leitura'],
    'hist√≥ria': ['per√≠odo', 'evento', 'guerra', 'revolu√ß√£o', 'hist√≥ria', 'antiguidade', 'idade m√©dia'],
    'neg√≥cios': ['empresa', 'mercado', 'estrat√©gia', 'neg√≥cio', 'marketing', 'cliente', 'financeiro']
  };

  // Conta ocorr√™ncias de palavras-chave em todas as mensagens
  const areaCounts: Record<string, number> = {};
  Object.keys(areaKeywords).forEach(area => {
    areaCounts[area] = 0;
    areaKeywords[area].forEach(keyword => {
      messages.forEach(message => {
        const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
        const matches = message.match(regex);
        if (matches) {
          areaCounts[area] += matches.length;
        }
      });
    });
  });

  // Encontra a √°rea com mais ocorr√™ncias
  let maxCount = 0;
  let detectedArea = 'indeterminada';

  Object.keys(areaCounts).forEach(area => {
    if (areaCounts[area] > maxCount) {
      maxCount = areaCounts[area];
      detectedArea = area;
    }
  });

  return maxCount > 2 ? detectedArea : 'indeterminada';
}

// Detecta n√≠vel de conhecimento do usu√°rio
function detectNivelConhecimento(messages: string[]): string {
  // Indicadores de n√≠vel avan√ßado
  const advancedIndicators = [
    'aprofundar', 'detalhe', 'avan√ßado', 'complexo', 'especializado',
    'teoria', 'espec√≠fico', 'fundamento', 'conceito avan√ßado'
  ];

  // Indicadores de n√≠vel b√°sico
  const basicIndicators = [
    'b√°sico', 'simples', 'iniciante', 'introdu√ß√£o', 'come√ßando',
    'n√£o entendo', 'me explique', 'como funciona', 'o que √©'
  ];

  let advancedCount = 0;
  let basicCount = 0;

  // Conta ocorr√™ncias de indicadores
  messages.forEach(message => {
    advancedIndicators.forEach(indicator => {
      if (message.toLowerCase().includes(indicator)) {
        advancedCount++;
      }
    });

    basicIndicators.forEach(indicator => {
      if (message.toLowerCase().includes(indicator)) {
        basicCount++;
      }
    });
  });

  // Determina o n√≠vel com base na contagem
  if (advancedCount > basicCount * 2) {
    return 'avan√ßado';
  } else if (basicCount > advancedCount * 2) {
    return 'iniciante';
  } else {
    return 'intermedi√°rio';
  }
}

// Detecta estilo de comunica√ß√£o preferido
function detectEstiloPreferido(userMessages: string[], history: ChatMessage[]): string {
  // An√°lise do estilo de comunica√ß√£o do usu√°rio
  let formalCount = 0;
  let casualCount = 0;
  let detailedCount = 0;
  let conciseCount = 0;

  // Indicadores de estilo formal
  const formalIndicators = [
    'por favor', 'poderia', 'gostaria', 'agrade√ßo', 'obrigado pela',
    'formalmente', 'adequadamente', 'corretamente'
  ];

  // Indicadores de estilo casual
  const casualIndicators = [
    'eai', 'valeu', 'beleza', 'massa', 'cara', 'legal',
    'show', 'tranquilo', 'vlw', 'blz'
  ];

  // Indicadores de prefer√™ncia por respostas detalhadas
  const detailedIndicators = [
    'detalhadamente', 'explique com detalhes', 'quero entender a fundo',
    'me d√™ todos os detalhes', 'explica√ß√£o completa', 'aprofunde'
  ];

  // Indicadores de prefer√™ncia por respostas concisas
  const conciseIndicators = [
    'resumidamente', 'seja breve', 'direto ao ponto', 's√≥ o essencial',
    'resumo', 'r√°pido', 'curto'
  ];

  // Analisa mensagens do usu√°rio
  userMessages.forEach(message => {
    formalIndicators.forEach(indicator => {
      if (message.toLowerCase().includes(indicator)) {
        formalCount++;
      }
    });

    casualIndicators.forEach(indicator => {
      if (message.toLowerCase().includes(indicator)) {
        casualCount++;
      }
    });

    detailedIndicators.forEach(indicator => {
      if (message.toLowerCase().includes(indicator)) {
        detailedCount++;
      }
    });

    conciseIndicators.forEach(indicator => {
      if (message.toLowerCase().includes(indicator)) {
        conciseCount++;
      }
    });
  });

  // Determina o estilo com base na contagem
  let formalidade = formalCount > casualCount ? 'formal' : 'casual';
  let detalhe = detailedCount > conciseCount ? 'detalhado' : 'conciso';

  return `${formalidade} e ${detalhe}`;
}

// Detecta t√≥picos frequentes nas mensagens do usu√°rio
function detectTopicosFrequentes(messages: string[]): string {
  // Lista de t√≥picos comuns para verificar
  const commonTopics = [
    'estudos', 'trabalho', 'carreira', 'vestibular', 'concurso',
    'prova', 'pesquisa', 'projeto', 'tcc', 'artigo', 'disserta√ß√£o',
    'monografia', 'apresenta√ß√£o', 'relat√≥rio'
  ];

  const topicCounts: Record<string, number> = {};

  // Inicializa contagem
  commonTopics.forEach(topic => {
    topicCounts[topic] = 0;
  });

  // Conta ocorr√™ncias de t√≥picos
  messages.forEach(message => {
    commonTopics.forEach(topic => {
      const regex = new RegExp(`\\b${topic}\\b`, 'gi');
      const matches = message.match(regex);
      if (matches) {
        topicCounts[topic] += matches.length;
      }
    });
  });

  // Filtra t√≥picos com pelo menos uma ocorr√™ncia e ordena por contagem
  const frequentTopics = Object.keys(topicCounts)
    .filter(topic => topicCounts[topic] > 0)
    .sort((a, b) => topicCounts[b] - topicCounts[a])
    .slice(0, 3); // Top 3 t√≥picos

  return frequentTopics.length > 0 ? frequentTopics.join(', ') : 'variados';
}

// Analisa o contexto da requisi√ß√£o atual
function analyzeRequestContext(message: string, history: ChatMessage[]): string {
  // Identifica o prop√≥sito principal da requisi√ß√£o
  const purpose = identifyRequestPurpose(message);

  // Identifica o formato de resposta preferido
  const format = identifyPreferredFormat(message);

  // Identifica o n√≠vel de complexidade esperado
  const complexity = identifyComplexityLevel(message, history);

  // Identifica se √© uma continua√ß√£o de conversa anterior
  const isContinuation = identifyContinuationContext(message, history);

  return `Contexto do Pedido:
- Prop√≥sito: ${purpose}
- Formato preferido: ${format}
- N√≠vel de complexidade: ${complexity}
- Continua√ß√£o de conversa anterior: ${isContinuation ? 'Sim' : 'N√£o'}`;
}

// Identifica o prop√≥sito principal da requisi√ß√£o
function identifyRequestPurpose(message: string): string {
  // Mapeamento de padr√µes para prop√≥sitos
  const purposePatterns = [
    { pattern: /como|de que forma|de que maneira|qual a forma|m√©todo para/i, purpose: 'instru√ß√£o/procedimento' },
    { pattern: /o que √©|o que significa|defina|explique|conceito de|defini√ß√£o de/i, purpose: 'explica√ß√£o/defini√ß√£o' },
    { pattern: /por que|motivo|raz√£o|explique por que|justifique/i, purpose: 'justificativa/raz√£o' },
    { pattern: /compare|diferen√ßa entre|semelhan√ßa entre|versus|vs\.|compara√ß√£o/i, purpose: 'compara√ß√£o/contraste' },
    { pattern: /quais s√£o|liste|enumere|cite|exemplos de|mencione/i, purpose: 'listagem/exemplos' },
    { pattern: /crie|elabore|prepare|monte|desenvolva|fa√ßa um/i, purpose: 'cria√ß√£o de conte√∫do' },
    { pattern: /analise|avalie|critique|comente|examine|julgue/i, purpose: 'an√°lise/avalia√ß√£o' },
    { pattern: /resuma|sintetize|resumidamente|em poucas palavras|de forma breve/i, purpose: 'resumo/s√≠ntese' }
  ];

  // Verifica qual padr√£o corresponde √† mensagem
  for (const { pattern, purpose } of purposePatterns) {
    if (pattern.test(message)) {
      return purpose;
    }
  }

  return 'informa√ß√£o geral';
}

// Identifica o formato de resposta preferido
function identifyPreferredFormat(message: string): string {
  // Detec√ß√£o de prefer√™ncias de formato expl√≠citas
  if (/em formato de (lista|t√≥picos|bullets|itens)/i.test(message)) {
    return 'lista';
  }
  if (/em formato de (tabela|quadro|matriz)/i.test(message)) {
    return 'tabela';
  }
  if (/em formato de (gr√°fico|fluxograma|diagrama|esquema|chart)/i.test(message)) {
    return 'gr√°fico';
  }
  if (/em formato (acad√™mico|cient√≠fico|de artigo|ABNT|APA)/i.test(message)) {
    return 'acad√™mico';
  }
  if (/em formato (profissional|executivo|de relat√≥rio|corporativo)/i.test(message)) {
    return 'profissional';
  }

  // Detec√ß√£o impl√≠cita
  if (/compare|versus|diferen√ßa|semelhan√ßa|vs\./i.test(message)) {
    return 'tabela comparativa';
  }
  if (/passo a passo|etapas|procedimento|como fazer|processo|m√©todo/i.test(message)) {
    return 'procedimento';
  }
  if (/resumo|principais pontos|pontos-chave|destaques|s√≠ntese/i.test(message)) {
    return 'resumo estruturado';
  }

  // Formato padr√£o
  return 'texto explicativo';
}

// Identifica o n√≠vel de complexidade esperado
function identifyComplexityLevel(message: string, history: ChatMessage[]): string {
  // Indicadores de pedido simplificado
  if (/simples|b√°sico|f√°cil|resumido|para iniciantes|introdu√ß√£o|para leigos/i.test(message)) {
    return 'b√°sico';
  }

  // Indicadores de pedido avan√ßado
  if (/avan√ßado|detalhado|complexo|aprofundado|especializado|acad√™mico|t√©cnico/i.test(message)) {
    return 'avan√ßado';
  }

  // Analisa hist√≥rico recente para contexto de complexidade
  if (history.length >= 3) {
    const recentMessages = history.slice(-3);
    const aiResponses = recentMessages.filter(msg => msg.sender === 'ai').map(msg => msg.content);

    // Verifica feedback do usu√°rio sobre complexidade
    const userFeedback = recentMessages.filter(msg => msg.sender === 'user').map(msg => msg.content);

    // Verifica se h√° pedidos para simplificar
    const simplifyRequests = userFeedback.some(feedback => 
      /simplificar|n√£o entendi|muito complexo|complicado|dif√≠cil de entender/i.test(feedback)
    );

    if (simplifyRequests) {
      return 'b√°sico';
    }

    // Verifica se h√° pedidos para aprofundar
    const advancedRequests = userFeedback.some(feedback => 
      /aprofundar|mais detalhes|elaborar mais|n√£o foi suficiente|preciso de mais/i.test(feedback)
    );

    if (advancedRequests) {
      return 'avan√ßado';
    }
  }

  return 'intermedi√°rio'; // n√≠vel padr√£o
}

// Identifica se √© uma continua√ß√£o de conversa anterior
function identifyContinuationContext(message: string, history: ChatMessage[]): boolean {
  if (history.length < 2) {
    return false;
  }

  // Verifica refer√™ncias expl√≠citas √† continua√ß√£o
  if (/continuando|seguindo|voltando|como falamos|sobre o que discutimos|mencionou|falou|disse|anterior/i.test(message)) {
    return true;
  }

  // Verifica mensagens curtas que dependem de contexto anterior
  if (message.split(' ').length < 5 && !message.includes('?')) {
    return true;
  }

  // Refer√™ncias impl√≠citas usando "isso", "este", "aquele", etc.
  if (/\b(isso|este|esta|estes|estas|aquele|aquela|aqueles|aquelas|ele|ela|eles|elas)\b/i.test(message)) {
    return true;
  }

  return false;
}

// Fun√ß√£o auxiliar para inicializar conversa
function initializeConversationHistory(sessionId: string): void {
  const initialSystemMessage: ChatMessage = {
    sender: 'system',
    content: 'Eai! Bem-vindo ao Epictus IA! Como posso ajudar com seus estudos hoje?',
    timestamp: new Date()
  };

  conversationHistory[sessionId] = [initialSystemMessage];
}

// Respostas de fallback para quando a API falhar
function useFallbackResponse(message: string): string {
  const fallbackResponses = [
    "Eai! Desculpe, estou enfrentando dificuldades t√©cnicas no momento. Por favor, tente novamente em alguns instantes.",
    "Eai! Parece que estou com problemas para processar sua solicita√ß√£o. Poderia reformular sua pergunta?",
    "Eai! Estou tendo problemas para me conectar aos meus servi√ßos de conhecimento. Tente novamente mais tarde, por favor.",
    "Eai! Encontrei um problema ao gerar sua resposta. Vamos tentar novamente?",
    "Eai! Desculpe pela inconveni√™ncia. Estou enfrentando um problema t√©cnico tempor√°rio. Por favor, tente novamente em breve."
  ];

  // Selecionar uma resposta aleat√≥ria do fallback
  const randomIndex = Math.floor(Math.random() * fallbackResponses.length);
  return fallbackResponses[randomIndex];
}