export interface ParsedIAResponse {
  [key: string]: string | string[] | number;
}

export const parseIAResponse = (iaResponse: string, contextualizationData?: any): ParsedIAResponse | null => {
  try {
    console.log('üîç Iniciando parsing da resposta da IA para Lista de Exerc√≠cios...');
    console.log('üì• Resposta recebida:', iaResponse.substring(0, 500) + '...');

    // Tentar primeiro JSON direto
    try {
      const jsonData = JSON.parse(iaResponse);
      console.log('‚úÖ JSON v√°lido encontrado:', jsonData);

      // Mapear chaves do JSON para os campos esperados
      const mappedData: ParsedIAResponse = {};

      // Mapear campos b√°sicos
      if (jsonData.titulo || jsonData.title) mappedData.title = jsonData.titulo || jsonData.title;
      if (jsonData.descricao || jsonData.description) mappedData.description = jsonData.descricao || jsonData.description;
      if (jsonData.disciplina || jsonData.subject) mappedData.subject = jsonData.disciplina || jsonData.subject;
      if (jsonData.dificuldade || jsonData.difficulty) mappedData.difficulty = jsonData.dificuldade || jsonData.difficulty;
      if (jsonData.duracao || jsonData.duration) mappedData.duration = jsonData.duracao || jsonData.duration;

      // Mapear campos espec√≠ficos de Lista de Exerc√≠cios
      if (jsonData.objetivos || jsonData.objectives) mappedData.objectives = jsonData.objetivos || jsonData.objectives;
      if (jsonData.materiais || jsonData.materials) mappedData.materials = jsonData.materiais || jsonData.materials;
      if (jsonData.instrucoes || jsonData.instructions) mappedData.instructions = jsonData.instrucoes || jsonData.instructions;
      if (jsonData.exercicios || jsonData.exercises) mappedData.exercises = jsonData.exercicios || jsonData.exercises;
      if (jsonData.questoes || jsonData.questions) mappedData.questions = jsonData.questoes || jsonData.questions;
      if (jsonData.gabarito || jsonData.answerKey || jsonData.answer_key) {
        mappedData.answerKey = jsonData.gabarito || jsonData.answerKey || jsonData.answer_key;
      }
      if (jsonData.observacoes || jsonData.notes) mappedData.notes = jsonData.observacoes || jsonData.notes;

      return mappedData;

    } catch {
      // Se n√£o for JSON, tentar extrair campos manualmente
      console.log('üìù N√£o √© JSON v√°lido, tentando extra√ß√£o manual...');
    }

    const result: ParsedIAResponse = {};

    // Padr√µes de extra√ß√£o mais robustos para Lista de Exerc√≠cios
    const patterns = {
      title: /(?:t√≠tulo|title|nome da atividade):\s*([^\n]+)/i,
      description: /(?:descri√ß√£o|description|resumo):\s*([\s\S]*?)(?=\n(?:objetivos|materiais|instru√ß√µes|\w+:)|$)/i,
      subject: /(?:disciplina|subject|mat√©ria):\s*([^\n]+)/i,
      difficulty: /(?:dificuldade|difficulty|n√≠vel):\s*([^\n]+)/i,
      duration: /(?:dura√ß√£o|duration|tempo estimado):\s*([^\n]+)/i,
      objectives: /(?:objetivos|objectives|metas):\s*([\s\S]*?)(?=\n(?:materiais|instru√ß√µes|exerc√≠cios|\w+:)|$)/i,
      materials: /(?:materiais|materials|recursos):\s*([\s\S]*?)(?=\n(?:instru√ß√µes|exerc√≠cios|quest√µes|\w+:)|$)/i,
      instructions: /(?:instru√ß√µes|instructions|orienta√ß√µes):\s*([\s\S]*?)(?=\n(?:exerc√≠cios|quest√µes|gabarito|\w+:)|$)/i,
      exercises: /(?:exerc√≠cios|exercises|atividades|lista de exerc√≠cios):\s*([\s\S]*?)(?=\n(?:quest√µes|gabarito|observa√ß√µes|\w+:)|$)/i,
      questions: /(?:quest√µes|questions|perguntas):\s*([\s\S]*?)(?=\n(?:gabarito|observa√ß√µes|\w+:)|$)/i,
      answerKey: /(?:gabarito|answer key|respostas|gabarito das quest√µes):\s*([\s\S]*?)(?=\n(?:observa√ß√µes|\w+:)|$)/i,
      notes: /(?:observa√ß√µes|notes|observa√ß√£o|coment√°rios):\s*([\s\S]*?)(?=\n\w+:|$)/i
    };

    // Extrair dados usando os padr√µes
    for (const [key, pattern] of Object.entries(patterns)) {
      const match = iaResponse.match(pattern);
      if (match && match[1]) {
        const value = match[1].trim().replace(/^\*+\s*/, '').replace(/\*+$/, '');
        if (value && value.length > 0) {
          result[key] = value;
        }
      }
    }

    // Incluir dados de contextualiza√ß√£o se dispon√≠veis
    if (contextualizationData) {
      if (contextualizationData.materias && !result.subject) {
        result.subject = contextualizationData.materias;
      }
      if (contextualizationData.publicoAlvo && !result.difficulty) {
        result.difficulty = contextualizationData.publicoAlvo;
      }
    }

    console.log('üìã Dados extra√≠dos para Lista de Exerc√≠cios:', result);

    // Verificar se extra√≠mos dados suficientes
    const essentialFields = ['title', 'description', 'exercises'];
    const hasEssentialData = essentialFields.some(field => result[field]);

    if (hasEssentialData) {
      console.log('‚úÖ Parsing conclu√≠do com sucesso');
      return result;
    } else {
      console.warn('‚ö†Ô∏è Dados insuficientes extra√≠dos da resposta da IA');
      return null;
    }

  } catch (error) {
    console.error('‚ùå Erro no parsing da resposta da IA:', error);
    return null;
  }
};

export { extractDataFromString, enrichWithContextualization, validateAndCleanData };