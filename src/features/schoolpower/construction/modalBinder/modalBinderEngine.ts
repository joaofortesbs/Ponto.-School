
import { getFieldMap } from './fieldMaps';
import { parseIAResponse } from './utils/parseIAResponse';
import { fillModalField } from './utils/fieldSetter';

export interface ModalBinderConfig {
  activityId: string;
  type: string;
  iaRawOutput: any;
  contextualizationData?: any;
}

export const modalBinderEngine = async (config: ModalBinderConfig): Promise<boolean> => {
  try {
    console.log('üîß ModalBinderEngine: Iniciando sincroniza√ß√£o autom√°tica para:', config.activityId);
    
    const { activityId, type, iaRawOutput, contextualizationData } = config;
    
    // 1. Obter mapeamento espec√≠fico do tipo de atividade
    const fieldMap = getFieldMap(type);
    if (!fieldMap) {
      console.warn(`‚ö†Ô∏è Mapeamento n√£o encontrado para tipo: ${type}`);
      return false;
    }
    
    // 2. Processar resposta da IA
    const parsedData = parseIAResponse(iaRawOutput, contextualizationData);
    if (!parsedData) {
      console.warn('‚ö†Ô∏è Falha ao processar resposta da IA');
      return false;
    }
    
    console.log('üìä Dados processados da IA:', parsedData);
    
    // 3. Preencher campos do modal automaticamente
    let fieldsFilledCount = 0;
    for (const [key, value] of Object.entries(parsedData)) {
      const selector = fieldMap[key];
      if (!selector || !value) continue;
      
      try {
        const success = await fillModalField(activityId, selector, value);
        if (success) fieldsFilledCount++;
      } catch (error) {
        console.error(`‚ùå Erro ao preencher campo ${key}:`, error);
      }
    }
    
    console.log(`‚úÖ ${fieldsFilledCount} campos preenchidos automaticamente`);
    
    // 4. Aguardar um momento para garantir que todos os campos foram preenchidos
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // 5. Acionar constru√ß√£o autom√°tica
    const buildSuccess = await triggerBuildButton(activityId);
    
    if (buildSuccess) {
      console.log('üéâ Atividade constru√≠da automaticamente com sucesso!');
      return true;
    } else {
      console.warn('‚ö†Ô∏è Falha na constru√ß√£o autom√°tica da atividade');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erro no ModalBinderEngine:', error);
    return false;
  }
};

const triggerBuildButton = async (activityId: string): Promise<boolean> => {
  try {
    // Buscar o bot√£o de construir atividade no modal espec√≠fico
    const modalSelector = `[data-activity-id="${activityId}"]`;
    const modal = document.querySelector(modalSelector);
    
    if (!modal) {
      console.warn(`Modal n√£o encontrado para atividade: ${activityId}`);
      return false;
    }
    
    // Buscar bot√£o "Construir Atividade" ou similar
    const buildButton = modal.querySelector('button[data-action="build"], button:contains("Construir"), button:contains("Gerar")') as HTMLButtonElement;
    
    if (buildButton && !buildButton.disabled) {
      buildButton.click();
      console.log('üî• Bot√£o de constru√ß√£o acionado automaticamente');
      return true;
    } else {
      console.warn('Bot√£o de constru√ß√£o n√£o encontrado ou est√° desabilitado');
      return false;
    }
  } catch (error) {
    console.error('Erro ao acionar bot√£o de constru√ß√£o:', error);
    return false;
  }
};

export { triggerBuildButton };
