import { useState, useCallback } from 'react';
import { toast } from '@/components/ui/use-toast';
import { PlanoAulaGenerator } from '../../activities/plano-aula/PlanoAulaGenerator';
import { generateActivityContent } from '../api/generateActivity'; // Mant√©m a importa√ß√£o original para a l√≥gica gen√©rica

// Assumindo a exist√™ncia destas fun√ß√µes, conforme o snippet de altera√ß√£o
// e que elas ser√£o utilizadas para outros tipos de atividades.
// Se n√£o existirem, a integra√ß√£o do Plano de Aula ainda funcionar√°.
async function generateExerciseList(formData: any) {
  console.log('Gerando lista de exerc√≠cios com:', formData);
  // Implementa√ß√£o placeholder para generateExerciseList
  // Substituir pela l√≥gica real de gera√ß√£o de lista de exerc√≠cios
  return { success: true, data: 'Lista de exerc√≠cios gerada com sucesso.' };
}

async function generateGenericActivity(formData: any) {
  console.log('Gerando atividade gen√©rica com:', formData);
  // Usando a fun√ß√£o original para atividades gen√©ricas
  return await generateActivityContent('generic', formData);
}


interface UseGenerateActivityProps {
  activityId: string;
  activityType: string;
}

export const useGenerateActivity = ({ activityId, activityType }: UseGenerateActivityProps) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const generateActivity = useCallback(async (formData: any) => {
    setIsGenerating(true);
    setError(null);

    try {
      console.log('üöÄ Iniciando gera√ß√£o de atividade:', { activityId, activityType, formData });

      // L√≥gica espec√≠fica para plano de aula
      if (activityId === 'plano-aula') {
        console.log('üìö Gerando Plano de Aula...');
        // Utiliza a nova classe PlanoAulaGenerator
        return await PlanoAulaGenerator.generatePlanoAula(formData);
      }

      // L√≥gica espec√≠fica para lista de exerc√≠cios
      if (activityId === 'lista-exercicios') {
        return await generateExerciseList(formData);
      }

      // L√≥gica gen√©rica para outras atividades
      // Usa a fun√ß√£o original importada 'generateActivityContent'
      return await generateGenericActivity(formData);

    } catch (error: any) {
      console.error('‚ùå Erro na gera√ß√£o da atividade:', error);
      setError(error.message || 'Erro desconhecido na gera√ß√£o da atividade');
      // Lan√ßar o erro para que possa ser tratado pelo chamador, se necess√°rio
      throw error;
    } finally {
      setIsGenerating(false);
    }
  }, [activityId, activityType]); // Depend√™ncias do useCallback mantidas

  return {
    generateActivity,
    isGenerating,
    error
  };
}