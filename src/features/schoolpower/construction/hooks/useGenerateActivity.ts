import { useState, useCallback } from 'react';
import { toast } from '@/components/ui/use-toast';
import { PlanoAulaGenerator } from '../../activities/plano-aula/PlanoAulaGenerator';
import { generateActivityContent } from '../api/generateActivity'; // Mant√©m a importa√ß√£o original para a l√≥gica gen√©rica

// Assumindo a exist√™ncia destas fun√ß√µes, conforme o snippet de altera√ß√£o
// e que elas ser√£o utilizadas para outros tipos de atividades.
// Se n√£o existirem, a integra√ß√£o do Plano de Aula ainda funcionar√°.
async function generateExerciseList(formData: any) {
  console.log('Gerando lista de exerc√≠cios com:', formData);
  // Implementa√ß√£o placeholder para generateExerciseList
  // Substituir pela l√≥gica real de gera√ß√£o de lista de exerc√≠cios
  return { success: true, data: 'Lista de exerc√≠cios gerada com sucesso.' };
}

async function generateGenericActivity(formData: any) {
  console.log('Gerando atividade gen√©rica com:', formData);
  // Usando a fun√ß√£o original para atividades gen√©ricas
  return await generateActivityContent('generic', formData);
}


interface UseGenerateActivityProps {
  activityId: string;
  activityType: string;
}

export const useGenerateActivity = ({ activityId, activityType }: UseGenerateActivityProps) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const generateActivity = useCallback(async (formData: any) => {
    setIsGenerating(true);
    setError(null);

    try {
      console.log('üöÄ Iniciando gera√ß√£o de atividade:', { activityId, activityType, formData });

      // L√≥gica espec√≠fica para plano de aula
      if (activityId === 'plano-aula') {
        console.log('üìö Gerando Plano de Aula...');
        const result = await PlanoAulaGenerator.generatePlanoAula(formData);
        console.log('‚úÖ Plano de Aula gerado com sucesso:', result);
        
        // Salvar resultado espec√≠fico para plano de aula
        if (result) {
          localStorage.setItem(`activity_${activityId}`, JSON.stringify({
            ...result,
            activityId,
            activityType: 'plano-aula',
            generatedAt: new Date().toISOString(),
            isGeneratedByAI: true
          }));
        }
        
        return result;
      }

      // L√≥gica espec√≠fica para lista de exerc√≠cios
      if (activityId === 'lista-exercicios') {
        console.log('üìù Gerando Lista de Exerc√≠cios...');
        const result = await generateExerciseList(formData);
        console.log('‚úÖ Lista de Exerc√≠cios gerada com sucesso:', result);
        return result;
      }

      // L√≥gica gen√©rica para outras atividades
      console.log('üîß Gerando atividade gen√©rica...');
      const result = await generateGenericActivity(formData);
      console.log('‚úÖ Atividade gen√©rica gerada com sucesso:', result);
      return result;

    } catch (error: any) {
      console.error('‚ùå Erro na gera√ß√£o da atividade:', error);
      setError(error.message || 'Erro desconhecido na gera√ß√£o da atividade');
      throw error;
    } finally {
      setIsGenerating(false);
    }
  }, [activityId, activityType]);

  const loadSavedContent = useCallback(() => {
    console.log('üîÑ Carregando conte√∫do salvo para:', activityId);
    const savedContent = localStorage.getItem(`activity_${activityId}`);
    
    if (savedContent) {
      try {
        const parsed = JSON.parse(savedContent);
        console.log('‚úÖ Conte√∫do salvo carregado:', parsed);
        return parsed;
      } catch (error) {
        console.error('‚ùå Erro ao carregar conte√∫do salvo:', error);
      }
    }
    
    return null;
  }, [activityId]);

  const clearContent = useCallback(() => {
    console.log('üóëÔ∏è Limpando conte√∫do para:', activityId);
    localStorage.removeItem(`activity_${activityId}`);
    
    // Limpar tamb√©m do cache de atividades constru√≠das
    const constructedActivities = JSON.parse(localStorage.getItem('constructedActivities') || '{}');
    if (constructedActivities[activityId]) {
      delete constructedActivities[activityId];
      localStorage.setItem('constructedActivities', JSON.stringify(constructedActivities));
    }
  }, [activityId]);

  return {
    generateActivity,
    loadSavedContent,
    clearContent,
    isGenerating,
    error
  };
}