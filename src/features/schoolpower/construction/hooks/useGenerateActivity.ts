import { useState, useCallback, useEffect } from 'react';
import { ActivityFormData, GeneratedActivity, ActivityGenerationPayload } from '../types/ActivityTypes';
import { generateActivityAPI, validateActivityData } from '../api/generateActivity';

interface UseGenerateActivityProps {
  activityId: string;
  activityType?: string;
}

export const useGenerateActivity = ({ 
  activityId, 
  activityType 
}: UseGenerateActivityProps) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const storageKey = `activity_content_${activityId}`;

  // Carregar conteÃºdo salvo ao montar o componente
  useEffect(() => {
    if (activityId) {
      loadSavedContent();
    }
  }, [activityId]);

  // Listener para construÃ§Ã£o automÃ¡tica
  useEffect(() => {
    const handleAutoBuilt = (event: CustomEvent) => {
      const { results } = event.detail;
      const currentActivityResult = results.find((r: any) => r.activityId === activityId);

      if (currentActivityResult && currentActivityResult.success && currentActivityResult.generatedContent) {
        console.log(`ðŸ¤– ConteÃºdo auto-gerado detectado para ${activityId}`);
        setGeneratedContent(currentActivityResult.generatedContent);
      }
    };

    window.addEventListener('activitiesAutoBuilt', handleAutoBuilt as EventListener);

    return () => {
      window.removeEventListener('activitiesAutoBuilt', handleAutoBuilt as EventListener);
    };
  }, [activityId]);

  const loadSavedContent = useCallback(() => {
    try {
      const saved = localStorage.getItem(storageKey);
      if (saved) {
        setGeneratedContent(saved);
        console.log(`ðŸ“¥ ConteÃºdo carregado para ${activityId}:`, saved.length, 'caracteres');
        return;
      }

      // Verificar se hÃ¡ conteÃºdo auto-gerado
      const autoGeneratedKey = `generated_activity_${activityId}`;
      const autoGenerated = localStorage.getItem(autoGeneratedKey);
      if (autoGenerated) {
        try {
          const data = JSON.parse(autoGenerated);
          if (data.content) {
            setGeneratedContent(data.content);
            console.log(`ðŸ¤– ConteÃºdo auto-gerado carregado para ${activityId}:`, data.content.length, 'caracteres');
          }
        } catch (error) {
          console.error('Erro ao carregar conteÃºdo auto-gerado:', error);
        }
      }
    } catch (error) {
      console.error('Erro ao carregar conteÃºdo salvo:', error);
    }
  }, [storageKey, activityId]);

  const generateActivity = useCallback(async (formData: ActivityFormData) => {
    setIsGenerating(true);
    setError(null);

    try {
      const payload: ActivityGenerationPayload = {
        ...formData,
        activityId,
        activityType: activityType || ''
      };

      // Validar dados
      const validationErrors = validateActivityData(payload);
      if (validationErrors.length > 0) {
        setError(validationErrors.join(', '));
        setIsGenerating(false);
        return;
      }

      // Gerar atividade
      const result = await generateActivityAPI(payload);
      setGeneratedContent(result.content);

      // Salvar no localStorage para persistÃªncia
      localStorage.setItem(`generated_activity_${activityId}`, JSON.stringify({
        content: result.content,
        metadata: result.metadata,
        timestamp: Date.now()
      }));

    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro desconhecido');
    } finally {
      setIsGenerating(false);
    }
  }, [activityId, activityType]);

  

  const clearContent = useCallback(() => {
    setGeneratedContent('');
    localStorage.removeItem(`generated_activity_${activityId}`);
  }, [activityId]);

  return {
    generateActivity,
    loadSavedContent,
    clearContent,
    isGenerating,
    generatedContent,
    error
  };
};