
import { ActivityGenerationPayload, GeneratedActivity } from '../types/ActivityTypes';
import { generateActivityByType } from '../generationStrategies/generateActivityByType';

export const generateActivityAPI = async (payload: ActivityGenerationPayload): Promise<GeneratedActivity> => {
  // Simular delay da API
  await new Promise(resolve => setTimeout(resolve, 2000));

  try {
    // Determinar o tipo de atividade baseado no ID ou t√≠tulo
    let activityType = payload.activityType;
    
    if (!activityType) {
      if (payload.activityId.includes('prova') || payload.title.toLowerCase().includes('prova')) {
        activityType = 'prova';
      } else if (payload.activityId.includes('lista') || payload.title.toLowerCase().includes('lista')) {
        activityType = 'lista-exercicios';
      } else if (payload.activityId.includes('jogo') || payload.title.toLowerCase().includes('jogo')) {
        activityType = 'jogo';
      } else if (payload.activityId.includes('video') || payload.title.toLowerCase().includes('v√≠deo')) {
        activityType = 'video';
      } else {
        activityType = 'lista-exercicios'; // padr√£o
      }
    }

    // Gerar atividade usando estrat√©gias espec√≠ficas
    const result = generateActivityByType(activityType as any, payload);

    return result;
  } catch (error) {
    console.error('Erro ao gerar atividade:', error);
    throw new Error('Falha na gera√ß√£o da atividade');
  }
};

export const validateActivityData = (data: ActivityGenerationPayload): string[] => {
  const errors: string[] = [];
  
  if (!data.title?.trim()) {
    errors.push('T√≠tulo √© obrigat√≥rio');
  }
  
  if (!data.description?.trim()) {
    errors.push('Descri√ß√£o √© obrigat√≥ria');
  }
  
  if (!data.subject?.trim()) {
    errors.push('Disciplina deve ser selecionada');
  }

  if (!data.theme?.trim()) {
    errors.push('Tema √© obrigat√≥rio');
  }

  if (!data.schoolYear?.trim()) {
    errors.push('Ano de Escolaridade √© obrigat√≥rio');
  }
  
  return errors;
};
import { ActionPlanItem } from '../../actionplan/ActionPlanCard';
import { GEMINI_API_KEY } from '../../activitiesManager';

export const generateActivityData = async (
  activity: ActionPlanItem, 
  contextualizationData?: any
): Promise<any> => {
  try {
    console.log('ü§ñ Gerando dados da atividade via IA:', activity.title);
    
    const prompt = buildActivityPrompt(activity, contextualizationData);
    
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }]
      })
    });
    
    if (!response.ok) {
      throw new Error(`Erro na API: ${response.status}`);
    }
    
    const data = await response.json();
    const generatedText = data.candidates[0]?.content?.parts[0]?.text;
    
    if (!generatedText) {
      throw new Error('Resposta vazia da IA');
    }
    
    // Processar resposta e extrair dados estruturados
    const parsedData = parseActivityResponse(generatedText, activity);
    
    console.log('‚úÖ Dados da atividade gerados:', parsedData);
    return parsedData;
    
  } catch (error) {
    console.error('‚ùå Erro ao gerar dados da atividade:', error);
    return null;
  }
};

const buildActivityPrompt = (activity: ActionPlanItem, contextualizationData?: any): string => {
  const context = contextualizationData ? {
    materias: contextualizationData.materias || '',
    publicoAlvo: contextualizationData.publicoAlvo || '',
    restricoes: contextualizationData.restricoes || '',
    datasImportantes: contextualizationData.datasImportantes || '',
    observacoes: contextualizationData.observacoes || ''
  } : {};
  
  return `
# Gera√ß√£o de Atividade Educacional

## Contexto da Atividade:
- **T√≠tulo**: ${activity.title}
- **Descri√ß√£o**: ${activity.description}
- **Tipo**: ${activity.id}

## Contexto Educacional:
- **Mat√©rias**: ${context.materias}
- **P√∫blico-alvo**: ${context.publicoAlvo}
- **Restri√ß√µes**: ${context.restricoes}
- **Datas Importantes**: ${context.datasImportantes}
- **Observa√ß√µes**: ${context.observacoes}

## Instru√ß√µes:
Gere uma atividade educacional completa e detalhada seguindo exatamente esta estrutura JSON:

\`\`\`json
{
  "titulo": "T√≠tulo espec√≠fico e atrativo para a atividade",
  "descricao": "Descri√ß√£o detalhada do que ser√° trabalhado",
  "disciplina": "Disciplina principal",
  "dificuldade": "B√°sica/Intermedi√°ria/Avan√ßada",
  "formatoEntrega": "PDF/Word/Online/Manuscrito",
  "duracao": "Tempo estimado em minutos",
  "objetivos": "Objetivos de aprendizagem espec√≠ficos",
  "materiais": "Lista de materiais necess√°rios",
  "instrucoes": "Instru√ß√µes detalhadas para realiza√ß√£o",
  "conteudo": "Conte√∫do principal da atividade",
  "observacoes": "Observa√ß√µes importantes ou dicas"
}
\`\`\`

**IMPORTANTE**: 
- Responda APENAS com o JSON v√°lido, sem texto adicional
- Adapte todos os campos ao contexto fornecido
- Seja espec√≠fico e pr√°tico
- Garanta que a atividade seja adequada ao p√∫blico-alvo
`;
};

const parseActivityResponse = (response: string, activity: ActionPlanItem): any => {
  try {
    // Extrair JSON da resposta
    const jsonMatch = response.match(/```json\s*([\s\S]*?)\s*```/) || 
                     response.match(/\{[\s\S]*\}/);
    
    if (jsonMatch) {
      const jsonString = jsonMatch[1] || jsonMatch[0];
      return JSON.parse(jsonString);
    }
    
    // Fallback: tentar parsear a resposta inteira como JSON
    return JSON.parse(response);
    
  } catch (error) {
    console.warn('Erro ao parsear JSON, usando dados b√°sicos:', error);
    
    // Fallback com dados b√°sicos
    return {
      titulo: activity.title,
      descricao: activity.description,
      disciplina: "N√£o especificada",
      dificuldade: "Intermedi√°ria",
      formatoEntrega: "PDF",
      duracao: "45 minutos",
      objetivos: "Desenvolver conhecimentos sobre o tema proposto",
      materiais: "Material de escrita e pesquisa",
      instrucoes: "Seguir as orienta√ß√µes fornecidas",
      conteudo: response,
      observacoes: "Atividade gerada automaticamente"
    };
  }
};

export { buildActivityPrompt, parseActivityResponse };
