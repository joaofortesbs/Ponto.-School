
import { ActivityGenerationPayload, GeneratedActivity } from '../types/ActivityTypes';
import { generateActivityByType } from '../generationStrategies/generateActivityByType';

export const generateActivityAPI = async (payload: ActivityGenerationPayload): Promise<GeneratedActivity> => {
  // Simular delay da API
  await new Promise(resolve => setTimeout(resolve, 2000));

  try {
    // Determinar o tipo de atividade baseado no ID ou t√≠tulo
    let activityType = payload.activityType;

    if (!activityType) {
      if (payload.activityId.includes('prova') || payload.title.toLowerCase().includes('prova')) {
        activityType = 'prova';
      } else if (payload.activityId.includes('lista') || payload.title.toLowerCase().includes('lista')) {
        activityType = 'lista-exercicios';
      } else if (payload.activityId.includes('jogo') || payload.title.toLowerCase().includes('jogo')) {
        activityType = 'jogo';
      } else if (payload.activityId.includes('video') || payload.title.toLowerCase().includes('v√≠deo')) {
        activityType = 'video';
      } else {
        activityType = 'lista-exercicios'; // padr√£o
      }
    }

    // Gerar atividade usando estrat√©gias espec√≠ficas
    const result = generateActivityByType(activityType as any, payload);

    return result;
  } catch (error) {
    console.error('Erro ao gerar atividade:', error);
    throw new Error('Falha na gera√ß√£o da atividade');
  }
};

export const validateActivityData = (data: ActivityGenerationPayload): string[] => {
  const errors: string[] = [];

  if (!data.title?.trim()) {
    errors.push('T√≠tulo √© obrigat√≥rio');
  }

  if (!data.description?.trim()) {
    errors.push('Descri√ß√£o √© obrigat√≥ria');
  }

  if (!data.subject?.trim()) {
    errors.push('Disciplina deve ser selecionada');
  }

  if (!data.theme?.trim()) {
    errors.push('Tema √© obrigat√≥rio');
  }

  if (!data.schoolYear?.trim()) {
    errors.push('Ano de Escolaridade √© obrigat√≥rio');
  }

  return errors;
};

import { ActionPlanItem } from '../../actionplan/ActionPlanCard';
import { API_KEYS } from '../../../../config/apiKeys';
import { GeminiClient } from '../../../../utils/api/geminiClient';

export const generateActivityData = async (
  activity: ActionPlanItem,
  contextualizationData?: any
): Promise<any> => {
  try {
    console.log('ü§ñ Gerando dados da atividade via IA:', activity.title);

    const prompt = buildActivityPrompt(activity, contextualizationData);

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEYS.GEMINI}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }]
      })
    });

    if (!response.ok) {
      throw new Error(`Erro na API: ${response.status}`);
    }

    const data = await response.json();
    const generatedText = data.candidates[0]?.content?.parts[0]?.text;

    if (!generatedText) {
      throw new Error('Resposta vazia da IA');
    }

    // Processar resposta e extrair dados estruturados
    const parsedData = parseActivityResponse(generatedText, activity);

    console.log('‚úÖ Dados da atividade gerados:', parsedData);
    return parsedData;

  } catch (error) {
    console.error('‚ùå Erro ao gerar dados da atividade:', error);
    return null;
  }
};

const buildActivityPrompt = (activity: ActionPlanItem, contextualizationData?: any): string => {
  const context = contextualizationData ? {
    materias: contextualizationData.materias || '',
    publicoAlvo: contextualizationData.publicoAlvo || '',
    restricoes: contextualizationData.restricoes || '',
    datasImportantes: contextualizationData.datasImportantes || '',
    observacoes: contextualizationData.observacoes || ''
  } : {};

  return `
# Gera√ß√£o de Atividade Educacional

## Contexto da Atividade:
- **T√≠tulo**: ${activity.title}
- **Descri√ß√£o**: ${activity.description}
- **Tipo**: ${activity.id}

## Contexto Educacional:
- **Mat√©rias**: ${context.materias}
- **P√∫blico-alvo**: ${context.publicoAlvo}
- **Restri√ß√µes**: ${context.restricoes}
- **Datas Importantes**: ${context.datasImportantes}
- **Observa√ß√µes**: ${context.observacoes}

## Instru√ß√µes:
Gere uma atividade educacional completa e detalhada seguindo exatamente esta estrutura JSON:

\`\`\`json
{
  "titulo": "T√≠tulo espec√≠fico e atrativo para a atividade",
  "descricao": "Descri√ß√£o detalhada do que ser√° trabalhado",
  "disciplina": "Disciplina principal",
  "dificuldade": "B√°sica/Intermedi√°ria/Avan√ßada",
  "formatoEntrega": "PDF/Word/Online/Manuscrito",
  "duracao": "Tempo estimado em minutos",
  "objetivos": "Objetivos de aprendizagem espec√≠ficos",
  "materiais": "Lista de materiais necess√°rios",
  "instrucoes": "Instru√ß√µes detalhadas para realiza√ß√£o",
  "conteudo": "Conte√∫do principal da atividade",
  "observacoes": "Observa√ß√µes importantes ou dicas"
}
\`\`\`

**IMPORTANTE**:
- Responda APENAS com o JSON v√°lido, sem texto adicional
- Adapte todos os campos ao contexto fornecido
- Seja espec√≠fico e pr√°tico
- Garanta que a atividade seja adequada ao p√∫blico-alvo
`;
};

const parseActivityResponse = (response: string, activity: ActionPlanItem): any => {
  try {
    // Extrair JSON da resposta
    const jsonMatch = response.match(/```json\s*([\s\S]*?)\s*```/) ||
      response.match(/\{[\s\S]*\}/);

    if (jsonMatch) {
      const jsonString = jsonMatch[1] || jsonMatch[0];
      return JSON.parse(jsonString);
    }

    // Fallback: tentar parsear a resposta inteira como JSON
    return JSON.parse(response);

  } catch (error) {
    console.warn('Erro ao parsear JSON, usando dados b√°sicos:', error);

    // Fallback com dados b√°sicos
    return {
      titulo: activity.title,
      descricao: activity.description,
      disciplina: "N√£o especificada",
      dificuldade: "Intermedi√°ria",
      formatoEntrega: "PDF",
      duracao: "45 minutos",
      objetivos: "Desenvolver conhecimentos sobre o tema proposto",
      materiais: "Material de escrita e pesquisa",
      instrucoes: "Seguir as orienta√ß√µes fornecidas",
      conteudo: response,
      observacoes: "Atividade gerada automaticamente"
    };
  }
};

export { buildActivityPrompt, parseActivityResponse };

// Fun√ß√£o principal de gera√ß√£o de conte√∫do que ser√° usada pelo modal e constru√ß√£o autom√°tica
export const generateActivityContent = async (
  activityType: string,
  contextData: any
): Promise<any> => {
  try {
    console.log('ü§ñ Iniciando gera√ß√£o de conte√∫do com Gemini para:', activityType);
    console.log('üìã Dados de contexto completos:', JSON.stringify(contextData, null, 2));

    const geminiClient = new GeminiClient();

    // Prompt espec√≠fico para Lista de Exerc√≠cios
    let prompt = '';

    if (activityType === 'lista-exercicios') {
      // Importar o prompt espec√≠fico
      const { buildListaExerciciosPrompt } = await import('../../prompts/listaExerciciosPrompt');
      prompt = buildListaExerciciosPrompt(contextData);
      console.log('üìù Prompt gerado para lista de exerc√≠cios:', prompt.substring(0, 500) + '...');
    } else {
      // Prompt gen√©rico para outros tipos de atividade
      prompt = `
Crie o conte√∫do educacional para uma atividade do tipo "${activityType}" com base no seguinte contexto:

CONTEXTO:
${JSON.stringify(contextData, null, 2)}

FORMATO: Responda em JSON estruturado com todos os campos relevantes para o tipo de atividade solicitado.
REQUISITOS: Conte√∫do educativo, bem estruturado e adequado ao contexto fornecido.

Responda APENAS com o JSON, sem texto adicional.`;
    }

    console.log('üì§ Enviando prompt para Gemini...');

    const response = await geminiClient.generate({
      prompt,
      temperature: 0.7,
      maxTokens: 4000,
      topP: 0.9,
      topK: 40
    });

    if (response.success) {
      console.log('‚úÖ Resposta recebida do Gemini');
      console.log('üìä Estimativa de tokens:', response.estimatedTokens);
      console.log('üí∞ Custo estimado:', response.estimatedPowerCost);
      console.log('‚è±Ô∏è Tempo de execu√ß√£o:', response.executionTime + 'ms');

      // Limpar a resposta para garantir que seja JSON v√°lido
      let cleanedResponse = response.result.trim();

      console.log('üîß Resposta bruta da IA (primeiros 1000 chars):', cleanedResponse.substring(0, 1000));

      // M√∫ltiplas tentativas de limpeza
      // 1. Remover markdown
      cleanedResponse = cleanedResponse.replace(/```json\s*/g, '').replace(/```\s*$/g, '');
      cleanedResponse = cleanedResponse.replace(/```\s*/g, '');

      // 2. Remover poss√≠veis textos antes e depois do JSON
      const jsonStart = cleanedResponse.indexOf('{');
      const jsonEnd = cleanedResponse.lastIndexOf('}');

      if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {
        cleanedResponse = cleanedResponse.substring(jsonStart, jsonEnd + 1);
      }

      // 3. Verificar se come√ßa e termina com { }
      if (!cleanedResponse.trim().startsWith('{')) {
        const firstBrace = cleanedResponse.indexOf('{');
        if (firstBrace !== -1) {
          cleanedResponse = cleanedResponse.substring(firstBrace);
        }
      }

      if (!cleanedResponse.trim().endsWith('}')) {
        const lastBrace = cleanedResponse.lastIndexOf('}');
        if (lastBrace !== -1) {
          cleanedResponse = cleanedResponse.substring(0, lastBrace + 1);
        }
      }

      console.log('üîß Resposta limpa para parsing (primeiros 500 chars):', cleanedResponse.substring(0, 500));

      try {
        const parsedResult = JSON.parse(cleanedResponse);
        console.log('‚úÖ Resultado parseado com sucesso');
        console.log('üìä Estrutura do resultado:', {
          hasTitle: !!parsedResult.titulo,
          hasDisciplina: !!parsedResult.disciplina,
          hasTema: !!parsedResult.tema,
          hasQuestoes: !!parsedResult.questoes,
          questoesLength: parsedResult.questoes ? parsedResult.questoes.length : 0,
          keys: Object.keys(parsedResult)
        });

        // Valida√ß√£o rigorosa para lista de exerc√≠cios
        if (activityType === 'lista-exercicios') {
          // Verificar se tem quest√µes
          if (!parsedResult.questoes || !Array.isArray(parsedResult.questoes)) {
            console.error('‚ùå Estrutura de quest√µes inv√°lida');
            throw new Error('Campo questoes n√£o encontrado ou n√£o √© um array');
          }

          if (parsedResult.questoes.length === 0) {
            console.error('‚ùå Nenhuma quest√£o gerada pela IA');
            throw new Error('Array de quest√µes est√° vazio');
          }

          // Validar cada quest√£o
          const questoesValidas = parsedResult.questoes.every((questao: any, index: number) => {
            const isValid = questao.id && questao.type && questao.enunciado;
            if (!isValid) {
              console.error(`‚ùå Quest√£o ${index + 1} inv√°lida:`, questao);
            }
            return isValid;
          });

          if (!questoesValidas) {
            throw new Error('Algumas quest√µes geradas pela IA s√£o inv√°lidas');
          }

          console.log(`üìù ${parsedResult.questoes.length} quest√µes v√°lidas geradas pela IA`);
          console.log('üìÑ Primeira quest√£o como exemplo:', parsedResult.questoes[0]);

          // Marcar como gerado pela IA
          parsedResult.isGeneratedByAI = true;
          parsedResult.generatedAt = new Date().toISOString();

          // Garantir que todos os campos necess√°rios existem
          parsedResult.titulo = parsedResult.titulo || contextData.titulo || contextData.title || 'Lista de Exerc√≠cios';
          parsedResult.disciplina = parsedResult.disciplina || contextData.disciplina || contextData.subject || 'Disciplina';
          parsedResult.tema = parsedResult.tema || contextData.tema || contextData.theme || 'Tema';
          parsedResult.numeroQuestoes = parsedResult.questoes.length;
        }

        return parsedResult;
      } catch (parseError) {
        console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
        console.error('üìÑ Conte√∫do que causou erro (primeiros 1000 chars):', cleanedResponse.substring(0, 1000));

        // Tentar extrair JSON de forma mais agressiva
        try {
          // Buscar por padr√µes JSON v√°lidos
          const jsonPattern = /\{[\s\S]*\}/;
          const match = cleanedResponse.match(jsonPattern);

          if (match) {
            const extractedJson = match[0];
            console.log('üîÑ Tentando JSON extra√≠do:', extractedJson.substring(0, 200));
            const secondAttempt = JSON.parse(extractedJson);
            console.log('‚úÖ Segunda tentativa de parse bem sucedida');

            // Aplicar mesmas valida√ß√µes
            if (activityType === 'lista-exercicios') {
              if (secondAttempt.questoes && Array.isArray(secondAttempt.questoes) && secondAttempt.questoes.length > 0) {
                secondAttempt.isGeneratedByAI = true;
                secondAttempt.generatedAt = new Date().toISOString();
                return secondAttempt;
              }
            }

            return secondAttempt;
          }
        } catch (secondError) {
          console.error('‚ùå Segunda tentativa de parse tamb√©m falhou:', secondError);
        }

        throw new Error(`Erro ao processar resposta da IA: ${parseError.message}`);
      }

    } else {
      console.error('‚ùå Erro na API Gemini:', response.error);
      throw new Error(response.error || 'Falha na gera√ß√£o de conte√∫do');
    }

  } catch (error) {
    console.error('‚ùå Erro cr√≠tico ao gerar conte√∫do da atividade:', error);
    throw error;
  }
};

export async function generateActivity(formData: any): Promise<{ success: boolean; content?: string; error?: string }> {
  console.log('üéØ generateActivity: Iniciando gera√ß√£o com formData:', formData);

  try {
    // Validar dados obrigat√≥rios
    if (!formData.title || !formData.description) {
      throw new Error('T√≠tulo e descri√ß√£o s√£o obrigat√≥rios');
    }

    // Preparar dados para a API
    const activityData = {
      title: formData.title,
      description: formData.description,
      type: formData.typeId || 'default',
      disciplina: formData.disciplina || 'Matem√°tica',
      nivel: formData.nivel || 'Ensino M√©dio',
      duracao: formData.duracao || '50 minutos',
      objetivo: formData.objetivo || formData.description,
      conteudo: formData.conteudo || formData.description,
      metodologia: formData.metodologia || 'Pr√°tica',
      recursos: formData.recursos || 'Quadro, computador',
      avaliacao: formData.avaliacao || 'Participa√ß√£o e exerc√≠cios'
    };

    console.log('üìù Dados preparados para API:', activityData);

    // Simular gera√ß√£o da atividade usando uma fun√ß√£o auxiliar
    const generatedContent = await generateSimpleActivityContent(activityData);

    if (generatedContent) {
      console.log('‚úÖ Atividade gerada com sucesso');
      return {
        success: true,
        content: generatedContent
      };
    } else {
      throw new Error('Falha na gera√ß√£o do conte√∫do');
    }

  } catch (error) {
    console.error('‚ùå Erro na gera√ß√£o da atividade:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Erro desconhecido'
    };
  }
}

// Fun√ß√£o auxiliar para evitar conflito de nomes
async function generateSimpleActivityContent(activityData: any): Promise<string> {
  console.log('üî® Gerando conte√∫do da atividade:', activityData.title);

  // Simular delay da API
  await new Promise(resolve => setTimeout(resolve, 1000));

  // Template baseado no tipo de atividade
  const templates = {
    'lista-exercicios': `
# ${activityData.title}

## Informa√ß√µes Gerais
- **Disciplina:** ${activityData.disciplina}
- **N√≠vel:** ${activityData.nivel}
- **Dura√ß√£o:** ${activityData.duracao}

## Objetivo
${activityData.objetivo}

## Conte√∫do
${activityData.conteudo}

## Exerc√≠cios

### Exerc√≠cio 1
Resolva a fun√ß√£o f(x) = 2x + 3 para x = 5.

**Solu√ß√£o:**
f(5) = 2(5) + 3 = 10 + 3 = 13

### Exerc√≠cio 2
Determine o zero da fun√ß√£o f(x) = -3x + 9.

**Solu√ß√£o:**
-3x + 9 = 0
-3x = -9
x = 3

### Exerc√≠cio 3
Construa o gr√°fico da fun√ß√£o f(x) = x - 2.

**Solu√ß√£o:**
- Quando x = 0: f(0) = -2
- Quando x = 2: f(2) = 0
- Quando x = 4: f(4) = 2

## Metodologia
${activityData.metodologia}

## Recursos Necess√°rios
${activityData.recursos}

## Avalia√ß√£o
${activityData.avaliacao}
    `,
    'prova': `
# ${activityData.title}

## Informa√ß√µes da Prova
- **Disciplina:** ${activityData.disciplina}
- **N√≠vel:** ${activityData.nivel}
- **Dura√ß√£o:** ${activityData.duracao}

## Instru√ß√µes
1. Leia todas as quest√µes antes de come√ßar
2. Resolva as quest√µes com calma e aten√ß√£o
3. Mostre os c√°lculos quando necess√°rio

## Quest√µes

### Quest√£o 1 (2,0 pontos)
Dada a fun√ß√£o f(x) = 3x - 6, calcule:
a) f(2)
b) O zero da fun√ß√£o

### Quest√£o 2 (2,0 pontos)
Determine a lei de forma√ß√£o da fun√ß√£o cujo gr√°fico passa pelos pontos (0, 4) e (2, 0).

### Quest√£o 3 (3,0 pontos)
Resolva o sistema de equa√ß√µes:
2x + y = 7
x - y = 2

### Quest√£o 4 (3,0 pontos)
Aplique o Teorema de Pit√°goras para encontrar a hipotenusa de um tri√¢ngulo ret√¢ngulo com catetos de 3 cm e 4 cm.

## Gabarito
1. a) f(2) = 0  b) x = 2
2. f(x) = -2x + 4
3. x = 3, y = 1
4. h = 5 cm
    `,
    'default': `
# ${activityData.title}

## Descri√ß√£o
${activityData.description}

## Objetivo
${activityData.objetivo}

## Conte√∫do Desenvolvido
${activityData.conteudo}

## Metodologia
${activityData.metodologia}

## Recursos
${activityData.recursos}

## Avalia√ß√£o
${activityData.avaliacao}

---
*Atividade gerada automaticamente pelo School Power*
    `
  };

  // Determinar template baseado no tipo ou usar default
  const activityType = activityData.type || 'default';
  const template = templates[activityType] || templates['default'];

  return template.trim();
}
