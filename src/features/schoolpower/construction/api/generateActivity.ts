import { ActivityGenerationPayload, GeneratedActivity } from '../types/ActivityTypes';
import { generateActivityByType } from '../generationStrategies/generateActivityByType';
import { sequenciaDidaticaGenerator, SequenciaDidaticaGeneratedContent } from '../activities/sequencia-didatica/SequenciaDidaticaGenerator';
import { SequenciaDidaticaPromptData } from '../prompts/sequenciaDidaticaPrompt';

export const generateActivityAPI = async (payload: ActivityGenerationPayload): Promise<GeneratedActivity> => {
  // Simular delay da API
  await new Promise(resolve => setTimeout(resolve, 2000));

  try {
    // Determinar o tipo de atividade baseado no ID ou t√≠tulo
    let activityType = payload.activityType;

    if (!activityType) {
      if (payload.activityId.includes('prova') || payload.title.toLowerCase().includes('prova')) {
        activityType = 'prova';
      } else if (payload.activityId.includes('lista') || payload.title.toLowerCase().includes('lista')) {
        activityType = 'lista-exercicios';
      } else if (payload.activityId.includes('jogo') || payload.title.toLowerCase().includes('jogo')) {
        activityType = 'jogo';
      } else if (payload.activityId.includes('video') || payload.title.toLowerCase().includes('v√≠deo')) {
        activityType = 'video';
      } else if (payload.activityId.includes('sequencia') || payload.title.toLowerCase().includes('sequ√™ncia')) {
        activityType = 'sequencia-didatica';
      } else {
        activityType = 'lista-exercicios'; // padr√£o
      }
    }

    // Gerar atividade usando estrat√©gias espec√≠ficas
    const result = generateActivityByType(activityType as any, payload);

    return result;
  } catch (error) {
    console.error('Erro ao gerar atividade:', error);
    throw new Error('Falha na gera√ß√£o da atividade');
  }
};

export const validateActivityData = (data: ActivityGenerationPayload): string[] => {
  const errors: string[] = [];

  if (!data.title?.trim()) {
    errors.push('T√≠tulo √© obrigat√≥rio');
  }

  if (!data.description?.trim()) {
    errors.push('Descri√ß√£o √© obrigat√≥ria');
  }

  if (!data.subject?.trim()) {
    errors.push('Disciplina deve ser selecionada');
  }

  if (!data.theme?.trim()) {
    errors.push('Tema √© obrigat√≥rio');
  }

  if (!data.schoolYear?.trim()) {
    errors.push('Ano de Escolaridade √© obrigat√≥rio');
  }

  return errors;
};

import { ActionPlanItem } from '../../actionplan/ActionPlanCard';
import { API_KEYS } from '../../../../config/apiKeys';
import { GeminiClient } from '../../../../utils/api/geminiClient';

export const generateActivityData = async (
  activity: ActionPlanItem,
  contextualizationData?: any
): Promise<any> => {
  try {
    console.log('ü§ñ Gerando dados da atividade via IA:', activity.title);

    const prompt = buildActivityPrompt(activity, contextualizationData);

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEYS.GEMINI}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }]
      })
    });

    if (!response.ok) {
      throw new Error(`Erro na API: ${response.status}`);
    }

    const data = await response.json();
    const generatedText = data.candidates[0]?.content?.parts[0]?.text;

    if (!generatedText) {
      throw new Error('Resposta vazia da IA');
    }

    // Processar resposta e extrair dados estruturados
    const parsedData = parseActivityResponse(generatedText, activity);

    console.log('‚úÖ Dados da atividade gerados:', parsedData);
    return parsedData;

  } catch (error) {
    console.error('‚ùå Erro ao gerar dados da atividade:', error);
    return null;
  }
};

const buildActivityPrompt = (activity: ActionPlanItem, contextualizationData?: any): string => {
  const context = contextualizationData ? {
    materias: contextualizationData.materias || '',
    publicoAlvo: contextualizationData.publicoAlvo || '',
    restricoes: contextualizationData.restricoes || '',
    datasImportantes: contextualizationData.datasImportantes || '',
    observacoes: contextualizationData.observacoes || ''
  } : {};

  return `
# Gera√ß√£o de Atividade Educacional

## Contexto da Atividade:
- **T√≠tulo**: ${activity.title}
- **Descri√ß√£o**: ${activity.description}
- **Tipo**: ${activity.id}

## Contexto Educacional:
- **Mat√©rias**: ${context.materias}
- **P√∫blico-alvo**: ${context.publicoAlvo}
- **Restri√ß√µes**: ${context.restricoes}
- **Datas Importantes**: ${context.datasImportantes}
- **Observa√ß√µes**: ${context.observacoes}

## Instru√ß√µes:
Gere uma atividade educacional completa e detalhada seguindo exatamente esta estrutura JSON:

\`\`\`json
{
  "titulo": "T√≠tulo espec√≠fico e atrativo para a atividade",
  "descricao": "Descri√ß√£o detalhada do que ser√° trabalhado",
  "disciplina": "Disciplina principal",
  "dificuldade": "B√°sica/Intermedi√°ria/Avan√ßada",
  "formatoEntrega": "PDF/Word/Online/Manuscrito",
  "duracao": "Tempo estimado em minutos",
  "objetivos": "Objetivos de aprendizagem espec√≠ficos",
  "materiais": "Lista de materiais necess√°rios",
  "instrucoes": "Instru√ß√µes detalhadas para realiza√ß√£o",
  "conteudo": "Conte√∫do principal da atividade",
  "observacoes": "Observa√ß√µes importantes ou dicas"
}
\`\`\`

**IMPORTANTE**:
- Responda APENAS com o JSON v√°lido, sem texto adicional
- Adapte todos os campos ao contexto fornecido
- Seja espec√≠fico e pr√°tico
- Garanta que a atividade seja adequada ao p√∫blico-alvo
`;
};

const parseActivityResponse = (response: string, activity: ActionPlanItem): any => {
  try {
    // Extrair JSON da resposta
    const jsonMatch = response.match(/```json\s*([\s\S]*?)\s*```/) ||
      response.match(/\{[\s\S]*\}/);

    if (jsonMatch) {
      const jsonString = jsonMatch[1] || jsonMatch[0];
      return JSON.parse(jsonString);
    }

    // Fallback: tentar parsear a resposta inteira como JSON
    return JSON.parse(response);

  } catch (error) {
    console.warn('Erro ao parsear JSON, usando dados b√°sicos:', error);

    // Fallback com dados b√°sicos
    return {
      titulo: activity.title,
      descricao: activity.description,
      disciplina: "N√£o especificada",
      dificuldade: "Intermedi√°ria",
      formatoEntrega: "PDF",
      duracao: "45 minutos",
      objetivos: "Desenvolver conhecimentos sobre o tema proposto",
      materiais: "Material de escrita e pesquisa",
      instrucoes: "Seguir as orienta√ß√µes fornecidas",
      conteudo: response,
      observacoes: "Atividade gerada automaticamente"
    };
  }
};

export { buildActivityPrompt, parseActivityResponse };

// Fun√ß√£o principal de gera√ß√£o de conte√∫do que ser√° usada pelo modal e constru√ß√£o autom√°tica
export const generateActivityContent = async (
  activityType: string,
  contextData: any
): Promise<any> => {
  try {
    console.log('ü§ñ Iniciando gera√ß√£o de conte√∫do com Gemini para:', activityType);
    console.log('üìã Dados de contexto completos:', JSON.stringify(contextData, null, 2));

    const geminiClient = new GeminiClient();

    // Prompt espec√≠fico para Lista de Exerc√≠cios
    let prompt = '';

    if (activityType === 'lista-exercicios') {
      // Importar o prompt espec√≠fico
      const { buildListaExerciciosPrompt } = await import('../../prompts/listaExerciciosPrompt');
      prompt = buildListaExerciciosPrompt(contextData);
      console.log('üìù Prompt gerado para lista de exerc√≠cios:', prompt.substring(0, 500) + '...');
    } else if (activityType === 'sequencia-didatica') {
      // Importar o prompt espec√≠fico para Sequ√™ncia Did√°tica
      const { buildSequenciaDidaticaPrompt } = await import('../../prompts/sequenciaDidaticaPrompt');
      prompt = buildSequenciaDidaticaPrompt(contextData as SequenciaDidaticaPromptData);
      console.log('üìù Prompt gerado para sequ√™ncia did√°tica:', prompt.substring(0, 500) + '...');
    }
    else {
      // Prompt gen√©rico para outros tipos de atividade
      prompt = `
Crie o conte√∫do educacional para uma atividade do tipo "${activityType}" com base no seguinte contexto:

CONTEXTO:
${JSON.stringify(contextData, null, 2)}

FORMATO: Responda em JSON estruturado com todos os campos relevantes para o tipo de atividade solicitado.
REQUISITOS: Conte√∫do educativo, bem estruturado e adequado ao contexto fornecido.

Responda APENAS com o JSON, sem texto adicional.`;
    }

    console.log('üì§ Enviando prompt para Gemini...');

    const response = await geminiClient.generate({
      prompt,
      temperature: 0.7,
      maxTokens: 4000,
      topP: 0.9,
      topK: 40
    });

    if (response.success) {
      console.log('‚úÖ Resposta recebida do Gemini');
      console.log('üìä Estimativa de tokens:', response.estimatedTokens);
      console.log('üí∞ Custo estimado:', response.estimatedPowerCost);
      console.log('‚è±Ô∏è Tempo de execu√ß√£o:', response.executionTime + 'ms');

      // Limpar a resposta para garantir que seja JSON v√°lido
      let cleanedResponse = response.result.trim();

      console.log('üîß Resposta bruta da IA (primeiros 1000 chars):', cleanedResponse.substring(0, 1000));

      // M√∫ltiplas tentativas de limpeza
      // 1. Remover markdown
      cleanedResponse = cleanedResponse.replace(/```json\s*/g, '').replace(/```\s*$/g, '');
      cleanedResponse = cleanedResponse.replace(/```\s*/g, '');

      // 2. Remover poss√≠veis textos antes e depois do JSON
      const jsonStart = cleanedResponse.indexOf('{');
      const jsonEnd = cleanedResponse.lastIndexOf('}');

      if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {
        cleanedResponse = cleanedResponse.substring(jsonStart, jsonEnd + 1);
      }

      // 3. Verificar se come√ßa e termina com { }
      if (!cleanedResponse.trim().startsWith('{')) {
        const firstBrace = cleanedResponse.indexOf('{');
        if (firstBrace !== -1) {
          cleanedResponse = cleanedResponse.substring(firstBrace);
        }
      }

      if (!cleanedResponse.trim().endsWith('}')) {
        const lastBrace = cleanedResponse.lastIndexOf('}');
        if (lastBrace !== -1) {
          cleanedResponse = cleanedResponse.substring(0, lastBrace + 1);
        }
      }

      console.log('üîß Resposta limpa para parsing (primeiros 500 chars):', cleanedResponse.substring(0, 500));

      try {
        const parsedResult = JSON.parse(cleanedResponse);
        console.log('‚úÖ Resultado parseado com sucesso');
        console.log('üìä Estrutura do resultado:', {
          hasTitle: !!parsedResult.titulo,
          hasDisciplina: !!parsedResult.disciplina,
          hasTema: !!parsedResult.tema,
          hasQuestoes: !!parsedResult.questoes,
          questoesLength: parsedResult.questoes ? parsedResult.questoes.length : 0,
          keys: Object.keys(parsedResult)
        });

        // Valida√ß√£o rigorosa para lista de exerc√≠cios
        if (activityType === 'lista-exercicios') {
          // Verificar se tem quest√µes
          if (!parsedResult.questoes || !Array.isArray(parsedResult.questoes)) {
            console.error('‚ùå Estrutura de quest√µes inv√°lida');
            throw new Error('Campo questoes n√£o encontrado ou n√£o √© um array');
          }

          if (parsedResult.questoes.length === 0) {
            console.error('‚ùå Nenhuma quest√£o gerada pela IA');
            throw new Error('Array de quest√µes est√° vazio');
          }

          // Validar cada quest√£o
          const questoesValidas = parsedResult.questoes.every((questao: any, index: number) => {
            const isValid = questao.id && questao.type && questao.enunciado;
            if (!isValid) {
              console.error(`‚ùå Quest√£o ${index + 1} inv√°lida:`, questao);
            }
            return isValid;
          });

          if (!questoesValidas) {
            throw new Error('Algumas quest√µes geradas pela IA s√£o inv√°lidas');
          }

          console.log(`üìù ${parsedResult.questoes.length} quest√µes v√°lidas geradas pela IA`);
          console.log('üìÑ Primeira quest√£o como exemplo:', parsedResult.questoes[0]);

          // Marcar como gerado pela IA
          parsedResult.isGeneratedByAI = true;
          parsedResult.generatedAt = new Date().toISOString();

          // Garantir que todos os campos necess√°rios existem
          parsedResult.titulo = parsedResult.titulo || contextData.titulo || contextData.title || 'Lista de Exerc√≠cios';
          parsedResult.disciplina = parsedResult.disciplina || contextData.disciplina || contextData.subject || 'Disciplina';
          parsedResult.tema = parsedResult.tema || contextData.tema || contextData.theme || 'Tema';
          parsedResult.numeroQuestoes = parsedResult.questoes.length;
        } else if (activityType === 'sequencia-didatica') {
          // Valida√ß√£o espec√≠fica para Sequ√™ncia Did√°tica
          if (!parsedResult.aulas || !Array.isArray(parsedResult.aulas)) {
            console.error('‚ùå Estrutura de aulas inv√°lida para Sequ√™ncia Did√°tica');
            throw new Error('Campo aulas n√£o encontrado ou n√£o √© um array');
          }

          const aulasValidas = parsedResult.aulas.every((aula: any, index: number) => {
            const isValid = aula.titulo && aula.tipo && aula.objetivo && aula.resumo;
            if (!isValid) {
              console.error(`‚ùå Aula ${index + 1} inv√°lida na Sequ√™ncia Did√°tica:`, aula);
            }
            return isValid;
          });

          if (!aulasValidas) {
            throw new Error('Algumas aulas geradas pela IA para a Sequ√™ncia Did√°tica s√£o inv√°lidas');
          }

          console.log(`üìö ${parsedResult.aulas.length} aulas v√°lidas geradas pela IA para Sequ√™ncia Did√°tica`);
          parsedResult.isGeneratedByAI = true;
          parsedResult.generatedAt = new Date().toISOString();
          parsedResult.titulo = parsedResult.titulo || contextData.titulo || contextData.title || 'Sequ√™ncia Did√°tica';
          parsedResult.disciplina = parsedResult.disciplina || contextData.disciplina || contextData.subject || 'Disciplina';
          parsedResult.tema = parsedResult.tema || contextData.tema || contextData.theme || 'Tema';
        }

        return parsedResult;
      } catch (parseError) {
        console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
        console.error('üìÑ Conte√∫do que causou erro (primeiros 1000 chars):', cleanedResponse.substring(0, 1000));

        // Tentar extrair JSON de forma mais agressiva
        try {
          // Buscar por padr√µes JSON v√°lidos
          const jsonPattern = /\{[\s\S]*\}/;
          const match = cleanedResponse.match(jsonPattern);

          if (match) {
            const extractedJson = match[0];
            console.log('üîÑ Tentando JSON extra√≠do:', extractedJson.substring(0, 200));
            const secondAttempt = JSON.parse(extractedJson);
            console.log('‚úÖ Segunda tentativa de parse bem sucedida');

            // Aplicar mesmas valida√ß√µes
            if (activityType === 'lista-exercicios') {
              if (secondAttempt.questoes && Array.isArray(secondAttempt.questoes) && secondAttempt.questoes.length > 0) {
                secondAttempt.isGeneratedByAI = true;
                secondAttempt.generatedAt = new Date().toISOString();
                return secondAttempt;
              }
            } else if (activityType === 'sequencia-didatica') {
              if (secondAttempt.aulas && Array.isArray(secondAttempt.aulas) && secondAttempt.aulas.length > 0) {
                secondAttempt.isGeneratedByAI = true;
                secondAttempt.generatedAt = new Date().toISOString();
                return secondAttempt;
              }
            }

            return secondAttempt;
          }
        } catch (secondError) {
          console.error('‚ùå Segunda tentativa de parse tamb√©m falhou:', secondError);
        }

        throw new Error(`Erro ao processar resposta da IA: ${parseError.message}`);
      }

    } else {
      console.error('‚ùå Erro na API Gemini:', response.error);
      throw new Error(response.error || 'Falha na gera√ß√£o de conte√∫do');
    }

  } catch (error) {
    console.error('‚ùå Erro cr√≠tico ao gerar conte√∫do da atividade:', error);
    throw error;
  }
};

// Fun√ß√£o auxiliar para gerar o conte√∫do da atividade de Sequ√™ncia Did√°tica
async function generateSequenciaDidaticaContent(contextData: SequenciaDidaticaPromptData): Promise<SequenciaDidaticaGeneratedContent> {
  console.log('üß¨ Iniciando gera√ß√£o de Sequ√™ncia Did√°tica com Gemini...');
  const geminiClient = new GeminiClient();

  const prompt = await sequenciaDidaticaGenerator.buildPrompt(contextData);

  console.log('üìù Prompt para Sequ√™ncia Did√°tica:', prompt.substring(0, 500) + '...');

  const response = await geminiClient.generate({
    prompt,
    temperature: 0.8,
    maxTokens: 4000,
    topP: 0.9,
    topK: 40
  });

  if (response.success) {
    console.log('‚úÖ Resposta recebida do Gemini para Sequ√™ncia Did√°tica');
    let cleanedResponse = response.result.trim();

    // Limpeza espec√≠fica para a resposta de Sequ√™ncia Did√°tica
    cleanedResponse = cleanedResponse.replace(/```json\s*/g, '').replace(/```\s*$/g, '');
    const jsonStart = cleanedResponse.indexOf('{');
    const jsonEnd = cleanedResponse.lastIndexOf('}');

    if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {
      cleanedResponse = cleanedResponse.substring(jsonStart, jsonEnd + 1);
    }

    try {
      const parsedData = JSON.parse(cleanedResponse) as SequenciaDidaticaGeneratedContent;

      // Valida√ß√£o b√°sica
      if (!parsedData.aulas || !Array.isArray(parsedData.aulas) || parsedData.aulas.length === 0) {
        throw new Error('Estrutura de aulas inv√°lida ou vazia na resposta da IA.');
      }

      parsedData.aulas.forEach((aula: any, index: number) => {
        if (!aula.titulo || !aula.tipo || !aula.objetivo || !aula.resumo) {
          console.warn(`Aula ${index + 1} na Sequ√™ncia Did√°tica est√° incompleta:`, aula);
        }
      });

      parsedData.isGeneratedByAI = true;
      parsedData.generatedAt = new Date().toISOString();

      console.log('‚úÖ Sequ√™ncia Did√°tica gerada com sucesso!');
      return parsedData;

    } catch (parseError) {
      console.error('‚ùå Erro ao parsear a resposta da Sequ√™ncia Did√°tica:', parseError);
      console.error('Conte√∫do para parse:', cleanedResponse);
      throw new Error('Falha ao processar a resposta da IA para Sequ√™ncia Did√°tica.');
    }

  } else {
    console.error('‚ùå Erro na API Gemini para Sequ√™ncia Did√°tica:', response.error);
    throw new Error(response.error || 'Falha na gera√ß√£o da Sequ√™ncia Did√°tica.');
  }
}


export async function generateActivity(formData: any): Promise<{ success: boolean; content?: string; error?: string }> {
  console.log('üéØ generateActivity: Iniciando gera√ß√£o com formData:', formData);

  let generatedContent: any;

  // L√≥gica para determinar o tipo de atividade e gerar conte√∫do espec√≠fico
  switch (formData.typeId) {
    case 'lista-exercicios':
      // L√≥gica para gerar lista de exerc√≠cios
      generatedContent = {
        titulo: formData.title || 'Lista de Exerc√≠cios',
        descricao: formData.description || 'Exerc√≠cios para praticar o conte√∫do.',
        disciplina: formData.subject || 'Matem√°tica',
        tema: formData.theme || 'T√≥pico espec√≠fico',
        numeroQuestoes: parseInt(formData.numberOfQuestions) || 5,
        nivelDificuldade: formData.difficultyLevel || 'Intermedi√°rio',
        questoes: formData.questions || [] // Assumindo que formData.questions √© um array de quest√µes
      };
      break;
    case 'prova':
      // L√≥gica para gerar prova
      generatedContent = {
        titulo: formData.title || 'Avalia√ß√£o',
        descricao: formData.description || 'Avalia√ß√£o de conhecimentos sobre o tema.',
        disciplina: formData.subject || 'Matem√°tica',
        tema: formData.theme || 'T√≥pico espec√≠fico',
        tempoLimite: formData.timeLimit || '60 minutos',
        pontuacaoTotal: parseInt(formData.totalScore) || 10,
        questoes: formData.questions || [] // Assumindo que formData.questions √© um array de quest√µes
      };
      break;
    case 'plano-aula':
      // Estrutura espec√≠fica para plano de aula com formato completo
      const objetivosList = Array.isArray(formData.objectives) ? formData.objectives :
                           formData.objectives ? formData.objectives.split('.').filter(obj => obj.trim()) :
                           ['Compreender o conceito do ' + (formData.theme || 'tema'),
                            'Identificar os principais elementos do conte√∫do',
                            'Aplicar os conhecimentos em situa√ß√µes pr√°ticas',
                            'Resolver problemas relacionados ao tema',
                            'Desenvolver o racioc√≠nio l√≥gico e a capacidade de resolu√ß√£o de problemas'];

      const materiaisList = Array.isArray(formData.materials) ? formData.materials :
                            formData.materials ? formData.materials.split(',').map(m => m.trim()) :
                            ['Quadro branco ou projetor',
                             'Marcadores ou canetas para quadro branco',
                             'Material impresso com exerc√≠cios',
                             'Calculadora (se necess√°rio)',
                             'Livro did√°tico',
                             'Notebook/tablet para apresenta√ß√£o'];

      generatedContent = {
        titulo: formData.title || 'Plano de Aula',
        descricao: formData.description || 'Descri√ß√£o do plano de aula',
        disciplina: formData.subject || 'Disciplina',
        tema: formData.theme || 'Tema da aula',
        anoEscolaridade: formData.schoolYear || 'Ano escolar',
        numeroQuestoes: parseInt(formData.numberOfQuestions) || 10,
        nivelDificuldade: formData.difficultyLevel || 'M√©dio',
        modeloQuestoes: formData.questionModel || 'M√∫ltipla escolha',
        fontes: Array.isArray(formData.sources) ? formData.sources :
               formData.sources ? formData.sources.split(',').map(s => s.trim()) :
               ['Livro did√°tico de ' + (formData.subject || 'Disciplina') + ' do ' + (formData.schoolYear || 'ano'),
                'V√≠deos explicativos sobre ' + (formData.theme || 'o tema') + ' (Khan Academy, YouTube)',
                'Sites educativos sobre ' + (formData.subject?.toLowerCase() || 'a disciplina') + ' (Brasil Escola, Mundo Educa√ß√£o)'],
        objetivos: objetivosList,
        materiais: materiaisList,
        instrucoes: formData.instructions || 'Siga as etapas do plano de aula conforme apresentado.',
        tempoLimite: formData.timeLimit || '50 minutos',
        contextoAplicacao: formData.context || 'Sala de aula regular com alunos do ' + (formData.schoolYear || 'ano especificado'),
        competencias: formData.competencies || 'Compet√™ncias gerais da BNCC aplic√°veis ao ' + (formData.subject || 'componente curricular'),
        avaliacao: formData.evaluation || 'Avalia√ß√£o formativa atrav√©s de participa√ß√£o e exerc√≠cios pr√°ticos',

        // Estrutura completa do plano de aula para preview
        visao_geral: {
          disciplina: formData.subject || 'Disciplina',
          tema: formData.theme || 'Tema da aula',
          serie: formData.schoolYear || 'Ano escolar',
          tempo: formData.timeLimit || '50 minutos',
          metodologia: formData.difficultyLevel || 'Metodologia Ativa',
          recursos: materiaisList,
          sugestao_ia: ['Plano de aula personalizado', 'Adapt√°vel ao perfil da turma']
        },
        objetivos: objetivosList.map((obj, index) => ({
          descricao: obj,
          habilidade_bncc: formData.competencies || 'Compet√™ncia BNCC relacionada',
          sugestao_reescrita: 'Sugest√£o de melhoria dispon√≠vel',
          atividade_relacionada: 'Atividade ' + (index + 1)
        })),
        metodologia: {
          nome: formData.difficultyLevel || 'Metodologia Ativa',
          descricao: formData.description || 'Metodologia baseada em participa√ß√£o ativa dos alunos',
          alternativas: ['Aula expositiva', 'Atividades pr√°ticas', 'Discuss√£o em grupo'],
          simulacao_de_aula: 'Simula√ß√£o interativa dispon√≠vel',
          explicacao_em_video: 'V√≠deo explicativo da metodologia'
        },
        desenvolvimento: [
          {
            etapa: 1,
            titulo: 'Introdu√ß√£o ao Tema',
            descricao: 'Apresenta√ß√£o do conte√∫do e contextualiza√ß√£o',
            tipo_interacao: 'Expositiva/Dialogada',
            tempo_estimado: '15 minutos',
            recurso_gerado: 'Slides introdut√≥rios',
            nota_privada_professor: 'Verificar conhecimentos pr√©vios dos alunos'
          },
          {
            etapa: 2,
            titulo: 'Desenvolvimento do Conte√∫do',
            descricao: 'Explica√ß√£o detalhada dos conceitos principais',
            tipo_interacao: 'Interativa',
            tempo_estimado: '25 minutos',
            recurso_gerado: 'Material did√°tico e exemplos',
            nota_privada_professor: 'Pausar para esclarecer d√∫vidas'
          },
          {
            etapa: 3,
            titulo: 'Aplica√ß√£o Pr√°tica',
            descricao: 'Exerc√≠cios e atividades de fixa√ß√£o',
            tipo_interacao: 'Pr√°tica',
            tempo_estimado: '10 minutos',
            recurso_gerado: 'Lista de exerc√≠cios',
            nota_privada_professor: 'Circular pela sala para auxiliar individualmente'
          }
        ],
        atividades: [
          {
            nome: 'Atividade de Fixa√ß√£o',
            tipo: 'Exerc√≠cios Pr√°ticos',
            ref_objetivos: [1, 2],
            visualizar_como_aluno: 'Exerc√≠cios interativos para consolida√ß√£o',
            sugestoes_ia: ['Adapte a dificuldade conforme o desempenho', 'Inclua exemplos contextualizados']
          }
        ],
        avaliacao: {
          criterios: formData.evaluation || 'Participa√ß√£o, compreens√£o dos conceitos, resolu√ß√£o de exerc√≠cios',
          instrumentos: ['Observa√ß√£o direta', 'Exerc√≠cios pr√°ticos', 'Participa√ß√£o oral'],
          feedback: 'Feedback imediato durante as atividades'
        },
        recursos_extras: {
          materiais_complementares: ['V√≠deos educativos', 'Jogos did√°ticos online', 'Simuladores'],
          tecnologias: ['Quadro interativo', 'Projetor', 'Computador/tablet'],
          referencias: ['Livro did√°tico adotado', 'Artigos cient√≠ficos', 'Sites educacionais']
        }
      };
      break;
    case 'sequencia-didatica':
      // L√≥gica para gerar sequ√™ncia did√°tica
      const sequenciaDidaticaContext: SequenciaDidaticaPromptData = {
        tituloTemaAssunto: formData.title || formData.theme || 'Assunto Geral',
        anoSerie: formData.schoolYear || 'Ensino Fundamental',
        disciplina: formData.subject || 'Matem√°tica',
        bnccCompetencias: formData.competencies || 'Compet√™ncias Gerais da BNCC',
        publicoAlvo: formData.targetAudience || 'Alunos do Ensino Fundamental',
        objetivosAprendizagem: Array.isArray(formData.learningObjectives) ? formData.learningObjectives.join('. ') : formData.learningObjectives || 'Compreender o tema abordado.',
        quantidadeAulas: formData.numberOfLessons || '3',
        quantidadeDiagnosticos: formData.numberOfDiagnosticLessons || '1',
        quantidadeAvaliacoes: formData.numberOfAssessmentLessons || '1',
        cronograma: formData.schedule || 'Semanal'
      };
      generatedContent = await generateSequenciaDidaticaContent(sequenciaDidaticaContext);
      break;
    default:
      // L√≥gica padr√£o para outros tipos de atividade (ou se n√£o especificado)
      generatedContent = {
        titulo: formData.title || 'Atividade Gerada',
        descricao: formData.description || 'Descri√ß√£o padr√£o da atividade.',
        disciplina: formData.subject || 'Geral',
        tema: formData.theme || 'Tema geral',
        conteudo: formData.content || 'Conte√∫do a ser definido.'
      };
      break;
  }

  // Simular gera√ß√£o da atividade usando uma fun√ß√£o auxiliar
  // O conte√∫do gerado aqui pode ser um JSON ou uma string formatada dependendo do tipo
  const formattedContent = await generateSimpleActivityContent(generatedContent);

  if (formattedContent) {
    console.log('‚úÖ Atividade gerada com sucesso');
    return {
      success: true,
      content: formattedContent
    };
  } else {
    throw new Error('Falha na gera√ß√£o do conte√∫do');
  }

}

// Fun√ß√£o auxiliar para evitar conflito de nomes e formatar o conte√∫do
async function generateSimpleActivityContent(activityData: any): Promise<string> {
  console.log('üî® Gerando conte√∫do da atividade:', activityData.titulo || activityData.title);

  // Simular delay da API
  await new Promise(resolve => setTimeout(resolve, 1000));

  // Verificar se o conte√∫do √© um objeto JSON (como plano de aula, lista de exerc√≠cios etc.)
  if (typeof activityData === 'object' && activityData !== null && !Array.isArray(activityData)) {
    // Se for um objeto JSON, serializar para string
    try {
      // Remover campos n√£o necess√°rios para a visualiza√ß√£o simples ou adaptar conforme necess√°rio
      const displayData = { ...activityData };
      delete displayData.competencias;
      delete displayData.contextoAplicacao;
      delete displayData.recursos_extras;
      delete displayData.avaliacao;
      delete displayData.atividades;
      delete displayData.metodologia;
      delete displayData.desenvolvimento;
      delete displayData.visao_geral;
      delete displayData.isGeneratedByAI;
      delete displayData.generatedAt;

      return JSON.stringify(displayData, null, 2);
    } catch (error) {
      console.error("Erro ao serializar dados da atividade para JSON:", error);
      // Fallback para um template gen√©rico se a serializa√ß√£o falhar
      return `
# ${activityData.titulo || activityData.title || 'Atividade'}

## Descri√ß√£o
${activityData.descricao || activityData.description || 'Sem descri√ß√£o'}

## Detalhes
- Disciplina: ${activityData.disciplina || 'N√£o especificada'}
- Tema: ${activityData.tema || activityData.theme || 'N√£o especificado'}
- Dura√ß√£o: ${activityData.tempoLimite || activityData.duracao || 'N√£o especificada'}

*Erro ao formatar dados detalhados.*
      `;
    }
  } else {
    // Se n√£o for um objeto JSON (ex: string simples de conte√∫do), retorna como est√°
    return activityData;
  }
}