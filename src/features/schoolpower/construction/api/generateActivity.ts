import { ActivityGenerationPayload, GeneratedActivity } from '../types/ActivityTypes';
import { generateActivityByType } from '../generationStrategies/generateActivityByType';

export const generateActivityAPI = async (payload: ActivityGenerationPayload): Promise<GeneratedActivity> => {
  // Simular delay da API
  await new Promise(resolve => setTimeout(resolve, 2000));

  try {
    // Determinar o tipo de atividade baseado no ID ou t√≠tulo
    let activityType = payload.activityType;

    if (!activityType) {
      if (payload.activityId.includes('prova') || payload.title.toLowerCase().includes('prova')) {
        activityType = 'prova';
      } else if (payload.activityId.includes('lista') || payload.title.toLowerCase().includes('lista')) {
        activityType = 'lista-exercicios';
      } else if (payload.activityId.includes('jogo') || payload.title.toLowerCase().includes('jogo')) {
        activityType = 'jogo';
      } else if (payload.activityId.includes('video') || payload.title.toLowerCase().includes('v√≠deo')) {
        activityType = 'video';
      } else {
        activityType = 'lista-exercicios'; // padr√£o
      }
    }

    // Gerar atividade usando estrat√©gias espec√≠ficas
    const result = generateActivityByType(activityType as any, payload);

    return result;
  } catch (error) {
    console.error('Erro ao gerar atividade:', error);
    throw new Error('Falha na gera√ß√£o da atividade');
  }
};

export const validateActivityData = (data: ActivityGenerationPayload): string[] => {
  const errors: string[] = [];

  if (!data.title?.trim()) {
    errors.push('T√≠tulo √© obrigat√≥rio');
  }

  if (!data.description?.trim()) {
    errors.push('Descri√ß√£o √© obrigat√≥ria');
  }

  if (!data.subject?.trim()) {
    errors.push('Disciplina deve ser selecionada');
  }

  if (!data.theme?.trim()) {
    errors.push('Tema √© obrigat√≥rio');
  }

  if (!data.schoolYear?.trim()) {
    errors.push('Ano de Escolaridade √© obrigat√≥rio');
  }

  return errors;
};
import { ActionPlanItem } from '../../actionplan/ActionPlanCard';
import { API_KEYS } from '../../../../config/apiKeys';
import { GeminiClient } from '../../../../utils/api/geminiClient';

export const generateActivityData = async (
  activity: ActionPlanItem, 
  contextualizationData?: any
): Promise<any> => {
  try {
    console.log('ü§ñ Gerando dados da atividade via IA:', activity.title);

    const prompt = buildActivityPrompt(activity, contextualizationData);

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEYS.GEMINI}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }]
      })
    });

    if (!response.ok) {
      throw new Error(`Erro na API: ${response.status}`);
    }

    const data = await response.json();
    const generatedText = data.candidates[0]?.content?.parts[0]?.text;

    if (!generatedText) {
      throw new Error('Resposta vazia da IA');
    }

    // Processar resposta e extrair dados estruturados
    const parsedData = parseActivityResponse(generatedText, activity);

    console.log('‚úÖ Dados da atividade gerados:', parsedData);
    return parsedData;

  } catch (error) {
    console.error('‚ùå Erro ao gerar dados da atividade:', error);
    return null;
  }
};

const buildActivityPrompt = (activity: ActionPlanItem, contextualizationData?: any): string => {
  const context = contextualizationData ? {
    materias: contextualizationData.materias || '',
    publicoAlvo: contextualizationData.publicoAlvo || '',
    restricoes: contextualizationData.restricoes || '',
    datasImportantes: contextualizationData.datasImportantes || '',
    observacoes: contextualizationData.observacoes || ''
  } : {};

  return `
# Gera√ß√£o de Atividade Educacional

## Contexto da Atividade:
- **T√≠tulo**: ${activity.title}
- **Descri√ß√£o**: ${activity.description}
- **Tipo**: ${activity.id}

## Contexto Educacional:
- **Mat√©rias**: ${context.materias}
- **P√∫blico-alvo**: ${context.publicoAlvo}
- **Restri√ß√µes**: ${context.restricoes}
- **Datas Importantes**: ${context.datasImportantes}
- **Observa√ß√µes**: ${context.observacoes}

## Instru√ß√µes:
Gere uma atividade educacional completa e detalhada seguindo exatamente esta estrutura JSON:

\`\`\`json
{
  "titulo": "T√≠tulo espec√≠fico e atrativo para a atividade",
  "descricao": "Descri√ß√£o detalhada do que ser√° trabalhado",
  "disciplina": "Disciplina principal",
  "dificuldade": "B√°sica/Intermedi√°ria/Avan√ßada",
  "formatoEntrega": "PDF/Word/Online/Manuscrito",
  "duracao": "Tempo estimado em minutos",
  "objetivos": "Objetivos de aprendizagem espec√≠ficos",
  "materiais": "Lista de materiais necess√°rios",
  "instrucoes": "Instru√ß√µes detalhadas para realiza√ß√£o",
  "conteudo": "Conte√∫do principal da atividade",
  "observacoes": "Observa√ß√µes importantes ou dicas"
}
\`\`\`

**IMPORTANTE**: 
- Responda APENAS com o JSON v√°lido, sem texto adicional
- Adapte todos os campos ao contexto fornecido
- Seja espec√≠fico e pr√°tico
- Garanta que a atividade seja adequada ao p√∫blico-alvo
`;
};

const parseActivityResponse = (response: string, activity: ActionPlanItem): any => {
  try {
    // Extrair JSON da resposta
    const jsonMatch = response.match(/```json\s*([\s\S]*?)\s*```/) || 
                     response.match(/\{[\s\S]*\}/);

    if (jsonMatch) {
      const jsonString = jsonMatch[1] || jsonMatch[0];
      return JSON.parse(jsonString);
    }

    // Fallback: tentar parsear a resposta inteira como JSON
    return JSON.parse(response);

  } catch (error) {
    console.warn('Erro ao parsear JSON, usando dados b√°sicos:', error);

    // Fallback com dados b√°sicos
    return {
      titulo: activity.title,
      descricao: activity.description,
      disciplina: "N√£o especificada",
      dificuldade: "Intermedi√°ria",
      formatoEntrega: "PDF",
      duracao: "45 minutos",
      objetivos: "Desenvolver conhecimentos sobre o tema proposto",
      materiais: "Material de escrita e pesquisa",
      instrucoes: "Seguir as orienta√ß√µes fornecidas",
      conteudo: response,
      observacoes: "Atividade gerada automaticamente"
    };
  }
};

export { buildActivityPrompt, parseActivityResponse };

export const generateActivityContent = async (
  activityType: string,
  contextData: any
): Promise<any> => {
  try {
    console.log('ü§ñ Iniciando gera√ß√£o de conte√∫do com Gemini para:', activityType);
    console.log('üìã Dados de contexto:', contextData);

    const geminiClient = new GeminiClient();

    // Prompt espec√≠fico para Lista de Exerc√≠cios
    let prompt = '';

    if (activityType === 'lista-exercicios') {
      // Importar o prompt espec√≠fico
      const { buildListaExerciciosPrompt } = await import('../../prompts/listaExerciciosPrompt');
      prompt = buildListaExerciciosPrompt(contextData);
    } else {
      // Prompt gen√©rico para outros tipos de atividade
      prompt = `
Crie o conte√∫do educacional para uma atividade do tipo "${activityType}" com base no seguinte contexto:

CONTEXTO:
${JSON.stringify(contextData, null, 2)}

FORMATO: Responda em JSON estruturado com todos os campos relevantes para o tipo de atividade solicitado.
REQUISITOS: Conte√∫do educativo, bem estruturado e adequado ao contexto fornecido.

Responda APENAS com o JSON, sem texto adicional.`;
    }

    console.log('üì§ Enviando prompt para Gemini...');

    const response = await geminiClient.generate({
      prompt,
      temperature: 0.7,
      maxTokens: 3000,
      topP: 0.9,
      topK: 40
    });

    if (response.success) {
      console.log('‚úÖ Resposta recebida do Gemini');
      console.log('üìä Estimativa de tokens:', response.estimatedTokens);
      console.log('üí∞ Custo estimado:', response.estimatedPowerCost);
      console.log('‚è±Ô∏è Tempo de execu√ß√£o:', response.executionTime + 'ms');

      // Limpar a resposta para garantir que seja JSON v√°lido
      let cleanedResponse = response.result.trim();

      console.log('üîß Resposta bruta da IA:', cleanedResponse);

      // Remover markdown se presente
      cleanedResponse = cleanedResponse.replace(/```json\s*/, '').replace(/```\s*$/, '');

      // Remover poss√≠veis prefixos/sufixos que n√£o sejam JSON
      const jsonStart = cleanedResponse.indexOf('{');
      const jsonEnd = cleanedResponse.lastIndexOf('}');

      if (jsonStart !== -1 && jsonEnd !== -1) {
        cleanedResponse = cleanedResponse.substring(jsonStart, jsonEnd + 1);
      }

      console.log('üîß Resposta limpa para parsing:', cleanedResponse);

      try {
        const parsedResult = JSON.parse(cleanedResponse);
        console.log('‚úÖ Resultado parseado com sucesso:', parsedResult);

        // Validar se cont√©m quest√µes
        if (activityType === 'lista-exercicios') {
          if (!parsedResult.questoes || !Array.isArray(parsedResult.questoes) || parsedResult.questoes.length === 0) {
            console.error('‚ùå IA n√£o gerou quest√µes v√°lidas');
            throw new Error('Quest√µes n√£o encontradas na resposta da IA');
          }

          console.log(`üìù ${parsedResult.questoes.length} quest√µes geradas pela IA`);

          // Marcar como gerado pela IA
          parsedResult.isGeneratedByAI = true;
          parsedResult.generatedAt = new Date().toISOString();
        }

        return parsedResult;
      } catch (parseError) {
        console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
        console.error('üìÑ Conte√∫do que causou erro:', cleanedResponse);
        throw new Error(`Erro ao processar resposta da IA: ${parseError.message}`);
      }

    } else {
      console.error('‚ùå Erro na API Gemini:', response.error);
      throw new Error(response.error || 'Falha na gera√ß√£o de conte√∫do');
    }

  } catch (error) {
    console.error('‚ùå Erro cr√≠tico ao gerar conte√∫do da atividade:', error);
    throw error;
  }
};