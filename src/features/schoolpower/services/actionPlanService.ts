
import { ContextualizationData } from '../contextualization/ContextualizationCard';

export interface ActionPlanActivity {
  id: string;
  title: string;
  description: string;
  personalizedTitle?: string;
  personalizedDescription?: string;
  approved: boolean;
}

export interface GenerateActionPlanParams {
  initialMessage: string;
  contextualizationData: ContextualizationData;
}

const GEMINI_API_KEY = 'AIzaSyD-Sso0SdyYKoA4M3tQhcWjQ1AoddB7Wo4';

export async function generateActionPlan(params: GenerateActionPlanParams): Promise<ActionPlanActivity[]> {
  const { initialMessage, contextualizationData } = params;
  
  try {
    console.log('üöÄ Iniciando gera√ß√£o de plano de a√ß√£o...');
    console.log('üìã Par√¢metros recebidos:', params);

    // Importar lista de atividades dispon√≠veis
    const activitiesModule = await import('../data/schoolPowerActivities.json');
    const schoolPowerActivities = activitiesModule.default;

    // Preparar lista de atividades dispon√≠veis para o prompt
    const availableActivities = schoolPowerActivities.map(activity => 
      `- ${activity.id}: ${activity.title} - ${activity.description}`
    ).join('\n');

    // Construir prompt ultra-detalhado para an√°lise completa
    const prompt = `Voc√™ √© uma IA especializada do School Power que deve realizar uma an√°lise PROFUNDA e COMPLETA de todos os dados fornecidos pelo usu√°rio.

=== AN√ÅLISE OBRIGAT√ìRIA DE TODOS OS DADOS ===

üéØ MENSAGEM INICIAL COMPLETA:
"${initialMessage}"

üìã DADOS COMPLETOS DO QUESTION√ÅRIO:
üìö Mat√©rias e Temas Espec√≠ficos: "${contextualizationData.subjects}"
üë• P√∫blico-Alvo Detalhado: "${contextualizationData.audience}"  
‚ö†Ô∏è Restri√ß√µes e Prefer√™ncias: "${contextualizationData.restrictions || 'Nenhuma especificada'}"
üìÖ Datas e Prazos Importantes: "${contextualizationData.dates || 'Nenhuma especificada'}"
üìù Observa√ß√µes Adicionais: "${contextualizationData.notes || 'Nenhuma especificada'}"

=== ATIVIDADES DISPON√çVEIS PARA SELE√á√ÉO ===
${availableActivities}

=== PROCESSO DE AN√ÅLISE OBRIGAT√ìRIO ===

1. üîç ANALISE PALAVRA POR PALAVRA a mensagem inicial
2. üìä CORRELACIONE todos os dados do question√°rio  
3. üéØ IDENTIFIQUE necessidades educacionais espec√≠ficas
4. üìù DETERMINE o tipo de conte√∫do mais adequado
5. üë• CONSIDERE as caracter√≠sticas do p√∫blico-alvo
6. ‚è∞ LEVE EM CONTA prazos e datas mencionadas
7. üö´ RESPEITE todas as restri√ß√µes indicadas
8. üí° INCORPORE observa√ß√µes adicionais na personaliza√ß√£o

=== CRIT√âRIOS RIGOROSOS DE SELE√á√ÉO ===
‚úÖ Compatibilidade com mat√©rias/temas mencionados
‚úÖ Adequa√ß√£o ao p√∫blico-alvo especificado
‚úÖ Resposta direta √† mensagem inicial
‚úÖ Considera√ß√£o de prazos e datas
‚úÖ Respeito √†s restri√ß√µes mencionadas  
‚úÖ Incorpora√ß√£o das observa√ß√µes adicionais
‚úÖ Variedade nos tipos de atividades (estudo, avalia√ß√£o, pr√°tica)
‚úÖ Personaliza√ß√£o baseada em TODOS os dados coletados

=== FORMATO OBRIGAT√ìRIO DE RESPOSTA ===
[
  {
    "id": "id-exato-da-atividade-dispon√≠vel",
    "personalizedTitle": "T√≠tulo altamente personalizado baseado em TODA a an√°lise",
    "personalizedDescription": "Descri√ß√£o detalhada incorporando TODOS os dados coletados"
  }
]

‚ö†Ô∏è EXEMPLO DE AN√ÅLISE COMPLETA:
Para uma solicita√ß√£o sobre "Prova de matem√°tica para 3¬∫ ano sobre fun√ß√µes quadr√°ticas" com p√∫blico "Ensino M√©dio avan√ßado", prazo "15/03", observa√ß√£o "turma com dificuldades em gr√°ficos":

[
  {
    "id": "prova-interativa", 
    "personalizedTitle": "Avalia√ß√£o de Fun√ß√µes Quadr√°ticas - 3¬∫ Ano EM - Entrega 15/03",
    "personalizedDescription": "Prova interativa focada em fun√ß√µes quadr√°ticas com √™nfase em interpreta√ß√£o de gr√°ficos, adaptada para alunos de n√≠vel avan√ßado com exerc√≠cios extras de visualiza√ß√£o para superar dificuldades identificadas."
  }
]

üö® RESPONDA APENAS COM O JSON - ZERO TEXTO ADICIONAL üö®`;

    console.log('üì§ Enviando requisi√ß√£o para Gemini API...');

    // Fazer requisi√ß√£o para API Gemini
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }]
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Erro na API Gemini: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    const generatedText = result.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!generatedText) {
      throw new Error('Nenhum conte√∫do foi gerado pela IA Gemini');
    }

    console.log('üì• Resposta bruta da IA:', generatedText);

    // Extrair JSON da resposta
    const jsonMatch = generatedText.match(/\[[\s\S]*\]/);
    if (!jsonMatch) {
      throw new Error('Formato JSON inv√°lido na resposta da IA');
    }

    const generatedActivities: Array<{
      id: string;
      personalizedTitle: string;
      personalizedDescription: string;
    }> = JSON.parse(jsonMatch[0]);

    console.log('üîç Atividades extra√≠das:', generatedActivities);

    // Validar se todas as atividades existem na lista dispon√≠vel
    const validActivities = generatedActivities.filter(activity => {
      const exists = schoolPowerActivities.some(available => available.id === activity.id);
      if (!exists) {
        console.warn(`‚ö†Ô∏è Atividade ${activity.id} n√£o encontrada na lista de atividades dispon√≠veis`);
      }
      return exists;
    });

    if (validActivities.length === 0) {
      throw new Error('Nenhuma atividade v√°lida foi gerada pela IA');
    }

    // Converter para o formato ActionPlanActivity
    const finalActivities: ActionPlanActivity[] = validActivities.map(activity => {
      const originalActivity = schoolPowerActivities.find(orig => orig.id === activity.id);
      
      return {
        id: activity.id,
        title: originalActivity?.title || 'Atividade',
        description: originalActivity?.description || 'Descri√ß√£o da atividade',
        personalizedTitle: activity.personalizedTitle,
        personalizedDescription: activity.personalizedDescription,
        approved: false
      };
    });

    console.log('‚úÖ Plano de a√ß√£o gerado com sucesso:', finalActivities);
    return finalActivities;

  } catch (error) {
    console.error('‚ùå Erro ao gerar plano de a√ß√£o:', error);
    
    // Fallback com atividades personalizadas b√°sicas
    const fallbackActivities: ActionPlanActivity[] = [
      {
        id: 'resumo-inteligente',
        title: 'Resumo Inteligente',
        description: 'Criar resumos otimizados dos conte√∫dos principais',
        personalizedTitle: `Resumo de ${contextualizationData.subjects} para ${contextualizationData.audience}`,
        personalizedDescription: `Resumo personalizado de ${contextualizationData.subjects} adaptado para ${contextualizationData.audience}`,
        approved: false
      },
      {
        id: 'lista-exercicios',
        title: 'Lista de Exerc√≠cios',
        description: 'Gerar exerc√≠cios pr√°ticos sobre o tema',
        personalizedTitle: `Exerc√≠cios de ${contextualizationData.subjects} - ${contextualizationData.audience}`,
        personalizedDescription: `Lista de exerc√≠cios pr√°ticos sobre ${contextualizationData.subjects} para ${contextualizationData.audience}`,
        approved: false
      },
      {
        id: 'prova-interativa',
        title: 'Prova Interativa',
        description: 'Criar avalia√ß√£o com corre√ß√£o autom√°tica',
        personalizedTitle: `Prova de ${contextualizationData.subjects} - ${contextualizationData.audience}`,
        personalizedDescription: `Avalia√ß√£o interativa de ${contextualizationData.subjects} adaptada para ${contextualizationData.audience}`,
        approved: false
      }
    ];

    console.log('üîÑ Retornando atividades fallback personalizadas');
    return fallbackActivities;
  }
}
