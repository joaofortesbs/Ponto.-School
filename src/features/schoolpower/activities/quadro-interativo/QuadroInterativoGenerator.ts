
import { geminiLogger } from '@/utils/geminiDebugLogger';

interface QuadroInterativoData {
  subject: string;
  schoolYear: string;
  theme: string;
  objectives: string;
  difficultyLevel: string;
  quadroInterativoCampoEspecifico: string;
}

interface QuadroInterativoContent {
  title: string;
  description: string;
  cardContent: {
    title: string;
    text: string;
  };
  cardContent2?: {
    title: string;
    text: string;
  };
  generatedAt: string;
  isGeneratedByAI: boolean;
  subject?: string;
  schoolYear?: string;
  theme?: string;
  objectives?: string;
  difficultyLevel?: string;
  quadroInterativoCampoEspecifico?: string;
  customFields?: Record<string, string>;
}

export class QuadroInterativoGenerator {
  private apiKey: string;

  constructor() {
    this.apiKey = import.meta.env.VITE_GEMINI_API_KEY || '';
  }

  async generateQuadroInterativoContent(data: QuadroInterativoData): Promise<QuadroInterativoContent> {
    console.log('üöÄ INICIANDO GERA√á√ÉO CR√çTICA DE CONTE√öDO ESPEC√çFICO VIA IA GEMINI');
    console.log('üìä DADOS DE ENTRADA PARA IA:', JSON.stringify(data, null, 2));
    
    geminiLogger.logRequest('Gerando conte√∫do ultra-espec√≠fico de Quadro Interativo', data);

    try {
      const prompt = this.buildUltraSpecificPrompt(data);
      console.log('üì§ ENVIANDO PROMPT ULTRA-ESPEC√çFICO PARA GEMINI API...');
      console.log('üéØ TEMA ESPEC√çFICO:', data.theme);
      console.log('üìö DISCIPLINA:', data.subject);

      console.log('üåê CHAMANDO API GEMINI PARA CONTE√öDO ESPEC√çFICO...');
      const response = await this.callGeminiAPI(prompt);
      console.log('üì• RESPOSTA BRUTA RECEBIDA DA API GEMINI:', JSON.stringify(response, null, 2));

      const parsedContent = this.parseGeminiResponseStrict(response);
      console.log('‚úÖ Conte√∫do ESPEC√çFICO processado pela IA:', parsedContent);

      // Valida√ß√£o CR√çTICA do conte√∫do espec√≠fico
      if (!this.validateSpecificContent(parsedContent, data.theme)) {
        console.error('‚ùå CONTE√öDO DA IA N√ÉO √â ESPEC√çFICO SUFICIENTE - REGENERANDO');
        throw new Error('Conte√∫do n√£o espec√≠fico para o tema');
      }

      const result: QuadroInterativoContent = {
        title: data.theme || 'Quadro Interativo',
        description: data.objectives || 'Atividade de quadro interativo',
        cardContent: {
          title: parsedContent.title || `Como Dominar ${data.theme}`,
          text: parsedContent.text || 'Conte√∫do espec√≠fico gerado pela IA Gemini.'
        },
        cardContent2: parsedContent.advancedText ? {
          title: `${parsedContent.title} - N√≠vel Avan√ßado`,
          text: parsedContent.advancedText
        } : undefined,
        generatedAt: new Date().toISOString(),
        isGeneratedByAI: true,
        // Campos originais preservados
        subject: data.subject,
        schoolYear: data.schoolYear,
        theme: data.theme,
        objectives: data.objectives,
        difficultyLevel: data.difficultyLevel,
        quadroInterativoCampoEspecifico: data.quadroInterativoCampoEspecifico,
        // Campos customizados CR√çTICOS
        customFields: {
          'Disciplina / √Årea de conhecimento': data.subject,
          'Ano / S√©rie': data.schoolYear,
          'Tema ou Assunto da aula': data.theme,
          'Objetivo de aprendizagem da aula': data.objectives,
          'N√≠vel de Dificuldade': data.difficultyLevel,
          'Atividade mostrada': data.quadroInterativoCampoEspecifico,
          'isAIGenerated': 'true',
          'aiGeneratedTitle': parsedContent.title,
          'aiGeneratedText': parsedContent.text,
          'aiGeneratedAdvancedText': parsedContent.advancedText || '',
          'aiContentSource': 'gemini-api',
          'aiSourceTimestamp': new Date().toISOString(),
          'generatedContent': JSON.stringify({
            cardContent: {
              title: parsedContent.title,
              text: parsedContent.text
            },
            cardContent2: parsedContent.advancedText ? {
              title: `${parsedContent.title} - N√≠vel Avan√ßado`,
              text: parsedContent.advancedText
            } : undefined,
            generatedAt: new Date().toISOString(),
            apiSuccess: true,
            sourceType: 'gemini-api-real'
          })
        }
      };

      // VERIFICA√á√ÉO FINAL CR√çTICA
      console.log('üî• CONTE√öDO ESPEC√çFICO FINAL GERADO PELA IA GEMINI:', {
        tema: data.theme,
        tituloGerado: parsedContent.title,
        textoPreview: parsedContent.text.substring(0, 150) + '...',
        temaTituloCont√©m: parsedContent.title?.toLowerCase().includes(data.theme.toLowerCase()),
        temaTextoCont√©m: parsedContent.text?.toLowerCase().includes(data.theme.toLowerCase()),
        tamanhoTexto: parsedContent.text.length,
        isSpecific: this.validateSpecificContent(parsedContent, data.theme)
      });

      geminiLogger.logResponse(result, Date.now());
      console.log('‚úÖ RESULTADO FINAL ESPEC√çFICO ENVIADO PARA O PREVIEW:', result);
      return result;

    } catch (error) {
      console.error('‚ùå ERRO na gera√ß√£o do conte√∫do espec√≠fico:', error);
      geminiLogger.logError(error as Error, { data });

      // Fallback com conte√∫do ESPEC√çFICO para o tema
      const specificFallback = this.generateSpecificFallback(data);
      console.log('‚ö†Ô∏è Usando fallback espec√≠fico para o tema:', specificFallback);
      return specificFallback;
    }
  }

  private buildUltraSpecificPrompt(data: QuadroInterativoData): string {
    return `VOC√ä √â UM PROFESSOR ESPECIALISTA BRASILEIRO EM ${data.subject}. CRIE CONTE√öDO EDUCATIVO ULTRA-ESPEC√çFICO E PERSONALIZADO PARA O TEMA "${data.theme}".

üìö CONTEXTO EDUCACIONAL OBRIGAT√ìRIO:
- Disciplina: ${data.subject}
- Ano/S√©rie: ${data.schoolYear}
- Tema ESPEC√çFICO: ${data.theme}
- Objetivos: ${data.objectives}
- N√≠vel: ${data.difficultyLevel}
- Atividade Alvo: ${data.quadroInterativoCampoEspecifico}

üéØ MISS√ÉO ULTRA-ESPEC√çFICA:
Criar conte√∫do educativo EXTREMAMENTE DETALHADO e PERSONALIZADO para "${data.theme}" que ser√° exibido em um quadro interativo para alunos de ${data.schoolYear} estudando ${data.subject}.

‚ö†Ô∏è REGRAS CR√çTICAS OBRIGAT√ìRIAS:
1. SEMPRE mencione "${data.theme}" literalmente no texto (m√≠nimo 8 vezes)
2. NUNCA use termos gen√©ricos como "este tema", "este conte√∫do", "dominar isso"
3. SEMPRE forne√ßa exemplos REAIS e ESPEC√çFICOS de "${data.theme}"
4. SEMPRE inclua 4-6 passos NUMERADOS e PR√ÅTICOS espec√≠ficos para "${data.theme}"
5. SEMPRE use linguagem direta ao aluno ("Para voc√™ entender ${data.theme}...")
6. SEMPRE inclua macetes, dicas e alertas exclusivos para "${data.theme}"
7. SEMPRE contextualizar especificamente para ${data.schoolYear} em ${data.subject}
8. SEMPRE usar exemplos pr√°ticos onde "${data.theme}" aparece na vida real
9. CONTE√öDO DEVE SER 100% ESPEC√çFICO PARA "${data.theme}" - ZERO GENERICIDADE

üìã FORMATO JSON OBRIGAT√ìRIO - RESPONDA EXATAMENTE ASSIM:
{
  "title": "Como Dominar ${data.theme} - Guia Espec√≠fico para ${data.schoolYear}",
  "text": "Para voc√™ dominar ${data.theme} em ${data.subject} (${data.schoolYear}): 1) [passo espec√≠fico para ${data.theme}] 2) [segundo passo pr√°tico para ${data.theme}] 3) [terceiro passo espec√≠fico para ${data.theme}] 4) [quarto passo avan√ßado para ${data.theme}] 5) [quinto passo aplicado de ${data.theme}]. Exemplo pr√°tico real: [situa√ß√£o espec√≠fica onde ${data.theme} √© usado]. Macete especial para ${data.theme}: [dica espec√≠fica e exclusiva]. Cuidado comum com ${data.theme}: [erro espec√≠fico que estudantes cometem]. Aplica√ß√£o de ${data.theme}: [como ${data.theme} √© usado profissionalmente]. Dica final: ${data.theme} √© fundamental em ${data.subject} porque [raz√£o espec√≠fica para ${data.schoolYear}].",
  "advancedText": "Dominando ${data.theme} no n√≠vel avan√ßado para ${data.schoolYear}: [t√©cnica espec√≠fica avan√ßada de ${data.theme}]. Para casos complexos de ${data.theme}: [estrat√©gia avan√ßada espec√≠fica]. Exerc√≠cio desafiador de ${data.theme}: [problema espec√≠fico com solu√ß√£o detalhada]. Segredo profissional para ${data.theme}: [dica de especialista espec√≠fica]. Conex√£o avan√ßada: como ${data.theme} se conecta com [outros temas espec√≠ficos de ${data.subject}]. Aplica√ß√£o real avan√ßada de ${data.theme}: [exemplo profissional ou acad√™mico espec√≠fico]. Truque de especialista em ${data.theme}: [t√©cnica avan√ßada espec√≠fica]."
}

üåü EXEMPLO DE QUALIDADE ESPEC√çFICA PARA "Teorema de Pit√°goras":
{
  "title": "Como Aplicar o Teorema de Pit√°goras - Guia Espec√≠fico",
  "text": "Para voc√™ dominar Teorema de Pit√°goras em Matem√°tica (9¬∫ Ano): 1) Identifique o tri√¢ngulo ret√¢ngulo no problema - procure pelo √¢ngulo de 90¬∞. 2) Localize a hipotenusa do Teorema de Pit√°goras - √© sempre o lado oposto ao √¢ngulo reto. 3) Aplique a f√≥rmula do Teorema de Pit√°goras: a¬≤ + b¬≤ = c¬≤. 4) Substitua os valores conhecidos na equa√ß√£o do Teorema de Pit√°goras. 5) Resolva a equa√ß√£o para encontrar o lado desconhecido usando Teorema de Pit√°goras. Exemplo pr√°tico real: calcular a diagonal de uma TV 32 polegadas usando Teorema de Pit√°goras (a¬≤ + b¬≤ = 32¬≤). Macete especial para Teorema de Pit√°goras: a hipotenusa √© sempre o maior lado! Cuidado comum com Teorema de Pit√°goras: s√≥ funciona em tri√¢ngulos ret√¢ngulos. Aplica√ß√£o de Teorema de Pit√°goras: engenheiros usam para calcular dist√¢ncias. Dica final: Teorema de Pit√°goras √© a base da trigonometria em Matem√°tica.",
  "advancedText": "Dominando Teorema de Pit√°goras no n√≠vel avan√ßado para 9¬∫ Ano: use Teorema de Pit√°goras para calcular dist√¢ncias no plano cartesiano. Para casos complexos de Teorema de Pit√°goras: aplique em pir√¢mides e s√≥lidos geom√©tricos. Exerc√≠cio desafiador de Teorema de Pit√°goras: calcule a altura de um pr√©dio usando sombra e Teorema de Pit√°goras. Segredo profissional para Teorema de Pit√°goras: aparece em f√≠sica para calcular velocidades resultantes. Conex√£o avan√ßada: Teorema de Pit√°goras se conecta com lei dos cossenos e fun√ß√µes trigonom√©tricas. Aplica√ß√£o real avan√ßada de Teorema de Pit√°goras: GPS usa para triangula√ß√£o de posi√ß√£o. Truque de especialista em Teorema de Pit√°goras: memorize ternas pitag√≥ricas (3,4,5), (5,12,13)."
}

AGORA GERE CONTE√öDO ULTRA-ESPEC√çFICO PARA "${data.theme}" EM ${data.subject}:`;
  }

  private async callGeminiAPI(prompt: string): Promise<any> {
    if (!this.apiKey) {
      throw new Error('API Key do Gemini n√£o configurada');
    }

    const startTime = Date.now();

    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.2, // Reduzido para m√°xima especificidade
            topK: 10,
            topP: 0.7,
            maxOutputTokens: 3000, // Aumentado para conte√∫do mais detalhado
          }
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erro HTTP da API Gemini:', response.status, errorText);
        throw new Error(`Erro na API Gemini: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      const executionTime = Date.now() - startTime;

      console.log('üìä Tempo de execu√ß√£o da API:', executionTime + 'ms');
      console.log('üì• Resposta completa da API Gemini:', JSON.stringify(data, null, 2));
      
      const generatedText = data?.candidates?.[0]?.content?.parts?.[0]?.text || '';
      console.log('üìÑ Texto extra√≠do da resposta:', generatedText);
      
      geminiLogger.logResponse(data, executionTime);

      return generatedText;

    } catch (error) {
      console.error('‚ùå Erro na chamada da API Gemini:', error);
      geminiLogger.logError(error as Error, { prompt: prompt.substring(0, 200) });
      throw error;
    }
  }

  private parseGeminiResponseStrict(response: any): { title: string; text: string; advancedText?: string } {
    console.log('üîÑ Fazendo parse RIGOROSO da resposta do Gemini...');
    console.log('üìÑ Resposta COMPLETA recebida:', response);

    try {
      let cleanedResponse = response.trim();

      // Limpar markdown de forma mais rigorosa
      if (cleanedResponse.includes('```json')) {
        const jsonMatch = cleanedResponse.match(/```json\s*([\s\S]*?)\s*```/);
        if (jsonMatch) {
          cleanedResponse = jsonMatch[1].trim();
        }
      } else if (cleanedResponse.includes('```')) {
        cleanedResponse = cleanedResponse.replace(/```[^{]*/, '').replace(/```$/, '').trim();
      }

      // Buscar JSON na resposta com valida√ß√£o mais rigorosa
      const jsonStart = cleanedResponse.indexOf('{');
      const jsonEnd = cleanedResponse.lastIndexOf('}') + 1;

      if (jsonStart === -1 || jsonEnd === 0 || jsonEnd <= jsonStart) {
        console.error('‚ùå JSON n√£o encontrado ou malformado na resposta');
        throw new Error('JSON n√£o encontrado na resposta');
      }

      const jsonString = cleanedResponse.substring(jsonStart, jsonEnd);
      console.log('üîÑ JSON EXTRA√çDO PARA PARSE:', jsonString);

      const parsedContent = JSON.parse(jsonString);
      console.log('‚úÖ CONTE√öDO PARSEADO COM SUCESSO:', parsedContent);

      // Valida√ß√£o rigorosa da estrutura
      if (!parsedContent.title || !parsedContent.text) {
        throw new Error('Campos obrigat√≥rios title ou text n√£o encontrados');
      }

      if (parsedContent.text.length < 100) {
        throw new Error('Texto muito curto - n√£o espec√≠fico suficiente');
      }

      const result = {
        title: String(parsedContent.title).trim(),
        text: String(parsedContent.text).trim(),
        advancedText: parsedContent.advancedText ? String(parsedContent.advancedText).trim() : undefined
      };

      console.log('üéØ RESULTADO FINAL PARSEADO:', result);
      return result;

    } catch (error) {
      console.error('‚ùå Erro CR√çTICO ao fazer parse da resposta:', error);
      console.log('üìÑ Resposta problem√°tica completa:', response);

      throw new Error(`Erro no parse da resposta da IA: ${error.message}`);
    }
  }

  private validateSpecificContent(content: { title: string; text: string }, theme: string): boolean {
    console.log('üîç Validando especificidade do conte√∫do para tema:', theme);

    const themeLower = theme.toLowerCase();
    const titleLower = content.title.toLowerCase();
    const textLower = content.text.toLowerCase();

    // Crit√©rios de valida√ß√£o rigorosos
    const criteria = {
      themeInTitle: titleLower.includes(themeLower),
      themeInText: textLower.includes(themeLower),
      sufficientLength: content.text.length > 200,
      notGeneric: !textLower.includes('este tema') && !textLower.includes('este conte√∫do'),
      hasSteps: /\d+\)\s/.test(content.text), // Verifica se tem passos numerados
      hasExamples: textLower.includes('exemplo'),
      hasTips: textLower.includes('dica') || textLower.includes('macete')
    };

    const validationScore = Object.values(criteria).filter(Boolean).length;
    const isValid = validationScore >= 6; // Pelo menos 6 de 7 crit√©rios

    console.log('üìä Resultado da valida√ß√£o:', {
      tema: theme,
      crit√©rios: criteria,
      pontua√ß√£o: `${validationScore}/7`,
      v√°lido: isValid
    });

    return isValid;
  }

  private generateSpecificFallback(data: QuadroInterativoData): QuadroInterativoContent {
    console.log('‚ö†Ô∏è GERANDO FALLBACK ESPEC√çFICO PARA:', data.theme);
    
    const theme = data.theme || 'este conte√∫do';

    // T√≠tulo ultra-espec√≠fico baseado no tema
    const specificTitle = `Como Dominar ${theme} - Guia Pr√°tico para ${data.schoolYear}`;

    // Texto ultra-espec√≠fico com detalhes reais
    const specificText = `Para voc√™ dominar ${theme} em ${data.subject} (${data.schoolYear}): 1) Identifique as caracter√≠sticas espec√≠ficas de ${theme} - procure pelos elementos √∫nicos que definem ${theme}. 2) Pratique com exemplos reais de ${theme} - use situa√ß√µes do cotidiano onde ${theme} aparece. 3) Aplique t√©cnicas espec√≠ficas para ${theme} - desenvolva estrat√©gias exclusivas para este conceito. 4) Teste seu conhecimento de ${theme} com exerc√≠cios progressivos. 5) Revise os pontos principais de ${theme} regularmente. Exemplo pr√°tico: ${theme} √© usado quando voc√™ precisa resolver problemas espec√≠ficos da √°rea. Macete especial: para lembrar de ${theme}, associe com conceitos que voc√™ j√° domina. Cuidado: o erro mais comum em ${theme} √© confundir com temas similares. Aplica√ß√£o: profissionais usam ${theme} para resolver problemas reais. Dica final: ${theme} √© essencial em ${data.subject} porque conecta com outros conceitos importantes!`;

    const advancedText = `Dominando ${theme} no n√≠vel avan√ßado para ${data.schoolYear}: explore as aplica√ß√µes complexas de ${theme} em situa√ß√µes desafiadoras. Para casos dif√≠ceis de ${theme}: use a abordagem sistem√°tica dividindo o problema em partes menores. Exerc√≠cio avan√ßado de ${theme}: resolva problemas que combinam ${theme} com outros conceitos de ${data.subject}. Segredo profissional para ${theme}: a chave est√° em entender a l√≥gica por tr√°s, n√£o apenas memorizar. Conex√£o avan√ßada: ${theme} se relaciona diretamente com conceitos espec√≠ficos de ${data.subject}. Aplica√ß√£o real: profissionais de ${data.subject} usam ${theme} para resolver problemas complexos. Truque de especialista: pratique ${theme} com varia√ß√µes crescentes de dificuldade!`;

    return {
      title: data.theme || 'Conte√∫do Educativo',
      description: data.objectives || 'Atividade educativa interativa',
      cardContent: {
        title: specificTitle,
        text: specificText
      },
      cardContent2: {
        title: `${specificTitle} - N√≠vel Avan√ßado`,
        text: advancedText
      },
      generatedAt: new Date().toISOString(),
      isGeneratedByAI: false,
      subject: data.subject,
      schoolYear: data.schoolYear,
      theme: data.theme,
      objectives: data.objectives,
      difficultyLevel: data.difficultyLevel,
      quadroInterativoCampoEspecifico: data.quadroInterativoCampoEspecifico,
      customFields: {
        'Disciplina / √Årea de conhecimento': data.subject,
        'Ano / S√©rie': data.schoolYear,
        'Tema ou Assunto da aula': data.theme,
        'Objetivo de aprendizagem da aula': data.objectives,
        'N√≠vel de Dificuldade': data.difficultyLevel,
        'Atividade mostrada': data.quadroInterativoCampoEspecifico,
        'isAIGenerated': 'false',
        'fallbackReason': 'API error - specific fallback applied',
        'fallbackApplied': 'true'
      }
    };
  }
}

export default QuadroInterativoGenerator;
