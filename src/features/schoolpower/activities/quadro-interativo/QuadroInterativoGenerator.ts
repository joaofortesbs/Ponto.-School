
import { API_KEYS, API_URLS } from '@/config/apiKeys';

const GEMINI_API_KEY = API_KEYS.GEMINI;
const GEMINI_API_URL = API_URLS.GEMINI;

interface QuadroInterativoParams {
  titulo: string;
  descricao: string;
  materia: string;
  tema: string;
  anoEscolar: string;
  numeroQuestoes: number;
  nivelDificuldade: string;
  modalidadeQuestao: string;
  campoEspecifico: string;
}

interface QuadroInterativoContent {
  title: string;
  description: string;
  subject: string;
  theme: string;
  schoolYear: string;
  numberOfQuestions: number;
  difficultyLevel: string;
  questionModel: string;
  slides: Array<{
    title: string;
    content: string;
    interactiveElements?: string[];
    questions?: Array<{
      question: string;
      options?: string[];
      correctAnswer?: string;
      explanation?: string;
    }>;
  }>;
  resources: string[];
  objectives: string[];
  methodology: string;
  evaluation: string;
}

export async function generateQuadroInterativoContent(params: QuadroInterativoParams): Promise<QuadroInterativoContent> {
  console.log('üéØ Iniciando gera√ß√£o de Quadro Interativo:', params);

  if (!GEMINI_API_KEY) {
    console.error('‚ùå Chave da API Gemini n√£o configurada');
    throw new Error('Chave da API Gemini n√£o configurada');
  }

  const prompt = buildQuadroInterativoPrompt(params);
  
  try {
    console.log('üì° Enviando requisi√ß√£o para Gemini API...');
    
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 4096,
        }
      })
    });

    if (!response.ok) {
      console.error('‚ùå Erro na resposta da API:', response.status, response.statusText);
      throw new Error(`Erro na API: ${response.status}`);
    }

    const data = await response.json();
    console.log('üì¶ Resposta recebida da API:', data);

    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      console.error('‚ùå Resposta da API inv√°lida:', data);
      throw new Error('Resposta da API inv√°lida');
    }

    const generatedText = data.candidates[0].content.parts[0].text;
    console.log('üìù Texto gerado:', generatedText);

    const parsedContent = parseGeminiResponse(generatedText);
    console.log('‚úÖ Conte√∫do parseado com sucesso:', parsedContent);

    return parsedContent;
  } catch (error) {
    console.error('‚ùå Erro ao gerar conte√∫do:', error);
    throw error;
  }
}

function buildQuadroInterativoPrompt(params: QuadroInterativoParams): string {
  return `
Voc√™ √© um especialista em educa√ß√£o e tecnologia educacional. Crie um quadro interativo completo e detalhado com base nas seguintes especifica√ß√µes:

**INFORMA√á√ïES B√ÅSICAS:**
- T√≠tulo: ${params.titulo}
- Descri√ß√£o: ${params.descricao}
- Mat√©ria: ${params.materia}
- Tema: ${params.tema}
- Ano Escolar: ${params.anoEscolar}
- N√∫mero de Quest√µes: ${params.numeroQuestoes}
- N√≠vel de Dificuldade: ${params.nivelDificuldade}
- Modalidade das Quest√µes: ${params.modalidadeQuestao}
- Campo Espec√≠fico: ${params.campoEspecifico}

**INSTRU√á√ïES:**
1. Crie uma apresenta√ß√£o interativa sobre o tema "${params.tema}" na mat√©ria "${params.materia}"
2. Desenvolva slides educativos adequados para ${params.anoEscolar}
3. Inclua elementos interativos e atividades pr√°ticas
4. Adapte o conte√∫do ao n√≠vel de dificuldade "${params.nivelDificuldade}"
5. Crie ${params.numeroQuestoes} quest√µes no formato "${params.modalidadeQuestao}"

**FORMATO DE RESPOSTA (JSON OBRIGAT√ìRIO):**
{
  "title": "${params.titulo}",
  "description": "Descri√ß√£o detalhada da apresenta√ß√£o interativa",
  "subject": "${params.materia}",
  "theme": "${params.tema}",
  "schoolYear": "${params.anoEscolar}",
  "numberOfQuestions": ${params.numeroQuestoes},
  "difficultyLevel": "${params.nivelDificuldade}",
  "questionModel": "${params.modalidadeQuestao}",
  "slides": [
    {
      "title": "T√≠tulo do Slide 1",
      "content": "Conte√∫do detalhado do slide com explica√ß√µes e conceitos",
      "interactiveElements": ["Lista de elementos interativos"],
      "questions": [
        {
          "question": "Pergunta relacionada ao conte√∫do",
          "options": ["Op√ß√£o A", "Op√ß√£o B", "Op√ß√£o C", "Op√ß√£o D"],
          "correctAnswer": "Op√ß√£o correta",
          "explanation": "Explica√ß√£o da resposta"
        }
      ]
    }
  ],
  "resources": ["Lista de recursos visuais e materiais necess√°rios"],
  "objectives": ["Lista de objetivos de aprendizagem"],
  "methodology": "Metodologia pedag√≥gica utilizada",
  "evaluation": "Crit√©rios e m√©todos de avalia√ß√£o"
}

**REQUISITOS ESPEC√çFICOS:**
- Crie pelo menos 5 slides informativos
- Cada slide deve ter conte√∫do educativo relevante
- Inclua quest√µes interativas distribu√≠das pelos slides
- Use linguagem adequada para ${params.anoEscolar}
- Foque no campo espec√≠fico: ${params.campoEspecifico}
- Garanta que o n√≠vel de dificuldade seja "${params.nivelDificuldade}"

Responda APENAS com o JSON v√°lido, sem markdown ou formata√ß√£o adicional.
`;
}

function parseGeminiResponse(responseText: string): QuadroInterativoContent {
  console.log('üîç Processando resposta da Gemini...');
  
  try {
    // Limpar a resposta removendo markdown e caracteres indesejados
    let cleanedText = responseText.trim();
    
    // Remover blocos de c√≥digo markdown se existirem
    cleanedText = cleanedText.replace(/```json\n?/g, '').replace(/```\n?/g, '');
    
    // Remover quebras de linha extras
    cleanedText = cleanedText.trim();
    
    console.log('üßπ Texto limpo:', cleanedText);
    
    // Tentar fazer o parse do JSON
    const parsedContent: QuadroInterativoContent = JSON.parse(cleanedText);
    
    // Validar estrutura m√≠nima
    if (!parsedContent.title || !parsedContent.description || !parsedContent.slides) {
      throw new Error('Estrutura JSON inv√°lida');
    }
    
    console.log('‚úÖ Conte√∫do parseado com sucesso:', parsedContent);
    return parsedContent;
    
  } catch (error) {
    console.error('‚ùå Erro ao processar resposta:', error);
    console.error('üìù Texto original:', responseText);
    
    // Retornar conte√∫do padr√£o em caso de erro
    return createFallbackContent(responseText);
  }
}

function createFallbackContent(originalText: string): QuadroInterativoContent {
  console.log('üîÑ Criando conte√∫do de fallback...');
  
  return {
    title: "Quadro Interativo: Relevo e Forma√ß√£o de Montanhas",
    description: "Apresenta√ß√£o interativa sobre os diferentes tipos de relevo e os processos de forma√ß√£o de montanhas, utilizando recursos visuais e atividades pr√°ticas.",
    subject: "Geografia",
    theme: "Relevo e Forma√ß√£o de Montanhas",
    schoolYear: "6¬∫ ano",
    numberOfQuestions: 10,
    difficultyLevel: "M√©dio",
    questionModel: "M√∫ltipla escolha",
    slides: [
      {
        title: "Introdu√ß√£o ao Relevo Terrestre",
        content: "O relevo terrestre √© formado por diferentes tipos de eleva√ß√µes e depress√µes na superf√≠cie da Terra. Vamos explorar como as montanhas se formam e os diferentes tipos de relevo existentes.",
        interactiveElements: ["Mapa interativo", "Imagens 3D", "Anima√ß√µes"],
        questions: [
          {
            question: "O que √© relevo terrestre?",
            options: [
              "Apenas as montanhas da Terra",
              "As diferentes eleva√ß√µes e depress√µes da superf√≠cie terrestre",
              "Somente os oceanos",
              "As nuvens no c√©u"
            ],
            correctAnswer: "As diferentes eleva√ß√µes e depress√µes da superf√≠cie terrestre",
            explanation: "O relevo terrestre compreende todas as formas da superf√≠cie da Terra, incluindo montanhas, plan√≠cies, planaltos e depress√µes."
          }
        ]
      },
      {
        title: "Tipos de Relevo",
        content: "Existem quatro principais tipos de relevo: montanhas, planaltos, plan√≠cies e depress√µes. Cada um tem caracter√≠sticas espec√≠ficas e se forma de maneiras diferentes.",
        interactiveElements: ["Diagrama interativo", "Compara√ß√£o visual"],
        questions: [
          {
            question: "Quantos s√£o os principais tipos de relevo?",
            options: ["2", "3", "4", "5"],
            correctAnswer: "4",
            explanation: "Os quatro principais tipos de relevo s√£o: montanhas, planaltos, plan√≠cies e depress√µes."
          }
        ]
      }
    ],
    resources: [
      "Mapas topogr√°ficos",
      "Imagens de sat√©lite",
      "Modelos 3D de montanhas",
      "V√≠deos educativos",
      "Material para maquete"
    ],
    objectives: [
      "Identificar os diferentes tipos de relevo",
      "Compreender os processos de forma√ß√£o de montanhas",
      "Reconhecer a import√¢ncia do relevo para a vida humana",
      "Desenvolver habilidades de observa√ß√£o e an√°lise"
    ],
    methodology: "Metodologia ativa com uso de recursos visuais, atividades pr√°ticas e tecnologia educacional para facilitar o aprendizado interativo.",
    evaluation: "Avalia√ß√£o cont√≠nua atrav√©s de quest√µes interativas, participa√ß√£o nas atividades e projeto final de cria√ß√£o de maquete."
  };
}
