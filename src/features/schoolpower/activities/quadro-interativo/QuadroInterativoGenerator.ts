import { geminiLogger } from '@/utils/geminiDebugLogger';

interface QuadroInterativoData {
  subject: string;
  schoolYear: string;
  theme: string;
  objectives: string;
  difficultyLevel: string;
  quadroInterativoCampoEspecifico: string;
}

interface QuadroInterativoContent {
  title: string;
  description: string;
  cardContent: {
    title: string;
    text: string;
  };
  cardContent2?: {
    title: string;
    text: string;
  };
  generatedAt: string;
  isGeneratedByAI: boolean;
  subject?: string;
  schoolYear?: string;
  theme?: string;
  objectives?: string;
  difficultyLevel?: string;
  quadroInterativoCampoEspecifico?: string;
  customFields?: Record<string, string>;
}

export class QuadroInterativoGenerator {
  private apiKey: string;

  constructor() {
    this.apiKey = import.meta.env.VITE_GEMINI_API_KEY || '';
  }

  async generateQuadroInterativoContent(data: QuadroInterativoData): Promise<QuadroInterativoContent> {
    geminiLogger.logRequest('Gerando conte√∫do espec√≠fico de Quadro Interativo', data);

    try {
      const prompt = this.buildEnhancedPrompt(data);
      console.log('üì§ Enviando prompt para Gemini (tema:', data.theme, ')');
      console.log('üìù Prompt preview:', prompt.substring(0, 300) + '...');

      const response = await this.callGeminiAPI(prompt);
      console.log('üì• Resposta bruta recebida do Gemini:', JSON.stringify(response, null, 2));

      const parsedContent = this.parseGeminiResponse(response);
      console.log('‚úÖ Conte√∫do FINAL processado pela IA:', parsedContent);
      console.log('üìä Tamanhos - T√≠tulo:', parsedContent.title?.length, 'Texto:', parsedContent.text?.length, 'Avan√ßado:', parsedContent.advancedText?.length);

      const result: QuadroInterativoContent = {
        title: data.theme || 'Quadro Interativo',
        description: data.objectives || 'Atividade de quadro interativo',
        cardContent: {
          title: parsedContent.title || data.theme || 'Conte√∫do do Quadro',
          text: parsedContent.text || 'Conte√∫do educativo espec√≠fico gerado pela IA.'
        },
        cardContent2: parsedContent.advancedText ? {
          title: `${parsedContent.title} - N√≠vel Avan√ßado`,
          text: parsedContent.advancedText
        } : undefined,
        generatedAt: new Date().toISOString(),
        isGeneratedByAI: true,
        // Campos originais para compatibilidade
        subject: data.subject,
        schoolYear: data.schoolYear,
        theme: data.theme,
        objectives: data.objectives,
        difficultyLevel: data.difficultyLevel,
        quadroInterativoCampoEspecifico: data.quadroInterativoCampoEspecifico,
        // Campos customizados espec√≠ficos
        customFields: {
          'Disciplina / √Årea de conhecimento': data.subject,
          'Ano / S√©rie': data.schoolYear,
          'Tema ou Assunto da aula': data.theme,
          'Objetivo de aprendizagem da aula': data.objectives,
          'N√≠vel de Dificuldade': data.difficultyLevel,
          'Atividade mostrada': data.quadroInterativoCampoEspecifico,
          'isAIGenerated': 'true',
          'generatedContent': JSON.stringify({
            cardContent: {
              title: parsedContent.title,
              text: parsedContent.text
            },
            cardContent2: parsedContent.advancedText ? {
              title: `${parsedContent.title} - N√≠vel Avan√ßado`,
              text: parsedContent.advancedText
            } : undefined,
            generatedAt: new Date().toISOString()
          })
        }
      };

      // DEBUG INTENSIVO - VERIFICAR CONTE√öDO FINAL
      console.log('üî• CONTE√öDO ESPEC√çFICO GERADO PELA IA GEMINI:', {
        tema: data.theme,
        tituloGerado: parsedContent.title,
        textoGerado: parsedContent.text.substring(0, 100) + '...',
        temaTituloCont√©m: parsedContent.title?.toLowerCase().includes(data.theme.toLowerCase()),
        temaTextoCont√©m: parsedContent.text?.toLowerCase().includes(data.theme.toLowerCase()),
        tamanhoTexto: parsedContent.text.length,
        cardContentFinal: result.cardContent
      });

      geminiLogger.logResponse(result, Date.now());
      console.log('‚úÖ RESULTADO FINAL ENVIADO PARA O PREVIEW:', result);
      return result;

    } catch (error) {
      console.error('‚ùå ERRO na gera√ß√£o do conte√∫do:', error);
      geminiLogger.logError(error as Error, { data });

      // Se falhar, ainda tenta retornar algo espec√≠fico baseado no tema
      const specificFallback = this.generateSpecificFallback(data);
      console.log('‚ö†Ô∏è Usando fallback espec√≠fico para o tema:', specificFallback);
      return specificFallback;
    }
  }

  private buildEnhancedPrompt(data: QuadroInterativoData): string {
    return `VOC√ä √â UM PROFESSOR ESPECIALISTA BRASILEIRO EM ${data.subject}. CRIE CONTE√öDO EDUCATIVO ULTRA-ESPEC√çFICO E PR√ÅTICO PARA O TEMA "${data.theme}".

üìö CONTEXTO EDUCACIONAL:
- Disciplina: ${data.subject}
- Ano/S√©rie: ${data.schoolYear}
- Tema ESPEC√çFICO: ${data.theme}
- Objetivos: ${data.objectives}
- N√≠vel: ${data.difficultyLevel}
- Atividade Alvo: ${data.quadroInterativoCampoEspecifico}

üéØ MISS√ÉO CR√çTICA:
Gerar conte√∫do educativo EXTREMAMENTE ESPEC√çFICO para "${data.theme}" que ser√° usado em quadro interativo para alunos de ${data.schoolYear} em ${data.subject}.

‚ö†Ô∏è REGRAS OBRIGAT√ìRIAS:
1. SEMPRE mencione "${data.theme}" pelo nome no conte√∫do (m√≠nimo 3 vezes)
2. NUNCA use frases gen√©ricas como "dominar este conte√∫do" ou "este tema"
3. SEMPRE forne√ßa exemplos CONCRETOS espec√≠ficos de ${data.theme}
4. SEMPRE inclua passos NUMERADOS e PR√ÅTICOS
5. SEMPRE use linguagem direta ao aluno ("Para voc√™...")
6. SEMPRE inclua dicas, macetes e alertas espec√≠ficos
7. SEMPRE contextualizar para ${data.schoolYear} de ${data.subject}

üìã ESTRUTURA OBRIGAT√ìRIA - RESPONDA APENAS COM JSON V√ÅLIDO:
{
  "title": "Como [a√ß√£o espec√≠fica] ${data.theme}",
  "text": "Para voc√™ [objetivo espec√≠fico com ${data.theme}]: 1) [passo pr√°tico espec√≠fico do ${data.theme}], 2) [segundo passo espec√≠fico], 3) [terceiro passo espec√≠fico]. Exemplo real: [situa√ß√£o concreta onde ${data.theme} aparece]. Macete: [dica exclusiva para ${data.theme}]. Cuidado: [erro comum espec√≠fico em ${data.theme}]. Lembre-se: [refor√ßo espec√≠fico sobre ${data.theme}].",
  "advancedText": "Dominando ${data.theme} no n√≠vel avan√ßado: [t√©cnica espec√≠fica avan√ßada]. Para casos complexos de ${data.theme}: [estrat√©gia espec√≠fica]. Exerc√≠cio desafiador: [problema espec√≠fico de ${data.theme}]. Dica profissional: [segredo espec√≠fico para ${data.theme}]. Conex√£o: [como ${data.theme} se relaciona com outros temas de ${data.subject}]."
}

üåü EXEMPLOS DE QUALIDADE ESPERADA:

Para "Teorema de Pit√°goras":
{
  "title": "Como Aplicar o Teorema de Pit√°goras",
  "text": "Para voc√™ resolver problemas com Teorema de Pit√°goras: 1) Identifique o tri√¢ngulo ret√¢ngulo no problema. 2) Localize a hipotenusa (lado mais longo, oposto ao √¢ngulo reto). 3) Aplique a¬≤ + b¬≤ = c¬≤, onde c √© a hipotenusa. Exemplo real: para calcular a diagonal de uma TV 32 polegadas, use a¬≤ + b¬≤ = 32¬≤. Macete: a hipotenusa √© sempre o maior lado! Cuidado: s√≥ funciona em tri√¢ngulos ret√¢ngulos. Lembre-se: Teorema de Pit√°goras √© a base da geometria.",
  "advancedText": "Dominando Teorema de Pit√°goras no n√≠vel avan√ßado: use para calcular dist√¢ncias em plano cartesiano. Para casos complexos: aplique em pir√¢mides e s√≥lidos geom√©tricos. Exerc√≠cio desafiador: calcule a altura de um pr√©dio usando Teorema de Pit√°goras e sombra. Dica profissional: Teorema de Pit√°goras aparece em f√≠sica (velocidades) e programa√ß√£o (dist√¢ncias). Conex√£o: Teorema de Pit√°goras se relaciona com trigonometria e fun√ß√µes quadr√°ticas."
}

AGORA GERE CONTE√öDO ESPEC√çFICO PARA "${data.theme}" EM ${data.subject}:`;
  }

  private async callGeminiAPI(prompt: string): Promise<any> {
    if (!this.apiKey) {
      throw new Error('API Key do Gemini n√£o configurada');
    }

    const startTime = Date.now();

    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.3, // Mais determin√≠stico para respostas espec√≠ficas
            topK: 20,
            topP: 0.8,
            maxOutputTokens: 2048,
          }
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erro HTTP da API Gemini:', response.status, errorText);
        throw new Error(`Erro na API Gemini: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      const executionTime = Date.now() - startTime;

      console.log('üìä Tempo de execu√ß√£o da API:', executionTime + 'ms');
      console.log('üì• Resposta completa da API Gemini:', JSON.stringify(data, null, 2));
      
      // Extrair texto da resposta estruturada da API Gemini
      const generatedText = data?.candidates?.[0]?.content?.parts?.[0]?.text || '';
      console.log('üìÑ Texto extra√≠do da resposta:', generatedText);
      
      geminiLogger.logResponse(data, executionTime);

      return generatedText;

    } catch (error) {
      console.error('‚ùå Erro na chamada da API Gemini:', error);
      geminiLogger.logError(error as Error, { prompt: prompt.substring(0, 200) });
      throw error;
    }
  }

  private parseGeminiResponse(response: any): { title: string; text: string; advancedText?: string } {
    console.log('üîÑ Fazendo parse da resposta do Gemini...');
    console.log('üìÑ Resposta COMPLETA recebida:', response);

    try {
      // Limpar resposta removendo caracteres indesejados
      let cleanedResponse = response.trim();

      // Remover markdown se presente
      if (cleanedResponse.includes('```json')) {
        const jsonMatch = cleanedResponse.match(/```json\s*([\s\S]*?)\s*```/);
        if (jsonMatch) {
          cleanedResponse = jsonMatch[1];
        }
      } else if (cleanedResponse.includes('```')) {
        cleanedResponse = cleanedResponse.replace(/```[^{]*/, '').replace(/```$/, '');
      }

      // Buscar JSON na resposta
      const jsonStart = cleanedResponse.indexOf('{');
      const jsonEnd = cleanedResponse.lastIndexOf('}') + 1;

      if (jsonStart === -1 || jsonEnd === 0) {
        console.error('‚ùå JSON n√£o encontrado na resposta');
        throw new Error('JSON n√£o encontrado na resposta');
      }

      const jsonString = cleanedResponse.substring(jsonStart, jsonEnd);
      console.log('üîÑ JSON EXTRA√çDO:', jsonString);

      const parsedContent = JSON.parse(jsonString);
      console.log('‚úÖ CONTE√öDO PARSEADO:', parsedContent);

      const result = {
        title: parsedContent.titulo || parsedContent.title || 'Conte√∫do Educativo',
        text: parsedContent.conteudo || parsedContent.content || parsedContent.text || 'Conte√∫do gerado pela IA.',
        advancedText: parsedContent.conteudoAvancado || parsedContent.advancedContent || parsedContent.advancedText
      };

      console.log('üéØ RESULTADO FINAL PARSEADO:', result);
      return result;

    } catch (error) {
      console.error('‚ùå Erro ao fazer parse da resposta:', error);
      console.log('üìÑ Resposta problem√°tica completa:', response);

      // Tentar extrair conte√∫do manualmente se JSON falhar
      const manualContent = this.extractContentManually(response);
      if (manualContent) {
        console.log('‚úÖ Conte√∫do extra√≠do manualmente:', manualContent);
        return manualContent;
      }

      // Fallback final
      console.log('‚ö†Ô∏è Usando fallback final');
      return {
        title: 'Erro no processamento',
        text: 'Houve um problema ao processar o conte√∫do gerado pela IA. Resposta original: ' + response.substring(0, 200),
        advancedText: 'Tente novamente ou contate o suporte.'
      };
    }
  }

  private extractContentManually(response: string): { title: string; text: string; advancedText?: string } | null {
    try {
      console.log('üîß Tentando extra√ß√£o manual do conte√∫do...');

      // Tentar encontrar padr√µes de conte√∫do educativo
      const lines = response.split('\n').filter(line => line.trim());

      let title = '';
      let text = '';
      let advancedText = '';

      // Procurar por t√≠tulos
      for (const line of lines) {
        if (line.includes('t√≠tulo') || line.includes('Title') || line.includes('#')) {
          title = line.replace(/[#*"']/g, '').replace(/t√≠tulo:?/i, '').trim();
          break;
        }
      }

      // Se n√£o encontrou t√≠tulo, usar primeira linha significativa
      if (!title && lines.length > 0) {
        title = lines[0].replace(/[#*"']/g, '').trim();
      }

      // Procurar por conte√∫do
      const contentLines = lines.filter(line => 
        line.length > 50 && 
        !line.includes('t√≠tulo') && 
        !line.includes('Title') &&
        !line.includes('```')
      );

      if (contentLines.length > 0) {
        text = contentLines[0];
        if (contentLines.length > 1) {
          advancedText = contentLines[1];
        }
      }

      if (title || text) {
        const result = {
          title: title || 'Conte√∫do Educativo',
          text: text || response.substring(0, 300),
          advancedText: advancedText || undefined
        };

        console.log('‚úÖ Extra√ß√£o manual bem-sucedida:', result);
        return result;
      }

      return null;
    } catch (error) {
      console.error('‚ùå Erro na extra√ß√£o manual:', error);
      return null;
    }
  }

  private generateSpecificFallback(data: QuadroInterativoData): QuadroInterativoContent {
    const theme = data.theme || 'este conte√∫do';

    // T√≠tulo espec√≠fico baseado no tema
    let specificTitle = `Como Dominar ${theme}`;
    if (theme.toLowerCase().includes('substantivo')) {
      specificTitle = `Como Identificar ${theme}`;
    } else if (theme.toLowerCase().includes('verbo')) {
      specificTitle = `Como Reconhecer ${theme}`;
    } else if (theme.toLowerCase().includes('equa√ß√£o') || theme.toLowerCase().includes('fun√ß√£o')) {
      specificTitle = `Como Resolver ${theme}`;
    } else if (theme.toLowerCase().includes('matem√°tica') || theme.toLowerCase().includes('c√°lculo')) {
      specificTitle = `Como Calcular ${theme}`;
    }

    // Texto espec√≠fico para o tema
    const specificText = `Para voc√™ dominar ${theme.toLowerCase()}, siga estes passos essenciais: 1) Identifique os conceitos-chave de ${theme}. 2) Pratique com exemplos espec√≠ficos de ${theme}. 3) Aplique o conhecimento em exerc√≠cios de ${theme}. Exemplo: observe como ${theme} aparece em situa√ß√µes reais. Dica importante: foque nos detalhes espec√≠ficos de ${theme}. Cuidado: n√£o confunda ${theme} com conceitos similares. Lembre-se: dominar ${theme} requer pr√°tica constante!`;

    const advancedText = `Agora que voc√™ entende o b√°sico de ${theme.toLowerCase()}, explore aspectos avan√ßados: analise casos complexos de ${theme}. Quando encontrar dificuldades em ${theme}, volte aos fundamentos. Teste: explique ${theme} para um colega. Conex√£o: veja como ${theme} se relaciona com outros temas de ${data.subject}. Dica profissional: crie mapas mentais espec√≠ficos para ${theme}!`;

    return {
      title: data.theme || 'Conte√∫do Educativo',
      description: data.objectives || 'Atividade educativa interativa',
      cardContent: {
        title: specificTitle.substring(0, 80),
        text: specificText.substring(0, 500)
      },
      cardContent2: {
        title: `${specificTitle} - N√≠vel Avan√ßado`.substring(0, 80),
        text: advancedText.substring(0, 500)
      },
      generatedAt: new Date().toISOString(),
      isGeneratedByAI: false,
      subject: data.subject,
      schoolYear: data.schoolYear,
      theme: data.theme,
      objectives: data.objectives,
      difficultyLevel: data.difficultyLevel,
      quadroInterativoCampoEspecifico: data.quadroInterativoCampoEspecifico
    };
  }
}

export default QuadroInterativoGenerator;