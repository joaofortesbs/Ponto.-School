import { geminiLogger } from '@/utils/geminiDebugLogger';

interface QuadroInterativoData {
  subject: string;
  schoolYear: string;
  theme: string;
  objectives: string;
  difficultyLevel: string;
  quadroInterativoCampoEspecifico: string;
}

interface QuadroInterativoContent {
  title: string;
  description: string;
  cardContent: {
    title: string;
    text: string;
  };
  cardContent2?: {
    title: string;
    text: string;
  };
  generatedAt: string;
  isGeneratedByAI: boolean;
  subject?: string;
  schoolYear?: string;
  theme?: string;
  objectives?: string;
  difficultyLevel?: string;
  quadroInterativoCampoEspecifico?: string;
  customFields?: Record<string, string>;
}

export class QuadroInterativoGenerator {
  private apiKey: string;

  constructor() {
    this.apiKey = import.meta.env.VITE_GEMINI_API_KEY || '';
  }

  async generateQuadroInterativoContent(data: QuadroInterativoData): Promise<QuadroInterativoContent> {
    console.log('üöÄ INICIANDO GERA√á√ÉO CR√çTICA DE CONTE√öDO VIA IA GEMINI');
    console.log('üìä DADOS DE ENTRADA PARA IA:', JSON.stringify(data, null, 2));
    
    geminiLogger.logRequest('Gerando conte√∫do espec√≠fico de Quadro Interativo', data);

    try {
      const prompt = this.buildEnhancedPrompt(data);
      console.log('üì§ ENVIANDO PROMPT PARA GEMINI API...');
      console.log('üéØ TEMA ESPEC√çFICO:', data.theme);
      console.log('üìö DISCIPLINA:', data.subject);
      console.log('üìù Preview do prompt (300 chars):', prompt.substring(0, 300) + '...');

      console.log('üåê CHAMANDO API GEMINI...');
      const response = await this.callGeminiAPI(prompt);
      console.log('üì• RESPOSTA BRUTA RECEBIDA DA API GEMINI:', response);

      // Processar resposta da IA
      const parsedContent = this.parseGeminiResponse(response);
      console.log('‚úÖ CONTE√öDO PROCESSADO DA IA:', parsedContent);

      if (!parsedContent || !parsedContent.title || !parsedContent.text) {
        throw new Error('Conte√∫do inv√°lido retornado pela IA');
      }

      const result: QuadroInterativoContent = {
        title: data.theme || parsedContent.title,
        description: data.objectives || parsedContent.text,
        cardContent: {
          title: parsedContent.title,
          text: parsedContent.text
        },
        cardContent2: parsedContent.advancedText ? {
          title: `${parsedContent.title} - N√≠vel Avan√ßado`,
          text: parsedContent.advancedText
        } : undefined,
        generatedAt: new Date().toISOString(),
        isGeneratedByAI: true,
        subject: data.subject,
        schoolYear: data.schoolYear,
        theme: data.theme,
        objectives: data.objectives,
        difficultyLevel: data.difficultyLevel,
        quadroInterativoCampoEspecifico: data.quadroInterativoCampoEspecifico,
        customFields: {
          'Disciplina / √Årea de conhecimento': data.subject,
          'Ano / S√©rie': data.schoolYear,
          'Tema ou Assunto da aula': data.theme,
          'Objetivo de aprendizagem da aula': data.objectives,
          'N√≠vel de Dificuldade': data.difficultyLevel,
          'Atividade mostrada': data.quadroInterativoCampoEspecifico,
          'isAIGenerated': 'true',
          'generatedContent': JSON.stringify({
            cardContent: {
              title: parsedContent.title,
              text: parsedContent.text
            },
            cardContent2: parsedContent.advancedText ? {
              title: `${parsedContent.title} - N√≠vel Avan√ßado`,
              text: parsedContent.advancedText
            } : undefined,
            generatedAt: new Date().toISOString(),
            sourceType: 'gemini-ai-api'
          })
        }
      };

      console.log('üéØ RESULTADO FINAL PREPARADO:', result);
      return result;

    } catch (error) {
      console.error('‚ùå ERRO CR√çTICO na gera√ß√£o pela IA Gemini:', error);
      
      // Fallback com conte√∫do espec√≠fico baseado nos dados
      const fallbackTitle = `Como Dominar ${data.theme || 'Este Conte√∫do'} - Guia Espec√≠fico`;
      const fallbackText = `Para voc√™ dominar ${data.theme || 'este conte√∫do'} em ${data.subject || 'sua disciplina'}: 1) Identifique os conceitos-chave espec√≠ficos de ${data.theme || 'este tema'} - observe as caracter√≠sticas √∫nicas que definem este assunto. 2) Pratique com exemplos reais de ${data.theme || 'este tema'} - use situa√ß√µes do cotidiano onde ${data.theme || 'este conte√∫do'} √© aplicado. 3) Desenvolva estrat√©gias espec√≠ficas para ${data.theme || 'este tema'} - crie m√©todos de estudo exclusivos para este conte√∫do. 4) Teste seu conhecimento com exerc√≠cios progressivos. Exemplo pr√°tico: ${data.theme || 'este conte√∫do'} √© fundamental quando voc√™ precisa resolver problemas espec√≠ficos da √°rea. Macete especial: para lembrar de ${data.theme || 'este tema'}, associe com conceitos que voc√™ j√° conhece. Cuidado: o erro mais comum em ${data.theme || 'este tema'} √© confundir com temas similares. Dica final: ${data.theme || 'este conte√∫do'} √© essencial porque conecta diretamente com outros conceitos importantes da mat√©ria!`;

      return {
        title: data.theme || 'Conte√∫do Educativo',
        description: data.objectives || 'Atividade educativa interativa',
        cardContent: {
          title: fallbackTitle,
          text: fallbackText
        },
        cardContent2: {
          title: `${fallbackTitle} - N√≠vel Avan√ßado`,
          text: `Dominando ${data.theme || 'este conte√∫do'} no n√≠vel avan√ßado: explore aplica√ß√µes complexas e desafiadoras. Para casos dif√≠ceis: divida o problema em partes menores e aplique ${data.theme || 'este conte√∫do'} sistematicamente. Exerc√≠cio avan√ßado: combine ${data.theme || 'este tema'} com outros conceitos para resolver problemas interdisciplinares. Segredo profissional: a chave est√° em entender a l√≥gica fundamental por tr√°s de ${data.theme || 'este conte√∫do'}, n√£o apenas memorizar defini√ß√µes.`
        },
        generatedAt: new Date().toISOString(),
        isGeneratedByAI: false,
        subject: data.subject,
        schoolYear: data.schoolYear,
        theme: data.theme,
        objectives: data.objectives,
        difficultyLevel: data.difficultyLevel,
        quadroInterativoCampoEspecifico: data.quadroInterativoCampoEspecifico,
        customFields: {
          'Disciplina / √Årea de conhecimento': data.subject,
          'Ano / S√©rie': data.schoolYear,
          'Tema ou Assunto da aula': data.theme,
          'Objetivo de aprendizagem da aula': data.objectives,
          'N√≠vel de Dificuldade': data.difficultyLevel,
          'Atividade mostrada': data.quadroInterativoCampoEspecifico,
          'isAIGenerated': 'false',
          'fallbackApplied': 'true'
        }
      };
    }
  }

  private parseGeminiResponse(response: string): any {
    try {
      console.log('üîÑ Processando resposta da IA Gemini...');
      
      // Limpar resposta
      let cleanedResponse = response.trim();
      cleanedResponse = cleanedResponse.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      cleanedResponse = cleanedResponse.trim();

      console.log('üßπ Resposta limpa:', cleanedResponse);

      // Tentar parsear como JSON
      const parsed = JSON.parse(cleanedResponse);
      console.log('‚úÖ JSON parseado com sucesso:', parsed);

      return parsed;
    } catch (error) {
      console.error('‚ùå Erro ao parsear resposta da IA:', error);
      console.log('üìù Resposta original:', response);
      
      // Fallback: extrair conte√∫do manualmente
      return {
        title: 'Conte√∫do Gerado pela IA',
        text: response.substring(0, 500),
        advancedText: response.length > 500 ? response.substring(500, 1000) : undefined
      };
    }
  }

      const result: QuadroInterativoContent = {
        title: data.theme || 'Quadro Interativo',
        description: data.objectives || 'Atividade de quadro interativo',
        cardContent: {
          title: parsedContent.title || data.theme || 'Conte√∫do do Quadro',
          text: parsedContent.text || 'Conte√∫do educativo espec√≠fico gerado pela IA.'
        },
        cardContent2: parsedContent.advancedText ? {
          title: `${parsedContent.title} - N√≠vel Avan√ßado`,
          text: parsedContent.advancedText
        } : undefined,
        generatedAt: new Date().toISOString(),
        isGeneratedByAI: true,
        // Campos originais para compatibilidade
        subject: data.subject,
        schoolYear: data.schoolYear,
        theme: data.theme,
        objectives: data.objectives,
        difficultyLevel: data.difficultyLevel,
        quadroInterativoCampoEspecifico: data.quadroInterativoCampoEspecifico,
        // Campos customizados espec√≠ficos
        customFields: {
          'Disciplina / √Årea de conhecimento': data.subject,
          'Ano / S√©rie': data.schoolYear,
          'Tema ou Assunto da aula': data.theme,
          'Objetivo de aprendizagem da aula': data.objectives,
          'N√≠vel de Dificuldade': data.difficultyLevel,
          'Atividade mostrada': data.quadroInterativoCampoEspecifico,
          'isAIGenerated': 'true',
          'generatedContent': JSON.stringify({
            cardContent: {
              title: parsedContent.title,
              text: parsedContent.text
            },
            cardContent2: parsedContent.advancedText ? {
              title: `${parsedContent.title} - N√≠vel Avan√ßado`,
              text: parsedContent.advancedText
            } : undefined,
            generatedAt: new Date().toISOString()
          })
        }
      };

      // DEBUG INTENSIVO - VERIFICAR CONTE√öDO FINAL
      console.log('üî• CONTE√öDO ESPEC√çFICO GERADO PELA IA GEMINI:', {
        tema: data.theme,
        tituloGerado: parsedContent.title,
        textoGerado: parsedContent.text.substring(0, 100) + '...',
        temaTituloCont√©m: parsedContent.title?.toLowerCase().includes(data.theme.toLowerCase()),
        temaTextoCont√©m: parsedContent.text?.toLowerCase().includes(data.theme.toLowerCase()),
        tamanhoTexto: parsedContent.text.length,
        cardContentFinal: result.cardContent
      });

      geminiLogger.logResponse(result, Date.now());
      console.log('‚úÖ RESULTADO FINAL ENVIADO PARA O PREVIEW:', result);
      return result;

    } catch (error) {
      console.error('‚ùå ERRO na gera√ß√£o do conte√∫do:', error);
      geminiLogger.logError(error as Error, { data });

      // Se falhar, ainda tenta retornar algo espec√≠fico baseado no tema
      const specificFallback = this.generateSpecificFallback(data);
      console.log('‚ö†Ô∏è Usando fallback espec√≠fico para o tema:', specificFallback);
      return specificFallback;
    }
  }

  private buildEnhancedPrompt(data: QuadroInterativoData): string {
    return `VOC√ä √â UM PROFESSOR ESPECIALISTA BRASILEIRO EM ${data.subject}. CRIE CONTE√öDO EDUCATIVO ULTRA-ESPEC√çFICO E PERSONALIZADO PARA O TEMA "${data.theme}".

üìö CONTEXTO EDUCACIONAL OBRIGAT√ìRIO:
- Disciplina: ${data.subject}
- Ano/S√©rie: ${data.schoolYear}
- Tema ESPEC√çFICO: ${data.theme}
- Objetivos: ${data.objectives}
- N√≠vel: ${data.difficultyLevel}
- Atividade Alvo: ${data.quadroInterativoCampoEspecifico}

üéØ MISS√ÉO ULTRA-ESPEC√çFICA:
Criar conte√∫do educativo EXTREMAMENTE DETALHADO e PERSONALIZADO para "${data.theme}" que ser√° exibido em um quadro interativo para alunos de ${data.schoolYear} estudando ${data.subject}.

‚ö†Ô∏è REGRAS CR√çTICAS OBRIGAT√ìRIAS:
1. SEMPRE mencione "${data.theme}" literalmente no texto (m√≠nimo 5 vezes)
2. NUNCA use termos gen√©ricos como "este tema", "este conte√∫do", "dominar isso"
3. SEMPRE forne√ßa exemplos REAIS e ESPEC√çFICOS de "${data.theme}"
4. SEMPRE inclua 3-5 passos NUMERADOS e PR√ÅTICOS espec√≠ficos para "${data.theme}"
5. SEMPRE use linguagem direta ao aluno ("Para voc√™ entender ${data.theme}...")
6. SEMPRE inclua macetes, dicas e alertas exclusivos para "${data.theme}"
7. SEMPRE contextualizar especificamente para ${data.schoolYear} em ${data.subject}
8. SEMPRE usar exemplos pr√°ticos onde "${data.theme}" aparece na vida real

üìã FORMATO JSON OBRIGAT√ìRIO - RESPONDA EXATAMENTE ASSIM:
{
  "title": "Como Dominar ${data.theme} - Guia Pr√°tico para ${data.schoolYear}",
  "text": "Para voc√™ dominar ${data.theme} em ${data.subject} (${data.schoolYear}): 1) [passo espec√≠fico para ${data.theme}] 2) [segundo passo pr√°tico para ${data.theme}] 3) [terceiro passo espec√≠fico] 4) [quarto passo avan√ßado]. Exemplo pr√°tico: [situa√ß√£o real onde ${data.theme} √© usado]. Macete especial para ${data.theme}: [dica espec√≠fica]. Cuidado com ${data.theme}: [erro comum]. Dica final: ${data.theme} √© fundamental porque [raz√£o espec√≠fica para ${data.schoolYear}].",
  "advancedText": "Dominando ${data.theme} no n√≠vel avan√ßado para ${data.schoolYear}: [t√©cnica espec√≠fica avan√ßada de ${data.theme}]. Para casos complexos de ${data.theme}: [estrat√©gia avan√ßada]. Exerc√≠cio desafiador de ${data.theme}: [problema espec√≠fico com solu√ß√£o]. Segredo profissional para ${data.theme}: [dica de especialista]. Conex√£o avan√ßada: como ${data.theme} se conecta com [outros temas espec√≠ficos de ${data.subject}]. Aplica√ß√£o real de ${data.theme}: [exemplo profissional ou acad√™mico espec√≠fico]."
}

üåü EXEMPLOS DE QUALIDADE ESPERADA:

Para "Teorema de Pit√°goras":
{
  "title": "Como Aplicar o Teorema de Pit√°goras",
  "text": "Para voc√™ resolver problemas com Teorema de Pit√°goras: 1) Identifique o tri√¢ngulo ret√¢ngulo no problema. 2) Localize a hipotenusa (lado mais longo, oposto ao √¢ngulo reto). 3) Aplique a¬≤ + b¬≤ = c¬≤, onde c √© a hipotenusa. Exemplo real: para calcular a diagonal de uma TV 32 polegadas, use a¬≤ + b¬≤ = 32¬≤. Macete: a hipotenusa √© sempre o maior lado! Cuidado: s√≥ funciona em tri√¢ngulos ret√¢ngulos. Lembre-se: Teorema de Pit√°goras √© a base da geometria.",
  "advancedText": "Dominando Teorema de Pit√°goras no n√≠vel avan√ßado: use para calcular dist√¢ncias em plano cartesiano. Para casos complexos: aplique em pir√¢mides e s√≥lidos geom√©tricos. Exerc√≠cio desafiador: calcule a altura de um pr√©dio usando Teorema de Pit√°goras e sombra. Dica profissional: Teorema de Pit√°goras aparece em f√≠sica (velocidades) e programa√ß√£o (dist√¢ncias). Conex√£o: Teorema de Pit√°goras se relaciona com trigonometria e fun√ß√µes quadr√°ticas."
}

AGORA GERE CONTE√öDO ESPEC√çFICO PARA "${data.theme}" EM ${data.subject}:`;
  }

  private async callGeminiAPI(prompt: string): Promise<any> {
    if (!this.apiKey) {
      throw new Error('API Key do Gemini n√£o configurada');
    }

    const startTime = Date.now();

    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.3, // Mais determin√≠stico para respostas espec√≠ficas
            topK: 20,
            topP: 0.8,
            maxOutputTokens: 2048,
          }
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erro HTTP da API Gemini:', response.status, errorText);
        throw new Error(`Erro na API Gemini: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      const executionTime = Date.now() - startTime;

      console.log('üìä Tempo de execu√ß√£o da API:', executionTime + 'ms');
      console.log('üì• Resposta completa da API Gemini:', JSON.stringify(data, null, 2));
      
      // Extrair texto da resposta estruturada da API Gemini
      const generatedText = data?.candidates?.[0]?.content?.parts?.[0]?.text || '';
      console.log('üìÑ Texto extra√≠do da resposta:', generatedText);
      
      geminiLogger.logResponse(data, executionTime);

      return generatedText;

    } catch (error) {
      console.error('‚ùå Erro na chamada da API Gemini:', error);
      geminiLogger.logError(error as Error, { prompt: prompt.substring(0, 200) });
      throw error;
    }
  }

  private parseGeminiResponse(response: any): { title: string; text: string; advancedText?: string } {
    console.log('üîÑ Fazendo parse da resposta do Gemini...');
    console.log('üìÑ Resposta COMPLETA recebida:', response);

    try {
      // Limpar resposta removendo caracteres indesejados
      let cleanedResponse = response.trim();

      // Remover markdown se presente
      if (cleanedResponse.includes('```json')) {
        const jsonMatch = cleanedResponse.match(/```json\s*([\s\S]*?)\s*```/);
        if (jsonMatch) {
          cleanedResponse = jsonMatch[1];
        }
      } else if (cleanedResponse.includes('```')) {
        cleanedResponse = cleanedResponse.replace(/```[^{]*/, '').replace(/```$/, '');
      }

      // Buscar JSON na resposta
      const jsonStart = cleanedResponse.indexOf('{');
      const jsonEnd = cleanedResponse.lastIndexOf('}') + 1;

      if (jsonStart === -1 || jsonEnd === 0) {
        console.error('‚ùå JSON n√£o encontrado na resposta');
        throw new Error('JSON n√£o encontrado na resposta');
      }

      const jsonString = cleanedResponse.substring(jsonStart, jsonEnd);
      console.log('üîÑ JSON EXTRA√çDO:', jsonString);

      const parsedContent = JSON.parse(jsonString);
      console.log('‚úÖ CONTE√öDO PARSEADO:', parsedContent);

      const result = {
        title: parsedContent.titulo || parsedContent.title || 'Conte√∫do Educativo',
        text: parsedContent.conteudo || parsedContent.content || parsedContent.text || 'Conte√∫do gerado pela IA.',
        advancedText: parsedContent.conteudoAvancado || parsedContent.advancedContent || parsedContent.advancedText
      };

      console.log('üéØ RESULTADO FINAL PARSEADO:', result);
      return result;

    } catch (error) {
      console.error('‚ùå Erro ao fazer parse da resposta:', error);
      console.log('üìÑ Resposta problem√°tica completa:', response);

      // Tentar extrair conte√∫do manualmente se JSON falhar
      const manualContent = this.extractContentManually(response);
      if (manualContent) {
        console.log('‚úÖ Conte√∫do extra√≠do manualmente:', manualContent);
        return manualContent;
      }

      // Fallback final
      console.log('‚ö†Ô∏è Usando fallback final');
      return {
        title: 'Erro no processamento',
        text: 'Houve um problema ao processar o conte√∫do gerado pela IA. Resposta original: ' + response.substring(0, 200),
        advancedText: 'Tente novamente ou contate o suporte.'
      };
    }
  }

  private extractContentManually(response: string): { title: string; text: string; advancedText?: string } | null {
    try {
      console.log('üîß Tentando extra√ß√£o manual do conte√∫do...');

      // Tentar encontrar padr√µes de conte√∫do educativo
      const lines = response.split('\n').filter(line => line.trim());

      let title = '';
      let text = '';
      let advancedText = '';

      // Procurar por t√≠tulos
      for (const line of lines) {
        if (line.includes('t√≠tulo') || line.includes('Title') || line.includes('#')) {
          title = line.replace(/[#*"']/g, '').replace(/t√≠tulo:?/i, '').trim();
          break;
        }
      }

      // Se n√£o encontrou t√≠tulo, usar primeira linha significativa
      if (!title && lines.length > 0) {
        title = lines[0].replace(/[#*"']/g, '').trim();
      }

      // Procurar por conte√∫do
      const contentLines = lines.filter(line => 
        line.length > 50 && 
        !line.includes('t√≠tulo') && 
        !line.includes('Title') &&
        !line.includes('```')
      );

      if (contentLines.length > 0) {
        text = contentLines[0];
        if (contentLines.length > 1) {
          advancedText = contentLines[1];
        }
      }

      if (title || text) {
        const result = {
          title: title || 'Conte√∫do Educativo',
          text: text || response.substring(0, 300),
          advancedText: advancedText || undefined
        };

        console.log('‚úÖ Extra√ß√£o manual bem-sucedida:', result);
        return result;
      }

      return null;
    } catch (error) {
      console.error('‚ùå Erro na extra√ß√£o manual:', error);
      return null;
    }
  }

  private generateSpecificFallback(data: QuadroInterativoData): QuadroInterativoContent {
    console.log('‚ö†Ô∏è GERANDO FALLBACK ESPEC√çFICO PARA:', data.theme);
    
    const theme = data.theme || 'este conte√∫do';

    // T√≠tulo ultra-espec√≠fico baseado no tema e contexto
    let specificTitle = `Como Dominar ${theme} - ${data.schoolYear}`;
    if (theme.toLowerCase().includes('substantivo')) {
      specificTitle = `Identificando ${theme} - Guia Pr√°tico`;
    } else if (theme.toLowerCase().includes('verbo')) {
      specificTitle = `Reconhecendo ${theme} - M√©todo F√°cil`;
    } else if (theme.toLowerCase().includes('equa√ß√£o') || theme.toLowerCase().includes('fun√ß√£o')) {
      specificTitle = `Resolvendo ${theme} - Passo a Passo`;
    } else if (theme.toLowerCase().includes('teorema') || theme.toLowerCase().includes('pit√°goras')) {
      specificTitle = `Aplicando ${theme} - T√©cnicas Pr√°ticas`;
    } else if (theme.toLowerCase().includes('matem√°tica') || theme.toLowerCase().includes('c√°lculo')) {
      specificTitle = `Calculando ${theme} - M√©todos Eficazes`;
    }

    // Texto ultra-espec√≠fico para o tema com detalhes reais
    const specificText = `Para voc√™ dominar ${theme} em ${data.subject} (${data.schoolYear}): 1) Identifique as caracter√≠sticas espec√≠ficas de ${theme} - procure pelos elementos √∫nicos que definem ${theme}. 2) Pratique com exemplos reais de ${theme} - use situa√ß√µes do cotidiano onde ${theme} aparece. 3) Aplique t√©cnicas espec√≠ficas para ${theme} - desenvolva estrat√©gias exclusivas para este conceito. 4) Teste seu conhecimento de ${theme} com exerc√≠cios progressivos. Exemplo pr√°tico: ${theme} √© usado quando [situa√ß√£o espec√≠fica]. Macete especial: para lembrar de ${theme}, use a t√©cnica [m√©todo espec√≠fico]. Cuidado: o erro mais comum em ${theme} √© [problema espec√≠fico]. Dica final: ${theme} √© essencial para ${data.schoolYear} porque conecta com outros conceitos importantes!`;

    const advancedText = `Dominando ${theme} no n√≠vel avan√ßado para ${data.schoolYear}: explore as aplica√ß√µes complexas de ${theme} em situa√ß√µes desafiadoras. Para casos dif√≠ceis de ${theme}: use a abordagem sistem√°tica dividindo o problema em partes menores. Exerc√≠cio avan√ßado de ${theme}: resolva problemas que combinam ${theme} com outros conceitos de ${data.subject}. Segredo profissional para ${theme}: a chave est√° em entender a l√≥gica por tr√°s, n√£o apenas decorar f√≥rmulas. Conex√£o avan√ßada: ${theme} se relaciona diretamente com [conceitos espec√≠ficos de ${data.subject}] e prepara voc√™ para [t√≥picos futuros]. Aplica√ß√£o real: profissionais de [√°rea espec√≠fica] usam ${theme} para [aplica√ß√£o pr√°tica espec√≠fica]!`;

    return {
      title: data.theme || 'Conte√∫do Educativo',
      description: data.objectives || 'Atividade educativa interativa',
      cardContent: {
        title: specificTitle.substring(0, 80),
        text: specificText.substring(0, 500)
      },
      cardContent2: {
        title: `${specificTitle} - N√≠vel Avan√ßado`.substring(0, 80),
        text: advancedText.substring(0, 500)
      },
      generatedAt: new Date().toISOString(),
      isGeneratedByAI: false,
      subject: data.subject,
      schoolYear: data.schoolYear,
      theme: data.theme,
      objectives: data.objectives,
      difficultyLevel: data.difficultyLevel,
      quadroInterativoCampoEspecifico: data.quadroInterativoCampoEspecifico
    };
  }
}

export default QuadroInterativoGenerator;