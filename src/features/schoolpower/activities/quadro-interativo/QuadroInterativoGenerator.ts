
import { ActivityFormData } from '../../construction/types/ActivityTypes';

export interface QuadroInterativoGeneratedContent {
  title: string;
  content: string;
  success: boolean;
  error?: string;
  timestamp?: string;
  activityId?: string;
}

class QuadroInterativoGenerator {
  private static readonly GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent';
  private static readonly STORAGE_PREFIX = 'quadro_interativo_';

  /**
   * Gera conte√∫do para atividade de Quadro Interativo
   */
  static async generateContent(formData: ActivityFormData): Promise<QuadroInterativoGeneratedContent> {
    try {
      console.log('üéØ Iniciando gera√ß√£o de conte√∫do para Quadro Interativo');
      console.log('üìù Dados recebidos:', formData);

      // Validar dados essenciais
      if (!this.validateRequiredData(formData)) {
        return {
          title: 'Dados Insuficientes',
          content: 'Por favor, preencha todos os campos obrigat√≥rios: Disciplina, Ano/S√©rie, Tema e N√≠vel de Dificuldade.',
          success: false,
          error: 'Dados obrigat√≥rios n√£o preenchidos'
        };
      }

      // Gerar prompt otimizado
      const prompt = this.buildOptimizedPrompt(formData);
      console.log('üîß Prompt gerado para API');

      // Chamar API Gemini
      const result = await this.callGeminiAPI(prompt);
      
      if (result.success) {
        console.log('‚úÖ Conte√∫do gerado com sucesso');
        return {
          ...result,
          timestamp: new Date().toISOString()
        };
      } else {
        console.error('‚ùå Falha na gera√ß√£o:', result.error);
        return result;
      }

    } catch (error) {
      console.error('‚ùå Erro inesperado no gerador:', error);
      return {
        title: 'Erro no Sistema',
        content: 'Ocorreu um erro inesperado durante a gera√ß√£o. Tente novamente.',
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Valida se os dados obrigat√≥rios est√£o presentes
   */
  private static validateRequiredData(formData: ActivityFormData): boolean {
    const required = ['subject', 'schoolYear', 'theme', 'difficultyLevel'];
    return required.every(field => formData[field as keyof ActivityFormData] && 
                                  String(formData[field as keyof ActivityFormData]).trim().length > 0);
  }

  /**
   * Constr√≥i prompt otimizado para gera√ß√£o de conte√∫do
   */
  private static buildOptimizedPrompt(formData: ActivityFormData): string {
    return `
SISTEMA: Voc√™ √© um especialista em educa√ß√£o que cria atividades interativas para quadros digitais.

TAREFA: Criar uma atividade completa de Quadro Interativo baseada nos seguintes dados:

**INFORMA√á√ïES DA ATIVIDADE:**
- T√≠tulo: ${formData.title || 'Atividade de Quadro Interativo'}
- Descri√ß√£o: ${formData.description || 'Atividade interativa educacional'}
- Disciplina: ${formData.subject}
- Ano/S√©rie: ${formData.schoolYear}
- Tema: ${formData.theme}
- Objetivos: ${formData.objectives || 'Desenvolver conhecimentos sobre o tema proposto'}
- N√≠vel de Dificuldade: ${formData.difficultyLevel}
- Materiais: ${formData.materials || 'Quadro interativo, recursos digitais'}
- Instru√ß√µes: ${formData.instructions || 'Seguir as orienta√ß√µes da atividade'}
- Avalia√ß√£o: ${formData.evaluation || 'Participa√ß√£o e compreens√£o do conte√∫do'}
- Contexto: ${formData.context || 'Educacional'}

**INSTRU√á√ïES ESPEC√çFICAS:**
1. Crie um conte√∫do estruturado em formato JSON
2. O t√≠tulo deve ser claro e atrativo
3. O conte√∫do deve incluir:
   - Introdu√ß√£o ao tema
   - Desenvolvimento da atividade interativa
   - Recursos visuais sugeridos
   - Atividades pr√°ticas
   - Instru√ß√µes para o professor
   - Crit√©rios de avalia√ß√£o
4. Use linguagem apropriada para a faixa et√°ria
5. Foque na interatividade e engajamento dos alunos
6. Inclua elementos que aproveitem as funcionalidades do quadro digital

**FORMATO DE RESPOSTA:**
Responda APENAS no seguinte formato JSON:
{
  "title": "T√≠tulo da atividade de quadro interativo",
  "content": "Conte√∫do detalhado e estruturado da atividade interativa, incluindo todas as se√ß√µes mencionadas acima"
}

IMPORTANTE: N√ÉO inclua explica√ß√µes adicionais, apenas o JSON v√°lido.
    `.trim();
  }

  /**
   * Chama a API Gemini para gerar conte√∫do
   */
  private static async callGeminiAPI(prompt: string): Promise<QuadroInterativoGeneratedContent> {
    try {
      // Obter chave da API
      const apiKey = this.getGeminiApiKey();
      if (!apiKey) {
        console.warn('‚ö†Ô∏è Chave da API Gemini n√£o encontrada, usando conte√∫do padr√£o');
        return this.generateFallbackContent(prompt);
      }

      console.log('üîë Chave da API obtida, fazendo chamada para Gemini');

      // Preparar dados para a API
      const requestBody = {
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        }
      };

      // Fazer chamada para a API
      const response = await fetch(`${this.GEMINI_API_URL}?key=${apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        console.error('‚ùå Erro na resposta da API:', response.status, response.statusText);
        throw new Error(`Erro da API: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      console.log('üì• Resposta da API recebida');

      // Processar resposta
      if (data.candidates && data.candidates[0] && data.candidates[0].content) {
        const generatedText = data.candidates[0].content.parts[0].text;
        return this.parseGeminiResponse(generatedText);
      } else {
        throw new Error('Resposta da API em formato inesperado');
      }

    } catch (error) {
      console.error('‚ùå Erro na chamada da API:', error);
      
      // Fallback para conte√∫do padr√£o
      return this.generateFallbackContent(prompt);
    }
  }

  /**
   * Processa a resposta da API Gemini
   */
  private static parseGeminiResponse(responseText: string): QuadroInterativoGeneratedContent {
    try {
      console.log('üîÑ Processando resposta da API');
      
      // Tentar extrair JSON da resposta
      const cleanText = responseText.trim();
      
      // Procurar por JSON na resposta
      let jsonMatch = cleanText.match(/\{[\s\S]*\}/);
      
      if (!jsonMatch) {
        console.log('‚ö†Ô∏è JSON n√£o encontrado, criando resposta estruturada');
        return {
          title: 'Atividade de Quadro Interativo',
          content: this.formatTextContent(cleanText),
          success: true
        };
      }

      const jsonData = JSON.parse(jsonMatch[0]);
      
      return {
        title: jsonData.title || 'Atividade de Quadro Interativo',
        content: jsonData.content || this.formatTextContent(cleanText),
        success: true
      };

    } catch (error) {
      console.error('‚ùå Erro ao processar resposta:', error);
      
      // Fallback: usar o texto diretamente formatado
      return {
        title: 'Atividade de Quadro Interativo',
        content: this.formatTextContent(responseText),
        success: true
      };
    }
  }

  /**
   * Formata texto simples em conte√∫do estruturado
   */
  private static formatTextContent(text: string): string {
    const lines = text.split('\n').filter(line => line.trim().length > 0);
    return lines.join('\n\n');
  }

  /**
   * Gera conte√∫do padr√£o como fallback
   */
  private static generateFallbackContent(prompt: string): QuadroInterativoGeneratedContent {
    const basicData = this.extractDataFromPrompt(prompt);
    
    const content = `
üéØ ATIVIDADE DE QUADRO INTERATIVO

üìö Disciplina: ${basicData.subject}
üë• Ano/S√©rie: ${basicData.schoolYear}
üé® Tema: ${basicData.theme}
‚≠ê N√≠vel: ${basicData.difficultyLevel}

üìã DESENVOLVIMENTO DA ATIVIDADE:

1. INTRODU√á√ÉO INTERATIVA
   ‚Ä¢ Apresenta√ß√£o do tema usando recursos visuais
   ‚Ä¢ Ativa√ß√£o de conhecimentos pr√©vios dos alunos
   ‚Ä¢ Uso de elementos multim√≠dia no quadro

2. EXPLORA√á√ÉO DO CONTE√öDO
   ‚Ä¢ Navega√ß√£o interativa pelos conceitos principais
   ‚Ä¢ Atividades de arrastar e soltar
   ‚Ä¢ Questionamentos direcionados para participa√ß√£o

3. ATIVIDADES PR√ÅTICAS
   ‚Ä¢ Exerc√≠cios interativos no quadro
   ‚Ä¢ Trabalho colaborativo dos alunos
   ‚Ä¢ Resolu√ß√£o de desafios em grupo

4. CONSOLIDA√á√ÉO
   ‚Ä¢ S√≠ntese dos aprendizados
   ‚Ä¢ Aplica√ß√£o dos conhecimentos
   ‚Ä¢ Avalia√ß√£o formativa

üí° RECURSOS NECESS√ÅRIOS:
- Quadro interativo
- Materiais digitais preparados
- Participa√ß√£o ativa dos estudantes

üéØ OBJETIVOS ALCAN√áADOS:
- Engajamento ativo dos alunos
- Compreens√£o do tema proposto
- Desenvolvimento de habilidades colaborativas
    `.trim();

    return {
      title: `Quadro Interativo: ${basicData.theme}`,
      content,
      success: true
    };
  }

  /**
   * Extrai dados b√°sicos do prompt para fallback
   */
  private static extractDataFromPrompt(prompt: string): any {
    const extractField = (field: string) => {
      const regex = new RegExp(`${field}:\\s*(.+?)(?:\n|$)`, 'i');
      const match = prompt.match(regex);
      return match ? match[1].trim() : 'N√£o especificado';
    };

    return {
      subject: extractField('Disciplina'),
      schoolYear: extractField('Ano/S√©rie'),
      theme: extractField('Tema'),
      difficultyLevel: extractField('N√≠vel de Dificuldade')
    };
  }

  /**
   * Obt√©m a chave da API Gemini
   */
  private static getGeminiApiKey(): string | null {
    // Implementar m√∫ltiplas formas de obter a chave
    return import.meta.env.VITE_GEMINI_API_KEY || 
           import.meta.env.GEMINI_API_KEY ||
           localStorage.getItem('gemini_api_key') ||
           'AIzaSyBJ8XEk8LU5F7hxhNjhRKGq6jNcEU6F6js'; // Chave padr√£o de fallback
  }

  /**
   * Salva conte√∫do gerado localmente
   */
  static saveGeneratedContent(activityId: string, content: QuadroInterativoGeneratedContent): void {
    try {
      const storageKey = `${this.STORAGE_PREFIX}${activityId}`;
      const dataToSave = {
        ...content,
        timestamp: new Date().toISOString(),
        activityId
      };

      localStorage.setItem(storageKey, JSON.stringify(dataToSave));
      console.log('üíæ Conte√∫do salvo localmente:', storageKey);

    } catch (error) {
      console.error('‚ùå Erro ao salvar conte√∫do:', error);
    }
  }

  /**
   * Recupera conte√∫do salvo localmente
   */
  static getStoredContent(activityId: string): QuadroInterativoGeneratedContent | null {
    try {
      const storageKey = `${this.STORAGE_PREFIX}${activityId}`;
      const stored = localStorage.getItem(storageKey);
      
      if (stored) {
        const data = JSON.parse(stored);
        console.log('üìÇ Conte√∫do recuperado:', data);
        return data;
      }

      return null;

    } catch (error) {
      console.error('‚ùå Erro ao recuperar conte√∫do:', error);
      return null;
    }
  }

  /**
   * Remove conte√∫do salvo
   */
  static clearStoredContent(activityId: string): void {
    try {
      const storageKey = `${this.STORAGE_PREFIX}${activityId}`;
      localStorage.removeItem(storageKey);
      console.log('üóëÔ∏è Conte√∫do removido:', storageKey);
    } catch (error) {
      console.error('‚ùå Erro ao remover conte√∫do:', error);
    }
  }
}

export default QuadroInterativoGenerator;
