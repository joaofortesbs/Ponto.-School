
export interface SequenciaDidaticaData {
  tituloTemaAssunto: string;
  anoSerie: string;
  disciplina: string;
  bnccCompetencias?: string;
  publicoAlvo: string;
  objetivosAprendizagem: string;
  quantidadeAulas: string;
  quantidadeDiagnosticos: string;
  quantidadeAvaliacoes: string;
  cronograma?: string;
}

export interface ValidationResult {
  valid: boolean;
  errors: string[];
}

export function validateSequenciaDidaticaData(data: SequenciaDidaticaData): ValidationResult {
  const errors: string[] = [];

  console.log('üîç Validando dados da sequ√™ncia did√°tica:', data);

  // Valida√ß√µes obrigat√≥rias
  if (!data.tituloTemaAssunto?.trim()) {
    errors.push('T√≠tulo do tema/assunto √© obrigat√≥rio');
  }

  if (!data.anoSerie?.trim()) {
    errors.push('Ano/s√©rie √© obrigat√≥rio');
  }

  if (!data.disciplina?.trim()) {
    errors.push('Disciplina √© obrigat√≥ria');
  }

  if (!data.publicoAlvo?.trim()) {
    errors.push('P√∫blico-alvo √© obrigat√≥rio');
  }

  if (!data.objetivosAprendizagem?.trim()) {
    errors.push('Objetivos de aprendizagem s√£o obrigat√≥rios');
  }

  if (!data.quantidadeAulas?.trim()) {
    errors.push('Quantidade de aulas √© obrigat√≥ria');
  } else {
    const quantAulas = parseInt(data.quantidadeAulas);
    if (isNaN(quantAulas) || quantAulas < 1) {
      errors.push('Quantidade de aulas deve ser um n√∫mero maior que 0');
    }
  }

  if (!data.quantidadeDiagnosticos?.trim()) {
    errors.push('Quantidade de diagn√≥sticos √© obrigat√≥ria');
  } else {
    const quantDiag = parseInt(data.quantidadeDiagnosticos);
    if (isNaN(quantDiag) || quantDiag < 0) {
      errors.push('Quantidade de diagn√≥sticos deve ser um n√∫mero maior ou igual a 0');
    }
  }

  if (!data.quantidadeAvaliacoes?.trim()) {
    errors.push('Quantidade de avalia√ß√µes √© obrigat√≥ria');
  } else {
    const quantAval = parseInt(data.quantidadeAvaliacoes);
    if (isNaN(quantAval) || quantAval < 0) {
      errors.push('Quantidade de avalia√ß√µes deve ser um n√∫mero maior ou igual a 0');
    }
  }

  const isValid = errors.length === 0;
  console.log(`${isValid ? '‚úÖ' : '‚ùå'} Valida√ß√£o ${isValid ? 'passou' : 'falhou'}:`, errors);

  return {
    valid: isValid,
    errors
  };
}

export function processSequenciaDidaticaData(rawData: any): SequenciaDidaticaData {
  console.log('üîÑ Processando dados brutos:', rawData);

  const processed: SequenciaDidaticaData = {
    tituloTemaAssunto: rawData.tituloTemaAssunto || rawData.title || '',
    anoSerie: rawData.anoSerie || rawData.schoolYear || '',
    disciplina: rawData.disciplina || rawData.subject || '',
    bnccCompetencias: rawData.bnccCompetencias || rawData.competencies || '',
    publicoAlvo: rawData.publicoAlvo || rawData.context || '',
    objetivosAprendizagem: rawData.objetivosAprendizagem || rawData.objectives || '',
    quantidadeAulas: rawData.quantidadeAulas || '4',
    quantidadeDiagnosticos: rawData.quantidadeDiagnosticos || '1',
    quantidadeAvaliacoes: rawData.quantidadeAvaliacoes || '1',
    cronograma: rawData.cronograma || ''
  };

  console.log('‚úÖ Dados processados:', processed);
  return processed;
}

export function activityFormToSequenciaData(formData: any): SequenciaDidaticaData {
  console.log('üîÑ Convertendo dados do formul√°rio:', formData);

  return {
    tituloTemaAssunto: formData.tituloTemaAssunto || formData.title || '',
    anoSerie: formData.anoSerie || formData.schoolYear || '',
    disciplina: formData.disciplina || formData.subject || '',
    bnccCompetencias: formData.bnccCompetencias || formData.competencies || '',
    publicoAlvo: formData.publicoAlvo || formData.context || '',
    objetivosAprendizagem: formData.objetivosAprendizagem || formData.objectives || '',
    quantidadeAulas: formData.quantidadeAulas || '4',
    quantidadeDiagnosticos: formData.quantidadeDiagnosticos || '1',
    quantidadeAvaliacoes: formData.quantidadeAvaliacoes || '1',
    cronograma: formData.cronograma || ''
  };
}

// Mapeamento de campos para compatibilidade
export const sequenciaDidaticaFieldMapping = {
  'T√≠tulo do Tema / Assunto': 'tituloTemaAssunto',
  'Ano / S√©rie': 'anoSerie',
  'Disciplina': 'disciplina',
  'BNCC / Compet√™ncias': 'bnccCompetencias',
  'P√∫blico-alvo': 'publicoAlvo',
  'Objetivos de Aprendizagem': 'objetivosAprendizagem',
  'Quantidade de Aulas': 'quantidadeAulas',
  'Quantidade de Diagn√≥sticos': 'quantidadeDiagnosticos',
  'Quantidade de Avalia√ß√µes': 'quantidadeAvaliacoes',
  'Cronograma': 'cronograma'
};
