import { geminiClient } from '@/utils/api/geminiClient';
import { SequenciaDidaticaData } from './sequenciaDidaticaProcessor';

export interface AulaData {
  id: string;
  titulo: string;
  objetivoEspecifico: string;
  resumoContexto: string;
  passoAPasso: {
    introducao: string;
    desenvolvimento: string;
    fechamento: string;
  };
  recursos: string[];
  atividades: {
    tipo: string;
    descricao: string;
    tempo: string;
  }[];
  avaliacao: string;
  tempoEstimado: string;
}

export interface DiagnosticoData {
  id: string;
  titulo: string;
  objetivo: string;
  tipo: string;
  instrumentos: string[];
  criteriosAvaliacao: string[];
  resultadosEsperados: string;
}

export interface AvaliacaoData {
  id: string;
  titulo: string;
  objetivo: string;
  tipo: string;
  instrumentos: string[];
  criteriosAvaliacao: string[];
  peso: number;
  dataPrevisao: string;
}

export interface SequenciaDidaticaCompleta {
  metadados: SequenciaDidaticaData;
  aulas: AulaData[];
  diagnosticos: DiagnosticoData[];
  avaliacoes: AvaliacaoData[];
  encadeamento: {
    progressaoDidatica: string;
    conexoesEntrAulas: string[];
  };
  cronogramaSugerido: {
    duracao: string;
    distribuicao: string;
    observacoes: string;
  };
  generatedAt: string;
  versao: string;
}

export class SequenciaDidaticaGenerator {
  private static instance: SequenciaDidaticaGenerator;

  static getInstance(): SequenciaDidaticaGenerator {
    if (!SequenciaDidaticaGenerator.instance) {
      SequenciaDidaticaGenerator.instance = new SequenciaDidaticaGenerator();
    }
    return SequenciaDidaticaGenerator.instance;
  }

  async gerarSequenciaCompleta(dados: SequenciaDidaticaData): Promise<SequenciaDidaticaCompleta> {
    console.log('üîÑ Iniciando gera√ß√£o da Sequ√™ncia Did√°tica completa:', dados);

    try {
      const prompt = this.construirPromptCompleto(dados);
      console.log('üìù Prompt constru√≠do, enviando para IA...');

      const response = await geminiClient.generateContent(prompt);
      console.log('‚úÖ Resposta recebida da IA');

      const sequenciaGerada = this.processarRespostaIA(response, dados);
      console.log('üéØ Sequ√™ncia processada e estruturada');

      return sequenciaGerada;
    } catch (error) {
      console.error('‚ùå Erro na gera√ß√£o da Sequ√™ncia Did√°tica:', error);
      throw new Error(`Falha na gera√ß√£o: ${error.message}`);
    }
  }

  private construirPromptCompleto(dados: SequenciaDidaticaData): string {
    return `
# GERA√á√ÉO DE SEQU√äNCIA DID√ÅTICA COMPLETA

## DADOS DE ENTRADA:
- **T√≠tulo/Tema:** ${dados.tituloTemaAssunto}
- **Disciplina:** ${dados.disciplina}
- **Ano/S√©rie:** ${dados.anoSerie}
- **P√∫blico-alvo:** ${dados.publicoAlvo}
- **BNCC/Compet√™ncias:** ${dados.bnccCompetencias}
- **Objetivos de Aprendizagem:** ${dados.objetivosAprendizagem}
- **Quantidade de Aulas:** ${dados.quantidadeAulas}
- **Quantidade de Diagn√≥sticos:** ${dados.quantidadeDiagnosticos}
- **Quantidade de Avalia√ß√µes:** ${dados.quantidadeAvaliacoes}
- **Cronograma:** ${dados.cronograma}

## INSTRU√á√ïES PARA GERA√á√ÉO:

Voc√™ deve gerar uma Sequ√™ncia Did√°tica COMPLETA e ESTRUTURADA seguindo estas especifica√ß√µes:

### 1. ESTRUTURA DE RESPOSTA (JSON):
\`\`\`json
{
  "aulas": [
    {
      "id": "aula_001",
      "titulo": "T√≠tulo da Aula",
      "objetivoEspecifico": "Objetivo espec√≠fico e claro",
      "resumoContexto": "Resumo contextual da aula",
      "passoAPasso": {
        "introducao": "Como iniciar a aula (5-10 min)",
        "desenvolvimento": "Atividades principais (25-30 min)",
        "fechamento": "S√≠ntese e pr√≥ximos passos (5-10 min)"
      },
      "recursos": ["Material 1", "Material 2", "Material 3"],
      "atividades": [
        {
          "tipo": "Atividade Pr√°tica",
          "descricao": "Descri√ß√£o da atividade",
          "tempo": "20 minutos"
        }
      ],
      "avaliacao": "Avalia√ß√£o formativa",
      "tempoEstimado": "45 minutos"
    }
  ],
  "diagnosticos": [
    {
      "id": "diag_001",
      "titulo": "Diagn√≥stico Inicial",
      "objetivo": "Avaliar conhecimentos pr√©vios",
      "tipo": "Diagn√≥stico Inicial",
      "instrumentos": ["Question√°rio", "Observa√ß√£o"],
      "criteriosAvaliacao": ["Conhecimento pr√©vio", "Participa√ß√£o"],
      "resultadosEsperados": "Identificar lacunas de aprendizagem"
    }
  ],
  "avaliacoes": [
    {
      "id": "aval_001",
      "titulo": "Avalia√ß√£o Formativa",
      "objetivo": "Verificar aprendizagem",
      "tipo": "Avalia√ß√£o Formativa",
      "instrumentos": ["Prova", "Trabalho"],
      "criteriosAvaliacao": ["Conte√∫do", "Aplica√ß√£o"],
      "peso": 0.5,
      "dataPrevisao": "Semana 3"
    }
  ],
  "encadeamento": {
    "progressaoDidatica": "Descri√ß√£o da progress√£o l√≥gica",
    "conexoesEntrAulas": ["Conex√£o 1", "Conex√£o 2"]
  },
  "cronogramaSugerido": {
    "duracao": "4 semanas",
    "distribuicao": "2 aulas por semana",
    "observacoes": "Observa√ß√µes importantes"
  }
}
\`\`\`

### 2. DIRETRIZES ESPEC√çFICAS:

#### Para as AULAS:
- Crie exatamente ${dados.quantidadeAulas} aulas
- Cada aula deve ter progress√£o clara e l√≥gica
- Passo a passo detalhado e pr√°tico
- Recursos espec√≠ficos e acess√≠veis
- Atividades pr√°ticas envolventes
- Tempo estimado realista

#### Para DIAGN√ìSTICOS:
- Crie exatamente ${dados.quantidadeDiagnosticos} diagn√≥sticos
- Posicione estrategicamente na sequ√™ncia
- Foque em identificar lacunas de aprendizagem
- Crit√©rios claros de an√°lise

#### Para AVALIA√á√ïES:
- Crie exatamente ${dados.quantidadeAvaliacoes} avalia√ß√µes
- Avalie compet√™ncias desenvolvidas
- Crit√©rios objetivos e transparentes
- Formatos diversificados

#### ENcadeamento:
- Demonstre conex√£o entre todas as aulas
- Progress√£o did√°tica clara e justificada
- Prepara√ß√£o para pr√≥ximas etapas

### 3. QUALIDADE EXIGIDA:
- Conte√∫do pr√°tico e aplic√°vel
- Linguagem clara e direta
- Atividades engajadoras
- Recursos acess√≠veis
- Avalia√ß√£o formativa cont√≠nua

**IMPORTANTE:** Retorne APENAS o JSON estruturado, sem texto adicional.
    `;
  }

  private processarRespostaIA(response: any, dadosOriginais: SequenciaDidaticaData): SequenciaDidaticaCompleta {
    console.log('üîç Processando resposta da IA...');

    try {
      // Extrair JSON da resposta
      let jsonContent = response;
      if (typeof response === 'string') {
        // Tentar extrair JSON se vier como string
        const jsonMatch = response.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          jsonContent = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error('JSON n√£o encontrado na resposta');
        }
      }

      // Validar estrutura m√≠nima
      if (!jsonContent.aulas || !Array.isArray(jsonContent.aulas)) {
        throw new Error('Estrutura de aulas inv√°lida');
      }

      // Construir objeto completo
      const sequenciaCompleta: SequenciaDidaticaCompleta = {
        metadados: dadosOriginais,
        aulas: jsonContent.aulas || [],
        diagnosticos: jsonContent.diagnosticos || [],
        avaliacoes: jsonContent.avaliacoes || [],
        encadeamento: jsonContent.encadeamento || {
          progressaoDidatica: 'Progress√£o l√≥gica e sequencial',
          conexoesEntrAulas: []
        },
        cronogramaSugerido: jsonContent.cronogramaSugerido || {
          duracao: `${dadosOriginais.quantidadeAulas} aulas`,
          distribuicao: 'Conforme cronograma escolar',
          observacoes: 'Ajustar conforme necessidade da turma'
        },
        generatedAt: new Date().toISOString(),
        versao: '1.0'
      };

      console.log('‚úÖ Sequ√™ncia estruturada com sucesso:', {
        aulas: sequenciaCompleta.aulas.length,
        diagnosticos: sequenciaCompleta.diagnosticos.length,
        avaliacoes: sequenciaCompleta.avaliacoes.length
      });

      return sequenciaCompleta;
    } catch (error) {
      console.error('‚ùå Erro ao processar resposta da IA:', error);

      // Retornar estrutura m√≠nima em caso de erro
      return {
        metadados: dadosOriginais,
        aulas: [],
        diagnosticos: [],
        avaliacoes: [],
        encadeamento: {
          progressaoDidatica: 'Erro na gera√ß√£o - tente novamente',
          conexoesEntrAulas: []
        },
        cronogramaSugerido: {
          duracao: 'N√£o definido',
          distribuicao: 'N√£o definido',
          observacoes: 'Erro na gera√ß√£o'
        },
        generatedAt: new Date().toISOString(),
        versao: '1.0'
      };
    }
  }

  async regenerarSequencia(
    dadosOriginais: SequenciaDidaticaData,
    dadosAlterados: Partial<SequenciaDidaticaData>
  ): Promise<SequenciaDidaticaCompleta> {
    console.log('üîÑ Regenerando sequ√™ncia com altera√ß√µes:', dadosAlterados);

    const dadosCompletos = { ...dadosOriginais, ...dadosAlterados };
    return this.gerarSequenciaCompleta(dadosCompletos);
  }

  async generateFromFormData(formData: SequenciaDidaticaData): Promise<SequenciaDidaticaCompleta> {
    try {
      console.log('ü§ñ Iniciando gera√ß√£o de Sequ√™ncia Did√°tica com IA:', formData);

      const quantidadeAulas = parseInt(formData.quantidadeAulas) || 4;
      const quantidadeDiagnosticos = parseInt(formData.quantidadeDiagnosticos) || 1;
      const quantidadeAvaliacoes = parseInt(formData.quantidadeAvaliacoes) || 2;


  // M√©todos auxiliares para gera√ß√£o de conte√∫do b√°sico
  private generateBasicAulas(formData: SequenciaDidaticaData, quantidade: number): AulaData[] {
    const aulas: AulaData[] = [];
    
    for (let i = 0; i < quantidade; i++) {
      aulas.push({
        id: `aula_${i + 1}`,
        titulo: `Aula ${i + 1}: ${formData.tituloTemaAssunto} - Parte ${i + 1}`,
        objetivoEspecifico: `Desenvolver compreens√£o sobre ${formData.tituloTemaAssunto} com foco nos objetivos espec√≠ficos da aula ${i + 1}`,
        resumoContexto: `Esta aula aborda aspectos fundamentais de ${formData.tituloTemaAssunto}, adequada para ${formData.anoSerie}`,
        passoAPasso: {
          introducao: `Apresenta√ß√£o inicial do conte√∫do de ${formData.tituloTemaAssunto} (10 min)`,
          desenvolvimento: `Desenvolvimento pr√°tico e te√≥rico dos conceitos principais (30 min)`,
          fechamento: `S√≠ntese dos aprendizados e prepara√ß√£o para pr√≥xima aula (10 min)`
        },
        recursos: ['Quadro/lousa', 'Material did√°tico impresso', 'Projetor/slides', 'Exerc√≠cios pr√°ticos'],
        atividades: [
          {
            tipo: 'Exposi√ß√£o dialogada',
            descricao: `Apresenta√ß√£o do tema ${formData.tituloTemaAssunto} com participa√ß√£o ativa dos estudantes`,
            tempo: '15 min'
          },
          {
            tipo: 'Atividade pr√°tica',
            descricao: `Exerc√≠cios aplicados sobre o conte√∫do trabalhado na aula`,
            tempo: '20 min'
          },
          {
            tipo: 'Discuss√£o em grupo',
            descricao: `Compartilhamento de resultados e reflex√µes sobre o aprendizado`,
            tempo: '15 min'
          }
        ],
        avaliacao: 'Avalia√ß√£o formativa atrav√©s da participa√ß√£o nas atividades, resolu√ß√£o de exerc√≠cios e observa√ß√£o da compreens√£o dos conceitos',
        tempoEstimado: '50 min'
      });
    }
    
    return aulas;
  }

  private generateBasicDiagnosticos(formData: SequenciaDidaticaData, quantidade: number): DiagnosticoData[] {
    const diagnosticos: DiagnosticoData[] = [];
    
    for (let i = 0; i < quantidade; i++) {
      diagnosticos.push({
        id: `diagnostico_${i + 1}`,
        titulo: `Diagn√≥stico ${i + 1}: Avalia√ß√£o de Conhecimentos - ${formData.tituloTemaAssunto}`,
        objetivo: `Identificar o n√≠vel de conhecimento pr√©vio dos estudantes sobre ${formData.tituloTemaAssunto}`,
        tipo: i === 0 ? 'Diagn√≥stico Inicial' : 'Diagn√≥stico Processual',
        instrumentos: [
          'Question√°rio estruturado',
          'Observa√ß√£o sistem√°tica',
          'Atividade investigativa',
          'Conversa dirigida'
        ],
        criteriosAvaliacao: [
          'Conhecimentos pr√©vios sobre o tema',
          'Capacidade de racioc√≠nio l√≥gico',
          'Habilidades de comunica√ß√£o e express√£o',
          'Interesse e motiva√ß√£o para o conte√∫do',
          'Dificuldades identificadas'
        ],
        resultadosEsperados: `Mapear o perfil de conhecimento da turma sobre ${formData.tituloTemaAssunto} para adequar as estrat√©gias pedag√≥gicas`
      });
    }
    
    return diagnosticos;
  }

  private generateBasicAvaliacoes(formData: SequenciaDidaticaData, quantidade: number): AvaliacaoData[] {
    const avaliacoes: AvaliacaoData[] = [];
    
    for (let i = 0; i < quantidade; i++) {
      avaliacoes.push({
        id: `avaliacao_${i + 1}`,
        titulo: `Avalia√ß√£o ${i + 1}: ${formData.tituloTemaAssunto}`,
        objetivo: `Verificar a aprendizagem e compreens√£o dos objetivos propostos sobre ${formData.tituloTemaAssunto}`,
        tipo: i === 0 ? 'Avalia√ß√£o Formativa' : 'Avalia√ß√£o Somativa',
        instrumentos: [
          'Prova escrita com quest√µes objetivas e discursivas',
          'Trabalho em equipe',
          'Apresenta√ß√£o oral',
          'Portf√≥lio de atividades'
        ],
        criteriosAvaliacao: [
          'Compreens√£o conceitual do conte√∫do',
          'Aplica√ß√£o pr√°tica do conhecimento adquirido',
          'Capacidade de an√°lise e s√≠ntese',
          'Criatividade e originalidade nas respostas',
          'Uso adequado da linguagem t√©cnica'
        ],
        peso: i === 0 ? 0.4 : 0.6,
        dataPrevisao: `A ser definida conforme cronograma da escola`
      });
    }
    
    return avaliacoes;


  // M√©todo est√°tico para facilitar o uso da classe
  static async generateSequenciaDidatica(formData: SequenciaDidaticaData): Promise<SequenciaDidaticaCompleta> {
    const generator = SequenciaDidaticaGenerator.getInstance();
    return generator.generateFromFormData(formData);
  }

  }


      // Validar dados antes da gera√ß√£o
      if (!formData.tituloTemaAssunto?.trim()) {
        throw new Error('T√≠tulo do tema/assunto √© obrigat√≥rio para gerar a sequ√™ncia');
      }

      // Gerar conte√∫do com IA do Gemini
      const prompt = this.createSequenciaDidaticaPrompt(formData);
      console.log('üìù Prompt gerado para IA');

      let aiResponse;
      try {
        console.log('üîÑ Enviando requisi√ß√£o para Gemini API...');
        aiResponse = await geminiClient.generateContent(prompt);
        console.log('‚úÖ Resposta da IA recebida com sucesso');
        
        // Log detalhado da resposta para debug
        if (typeof aiResponse === 'string') {
          console.log('üìÑ Resposta da IA (texto):', aiResponse.substring(0, 500) + '...');
        } else {
          console.log('üìÑ Resposta da IA (objeto):', Object.keys(aiResponse));
        }
      } catch (error) {
        console.error('‚ùå Erro na API Gemini:', error);
        console.warn('‚ö†Ô∏è Gerando conte√∫do estruturado padr√£o...');
        aiResponse = this.generateFallbackContent(formData);
      }

      // Processar resposta da IA e estruturar dados
      const sequenciaData = this.processAIResponse(aiResponse, formData, quantidadeAulas, quantidadeDiagnosticos, quantidadeAvaliacoes);

      // Validar se a sequ√™ncia foi gerada corretamente
      if (!sequenciaData.aulas || sequenciaData.aulas.length === 0) {
        console.warn('‚ö†Ô∏è Nenhuma aula foi gerada, criando estrutura b√°sica...');
        sequenciaData.aulas = this.generateBasicAulas(formData, quantidadeAulas);
      }

      if (!sequenciaData.diagnosticos || sequenciaData.diagnosticos.length === 0) {
        console.warn('‚ö†Ô∏è Nenhum diagn√≥stico foi gerado, criando estrutura b√°sica...');
        sequenciaData.diagnosticos = this.generateBasicDiagnosticos(formData, quantidadeDiagnosticos);
      }

      if (!sequenciaData.avaliacoes || sequenciaData.avaliacoes.length === 0) {
        console.warn('‚ö†Ô∏è Nenhuma avalia√ß√£o foi gerada, criando estrutura b√°sica...');
        sequenciaData.avaliacoes = this.generateBasicAvaliacoes(formData, quantidadeAvaliacoes);
      }

      console.log('‚úÖ Sequ√™ncia Did√°tica gerada com sucesso:', {
        aulas: sequenciaData.aulas.length,
        diagnosticos: sequenciaData.diagnosticos.length,
        avaliacoes: sequenciaData.avaliacoes.length
      });

      return sequenciaData;

    } catch (error) {
      console.error('‚ùå Erro ao gerar Sequ√™ncia Did√°tica:', error);
      throw new Error(`Erro na gera√ß√£o: ${error.message}`);
    }
  }

  private createSequenciaDidaticaPrompt(dados: SequenciaDidaticaData): string {
    return `GERE UMA SEQU√äNCIA DID√ÅTICA COMPLETA ESTRUTURADA

# DADOS DE ENTRADA:
- **T√≠tulo/Tema:** ${dados.tituloTemaAssunto}
- **Disciplina:** ${dados.disciplina} 
- **Ano/S√©rie:** ${dados.anoSerie}
- **P√∫blico-alvo:** ${dados.publicoAlvo}
- **BNCC/Compet√™ncias:** ${dados.bnccCompetencias}
- **Objetivos de Aprendizagem:** ${dados.objetivosAprendizagem}
- **Quantidade de Aulas:** ${dados.quantidadeAulas}
- **Quantidade de Diagn√≥sticos:** ${dados.quantidadeDiagnosticos}
- **Quantidade de Avalia√ß√µes:** ${dados.quantidadeAvaliacoes}
- **Cronograma:** ${dados.cronograma}

# INSTRU√á√ïES PARA GERA√á√ÉO:

Voc√™ deve gerar uma Sequ√™ncia Did√°tica COMPLETA seguindo EXATAMENTE a estrutura JSON abaixo:

## ESTRUTURA OBRIGAT√ìRIA (JSON):
\`\`\`json
{
  "aulas": [
    {
      "id": "aula_001",
      "titulo": "T√≠tulo espec√≠fico da aula",
      "objetivoEspecifico": "Objetivo claro e mensur√°vel",
      "resumoContexto": "Contexto pedag√≥gico da aula",
      "passoAPasso": {
        "introducao": "Como iniciar a aula (5-10 min)",
        "desenvolvimento": "Atividades principais (25-35 min)",
        "fechamento": "S√≠ntese e pr√≥ximos passos (5-10 min)"
      },
      "recursos": ["Recurso 1", "Recurso 2", "Recurso 3"],
      "atividades": [
        {
          "tipo": "Tipo da atividade",
          "descricao": "Descri√ß√£o detalhada",
          "tempo": "XX minutos"
        }
      ],
      "avaliacao": "M√©todo de avalia√ß√£o da aula",
      "tempoEstimado": "XX minutos"
    }
  ],
  "diagnosticos": [
    {
      "id": "diag_001",
      "titulo": "Nome do diagn√≥stico",
      "objetivo": "Objetivo do diagn√≥stico",
      "tipo": "Tipo do diagn√≥stico",
      "instrumentos": ["Instrumento 1", "Instrumento 2"],
      "criteriosAvaliacao": ["Crit√©rio 1", "Crit√©rio 2"],
      "resultadosEsperados": "O que se espera identificar"
    }
  ],
  "avaliacoes": [
    {
      "id": "aval_001",
      "titulo": "Nome da avalia√ß√£o",
      "objetivo": "Objetivo da avalia√ß√£o",
      "tipo": "Tipo da avalia√ß√£o",
      "instrumentos": ["Instrumento 1", "Instrumento 2"],
      "criteriosAvaliacao": ["Crit√©rio 1", "Crit√©rio 2"],
      "peso": 0.5,
      "dataPrevisao": "Quando aplicar"
    }
  ],
  "encadeamento": {
    "progressaoDidatica": "Descri√ß√£o da progress√£o l√≥gica",
    "conexoesEntrAulas": ["Conex√£o 1", "Conex√£o 2"]
  },
  "cronogramaSugerido": {
    "duracao": "Dura√ß√£o total",
    "distribuicao": "Como distribuir no tempo",
    "observacoes": "Observa√ß√µes importantes"
  }
}
\`\`\`

## DIRETRIZES ESPEC√çFICAS:

### Para as AULAS (exatamente ${dados.quantidadeAulas} aulas):
- Progress√£o clara e l√≥gica
- Passo a passo detalhado e pr√°tico
- Recursos espec√≠ficos e acess√≠veis
- Atividades engajadoras e adequadas ao ${dados.anoSerie}
- Tempo estimado realista (45-50 min por aula)
- Alinhamento com os objetivos: ${dados.objetivosAprendizagem}

### Para DIAGN√ìSTICOS (exatamente ${dados.quantidadeDiagnosticos} diagn√≥sticos):
- Posicionamento estrat√©gico na sequ√™ncia
- Instrumentos adequados ao ${dados.anoSerie}
- Crit√©rios claros de an√°lise
- Foco em identificar lacunas de aprendizagem

### Para AVALIA√á√ïES (exatamente ${dados.quantidadeAvaliacoes} avalia√ß√µes):
- Avalia√ß√£o das compet√™ncias: ${dados.bnccCompetencias}
- Crit√©rios objetivos e transparentes
- Formatos diversificados adequados √† disciplina ${dados.disciplina}
- Alinhamento com objetivos de aprendizagem

### ENCADEAMENTO:
- Demonstre conex√£o clara entre todas as aulas
- Progress√£o did√°tica justificada
- Prepara√ß√£o adequada para pr√≥ximas etapas

**IMPORTANTE:** 
1. Retorne APENAS o JSON estruturado, sem texto adicional
2. Garanta que todos os arrays tenham o n√∫mero correto de elementos
3. Use linguagem adequada ao ${dados.anoSerie}
4. Mantenha foco no tema: ${dados.tituloTemaAssunto}
5. Considere o contexto: ${dados.publicoAlvo}`;
  }

  private processAIResponse(aiResponse: any, formData: SequenciaDidaticaData, quantidadeAulas: number, quantidadeDiagnosticos: number, quantidadeAvaliacoes: number): SequenciaDidaticaCompleta {
    // Criar estrutura b√°sica da sequ√™ncia
    const sequenciaData: SequenciaDidaticaCompleta = {
      metadados: formData,
      aulas: [],
      diagnosticos: [],
      avaliacoes: [],
      encadeamento: {
        progressaoDidatica: '',
        conexoesEntrAulas: []
      },
      cronogramaSugerido: {
        duracao: '',
        distribuicao: '',
        observacoes: ''
      },
      generatedAt: new Date().toISOString(),
      versao: '1.0'
    };

    // Tentar extrair dados da resposta da IA
    let aiData = null;
    try {
      const responseText = typeof aiResponse === 'string' ? aiResponse : aiResponse?.text || JSON.stringify(aiResponse);
      aiData = JSON.parse(responseText);
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao parsear resposta da IA, usando dados estruturados padr√£o');
    }

    // Gerar aulas (com IA ou padr√£o)
    for (let i = 0; i < quantidadeAulas; i++) {
      const aulaIA = aiData?.aulas?.[i];
      sequenciaData.aulas.push({
        id: `aula_${i + 1}`,
        titulo: aulaIA?.titulo || `Aula ${i + 1}: ${formData.tituloTemaAssunto} - Parte ${i + 1}`,
        objetivoEspecifico: aulaIA?.objetivoEspecifico || `Desenvolver compreens√£o sobre ${formData.tituloTemaAssunto} - Objetivo ${i + 1}`,
        resumoContexto: aulaIA?.resumoContexto || `Contexto pedag√≥gico da aula ${i + 1} sobre ${formData.tituloTemaAssunto}`,
        passoAPasso: {
          introducao: aulaIA?.passoAPasso?.introducao || `Introdu√ß√£o: Apresenta√ß√£o do tema ${formData.tituloTemaAssunto} (15 min)`,
          desenvolvimento: aulaIA?.passoAPasso?.desenvolvimento || `Desenvolvimento: Explora√ß√£o pr√°tica do conte√∫do (25 min)`,
          fechamento: aulaIA?.passoAPasso?.fechamento || `Fechamento: S√≠ntese e avalia√ß√£o da aprendizagem (10 min)`
        },
        recursos: aulaIA?.recursos || ['Quadro', 'Material did√°tico', 'Projetor', 'Material impresso'],
        atividades: aulaIA?.atividades || [
          {
            tipo: 'Exposi√ß√£o dialogada',
            descricao: `Apresenta√ß√£o do tema ${formData.tituloTemaAssunto} com participa√ß√£o dos estudantes`,
            tempo: '15 min'
          },
          {
            tipo: 'Atividade pr√°tica',
            descricao: `Exerc√≠cio aplicado sobre o conte√∫do trabalhado`,
            tempo: '20 min'
          },
          {
            tipo: 'Discuss√£o em grupo',
            descricao: `Compartilhamento de resultados e reflex√µes`,
            tempo: '15 min'
          }
        ],
        avaliacao: aulaIA?.avaliacao || 'Avalia√ß√£o formativa atrav√©s da participa√ß√£o, exerc√≠cios pr√°ticos e observa√ß√£o direta',
        tempoEstimado: aulaIA?.tempoEstimado || '50 min'
      });
    }

    // Gerar diagn√≥sticos
    for (let i = 0; i < quantidadeDiagnosticos; i++) {
      const diagnosticoIA = aiData?.diagnosticos?.[i];
      sequenciaData.diagnosticos.push({
        id: `diagnostico_${i + 1}`,
        titulo: diagnosticoIA?.titulo || `Diagn√≥stico ${i + 1}: ${formData.tituloTemaAssunto}`,
        objetivo: diagnosticoIA?.objetivo || `Identificar conhecimentos pr√©vios sobre ${formData.tituloTemaAssunto}`,
        tipo: diagnosticoIA?.tipo || (i === 0 ? 'Diagn√≥stico Inicial' : 'Diagn√≥stico Processual'),
        instrumentos: diagnosticoIA?.instrumentos || ['Question√°rio diagn√≥stico', 'Observa√ß√£o sistem√°tica', 'Atividade investigativa'],
        criteriosAvaliacao: diagnosticoIA?.criteriosAvaliacao || [
          'Conhecimentos pr√©vios sobre o tema',
          'Capacidade de racioc√≠nio',
          'Habilidades de comunica√ß√£o',
          'Interesse e motiva√ß√£o'
        ],
        resultadosEsperados: diagnosticoIA?.resultadosEsperados || `Mapear o perfil de conhecimento da turma sobre ${formData.tituloTemaAssunto}`
      });
    }

    // Gerar avalia√ß√µes
    for (let i = 0; i < quantidadeAvaliacoes; i++) {
      const avaliacaoIA = aiData?.avaliacoes?.[i];
      sequenciaData.avaliacoes.push({
        id: `avaliacao_${i + 1}`,
        titulo: avaliacaoIA?.titulo || `Avalia√ß√£o ${i + 1}: ${formData.tituloTemaAssunto}`,
        objetivo: avaliacaoIA?.objetivo || `Verificar a aprendizagem dos objetivos propostos sobre ${formData.tituloTemaAssunto}`,
        tipo: avaliacaoIA?.tipo || (i === 0 ? 'Avalia√ß√£o Formativa' : 'Avalia√ß√£o Somativa'),
        instrumentos: avaliacaoIA?.instrumentos || ['Prova escrita', 'Trabalho em equipe', 'Apresenta√ß√£o oral'],
        criteriosAvaliacao: avaliacaoIA?.criteriosAvaliacao || [
          'Compreens√£o conceitual',
          'Aplica√ß√£o pr√°tica do conhecimento',
          'Capacidade de s√≠ntese e an√°lise',
          'Criatividade e originalidade'
        ],
        peso: avaliacaoIA?.peso || (i === 0 ? 0.4 : 0.6),
        dataPrevisao: avaliacaoIA?.dataPrevisao || `A definir conforme cronograma`
      });
    }

    // Configurar encadeamento did√°tico
    sequenciaData.encadeamento = {
      progressaoDidatica: aiData?.encadeamento?.progressaoDidatica || `A sequ√™ncia did√°tica sobre ${formData.tituloTemaAssunto} foi estruturada de forma progressiva, partindo de conceitos b√°sicos at√© aplica√ß√µes mais complexas, garantindo a constru√ß√£o gradual do conhecimento pelos estudantes do ${formData.anoSerie}.`,
      conexoesEntrAulas: aiData?.encadeamento?.conexoesEntrAulas || sequenciaData.aulas.map((aula, index) => {
        if (index === 0) {
          return `${aula.titulo} - Introdu√ß√£o ao tema e levantamento de conhecimentos pr√©vios`;
        } else if (index === sequenciaData.aulas.length - 1) {
          return `${aula.titulo} - S√≠ntese, aplica√ß√£o e consolida√ß√£o dos conhecimentos adquiridos`;
        } else {
          return `${aula.titulo} - Desenvolvimento e aprofundamento progressivo dos conceitos`;
        }
      })
    };

    // Configurar cronograma
    sequenciaData.cronogramaSugerido = {
      duracao: aiData?.cronogramaSugerido?.duracao || `${quantidadeAulas} aulas + ${quantidadeDiagnosticos} diagn√≥sticos + ${quantidadeAvaliacoes} avalia√ß√µes`,
      distribuicao: aiData?.cronogramaSugerido?.distribuicao || 'Sugest√£o: 2 aulas por semana, com diagn√≥sticos no in√≠cio e meio do processo, e avalia√ß√µes distribu√≠das ao longo da sequ√™ncia',
      observacoes: aiData?.cronogramaSugerido?.observacoes || formData.cronograma || 'Cronograma flex√≠vel, adapt√°vel conforme necessidades da turma e calend√°rio escolar. Considerar feriados e eventos institucionais.'
    };

    return sequenciaData;
  }

  private generateFallbackContent(formData: SequenciaDidaticaData): any {
    const quantidadeAulas = parseInt(formData.quantidadeAulas) || 4;
    const quantidadeDiagnosticos = parseInt(formData.quantidadeDiagnosticos) || 1;
    const quantidadeAvaliacoes = parseInt(formData.quantidadeAvaliacoes) || 2;

    const fallbackData = {
      aulas: this.generateBasicAulas(formData, quantidadeAulas),
      diagnosticos: this.generateBasicDiagnosticos(formData, quantidadeDiagnosticos),
      avaliacoes: this.generateBasicAvaliacoes(formData, quantidadeAvaliacoes),
      encadeamento: {
        progressaoDidatica: `A sequ√™ncia did√°tica sobre "${formData.tituloTemaAssunto}" foi estruturada de forma progressiva para ${formData.anoSerie}, partindo de conceitos b√°sicos at√© aplica√ß√µes mais complexas, garantindo a constru√ß√£o gradual do conhecimento pelos estudantes.`,
        conexoesEntrAulas: [
          `Aula 1 - Introdu√ß√£o ao tema e levantamento de conhecimentos pr√©vios sobre ${formData.tituloTemaAssunto}`,
          `Aulas 2-${Math.max(1, quantidadeAulas-1)} - Desenvolvimento e aprofundamento progressivo dos conceitos`,
          `Aula ${quantidadeAulas} - S√≠ntese, aplica√ß√£o e consolida√ß√£o dos conhecimentos adquiridos`
        ]
      },
      cronogramaSugerido: {
        duracao: `${quantidadeAulas} aulas + ${quantidadeDiagnosticos} diagn√≥sticos + ${quantidadeAvaliacoes} avalia√ß√µes`,
        distribuicao: `Sugest√£o: 2 aulas por semana para ${formData.anoSerie}, com diagn√≥sticos no in√≠cio e avalia√ß√µes distribu√≠das ao longo da sequ√™ncia`,
        observacoes: formData.cronograma || `Cronograma flex√≠vel, adapt√°vel conforme necessidades da turma de ${formData.anoSerie} e calend√°rio escolar. Considerar feriados e eventos institucionais.`
      }
    };

    return {
      text: JSON.stringify(fallbackData)
    };
  }

  async regenerateWithAI(formData: SequenciaDidaticaData): Promise<SequenciaDidaticaCompleta> {
    console.log('ü§ñ Regenera√ß√£o com IA em desenvolvimento...');
    return SequenciaDidaticaGenerator.generateSequenciaDidatica(formData);
  }
}

// Exportar inst√¢ncia singleton
export const sequenciaDidaticaGenerator = SequenciaDidaticaGenerator.getInstance();