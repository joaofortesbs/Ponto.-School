
import { geminiClient } from '../../../../utils/api/geminiClient';

export interface SequenciaDidaticaData {
  tituloTemaAssunto: string;
  disciplina: string;
  anoSerie: string;
  publicoAlvo: string;
  objetivosAprendizagem: string;
  quantidadeAulas: string;
  quantidadeDiagnosticos: string;
  quantidadeAvaliacoes: string;
  cronograma?: string;
}

export interface SequenciaDidaticaResult {
  success: boolean;
  data?: any;
  error?: string;
}

class SequenciaDidaticaBuilder {
  async construirSequenciaDidatica(data: SequenciaDidaticaData): Promise<SequenciaDidaticaResult> {
    try {
      console.log('üöÄ Iniciando constru√ß√£o da Sequ√™ncia Did√°tica...');
      console.log('üìä Dados recebidos:', data);

      // Validar dados obrigat√≥rios
      if (!data.tituloTemaAssunto || !data.disciplina || !data.anoSerie || !data.publicoAlvo || !data.objetivosAprendizagem) {
        console.error('‚ùå Dados obrigat√≥rios faltando');
        return {
          success: false,
          error: 'Dados obrigat√≥rios n√£o fornecidos'
        };
      }

      // Converter strings para n√∫meros
      const quantidadeAulas = parseInt(data.quantidadeAulas) || 4;
      const quantidadeDiagnosticos = parseInt(data.quantidadeDiagnosticos) || 1;
      const quantidadeAvaliacoes = parseInt(data.quantidadeAvaliacoes) || 2;

      console.log('üìã Quantidades validadas:', {
        aulas: quantidadeAulas,
        diagnosticos: quantidadeDiagnosticos,
        avaliacoes: quantidadeAvaliacoes
      });

      // Criar prompt para a IA
      const prompt = `
Voc√™ √© um especialista em educa√ß√£o. Crie uma sequ√™ncia did√°tica detalhada com base nas seguintes informa√ß√µes:

DADOS DA SEQU√äNCIA DID√ÅTICA:
- T√≠tulo/Tema: ${data.tituloTemaAssunto}
- Disciplina: ${data.disciplina}
- Ano/S√©rie: ${data.anoSerie}
- P√∫blico-alvo: ${data.publicoAlvo}
- Objetivos de Aprendizagem: ${data.objetivosAprendizagem}
- Quantidade de Aulas: ${quantidadeAulas}
- Quantidade de Diagn√≥sticos: ${quantidadeDiagnosticos}
- Quantidade de Avalia√ß√µes: ${quantidadeAvaliacoes}
${data.cronograma ? `- Cronograma: ${data.cronograma}` : ''}

RETORNE UM JSON V√ÅLIDO com a seguinte estrutura:
{
  "tituloTemaAssunto": "${data.tituloTemaAssunto}",
  "disciplina": "${data.disciplina}",
  "anoSerie": "${data.anoSerie}",
  "publicoAlvo": "${data.publicoAlvo}",
  "objetivosAprendizagem": "${data.objetivosAprendizagem}",
  "quantidadeAulas": "${quantidadeAulas}",
  "quantidadeDiagnosticos": "${quantidadeDiagnosticos}",
  "quantidadeAvaliacoes": "${quantidadeAvaliacoes}",
  "cronograma": "cronograma detalhado",
  "aulas": [
    {
      "numero": 1,
      "titulo": "t√≠tulo da aula",
      "descricao": "descri√ß√£o detalhada",
      "objetivos": ["objetivo 1", "objetivo 2"],
      "metodologia": "metodologia utilizada",
      "recursos": ["recurso 1", "recurso 2"],
      "duracao": "50 minutos",
      "atividades": ["atividade 1", "atividade 2"]
    }
  ],
  "diagnosticos": [
    {
      "numero": 1,
      "titulo": "t√≠tulo do diagn√≥stico",
      "descricao": "descri√ß√£o",
      "tipo": "Diagn√≥stica",
      "instrumentos": ["instrumento 1"],
      "duracao": "tempo estimado"
    }
  ],
  "avaliacoes": [
    {
      "numero": 1,
      "titulo": "t√≠tulo da avalia√ß√£o",
      "descricao": "descri√ß√£o",
      "tipo": "Formativa/Somativa",
      "instrumentos": ["instrumento 1"],
      "peso": "porcentagem"
    }
  ]
}

Crie ${quantidadeAulas} aulas detalhadas, ${quantidadeDiagnosticos} diagn√≥sticos e ${quantidadeAvaliacoes} avalia√ß√µes seguindo a estrutura acima.
`;

      console.log('ü§ñ Enviando prompt para IA...');

      // Chamar a IA
      const result = await geminiClient.generate(prompt);

      if (!result.success) {
        console.error('‚ùå Erro na IA:', result.error);
        return this.getFallbackSequencia(data);
      }

      console.log('‚úÖ Resposta da IA recebida');

      // Verificar se os dados est√£o no formato correto
      let sequenciaData = result.data;
      
      // Se a resposta veio como string de conte√∫do, tentar extrair JSON
      if (sequenciaData && sequenciaData.content && typeof sequenciaData.content === 'string') {
        try {
          sequenciaData = JSON.parse(sequenciaData.content);
        } catch (error) {
          console.error('‚ùå Erro ao parsear JSON da resposta:', error);
          return this.getFallbackSequencia(data);
        }
      }

      // Validar estrutura da resposta
      if (!sequenciaData || !sequenciaData.aulas || !Array.isArray(sequenciaData.aulas)) {
        console.error('‚ùå Estrutura de resposta inv√°lida');
        return this.getFallbackSequencia(data);
      }

      console.log('‚úÖ Sequ√™ncia Did√°tica constru√≠da com sucesso');
      console.log('üìä Estrutura final:', {
        aulas: sequenciaData.aulas?.length || 0,
        diagnosticos: sequenciaData.diagnosticos?.length || 0,
        avaliacoes: sequenciaData.avaliacoes?.length || 0
      });

      return {
        success: true,
        data: sequenciaData
      };

    } catch (error) {
      console.error('‚ùå Erro na constru√ß√£o da Sequ√™ncia Did√°tica:', error);
      return this.getFallbackSequencia(data);
    }
  }

  private getFallbackSequencia(data: SequenciaDidaticaData): SequenciaDidaticaResult {
    console.log('üîÑ Usando fallback para Sequ√™ncia Did√°tica');

    const quantidadeAulas = parseInt(data.quantidadeAulas) || 4;
    const quantidadeDiagnosticos = parseInt(data.quantidadeDiagnosticos) || 1;
    const quantidadeAvaliacoes = parseInt(data.quantidadeAvaliacoes) || 2;

    // Gerar aulas baseadas na quantidade solicitada
    const aulas = [];
    for (let i = 1; i <= quantidadeAulas; i++) {
      aulas.push({
        numero: i,
        titulo: `Aula ${i} - ${data.tituloTemaAssunto}`,
        descricao: `Desenvolvimento do tema ${data.tituloTemaAssunto} - parte ${i}`,
        objetivos: [`Objetivo espec√≠fico da aula ${i}`, "Desenvolver conhecimentos pr√°ticos"],
        metodologia: "Aula expositiva dialogada com atividades pr√°ticas",
        recursos: ["Quadro", "Material did√°tico", "Recursos audiovisuais"],
        duracao: "50 minutos",
        atividades: [`Atividade pr√°tica ${i}`, "Discuss√£o em grupo", "Exerc√≠cios aplicados"]
      });
    }

    // Gerar diagn√≥sticos
    const diagnosticos = [];
    for (let i = 1; i <= quantidadeDiagnosticos; i++) {
      diagnosticos.push({
        numero: i,
        titulo: `Diagn√≥stico ${i}`,
        descricao: `Avalia√ß√£o diagn√≥stica ${i} sobre ${data.tituloTemaAssunto}`,
        tipo: "Diagn√≥stica",
        instrumentos: ["Question√°rio", "Observa√ß√£o"],
        duracao: "30 minutos"
      });
    }

    // Gerar avalia√ß√µes
    const avaliacoes = [];
    for (let i = 1; i <= quantidadeAvaliacoes; i++) {
      avaliacoes.push({
        numero: i,
        titulo: `Avalia√ß√£o ${i}`,
        descricao: `Avalia√ß√£o ${i} dos conhecimentos sobre ${data.tituloTemaAssunto}`,
        tipo: i === quantidadeAvaliacoes ? "Somativa" : "Formativa",
        instrumentos: ["Prova escrita", "Atividades pr√°ticas"],
        peso: `${Math.round(100/quantidadeAvaliacoes)}%`
      });
    }

    const fallbackData = {
      tituloTemaAssunto: data.tituloTemaAssunto,
      disciplina: data.disciplina,
      anoSerie: data.anoSerie,
      publicoAlvo: data.publicoAlvo,
      objetivosAprendizagem: data.objetivosAprendizagem,
      quantidadeAulas: data.quantidadeAulas,
      quantidadeDiagnosticos: data.quantidadeDiagnosticos,
      quantidadeAvaliacoes: data.quantidadeAvaliacoes,
      cronograma: data.cronograma || `Sequ√™ncia de ${quantidadeAulas} aulas distribu√≠das adequadamente`,
      aulas,
      diagnosticos,
      avaliacoes
    };

    return {
      success: true,
      data: fallbackData
    };
  }
}

export const sequenciaDidaticaBuilder = new SequenciaDidaticaBuilder();
export default sequenciaDidaticaBuilder;
