
import { ActivityFormData } from '../../construction/types/ActivityTypes';
import { GeminiClient } from '@/utils/api/geminiClient';

export interface PlanoAulaData {
  disciplina: string;
  tema: string;
  serie: string;
  cargaHoraria: string;
  habilidadesBNCC: string;
  objetivoGeral: string;
  materiaisRecursos: string;
  perfilTurma: string;
  tipoAula: string;
  observacoesProfessor: string;
}

export interface PlanoAulaResponse {
  titulo: string;
  descricao: string;
  visao_geral: {
    disciplina: string;
    tema: string;
    serie: string;
    tempo: string;
    metodologia: string;
    recursos: string[];
    sugestoes_ia: string[];
  };
  objetivos: Array<{
    descricao: string;
    habilidade_bncc: string;
    sugestao_reescrita: string;
    atividade_relacionada: string;
  }>;
  metodologia: {
    nome: string;
    descricao: string;
    alternativas: string[];
    simulacao_de_aula: string;
    explicacao_em_video: string;
  };
  desenvolvimento: Array<{
    etapa: number;
    titulo: string;
    descricao: string;
    tipo_interacao: string;
    tempo_estimado: string;
    recurso_gerado: string;
    nota_privada_professor: string;
  }>;
  atividades: Array<{
    nome: string;
    tipo: string;
    ref_objetivos: number[];
    visualizar_como_aluno: string;
    sugestoes_ia: string[];
  }>;
  avaliacao: {
    criterios: string;
    instrumentos: string[];
    feedback: string;
  };
  recursos_extras: {
    materiais_complementares: string[];
    tecnologias: string[];
    referencias: string[];
  };
}

export class PlanoAulaBuilder {
  private static geminiClient = new GeminiClient();

  /**
   * Formata dados do formul√°rio para envio √† IA
   */
  static formatDataForAI(formData: ActivityFormData): PlanoAulaData {
    console.log('üìä PlanoAulaBuilder - Formatando dados para IA:', formData);

    return {
      disciplina: formData.subject || 'Disciplina n√£o especificada',
      tema: formData.theme || 'Tema n√£o especificado',
      serie: formData.schoolYear || 'S√©rie n√£o especificada',
      cargaHoraria: formData.timeLimit || '50 minutos',
      habilidadesBNCC: formData.competencies || 'Compet√™ncias da BNCC',
      objetivoGeral: formData.objectives || 'Objetivo geral n√£o especificado',
      materiaisRecursos: formData.materials || 'Materiais b√°sicos',
      perfilTurma: formData.context || 'Turma heterog√™nea',
      tipoAula: formData.difficultyLevel || 'Metodologia ativa',
      observacoesProfessor: formData.evaluation || 'Observa√ß√µes gerais'
    };
  }

  /**
   * Gera prompt estruturado para o Gemini
   */
  static generatePrompt(planoData: PlanoAulaData): string {
    return `Voc√™ √© um especialista em educa√ß√£o brasileira e cria√ß√£o de planos de aula. Crie um plano de aula COMPLETO e DETALHADO baseado nos dados espec√≠ficos fornecidos.

DADOS ESPEC√çFICOS DO PLANO:
- Disciplina: ${planoData.disciplina}
- Tema: ${planoData.tema}
- S√©rie/Ano: ${planoData.serie}
- Carga Hor√°ria: ${planoData.cargaHoraria}
- Habilidades BNCC: ${planoData.habilidadesBNCC}
- Objetivo Geral: ${planoData.objetivoGeral}
- Materiais/Recursos: ${planoData.materiaisRecursos}
- Perfil da Turma: ${planoData.perfilTurma}
- Tipo de Aula: ${planoData.tipoAula}
- Observa√ß√µes: ${planoData.observacoesProfessor}

Crie um plano de aula seguindo EXATAMENTE esta estrutura JSON:

{
  "titulo": "T√≠tulo espec√≠fico do plano de aula",
  "descricao": "Descri√ß√£o detalhada do plano",
  "visao_geral": {
    "disciplina": "${planoData.disciplina}",
    "tema": "${planoData.tema}",
    "serie": "${planoData.serie}",
    "tempo": "${planoData.cargaHoraria}",
    "metodologia": "Metodologia pedag√≥gica espec√≠fica",
    "recursos": ["Lista", "de", "recursos", "necess√°rios"],
    "sugestoes_ia": ["Sugest√µes", "espec√≠ficas", "da", "IA"]
  },
  "objetivos": [
    {
      "descricao": "Objetivo de aprendizagem espec√≠fico e mensur√°vel",
      "habilidade_bncc": "C√≥digo e descri√ß√£o da habilidade BNCC relacionada",
      "sugestao_reescrita": "Sugest√£o de melhoria para o objetivo",
      "atividade_relacionada": "Atividade que desenvolve este objetivo"
    }
  ],
  "metodologia": {
    "nome": "Nome da metodologia escolhida",
    "descricao": "Descri√ß√£o detalhada da abordagem pedag√≥gica",
    "alternativas": ["Metodologia alternativa 1", "Metodologia alternativa 2"],
    "simulacao_de_aula": "Descri√ß√£o de como simular a aula",
    "explicacao_em_video": "Roteiro para v√≠deo explicativo"
  },
  "desenvolvimento": [
    {
      "etapa": 1,
      "titulo": "T√≠tulo da etapa",
      "descricao": "Descri√ß√£o detalhada da etapa",
      "tipo_interacao": "Tipo de intera√ß√£o (expositiva, interativa, etc.)",
      "tempo_estimado": "Tempo estimado",
      "recurso_gerado": "Recurso espec√≠fico gerado",
      "nota_privada_professor": "Orienta√ß√£o exclusiva para o professor"
    }
  ],
  "atividades": [
    {
      "nome": "Nome da atividade",
      "tipo": "Tipo da atividade",
      "ref_objetivos": [1, 2],
      "visualizar_como_aluno": "Como o aluno ver√° esta atividade",
      "sugestoes_ia": ["Sugest√£o 1", "Sugest√£o 2"]
    }
  ],
  "avaliacao": {
    "criterios": "Crit√©rios espec√≠ficos de avalia√ß√£o",
    "instrumentos": ["Instrumento 1", "Instrumento 2"],
    "feedback": "Como dar feedback aos alunos"
  },
  "recursos_extras": {
    "materiais_complementares": ["Material 1", "Material 2"],
    "tecnologias": ["Tecnologia 1", "Tecnologia 2"],
    "referencias": ["Refer√™ncia 1", "Refer√™ncia 2"]
  }
}

IMPORTANTE:
- Seja espec√≠fico e detalhado em cada se√ß√£o
- Use os dados fornecidos como base para personaliza√ß√£o
- Crie pelo menos 3 objetivos de aprendizagem
- Desenvolva pelo menos 3 etapas de desenvolvimento
- Sugira pelo menos 2 atividades pr√°ticas
- Retorne APENAS o JSON v√°lido, sem explica√ß√µes adicionais
- Garanta que todos os campos sejam preenchidos com conte√∫do real e √∫til`;
  }

  /**
   * Chama a API Gemini para gerar o plano
   */
  static async callGeminiAPI(prompt: string): Promise<string> {
    console.log('ü§ñ PlanoAulaBuilder - Chamando API Gemini');

    try {
      const response = await this.geminiClient.generate({
        prompt,
        temperature: 0.7,
        maxTokens: 4096,
        topP: 0.9,
        topK: 40
      });

      if (!response.success) {
        throw new Error(response.error || 'Erro na API Gemini');
      }

      console.log('‚úÖ PlanoAulaBuilder - Resposta recebida do Gemini');
      return response.result;
    } catch (error) {
      console.error('‚ùå PlanoAulaBuilder - Erro na API Gemini:', error);
      throw error;
    }
  }

  /**
   * Processa a resposta da IA
   */
  static processAIResponse(aiResponse: string): PlanoAulaResponse {
    console.log('üîß PlanoAulaBuilder - Processando resposta da IA');

    try {
      // Limpar a resposta
      let cleanResponse = aiResponse.trim();
      
      // Remover markdown se presente
      cleanResponse = cleanResponse.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      
      // Tentar fazer parse do JSON
      const parsedResponse = JSON.parse(cleanResponse);
      
      console.log('‚úÖ PlanoAulaBuilder - Resposta processada com sucesso');
      return parsedResponse;
      
    } catch (error) {
      console.error('‚ùå PlanoAulaBuilder - Erro ao processar resposta:', error);
      console.log('üìù Resposta bruta:', aiResponse);
      
      // Retornar resposta de fallback
      return this.createFallbackResponse();
    }
  }

  /**
   * Formata o plano para exibi√ß√£o no preview
   */
  static formatForPreview(planoResponse: PlanoAulaResponse): any {
    console.log('üé® PlanoAulaBuilder - Formatando para preview');

    return {
      titulo: planoResponse.titulo,
      descricao: planoResponse.descricao,
      visao_geral: planoResponse.visao_geral,
      objetivos: planoResponse.objetivos,
      metodologia: planoResponse.metodologia,
      desenvolvimento: planoResponse.desenvolvimento,
      atividades: planoResponse.atividades,
      avaliacao: planoResponse.avaliacao,
      recursos_extras: planoResponse.recursos_extras
    };
  }

  /**
   * Cria uma resposta de fallback em caso de erro
   */
  static createFallbackResponse(): PlanoAulaResponse {
    console.log('üîÑ PlanoAulaBuilder - Criando resposta de fallback');

    return {
      titulo: "Plano de Aula Personalizado",
      descricao: "Plano de aula criado automaticamente pelo sistema",
      visao_geral: {
        disciplina: "Disciplina",
        tema: "Tema da aula",
        serie: "S√©rie/Ano",
        tempo: "50 minutos",
        metodologia: "Metodologia Ativa",
        recursos: ["Quadro", "Projetor", "Material did√°tico"],
        sugestoes_ia: ["Plano personalizado", "Adapt√°vel √† turma"]
      },
      objetivos: [
        {
          descricao: "Compreender os conceitos fundamentais do tema",
          habilidade_bncc: "Compet√™ncia espec√≠fica da BNCC",
          sugestao_reescrita: "Objetivo claro e mensur√°vel",
          atividade_relacionada: "Atividade pr√°tica relacionada"
        }
      ],
      metodologia: {
        nome: "Metodologia Ativa",
        descricao: "Abordagem centrada no aluno com participa√ß√£o ativa",
        alternativas: ["Aula expositiva", "Aprendizagem colaborativa"],
        simulacao_de_aula: "Simula√ß√£o dispon√≠vel",
        explicacao_em_video: "V√≠deo explicativo dispon√≠vel"
      },
      desenvolvimento: [
        {
          etapa: 1,
          titulo: "Introdu√ß√£o",
          descricao: "Apresenta√ß√£o do tema e objetivos",
          tipo_interacao: "Expositiva",
          tempo_estimado: "15 minutos",
          recurso_gerado: "Slides introdut√≥rios",
          nota_privada_professor: "Verificar conhecimentos pr√©vios"
        },
        {
          etapa: 2,
          titulo: "Desenvolvimento",
          descricao: "Explora√ß√£o do conte√∫do principal",
          tipo_interacao: "Interativa",
          tempo_estimado: "25 minutos",
          recurso_gerado: "Atividade pr√°tica",
          nota_privada_professor: "Acompanhar participa√ß√£o dos alunos"
        },
        {
          etapa: 3,
          titulo: "Conclus√£o",
          descricao: "S√≠ntese e avalia√ß√£o",
          tipo_interacao: "Colaborativa",
          tempo_estimado: "10 minutos",
          recurso_gerado: "Resumo visual",
          nota_privada_professor: "Avaliar compreens√£o geral"
        }
      ],
      atividades: [
        {
          nome: "Atividade Principal",
          tipo: "Pr√°tica",
          ref_objetivos: [1],
          visualizar_como_aluno: "Atividade interativa e engajante",
          sugestoes_ia: ["Personalizar conforme necess√°rio", "Adaptar ao n√≠vel da turma"]
        }
      ],
      avaliacao: {
        criterios: "Participa√ß√£o, compreens√£o e aplica√ß√£o dos conceitos",
        instrumentos: ["Observa√ß√£o", "Atividades pr√°ticas"],
        feedback: "Feedback cont√≠nuo e construtivo"
      },
      recursos_extras: {
        materiais_complementares: ["Textos de apoio", "Exerc√≠cios extras"],
        tecnologias: ["Projetor", "Computador"],
        referencias: ["Bibliografia b√°sica", "Sites educacionais"]
      }
    };
  }
}
