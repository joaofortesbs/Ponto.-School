
import { PlanoAulaFields, transformPlanoAulaData, planoAulaFieldMapping } from './fieldMapping';

export interface PlanoAulaGenerationData {
  tema: string;
  anoSerie: string;
  componenteCurricular: string;
  contexto?: string;
  restricoes?: string;
}

export class PlanoAulaProcessor {
  static processCustomFields(customFields: Record<string, string>): PlanoAulaFields {
    console.log('ðŸŽ¯ [PlanoAulaProcessor] Processando campos customizados:', customFields);
    
    const processedData = transformPlanoAulaData(customFields);
    
    console.log('âœ… [PlanoAulaProcessor] Dados processados:', processedData);
    
    return processedData;
  }

  static generateEnhancedFields(baseData: PlanoAulaGenerationData): Record<string, string> {
    console.log('ðŸ”§ [PlanoAulaProcessor] Gerando campos aprimorados para:', baseData);
    
    const cargaHoraria = this.inferCargaHoraria(baseData.tema);
    const objetivoGeral = this.generateObjective(baseData.tema, baseData.anoSerie);
    const materiaisRecursos = this.suggestMaterials(baseData.tema, baseData.componenteCurricular);
    
    const enhancedFields: Record<string, string> = {
      'Tema': baseData.tema,
      'PÃºblico-Alvo': baseData.anoSerie,
      'Disciplina': baseData.componenteCurricular,
      'Carga HorÃ¡ria': cargaHoraria,
      'Habilidades BNCC': this.suggestBNCCHabilities(baseData.componenteCurricular, baseData.anoSerie),
      'Objetivo Geral': objetivoGeral,
      'Materiais/Recursos': materiaisRecursos,
      'Perfil da Turma': 'Turma mista com diferentes nÃ­veis de aprendizado',
      'Tipo de Aula': this.suggestClassType(baseData.tema, baseData.componenteCurricular),
      'ObservaÃ§Ãµes': baseData.restricoes || 'Considerar o ritmo individual dos alunos',
      // Campos especÃ­ficos para o mini-card
      'Objetivo Principal': objetivoGeral,
      'Materiais NecessÃ¡rios': materiaisRecursos,
      'Recursos Adicionais': this.suggestAdditionalResources(baseData.componenteCurricular),
      'Tempo Estimado': cargaHoraria,
      'NÃ­vel de Dificuldade': this.inferDifficulty(baseData.anoSerie),
      'Palavras-chave': this.generateKeywords(baseData.tema, baseData.componenteCurricular)
    };

    console.log('âœ… [PlanoAulaProcessor] Campos gerados:', enhancedFields);
    
    return enhancedFields;
  }

  private static inferCargaHoraria(tema: string): string {
    if (tema.toLowerCase().includes('introduÃ§Ã£o') || tema.toLowerCase().includes('conceito')) {
      return '1 aula de 50 minutos';
    } else if (tema.toLowerCase().includes('prÃ¡tica') || tema.toLowerCase().includes('exercÃ­cio')) {
      return '2 aulas de 45 minutos';
    }
    return '1 aula de 50 minutos';
  }

  private static suggestBNCCHabilities(disciplina: string, anoSerie: string): string {
    const disciplinaLower = disciplina.toLowerCase();
    const serie = anoSerie.toLowerCase();
    
    if (disciplinaLower.includes('matemÃ¡tica')) {
      if (serie.includes('9Âº') || serie.includes('nono')) {
        return 'EF09MA04, EF09MA05, EF09MA06';
      } else if (serie.includes('8Âº') || serie.includes('oitavo')) {
        return 'EF08MA04, EF08MA05, EF08MA06';
      }
      return 'A definir conforme sÃ©rie especÃ­fica';
    } else if (disciplinaLower.includes('portuguÃªs') || disciplinaLower.includes('lÃ­ngua')) {
      return 'EF69LP01, EF69LP02, EF69LP03';
    } else if (disciplinaLower.includes('ciÃªncias')) {
      return 'EF07CI01, EF07CI02, EF07CI03';
    }
    
    return 'A definir conforme BNCC especÃ­fica da disciplina';
  }

  private static generateObjective(tema: string, anoSerie: string): string {
    return `Compreender e aplicar os conceitos relacionados a ${tema}, desenvolvendo habilidades adequadas ao nÃ­vel ${anoSerie}`;
  }

  private static suggestMaterials(tema: string, disciplina: string): string {
    const materials = ['Lousa', 'Projetor', 'Livro didÃ¡tico'];
    
    if (disciplina.toLowerCase().includes('matemÃ¡tica')) {
      materials.push('Calculadora', 'RÃ©gua', 'Compasso');
    } else if (disciplina.toLowerCase().includes('ciÃªncias')) {
      materials.push('MicroscÃ³pio', 'Materiais de laboratÃ³rio');
    } else if (disciplina.toLowerCase().includes('portuguÃªs')) {
      materials.push('Textos diversos', 'DicionÃ¡rio');
    }
    
    return materials.join(', ');
  }

  private static suggestClassType(tema: string, disciplina: string): string {
    if (tema.toLowerCase().includes('prÃ¡tica') || tema.toLowerCase().includes('experimento')) {
      return 'Aula prÃ¡tica experimental';
    } else if (tema.toLowerCase().includes('anÃ¡lise') || tema.toLowerCase().includes('discussÃ£o')) {
      return 'Aula dialogada e participativa';
    } else if (disciplina.toLowerCase().includes('matemÃ¡tica')) {
      return 'Aula expositiva com resoluÃ§Ã£o de exercÃ­cios';
    }
    
    return 'Aula expositiva dialogada';
  }

  private static suggestAdditionalResources(disciplina: string): string {
    const disciplinaLower = disciplina.toLowerCase();
    
    if (disciplinaLower.includes('matemÃ¡tica')) {
      return 'Software de geometria, simuladores matemÃ¡ticos, jogos lÃ³gicos';
    } else if (disciplinaLower.includes('ciÃªncias') || disciplinaLower.includes('fÃ­sica') || disciplinaLower.includes('quÃ­mica')) {
      return 'Simuladores virtuais, vÃ­deos explicativos, experimentos online';
    } else if (disciplinaLower.includes('portuguÃªs') || disciplinaLower.includes('literatura')) {
      return 'Biblioteca digital, audiolivros, ferramentas de escrita colaborativa';
    } else if (disciplinaLower.includes('histÃ³ria') || disciplinaLower.includes('geografia')) {
      return 'Mapas interativos, documentÃ¡rios, timeline digital';
    }
    
    return 'Recursos digitais complementares, vÃ­deos educativos';
  }

  private static inferDifficulty(anoSerie: string): string {
    const serie = anoSerie.toLowerCase();
    
    if (serie.includes('1Âº') || serie.includes('2Âº') || serie.includes('primeiro') || serie.includes('segundo')) {
      return 'BÃ¡sico';
    } else if (serie.includes('8Âº') || serie.includes('9Âº') || serie.includes('oitavo') || serie.includes('nono')) {
      return 'IntermediÃ¡rio';
    } else if (serie.includes('mÃ©dio') || serie.includes('3Âº')) {
      return 'AvanÃ§ado';
    }
    
    return 'MÃ©dio';
  }

  private static generateKeywords(tema: string, disciplina: string): string {
    const keywords = [];
    
    // Adiciona palavras-chave baseadas no tema
    if (tema.toLowerCase().includes('equaÃ§Ã£o')) {
      keywords.push('equaÃ§Ãµes', 'Ã¡lgebra', 'resoluÃ§Ã£o');
    }
    if (tema.toLowerCase().includes('funÃ§Ã£o')) {
      keywords.push('funÃ§Ãµes', 'grÃ¡ficos', 'domÃ­nio');
    }
    
    // Adiciona palavras-chave baseadas na disciplina
    if (disciplina.toLowerCase().includes('matemÃ¡tica')) {
      keywords.push('cÃ¡lculo', 'nÃºmeros', 'operaÃ§Ãµes');
    } else if (disciplina.toLowerCase().includes('portuguÃªs')) {
      keywords.push('gramÃ¡tica', 'texto', 'interpretaÃ§Ã£o');
    }
    
    return keywords.length > 0 ? keywords.join(', ') : 'educaÃ§Ã£o, aprendizagem';
  }
}
