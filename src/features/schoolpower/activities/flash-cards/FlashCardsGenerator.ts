import { geminiClient } from '@/utils/api/geminiClient';

export interface FlashCard {
  id: number;
  front: string;
  back: string;
  category?: string;
  difficulty?: string;
}

export interface FlashCardsData {
  title?: string;
  theme: string;
  subject: string;
  schoolYear: string;
  topicos: string;
  numberOfFlashcards: string | number;
  context?: string;
  difficultyLevel?: string;
  objectives?: string;
  instructions?: string;
  evaluation?: string;
}

export interface FlashCardsGeneratedContent {
  title: string;
  description: string;
  cards: FlashCard[];
  totalCards: number;
  theme: string;
  subject: string;
  schoolYear: string;
  topicos: string;
  numberOfFlashcards: number;
  context: string;
  difficultyLevel: string;
  objectives: string;
  instructions: string;
  evaluation: string;
  generatedByAI: boolean;
  generatedAt: string;
  isGeneratedByAI: boolean;
  isFallback?: boolean;
  formDataUsed?: FlashCardsData;
}

export class FlashCardsGenerator {
  async generateFlashCardsContent(data: FlashCardsData): Promise<FlashCardsGeneratedContent> {
    console.log('üÉè Iniciando gera√ß√£o de Flash Cards com Gemini API:', data);

    try {
      // Validar dados obrigat√≥rios
      if (!data.theme || !data.topicos) {
        throw new Error('Tema e t√≥picos s√£o obrigat√≥rios para gerar flash cards');
      }

      const numberOfCards = parseInt(data.numberOfFlashcards?.toString() || '10');

      if (numberOfCards <= 0 || numberOfCards > 50) {
        throw new Error('N√∫mero de cards deve estar entre 1 e 50');
      }

      // Preparar prompt otimizado para o Gemini
      const prompt = this.buildFlashCardsPrompt(data, numberOfCards);

      console.log('üìù Prompt enviado para Gemini:', prompt);

      // Chamar API do Gemini
      const response = await geminiClient.generateContent(prompt);

      console.log('‚úÖ Resposta recebida do Gemini:', response);

      // Processar resposta
      const processedContent = this.processGeminiResponse(response, data, numberOfCards);

      console.log('üì¶ Conte√∫do processado dos Flash Cards:', processedContent);

      return processedContent;

    } catch (error) {
      console.error('‚ùå Erro ao gerar Flash Cards:', error);

      // Fallback com dados estruturados
      return this.generateFallbackContent(data);
    }
  }

  private buildFlashCardsPrompt(data: FlashCardsData, numberOfCards: number): string {
    return `
Voc√™ √© um especialista em educa√ß√£o. Gere exatamente ${numberOfCards} flash cards educativos sobre o tema: "${data.theme}"

CONTEXTO EDUCACIONAL:
- Disciplina: ${data.subject || 'Geral'}
- Ano de Escolaridade: ${data.schoolYear || 'Ensino M√©dio'}
- T√≥picos Principais: ${data.topicos}
- Contexto de Uso: ${data.context || 'Estudos e revis√£o'}
- N√≠vel de Dificuldade: ${data.difficultyLevel || 'M√©dio'}

DIRETRIZES PARA CRIA√á√ÉO:
1. Crie exatamente ${numberOfCards} flash cards √∫nicos e distintos
2. Para cada card:
   - FRENTE: Uma pergunta clara, conceito-chave, termo ou defini√ß√£o incompleta
   - VERSO: Resposta completa, explica√ß√£o detalhada ou defini√ß√£o precisa
3. Varie os tipos de conte√∫do:
   - Defini√ß√µes conceituais
   - Exemplos pr√°ticos
   - Aplica√ß√µes reais
   - F√≥rmulas (se aplic√°vel)
   - Compara√ß√µes e contrastes
4. Mantenha linguagem adequada para ${data.schoolYear || 'estudantes do ensino m√©dio'}
5. Foque especificamente nos t√≥picos listados: ${data.topicos}
6. Garanta progress√£o l√≥gica de dificuldade
7. Inclua exemplos concretos quando poss√≠vel

FORMATO DE RESPOSTA OBRIGAT√ìRIO (JSON v√°lido):
{
  "title": "Flash Cards: ${data.theme}",
  "description": "Flash cards educativos sobre ${data.theme} para ${data.schoolYear || 'ensino m√©dio'}",
  "cards": [
    {
      "id": 1,
      "front": "Pergunta ou conceito espec√≠fico aqui",
      "back": "Resposta completa e educativa aqui",
      "category": "${data.subject || 'Geral'}",
      "difficulty": "F√°cil|M√©dio|Dif√≠cil"
    }
  ],
  "isGeneratedByAI": true
}

IMPORTANTE: 
- Responda APENAS com o JSON v√°lido, sem texto adicional
- Garanta que todos os ${numberOfCards} cards sejam √∫nicos e educativos
- Use aspas duplas para strings JSON
- Evite caracteres especiais que quebrem o JSON
    `.trim();
  }

  private processGeminiResponse(
    response: string,
    data: FlashCardsData,
    numberOfCards: number
  ): FlashCardsGeneratedContent {
    try {
      // Limpar e extrair JSON da resposta
      let cleanResponse = response.trim();

      // Remover markdown se presente
      cleanResponse = cleanResponse.replace(/^```(?:json)?\s*/, '').replace(/\s*```$/, '');

      // Remover poss√≠veis textos antes/depois do JSON
      const jsonStart = cleanResponse.indexOf('{');
      const jsonEnd = cleanResponse.lastIndexOf('}');

      if (jsonStart !== -1 && jsonEnd !== -1) {
        cleanResponse = cleanResponse.substring(jsonStart, jsonEnd + 1);
      }

      console.log('üßπ Resposta limpa:', cleanResponse);

      let parsedResponse;
      try {
        parsedResponse = JSON.parse(cleanResponse);
      } catch (parseError) {
        console.error('‚ùå Erro ao parsear JSON:', parseError);
        throw new Error(`JSON inv√°lido recebido da API: ${parseError.message}`);
      }

      // Validar estrutura da resposta
      if (!parsedResponse.cards || !Array.isArray(parsedResponse.cards)) {
        throw new Error('Resposta inv√°lida: propriedade "cards" n√£o encontrada ou n√£o √© array');
      }

      if (parsedResponse.cards.length === 0) {
        throw new Error('Nenhum card encontrado na resposta da API');
      }

      // Processar e validar cards com mais rigor
      const validCards: FlashCard[] = [];

      for (let i = 0; i < parsedResponse.cards.length; i++) {
        const card = parsedResponse.cards[i];

        if (!card || typeof card !== 'object') {
          console.warn(`‚ö†Ô∏è Card ${i + 1} n√£o √© um objeto v√°lido:`, card);
          continue;
        }

        if (!card.front || typeof card.front !== 'string' || card.front.trim() === '') {
          console.warn(`‚ö†Ô∏è Card ${i + 1} sem frente v√°lida:`, card);
          continue;
        }

        if (!card.back || typeof card.back !== 'string' || card.back.trim() === '') {
          console.warn(`‚ö†Ô∏è Card ${i + 1} sem verso v√°lido:`, card);
          continue;
        }

        // Card v√°lido, adicionar √† lista
        validCards.push({
          id: validCards.length + 1,
          front: card.front.trim(),
          back: card.back.trim(),
          category: card.category || data.subject || 'Geral',
          difficulty: card.difficulty || data.difficultyLevel || 'M√©dio'
        });
      }

      if (validCards.length === 0) {
        throw new Error('Nenhum card v√°lido encontrado ap√≥s processamento');
      }

      // Construir objeto final com valida√ß√£o completa
      const finalContent: FlashCardsGeneratedContent = {
        title: data.title || `Flash Cards: ${data.theme}`,
        description: `Flash Cards sobre ${data.theme} para ${data.schoolYear}`,
        cards: validCards,
        totalCards: validCards.length,
        theme: data.theme,
        subject: data.subject || 'Geral',
        schoolYear: data.schoolYear || 'Ensino M√©dio',
        topicos: data.topicos,
        numberOfFlashcards: validCards.length,
        context: data.context || `Estudos sobre ${data.theme}`,
        difficultyLevel: data.difficultyLevel || 'M√©dio',
        objectives: data.objectives || `Facilitar o aprendizado sobre ${data.theme}`,
        instructions: data.instructions || 'Use os flash cards para estudar e revisar o conte√∫do',
        evaluation: data.evaluation || 'Avalie o conhecimento atrav√©s da pr√°tica com os cards',
        generatedByAI: true,
        generatedAt: new Date().toISOString(),
        isGeneratedByAI: true
      };

      console.log('‚úÖ Flash Cards finalizados:', {
        totalCards: finalContent.totalCards,
        cards: finalContent.cards.length,
        title: finalContent.title,
        theme: finalContent.theme
      });
      return finalContent;

    } catch (error) {
      console.error('‚ùå Erro ao processar resposta do Gemini:', error);
      throw new Error(`Falha ao processar resposta da IA: ${error.message}`);
    }
  }

  private generateFallbackContent(data: FlashCardsData): FlashCardsGeneratedContent {
    console.log('üõ°Ô∏è Gerando conte√∫do de fallback para Flash Cards');

    const numberOfCards = Math.min(parseInt(data.numberOfFlashcards?.toString() || '5'), 20);
    const topicos = data.topicos.split('\n').filter(t => t.trim());

    // Garantir pelo menos alguns cards mesmo com poucos t√≥picos
    const fallbackCards: FlashCard[] = [];

    // Se temos t√≥picos, usar eles
    if (topicos.length > 0) {
      for (let i = 0; i < numberOfCards; i++) {
        const topicoIndex = i % topicos.length;
        const topico = topicos[topicoIndex].trim();
        const cardType = i % 4; // Variar tipos de pergunta

        let front: string;
        let back: string;

        switch (cardType) {
          case 0:
            front = `O que √© ${topico}?`;
            back = `${topico} √© um conceito fundamental em ${data.subject || 'Geral'} que deve ser compreendido por estudantes do ${data.schoolYear || 'ensino m√©dio'}. √â importante para o desenvolvimento acad√™mico nesta disciplina.`;
            break;
          case 1:
            front = `Qual a import√¢ncia de ${topico}?`;
            back = `${topico} √© importante porque permite compreender melhor os fundamentos de ${data.subject || 'Geral'} e aplicar esse conhecimento na pr√°tica, contribuindo para o aprendizado integral do estudante.`;
            break;
          case 2:
            front = `Como aplicar ${topico} na pr√°tica?`;
            back = `${topico} pode ser aplicado atrav√©s do estudo sistem√°tico, pr√°tica de exerc√≠cios e compreens√£o dos conceitos relacionados em ${data.subject || 'Geral'}, sempre considerando o contexto do ${data.schoolYear || 'ensino m√©dio'}.`;
            break;
          default:
            front = `Defina ${topico}`;
            back = `${topico}: Conceito estudado em ${data.subject || 'Geral'}, relevante para estudantes do ${data.schoolYear || 'ensino m√©dio'}, que requer compreens√£o te√≥rica e aplica√ß√£o pr√°tica para dom√≠nio completo.`;
        }

        fallbackCards.push({
          id: i + 1,
          front,
          back,
          category: data.subject || 'Geral',
          difficulty: data.difficultyLevel || 'M√©dio'
        });
      }
    } else {
      // Se n√£o temos t√≥picos, criar cards gen√©ricos sobre o tema
      for (let i = 0; i < Math.max(numberOfCards, 3); i++) {
        fallbackCards.push({
          id: i + 1,
          front: `Conceito ${i + 1} sobre ${data.theme}`,
          back: `Este √© um conceito importante relacionado a ${data.theme} em ${data.subject || 'Geral'}, adequado para estudantes do ${data.schoolYear || 'ensino m√©dio'}.`,
          category: data.subject || 'Geral',
          difficulty: data.difficultyLevel || 'M√©dio'
        });
      }
    }

    return {
      title: data.title || `Flash Cards: ${data.theme} (Modo Demonstra√ß√£o)`,
      description: `Flash cards sobre ${data.theme} gerados em modo demonstra√ß√£o para ${data.schoolYear || 'ensino m√©dio'}`,
      cards: fallbackCards,
      totalCards: fallbackCards.length,
      theme: data.theme,
      subject: data.subject || 'Geral',
      schoolYear: data.schoolYear || 'Ensino M√©dio',
      topicos: data.topicos,
      numberOfFlashcards: fallbackCards.length,
      context: data.context || 'Estudos e revis√£o',
      difficultyLevel: data.difficultyLevel || 'M√©dio',
      objectives: data.objectives || `Facilitar o aprendizado sobre ${data.theme}`,
      instructions: data.instructions || 'Use os flash cards para estudar e revisar o conte√∫do',
      evaluation: data.evaluation || 'Avalie o conhecimento atrav√©s da pr√°tica com os cards',
      generatedByAI: false,
      generatedAt: new Date().toISOString(),
      isGeneratedByAI: false,
      isFallback: true,
      formDataUsed: data
    };
  }
}