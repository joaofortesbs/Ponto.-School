import { geminiClient } from '@/utils/api/geminiClient';

export interface FlashCard {
  id: number;
  front: string;
  back: string;
  category?: string;
  difficulty?: string;
}

export interface FlashCardsData {
  theme: string;
  subject: string;
  schoolYear: string;
  topicos: string;
  numberOfFlashcards: string | number;
  context?: string;
  difficultyLevel?: string;
  objectives?: string;
  instructions?: string;
  evaluation?: string;
}

export interface FlashCardsGeneratedContent {
  title: string;
  description: string;
  cards: FlashCard[];
  totalCards: number;
  theme: string;
  subject: string;
  schoolYear: string;
  topicos: string;
  numberOfFlashcards: number;
  context: string;
  difficultyLevel: string;
  objectives: string;
  instructions: string;
  evaluation: string;
  generatedByAI: boolean;
  generatedAt: string;
  isGeneratedByAI: boolean;
  isFallback?: boolean;
  formDataUsed?: FlashCardsData;
}

export class FlashCardsGenerator {
  async generateFlashCardsContent(data: FlashCardsData): Promise<FlashCardsGeneratedContent> {
    console.log('üÉè Iniciando gera√ß√£o de Flash Cards com Gemini API:', data);

    try {
      // Validar dados obrigat√≥rios
      if (!data.theme || !data.topicos) {
        throw new Error('Tema e t√≥picos s√£o obrigat√≥rios para gerar flash cards');
      }

      const numberOfCards = parseInt(data.numberOfFlashcards?.toString() || '10');

      // Preparar prompt para o Gemini
      const prompt = this.buildFlashCardsPrompt(data, numberOfCards);

      console.log('üìù Prompt enviado para Gemini:', prompt);

      // Chamar API do Gemini
      const response = await geminiClient.generateContent(prompt);

      console.log('‚úÖ Resposta recebida do Gemini:', response);

      // Processar resposta
      const processedContent = this.processGeminiResponse(response, data, numberOfCards);

      console.log('üì¶ Conte√∫do processado dos Flash Cards:', processedContent);

      return processedContent;

    } catch (error) {
      console.error('‚ùå Erro ao gerar Flash Cards:', error);

      // Fallback com dados estruturados
      return this.generateFallbackContent(data);
    }
  }

  private buildFlashCardsPrompt(data: FlashCardsData, numberOfCards: number): string {
    return `
Gere ${numberOfCards} flash cards educativos sobre o tema: "${data.theme}"

DADOS DO CONTEXTO:
- Disciplina: ${data.subject || 'Geral'}
- Ano de Escolaridade: ${data.schoolYear || 'Ensino M√©dio'}
- T√≥picos Principais: ${data.topicos}
- Contexto de Uso: ${data.context || 'Estudos e revis√£o'}
- N√≠vel de Dificuldade: ${data.difficultyLevel || 'M√©dio'}

INSTRU√á√ïES ESPEC√çFICAS:
1. Crie ${numberOfCards} flash cards com frente e verso
2. A frente deve ter uma pergunta, conceito ou termo
3. O verso deve ter a resposta completa, defini√ß√£o ou explica√ß√£o
4. Varie o tipo de conte√∫do: defini√ß√µes, exemplos, aplica√ß√µes, f√≥rmulas
5. Mantenha o n√≠vel adequado para ${data.schoolYear || 'estudantes do ensino m√©dio'}
6. Foque nos t√≥picos: ${data.topicos}

FORMATO DE RESPOSTA OBRIGAT√ìRIO (JSON):
{
  "title": "Flash Cards: [tema]",
  "description": "Descri√ß√£o dos flash cards",
  "cards": [
    {
      "id": 1,
      "front": "Pergunta ou conceito na frente do card",
      "back": "Resposta completa ou explica√ß√£o no verso",
      "category": "Categoria do conte√∫do",
      "difficulty": "F√°cil|M√©dio|Dif√≠cil"
    }
  ],
  "isGeneratedByAI": true
}

Responda APENAS com o JSON v√°lido, sem texto adicional.
    `.trim();
  }

  private processGeminiResponse(
    response: string, 
    data: FlashCardsData, 
    numberOfCards: number
  ): FlashCardsGeneratedContent {
    try {
      // Limpar e extrair JSON da resposta
      let cleanResponse = response.trim();

      // Remover markdown se presente
      if (cleanResponse.startsWith('```json')) {
        cleanResponse = cleanResponse.replace(/^```json\s*/, '').replace(/\s*```$/, '');
      } else if (cleanResponse.startsWith('```')) {
        cleanResponse = cleanResponse.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }

      const parsedResponse = JSON.parse(cleanResponse);

      // Validar estrutura da resposta
      if (!parsedResponse.cards || !Array.isArray(parsedResponse.cards)) {
        throw new Error('Resposta inv√°lida: cards n√£o encontrados');
      }

      // Processar e validar cards
      const validCards = parsedResponse.cards
        .filter((card: any) => card.front && card.back)
        .map((card: any, index: number) => ({
          id: index + 1,
          front: card.front.trim(),
          back: card.back.trim(),
          category: card.category || data.subject || 'Geral',
          difficulty: card.difficulty || data.difficultyLevel || 'M√©dio'
        }));

      if (validCards.length === 0) {
        throw new Error('Nenhum card v√°lido encontrado na resposta');
      }

      // Construir conte√∫do final
      return {
        title: parsedResponse.title || `Flash Cards: ${data.theme}`,
        description: parsedResponse.description || `Flash cards sobre ${data.theme}`,
        cards: validCards,
        totalCards: validCards.length,
        theme: data.theme,
        subject: data.subject || 'Geral',
        schoolYear: data.schoolYear || 'Ensino M√©dio',
        topicos: data.topicos,
        numberOfFlashcards: validCards.length,
        context: data.context || 'Estudos e revis√£o',
        difficultyLevel: data.difficultyLevel || 'M√©dio',
        objectives: data.objectives || `Facilitar o aprendizado sobre ${data.theme}`,
        instructions: data.instructions || 'Use os flash cards para estudar e revisar o conte√∫do',
        evaluation: data.evaluation || 'Avalie o conhecimento atrav√©s da pr√°tica com os cards',
        generatedByAI: true,
        generatedAt: new Date().toISOString(),
        isGeneratedByAI: true,
        isFallback: false,
        formDataUsed: data
      };

    } catch (error) {
      console.error('‚ùå Erro ao processar resposta do Gemini:', error);
      throw new Error(`Falha ao processar resposta da IA: ${error.message}`);
    }
  }

  private generateFallbackContent(data: FlashCardsData): FlashCardsGeneratedContent {
    console.log('üõ°Ô∏è Gerando conte√∫do de fallback para Flash Cards');

    const numberOfCards = parseInt(data.numberOfFlashcards?.toString() || '5');
    const topicos = data.topicos.split('\n').filter(t => t.trim());

    // Gerar cards de exemplo baseados nos t√≥picos
    const fallbackCards: FlashCard[] = [];

    for (let i = 0; i < Math.min(numberOfCards, topicos.length * 2); i++) {
      const topico = topicos[i % topicos.length];
      const cardNumber = Math.floor(i / topicos.length) + 1;

      fallbackCards.push({
        id: i + 1,
        front: cardNumber === 1 
          ? `O que √© ${topico}?`
          : `Qual a import√¢ncia de ${topico} em ${data.subject}?`,
        back: cardNumber === 1
          ? `${topico} √© um conceito fundamental em ${data.subject} para ${data.schoolYear}.`
          : `${topico} √© importante porque permite compreender melhor os fundamentos de ${data.subject}.`,
        category: data.subject || 'Geral',
        difficulty: data.difficultyLevel || 'M√©dio'
      });
    }

    return {
      title: `Flash Cards: ${data.theme} (Modo Demonstra√ß√£o)`,
      description: `Flash cards sobre ${data.theme} gerados em modo demonstra√ß√£o`,
      cards: fallbackCards,
      totalCards: fallbackCards.length,
      theme: data.theme,
      subject: data.subject || 'Geral',
      schoolYear: data.schoolYear || 'Ensino M√©dio',
      topicos: data.topicos,
      numberOfFlashcards: fallbackCards.length,
      context: data.context || 'Estudos e revis√£o',
      difficultyLevel: data.difficultyLevel || 'M√©dio',
      objectives: data.objectives || `Facilitar o aprendizado sobre ${data.theme}`,
      instructions: data.instructions || 'Use os flash cards para estudar e revisar o conte√∫do',
      evaluation: data.evaluation || 'Avalie o conhecimento atrav√©s da pr√°tica com os cards',
      generatedByAI: false,
      generatedAt: new Date().toISOString(),
      isGeneratedByAI: false,
      isFallback: true,
      formDataUsed: data
    };
  }
}