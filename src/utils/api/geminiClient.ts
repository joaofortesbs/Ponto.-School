
import { GoogleGenerativeAI } from "@google/generative-ai";

class GeminiClient {
  private genAI: GoogleGenerativeAI | null = null;
  private model: any = null;
  private isInitialized = false;

  constructor() {
    this.initialize();
  }

  private async initialize() {
    try {
      const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
      
      if (!apiKey) {
        console.warn('‚ö†Ô∏è VITE_GEMINI_API_KEY n√£o encontrada');
        return;
      }

      this.genAI = new GoogleGenerativeAI(apiKey);
      this.model = this.genAI.getGenerativeModel({ model: "gemini-pro" });
      this.isInitialized = true;
      
      console.log('‚úÖ GeminiClient inicializado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao inicializar GeminiClient:', error);
      this.isInitialized = false;
    }
  }

  async generateContent(prompt: string): Promise<string> {
    if (!this.isInitialized || !this.model) {
      console.warn('‚ö†Ô∏è GeminiClient n√£o inicializado, retornando fallback');
      return this.getFallbackResponse(prompt);
    }

    try {
      console.log('ü§ñ Enviando prompt para Gemini:', prompt.substring(0, 100) + '...');
      
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      console.log('‚úÖ Resposta recebida do Gemini');
      return text;
    } catch (error) {
      console.error('‚ùå Erro ao gerar conte√∫do com Gemini:', error);
      return this.getFallbackResponse(prompt);
    }
  }

  private getFallbackResponse(prompt: string): string {
    console.log('üîÑ Usando resposta de fallback');
    
    if (prompt.includes('sequ√™ncia did√°tica') || prompt.includes('sequencia didatica')) {
      return JSON.stringify({
        titulo: "Sequ√™ncia Did√°tica - T√≥pico Educacional",
        disciplina: "Mat√©ria Espec√≠fica",
        serie: "S√©rie/Ano",
        duracao: "4-6 aulas",
        objetivos: [
          "Compreender conceitos fundamentais do tema",
          "Desenvolver habilidades pr√°ticas relacionadas",
          "Aplicar conhecimentos em situa√ß√µes contextualizadas"
        ],
        atividades: [
          {
            aula: 1,
            titulo: "Introdu√ß√£o ao Tema",
            descricao: "Apresenta√ß√£o dos conceitos b√°sicos e levantamento de conhecimentos pr√©vios",
            recursos: ["Quadro", "Material audiovisual", "Textos introdut√≥rios"],
            duracao: "50 minutos"
          },
          {
            aula: 2,
            titulo: "Desenvolvimento Te√≥rico",
            descricao: "Aprofundamento dos conceitos com exemplos pr√°ticos",
            recursos: ["Livro did√°tico", "Exerc√≠cios pr√°ticos", "Material complementar"],
            duracao: "50 minutos"
          },
          {
            aula: 3,
            titulo: "Atividades Pr√°ticas",
            descricao: "Aplica√ß√£o pr√°tica dos conceitos atrav√©s de exerc√≠cios e atividades",
            recursos: ["Material manipulativo", "Fichas de atividades", "Computador/tablet"],
            duracao: "50 minutos"
          },
          {
            aula: 4,
            titulo: "Avalia√ß√£o e S√≠ntese",
            descricao: "Avalia√ß√£o do aprendizado e s√≠ntese dos conte√∫dos estudados",
            recursos: ["Instrumentos de avalia√ß√£o", "Material de s√≠ntese"],
            duracao: "50 minutos"
          }
        ],
        avaliacao: {
          criterios: [
            "Participa√ß√£o nas atividades propostas",
            "Compreens√£o dos conceitos fundamentais",
            "Aplica√ß√£o pr√°tica dos conhecimentos",
            "Qualidade das produ√ß√µes realizadas"
          ],
          instrumentos: [
            "Observa√ß√£o direta",
            "Atividades pr√°ticas",
            "Produ√ß√£o textual",
            "Autoavalia√ß√£o"
          ]
        },
        recursos_necessarios: [
          "Quadro e material de escrita",
          "Material audiovisual (projetor/TV)",
          "Livros did√°ticos e textos complementares",
          "Material manipulativo espec√≠fico do tema",
          "Computador/tablet (se necess√°rio)"
        ],
        referencias: [
          "Livro did√°tico adotado pela escola",
          "Material complementar espec√≠fico do tema",
          "Recursos digitais educacionais"
        ]
      });
    }

    return JSON.stringify({
      titulo: "Atividade Educacional",
      descricao: "Atividade personalizada baseada no contexto fornecido",
      objetivos: ["Desenvolver conhecimentos espec√≠ficos", "Aplicar conceitos pr√°ticos"],
      metodologia: "Metodologia adaptada ao contexto educacional",
      recursos: ["Material did√°tico", "Recursos tecnol√≥gicos"],
      avaliacao: "Avalia√ß√£o formativa e somativa"
    });
  }

  isReady(): boolean {
    return this.isInitialized;
  }
}

// Exportar inst√¢ncia singleton
export const geminiClient = new GeminiClient();

// Exportar classe para casos que precisem de m√∫ltiplas inst√¢ncias
export { GeminiClient };

// Export default da inst√¢ncia
export default geminiClient;
