

import { GoogleGenerativeAI } from "@google/generative-ai";

class GeminiClient {
  private genAI: GoogleGenerativeAI | null = null;
  private model: any = null;
  private isInitialized = false;

  constructor() {
    this.initialize();
  }

  private async initialize() {
    try {
      const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
      
      if (!apiKey) {
        console.warn('‚ö†Ô∏è VITE_GEMINI_API_KEY n√£o encontrada');
        return;
      }

      this.genAI = new GoogleGenerativeAI(apiKey);
      this.model = this.genAI.getGenerativeModel({ model: "gemini-pro" });
      this.isInitialized = true;
      
      console.log('‚úÖ GeminiClient inicializado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao inicializar GeminiClient:', error);
      this.isInitialized = false;
    }
  }

  async generateContent(prompt: string): Promise<string> {
    if (!this.isInitialized || !this.model) {
      console.warn('‚ö†Ô∏è GeminiClient n√£o inicializado, retornando fallback');
      return this.getFallbackResponse(prompt);
    }

    try {
      console.log('ü§ñ Enviando prompt para Gemini:', prompt.substring(0, 100) + '...');
      
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      console.log('‚úÖ Resposta recebida do Gemini');
      return text;
    } catch (error) {
      console.error('‚ùå Erro ao gerar conte√∫do com Gemini:', error);
      return this.getFallbackResponse(prompt);
    }
  }

  // M√©todo generate para compatibilidade
  async generate(prompt: string): Promise<{ success: boolean; data?: any; error?: string }> {
    try {
      const content = await this.generateContent(prompt);
      
      // Tentar parsear como JSON primeiro
      try {
        const parsedContent = JSON.parse(content);
        return { success: true, data: parsedContent };
      } catch {
        // Se n√£o for JSON v√°lido, retornar como texto
        return { success: true, data: { content } };
      }
    } catch (error) {
      console.error('‚ùå Erro no m√©todo generate:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  private getFallbackResponse(prompt: string): string {
    console.log('üîÑ Usando resposta de fallback');
    
    if (prompt.includes('sequ√™ncia did√°tica') || prompt.includes('sequencia didatica')) {
      return JSON.stringify({
        tituloTemaAssunto: "Sequ√™ncia Did√°tica - T√≥pico Educacional",
        disciplina: "Mat√©ria Espec√≠fica",
        anoSerie: "S√©rie/Ano",
        publicoAlvo: "Estudantes do ensino fundamental/m√©dio",
        objetivosAprendizagem: "Desenvolver conhecimentos espec√≠ficos do tema proposto",
        quantidadeAulas: "4",
        quantidadeDiagnosticos: "1",
        quantidadeAvaliacoes: "2",
        cronograma: "Distribui√ß√£o das atividades ao longo do per√≠odo",
        aulas: [
          {
            numero: 1,
            titulo: "Introdu√ß√£o ao Tema",
            descricao: "Apresenta√ß√£o dos conceitos b√°sicos e levantamento de conhecimentos pr√©vios",
            objetivos: ["Compreender conceitos fundamentais", "Identificar conhecimentos pr√©vios"],
            metodologia: "Aula expositiva dialogada com atividades interativas",
            recursos: ["Quadro", "Material audiovisual", "Textos introdut√≥rios"],
            duracao: "50 minutos",
            atividades: [
              "Discuss√£o inicial sobre o tema",
              "Apresenta√ß√£o de conceitos b√°sicos",
              "Atividade de sondagem"
            ]
          },
          {
            numero: 2,
            titulo: "Desenvolvimento Te√≥rico",
            descricao: "Aprofundamento dos conceitos com exemplos pr√°ticos",
            objetivos: ["Aprofundar conhecimentos te√≥ricos", "Aplicar conceitos em exemplos"],
            metodologia: "Aula te√≥rico-pr√°tica com exerc√≠cios",
            recursos: ["Livro did√°tico", "Exerc√≠cios pr√°ticos", "Material complementar"],
            duracao: "50 minutos",
            atividades: [
              "Exposi√ß√£o te√≥rica",
              "Resolu√ß√£o de exerc√≠cios",
              "Discuss√£o de exemplos"
            ]
          },
          {
            numero: 3,
            titulo: "Atividades Pr√°ticas",
            descricao: "Aplica√ß√£o pr√°tica dos conceitos atrav√©s de exerc√≠cios e atividades",
            objetivos: ["Aplicar conhecimentos pr√°ticos", "Desenvolver habilidades espec√≠ficas"],
            metodologia: "Atividades pr√°ticas em grupo e individual",
            recursos: ["Material manipulativo", "Fichas de atividades", "Computador/tablet"],
            duracao: "50 minutos",
            atividades: [
              "Atividades pr√°ticas",
              "Trabalho em grupo",
              "Aplica√ß√£o de conceitos"
            ]
          },
          {
            numero: 4,
            titulo: "Avalia√ß√£o e S√≠ntese",
            descricao: "Avalia√ß√£o do aprendizado e s√≠ntese dos conte√∫dos estudados",
            objetivos: ["Avaliar aprendizado", "Sintetizar conhecimentos"],
            metodologia: "Avalia√ß√£o formativa e s√≠ntese",
            recursos: ["Instrumentos de avalia√ß√£o", "Material de s√≠ntese"],
            duracao: "50 minutos",
            atividades: [
              "Avalia√ß√£o dos conhecimentos",
              "S√≠ntese dos conte√∫dos",
              "Feedback e orienta√ß√µes"
            ]
          }
        ],
        diagnosticos: [
          {
            numero: 1,
            titulo: "Diagn√≥stico Inicial",
            descricao: "Avalia√ß√£o dos conhecimentos pr√©vios dos estudantes",
            tipo: "Diagn√≥stica",
            instrumentos: ["Question√°rio", "Discuss√£o em grupo"],
            duracao: "20 minutos"
          }
        ],
        avaliacoes: [
          {
            numero: 1,
            titulo: "Avalia√ß√£o Formativa",
            descricao: "Avalia√ß√£o cont√≠nua durante o processo",
            tipo: "Formativa",
            instrumentos: ["Observa√ß√£o", "Atividades pr√°ticas"],
            peso: "40%"
          },
          {
            numero: 2,
            titulo: "Avalia√ß√£o Somativa",
            descricao: "Avalia√ß√£o final dos conhecimentos adquiridos",
            tipo: "Somativa",
            instrumentos: ["Prova", "Trabalho final"],
            peso: "60%"
          }
        ]
      });
    }

    return JSON.stringify({
      titulo: "Atividade Educacional",
      descricao: "Atividade personalizada baseada no contexto fornecido",
      objetivos: ["Desenvolver conhecimentos espec√≠ficos", "Aplicar conceitos pr√°ticos"],
      metodologia: "Metodologia adaptada ao contexto educacional",
      recursos: ["Material did√°tico", "Recursos tecnol√≥gicos"],
      avaliacao: "Avalia√ß√£o formativa e somativa"
    });
  }

  isReady(): boolean {
    return this.isInitialized;
  }
}

// Criar inst√¢ncia singleton
const geminiClient = new GeminiClient();

// Exportar inst√¢ncia singleton
export { geminiClient };

// Exportar classe para casos que precisem de m√∫ltiplas inst√¢ncias
export { GeminiClient };

// Export default da inst√¢ncia
export default geminiClient;

