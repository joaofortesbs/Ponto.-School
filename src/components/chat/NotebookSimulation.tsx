
import React from 'react';

interface NotebookSimulationProps {
  content: string;
}

export const NotebookSimulation: React.FC<NotebookSimulationProps> = ({ content }) => {
  // VersÃ£o simplificada da limpeza de conteÃºdo que preserva mais do texto original
  const cleanContent = (originalContent: string) => {
    let cleaned = originalContent;

    // Remove links usando regex (apenas links markdown e URLs completas)
    cleaned = cleaned.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '$1');
    cleaned = cleaned.replace(/(https?:\/\/[^\s]+)/g, '');

    // Remove saudaÃ§Ãµes mais especÃ­ficas para evitar perda de conteÃºdo
    const phrasesToRemove = [
      /^(?:olÃ¡|oi|hey|hello|hi|bom dia|boa tarde|boa noite)[,.!]?\s*/gi,
      /(?:atenciosamente|abraÃ§os|saudaÃ§Ãµes|cumprimentos|atÃ© mais|atÃ© logo|atÃ© breve|fique bem|atÃ© a prÃ³xima)$/gi,
    ];

    phrasesToRemove.forEach(pattern => {
      cleaned = cleaned.replace(pattern, '');
    });

    // Remover linhas vazias extras mas preservar estrutura do texto
    cleaned = cleaned.replace(/\n\s*\n\s*\n/g, '\n\n');
    
    // Remover espaÃ§os em branco extras no inÃ­cio e fim
    cleaned = cleaned.trim();

    return cleaned;
  };

  // Processa o conteÃºdo mantendo a maioria do texto original
  const processNotebookContent = (rawContent: string) => {
    // Aplicar limpeza bÃ¡sica sem remover conteÃºdo importante
    let processed = cleanContent(rawContent);
    
    // Padronizar formataÃ§Ã£o de bullet points
    processed = processed.replace(/^[â€¢\-\*]\s+/gm, 'â€¢ ');
    processed = processed.replace(/^(\d+\.\s+)/gm, 'â€¢ ');
    
    // Adicionar nota de fechamento apenas se nÃ£o existir um fechamento similar
    if (!processed.includes('AnotaÃ§Ã£o pronta') && !processed.includes('ðŸ‘‰')) {
      processed += '\n\nðŸ‘‰ AnotaÃ§Ã£o pronta! Agora Ã© sÃ³ revisar no modo caderno digital :)';
    }
    
    return processed;
  };

  // Aplicar formataÃ§Ã£o HTML
  const formatHtml = (text: string) => {
    return text
      // Bullets com estilo de lÃ¡pis
      .replace(/^â€¢\s+/gm, '<span class="notebook-bullet">âœŽ</span> ')
      // Negrito
      .replace(/(\*\*|__)([^*_]+?)(\*\*|__)/g, '<span class="notebook-highlight">$2</span>')
      // TÃ­tulos (linhas que comeÃ§am com maiÃºsculas ou tÃªm : no final)
      .replace(/(^|\n)([A-Z][^:\n]+:?)($|\n)/g, '$1<span class="notebook-title">$2</span>$3')
      // Nota de fechamento
      .replace(/ðŸ‘‰([^<]*)/g, '<span class="notebook-closing">ðŸ‘‰$1</span>')
      // Palavras-chave
      .replace(/\b(IMPORTANTE|IMPORTANTE:)\b/gi, '<span class="notebook-important">IMPORTANTE</span>')
      .replace(/\b(DICA|DICA:)\b/gi, '<span class="notebook-tip">DICA</span>')
      .replace(/\b(OBSERVAÃ‡ÃƒO|OBSERVAÃ‡ÃƒO:|NOTA|NOTA:)\b/gi, '<span class="notebook-note">OBSERVAÃ‡ÃƒO</span>')
      .replace(/\b(LEMBRE-SE|LEMBRE-SE:)\b/gi, '<span class="notebook-remember">LEMBRE-SE</span>')
      // FÃ³rmulas matemÃ¡ticas
      .replace(/(\w+\s*=\s*[\w\s\+\-\*\/\(\)\^âˆšâˆ†]{1,40})/g, '<span class="notebook-formula">$1</span>');
  };

  return (
    <div className="notebook-simulation">
      <div className="notebook-lines">
        <div
          className="notebook-content"
          dangerouslySetInnerHTML={{ 
            __html: formatHtml(processNotebookContent(content))
          }}
        />
      </div>
    </div>
  );
};

export default NotebookSimulation;
