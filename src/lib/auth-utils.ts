import { supabase } from "./supabase";

/**
 * Verifica se o usu√°rio est√° autenticado na aplica√ß√£o
 * Verifica√ß√£o otimizada que funciona entre m√∫ltiplas abas
 */
export const checkAuthentication = async (): Promise<boolean> => {
  try {
    console.log('üîç [AUTH] Iniciando verifica√ß√£o de autentica√ß√£o entre abas...');
    
    // 1. Primeiro, sempre verificar a sess√£o ativa do Supabase
    // Isso garante que funcione mesmo em novas abas
    const { data: sessionData, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('‚ùå [AUTH] Erro ao obter sess√£o do Supabase:', error);
      
      // Em caso de erro, verificar cookies como fallback
      const hasSupabaseCookies = document.cookie.includes('sb-') || 
                                document.cookie.includes('supabase-auth-token');
      
      if (hasSupabaseCookies) {
        console.log('‚ö†Ô∏è [AUTH] Erro no Supabase, mas cookies presentes - assumindo autenticado');
        return true;
      }
      
      return false;
    }

    const isAuthenticated = !!sessionData?.session;
    console.log('üìã [AUTH] Sess√£o ativa encontrada:', isAuthenticated);

    // 2. Atualizar cache local para otimizar pr√≥ximas verifica√ß√µes
    const now = Date.now();
    localStorage.setItem('auth_checked', 'true');
    localStorage.setItem('auth_status', isAuthenticated ? 'authenticated' : 'unauthenticated');
    localStorage.setItem('auth_cache_time', now.toString());

    // 3. Se autenticado, disparar evento para sincronizar outras abas
    if (isAuthenticated) {
      // Usar localStorage para comunica√ß√£o entre abas
      localStorage.setItem('auth_sync_timestamp', now.toString());
      
      // Disparar evento customizado para outras abas
      try {
        const event = new StorageEvent('storage', {
          key: 'auth_sync_timestamp',
          newValue: now.toString(),
          url: window.location.href
        });
        window.dispatchEvent(event);
      } catch (e) {
        console.log('‚ö†Ô∏è [AUTH] N√£o foi poss√≠vel disparar evento de sincroniza√ß√£o:', e);
      }
      
      console.log('‚úÖ [AUTH] Usu√°rio autenticado - sess√£o v√°lida encontrada');
    } else {
      console.log('‚ùå [AUTH] Usu√°rio n√£o autenticado - nenhuma sess√£o ativa');
    }

    return isAuthenticated;

  } catch (error) {
    console.error("‚ùå [AUTH] Erro cr√≠tico na verifica√ß√£o de autentica√ß√£o:", error);
    
    // Fallback: verificar cookies e cache local
    const hasSupabaseCookies = document.cookie.includes('sb-') || 
                              document.cookie.includes('supabase-auth-token');
    const cachedStatus = localStorage.getItem('auth_status');
    const cacheTime = localStorage.getItem('auth_cache_time');
    
    // Se temos cookies recentes E cache positivo, assumir autenticado
    if (hasSupabaseCookies && cachedStatus === 'authenticated' && cacheTime) {
      const now = Date.now();
      const timeDiff = now - parseInt(cacheTime);
      
      // Se o cache tem menos de 10 minutos, considerar v√°lido
      if (timeDiff < 10 * 60 * 1000) {
        console.log('‚ö†Ô∏è [AUTH] Erro, mas cookies + cache recente indicam autenticado');
        return true;
      }
    }
    
    console.log('‚ùå [AUTH] Erro e sem indica√ß√µes confi√°veis de autentica√ß√£o');
    return false;
  }
};

/**
 * Limpa os dados de autentica√ß√£o do localStorage
 */
export const clearAuthState = (): void => {
  localStorage.removeItem('auth_checked');
  localStorage.removeItem('auth_status');

  // Opcionalmente, remover a flag de primeiro login para testes
  // Descomente para testes:
  // localStorage.removeItem('hasLoggedInBefore');
};

/**
 * Atualiza o estado de autentica√ß√£o ap√≥s login bem-sucedido
 */
export const setAuthenticatedState = (): void => {
  localStorage.setItem('auth_checked', 'true');
  localStorage.setItem('auth_status', 'authenticated');
};

/**
 * Verifica se √© o primeiro login do usu√°rio espec√≠fico
 * @param userId ID do usu√°rio atual
 * @returns true se for o primeiro login deste usu√°rio espec√≠fico
 */
export const isFirstLoginForUser = (userId: string): boolean => {
  if (!userId) return false;
  const key = `hasLoggedInBefore_${userId}`;
  return !localStorage.getItem(key);
};

/**
 * Marca como n√£o sendo mais o primeiro login para este usu√°rio espec√≠fico
 * @param userId ID do usu√°rio atual
 */
export const markUserAsLoggedIn = (userId: string): void => {
  if (!userId) return;
  const key = `hasLoggedInBefore_${userId}`;
  localStorage.setItem(key, 'true');
};


/**
 * Salva o nome de usu√°rio para uso consistente em toda a aplica√ß√£o
 * @param displayName Nome a ser exibido (display_name)
 * @param fullName Nome completo (full_name)
 * @param username Nome de usu√°rio (username)
 */
export const saveUserDisplayName = (displayName?: string | null, fullName?: string | null, username?: string | null): void => {
  // Ordem de prioridade corrigida: display_name > primeiro nome do full_name > username > fallback
  const firstName = displayName || (fullName ? fullName.split(' ')[0] : null) || username || "Usu√°rio";
  localStorage.setItem('userFirstName', firstName);
  
  // Tamb√©m guardar display_name separadamente para uso em outros componentes
  if (displayName) {
    localStorage.setItem('userDisplayName', displayName);
  }
  
  // Garantir que o username tamb√©m seja salvo corretamente
  if (username && username !== 'Usu√°rio' && !username.startsWith('user_')) {
    localStorage.setItem('username', username);
    
    // Armazenar tamb√©m no sessionStorage como backup
    try {
      sessionStorage.setItem('username', username);
    } catch (e) {
      console.warn('Erro ao salvar username no sessionStorage', e);
    }
    
    // Disparar evento para sincroniza√ß√£o
    document.dispatchEvent(new CustomEvent('usernameUpdated', { 
      detail: { username } 
    }));
  }
};

/**
 * Verifica e repara inconsist√™ncias nos nomes de usu√°rio salvos
 */
export const repairUsernames = async (): Promise<void> => {
  try {
    // Obter usernames de todas as fontes
    const localUsername = localStorage.getItem('username');
    const sessionUsername = sessionStorage.getItem('username');
    const userFirstName = localStorage.getItem('userFirstName');
    const userDisplayName = localStorage.getItem('userDisplayName');
    
    console.log('Verificando consist√™ncia de usernames:', {
      localUsername,
      sessionUsername,
      userFirstName,
      userDisplayName
    });
    
    // Verificar se existe uma sess√£o ativa
    const { data: sessionData } = await supabase.auth.getSession();
    
    if (sessionData?.session?.user) {
      const email = sessionData.session.user.email;
      
      // Buscar perfil no Supabase
      if (email) {
        const { data: profileData } = await supabase
          .from('profiles')
          .select('username, display_name, email, id')
          .eq('email', email)
          .single();
          
        // Determinar o melhor username dispon√≠vel
        let bestUsername = '';
        
        // Prioridade: profile > localStorage > sessionStorage > email
        if (profileData?.username && profileData.username !== 'Usu√°rio') {
          bestUsername = profileData.username;
        } else if (localUsername && localUsername !== 'Usu√°rio') {
          bestUsername = localUsername;
        } else if (sessionUsername && sessionUsername !== 'Usu√°rio') {
          bestUsername = sessionUsername;
        } else if (email) {
          // Usar parte do email como username
          bestUsername = email.split('@')[0];
        }
        
        // Se encontramos um bom username, atualizar em todos os lugares
        if (bestUsername && bestUsername !== 'Usu√°rio') {
          // Atualizar localStorage e sessionStorage
          localStorage.setItem('username', bestUsername);
          try { sessionStorage.setItem('username', bestUsername); } catch (e) {}
          
          // Atualizar perfil se necess√°rio
          if (profileData && (!profileData.username || profileData.username === 'Usu√°rio')) {
            await supabase
              .from('profiles')
              .update({ 
                username: bestUsername,
                updated_at: new Date().toISOString()
              })
              .eq('id', profileData.id);
              
            console.log('Perfil atualizado com novo username:', bestUsername);
          }
          
          // Disparar evento para notificar outros componentes
          document.dispatchEvent(new CustomEvent('usernameRepaired', { 
            detail: { username: bestUsername } 
          }));
        }
      }
    }
  } catch (error) {
    console.error('Erro ao reparar usernames:', error);
  }
};

/**
 * Obt√©m o nome de exibi√ß√£o do usu√°rio salvo
 * @returns Nome do usu√°rio para exibi√ß√£o
 */
export const getUserDisplayName = (): string => {
  return localStorage.getItem('userFirstName') || "Usu√°rio";
};

export const signInWithEmail = async (email: string, password: string) => {
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    if (error) throw error;

    if (data?.user) {
      localStorage.setItem('auth_checked', 'true');
      localStorage.setItem('auth_status', 'authenticated');

      // N√£o armazenamos mais timestamp de sess√£o para que o modal sempre apare√ßa
    }

    return { success: true, data };
  } catch (error) {
    console.error("Erro ao fazer login:", error);
    return { success: false, error };
  }
};

/**
 * Fun√ß√£o para login com nome de usu√°rio
 * Primeiro busca o email associado ao username e depois faz login
 */
export const signInWithUsername = async (username: string, password: string) => {
  try {
    // Primeiro, buscar o email associado ao nome de usu√°rio
    const { data: profileData, error: profileError } = await supabase
      .from('profiles')
      .select('email')
      .eq('username', username)
      .single();

    if (profileError || !profileData?.email) {
      return { 
        success: false, 
        error: new Error("Nome de usu√°rio n√£o encontrado")
      };
    }

    // Usar o email encontrado para fazer login
    return signInWithEmail(profileData.email, password);
    
  } catch (error) {
    console.error("Erro ao fazer login com nome de usu√°rio:", error);
    return { success: false, error };
  }
};