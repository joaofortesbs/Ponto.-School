[plugin:vite:react-swc] × the name `selectedEvent` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/agenda/index.tsx:107:1]
 107 │   const [showEpictusAIModal, setShowEpictusAIModal] = useState(false);
 108 │   const [showEpictusCalendarModal, setShowEpictusCalendarModal] =
 109 │     useState(false);
 110 │   const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);
     ·          ──────┬──────
     ·                ╰── previous definition of `selectedEvent` here
 111 │   const [showSetGoalModal, setShowSetGoalModal] = useState(false);
 112 │   const [showAddTaskModal, setShowAddTaskModal] = useState(false);
 113 │   const [showAISuggestionsModal, setShowAISuggestionsModal] = useState(false);
 114 │   const [tasksData, setTasksData] = useState([
 115 │     {
 116 │       id: "1",
 117 │       title: "Lista de Exercícios - Funções Trigonométricas",
 118 │       discipline: "Matemática",
 119 │       dueDate: "Vence hoje, 18:00",
 120 │       progress: 75,
 121 │       urgent: true,
 122 │       priority: "alta",
 123 │     },
 124 │     {
 125 │       id: "2",
 126 │       title: "Relatório de Experimento - Titulação",
 127 │       discipline: "Química",
 128 │       dueDate: "Vence em 2 dias",
 129 │       progress: 30,
 130 │       urgent: false,
 131 │       priority: "média",
 132 │     },
 133 │     {
 134 │       id: "3",
 135 │       title: "Preparação para Prova - Mecânica Quântica",
 136 │       discipline: "Física",
 137 │       dueDate: "Vence em 1 dia",
 138 │       progress: 10,
 139 │       urgent: true,
 140 │       priority: "alta",
 141 │     },
 142 │   ]);
 143 │ 
 144 │   // Get current date for calendar
 145 │   const currentDate = new Date();
 146 │   const currentDay = currentDate.getDate();
 147 │   const currentMonth = currentDate.getMonth();
 148 │   const currentYear = currentDate.getFullYear();
 149 │ 
 150 │   // Update URL when active tab changes
 151 │   useEffect(() => {
 152 │     setSearchParams({ view: activeTab });
 153 │   }, [activeTab, setSearchParams]);
 154 │ 
 155 │   // Update active tab when URL changes
 156 │   useEffect(() => {
 157 │     if (viewParam) {
 158 │       setActiveTab(viewParam);
 159 │     }
 160 │   }, [viewParam]);
 161 │ 
 162 │   // Dados de eventos para o calendário (vazio por padrão)
 163 │   const [eventData, setEventData] = useState<Record<number, any[]>>({});
 164 │ 
 165 │   // Função para formatar eventos próximos a partir do eventData
 166 │   const getUpcomingEvents = () => {
 167 │     const today = new Date();
 168 │     today.setHours(0, 0, 0, 0); // Normaliza a data atual para comparação
 169 │     const upcoming: any[] = [];
 170 │ 
 171 │     // Percorre todos os dias com eventos
 172 │     Object.keys(eventData).forEach(day => {
 173 │       const dayEvents = eventData[parseInt(day)] || [];
 174 │ 
 175 │       // Para cada evento nesse dia
 176 │       dayEvents.forEach(event => {
 177 │         if (event.startDate) {
 178 │           const eventDate = new Date(event.startDate);
 179 │           eventDate.setHours(0, 0, 0, 0); // Normaliza a data do evento para comparação
 180 │ 
 181 │           // Adiciona eventos que ocorrem hoje ou no futuro
 182 │           if (eventDate >= today) {
 183 │             // Formata a data com date-fns
 184 │             const formattedDate = format(eventDate, "dd/MM/yyyy", { locale: ptBR });
 185 │ 
 186 │             upcoming.push({
 187 │               id: event.id,
 188 │               type: event.type,
 189 │               title: event.title,
 190 │               day: formattedDate,
 191 │               discipline: event.discipline || "Geral",
 192 │               isOnline: event.isOnline || false,
 193 │               color: event.color,
 194 │               details: event.details,
 195 │               startTime: event.startTime || event.time || "00:00",
 196 │               // Guardar a data original para ordenação
 197 │               originalDate: eventDate,
 198 │               originalTime: event.startTime || event.time || "00:00"
 199 │             });
 200 │           }
 201 │         }
 202 │       });
 203 │     });
 204 │ 
 205 │     // Ordena eventos cronologicamente (por data e hora)
 206 │     upcoming.sort((a, b) => {
 207 │       // Primeiro compara por data
 208 │       const dateComparison = a.originalDate.getTime() - b.originalDate.getTime();
 209 │ 
 210 │       // Se for a mesma data, compara pelo horário
 211 │       if (dateComparison === 0) {
 212 │         const [hoursA, minutesA] = a.originalTime.split(':').map(Number);
 213 │         const [hoursB, minutesB] = b.originalTime.split(':').map(Number);
 214 │ 
 215 │         // Compara horas
 216 │         if (hoursA !== hoursB) {
 217 │           return hoursA - hoursB;
 218 │         }
 219 │ 
 220 │         // Se as horas forem iguais, compara minutos
 221 │         return minutesA - minutesB;
 222 │       }
 223 │ 
 224 │       return dateComparison;
 225 │     });
 226 │ 
 227 │     return upcoming;
 228 │   };
 229 │ 
 230 │   // Array de eventos próximos atualizado a partir do eventData
 231 │   const upcomingEventsData = getUpcomingEvents();
 232 │ 
 233 │   // Sample AI recommendations
 234 │   const aiRecommendations = [
 235 │     {
 236 │       id: "1",
 237 │       priority: "high",
 238 │       title: "Prioridade Alta: Você tem uma prova de Física amanhã",
 239 │       description:
 240 │         "Recomendo revisar os conceitos de Mecânica Quântica hoje à noite.",
 241 │       actions: [
 242 │         {
 243 │           label: "Ver Material",
 244 │           icon: <FileText className="h-3.5 w-3.5 mr-1" />,
 245 │           variant: "outline",
 246 │         },
 247 │         {
 248 │           label: "Criar Resumo",
 249 │           icon: <FileEdit className="h-3.5 w-3.5 mr-1" />,
 250 │           variant: "default",
 251 │         },
 252 │       ],
 253 │       icon: <AlertCircle className="h-5 w-5 text-red-500" />,
 254 │     },
 255 │     {
 256 │       id: "2",
 257 │       priority: "medium",
 258 │       title: "Seu desempenho em Química caiu 15% na última semana",
 259 │       description: "Que tal revisar os conceitos de titulação?",
 260 │       actions: [
 261 │         {
 262 │           label: "Ver Desempenho",
 263 │           icon: <LineChart className="h-3.5 w-3.5 mr-1" />,
 264 │           variant: "outline",
 265 │         },
 266 │         {
 267 │           label: "Praticar Exercícios",
 268 │           icon: <CheckSquare className="h-3.5 w-3.5 mr-1" />,
 269 │           variant: "default",
 270 │         },
 271 │       ],
 272 │       icon: <Flame className="h-5 w-5 text-amber-500" />,
 273 │     },
 274 │     {
 275 │       id: "3",
 276 │       priority: "low",
 277 │       title: "Você está com uma sequência de 7 dias de estudo!",
 278 │       description: "Continue assim para ganhar mais pontos de experiência.",
 279 │       actions: [
 280 │         {
 281 │           label: "Ver Conquistas",
 282 │           icon: <Trophy className="h-3.5 w-3.5 mr-1" />,
 283 │           variant: "outline",
 284 │         },
 285 │       ],
 286 │       icon: <Zap className="h-5 w-5 text-green-500" />,
 287 │     },
 288 │   ];
 289 │ 
 290 │   // Sample study time data
 291 │   const studyTimeData = {
 292 │     total: 32,
 293 │     goal: 40,
 294 │     progress: 80, // 32/40 = 80%
 295 │     byDay: [
 296 │       { day: "Seg", hours: 5 },
 297 │       { day: "Ter", hours: 6 },
 298 │       { day: "Qua", hours: 4 },
 299 │       { day: "Qui", hours: 7 },
 300 │       { day: "Sex", hours: 5 },
 301 │       { day: "Sáb", hours: 3 },
 302 │       { day: "Dom", hours: 2 },
 303 │     ],
 304 │     bySubject: [
 305 │       { subject: "Matemática", hours: 10, color: "#FF6B00" },
 306 │       { subject: "Física", hours: 8, color: "#FF8C40" },
 307 │       { subject: "Química", hours: 6, color: "#E85D04" },
 308 │       { subject: "Biologia", hours: 5, color: "#DC2F02" },
 309 │       { subject: "História", hours: 3, color: "#9D0208" },
 310 │     ],
 311 │   };
 312 │ 
 313 │   // Sample last accessed classes
 314 │   const lastAccessedClasses = [
 315 │     {
 316 │       id: "1",
 317 │       title: "Funções Trigonométricas",
 318 │       discipline: "Matemática",
 319 │       professor: "Prof. Carlos Santos",
 320 │       progress: 75,
 321 │       thumbnail:
 322 │         "https://images.unsplash.com/photo-1635070041078-e363dbe005cb?w=300&q=80",
 323 │       lastAccessed: "Hoje, 10:30",
 324 │     },
 325 │     {
 326 │       id: "2",
 327 │       title: "Mecânica Quântica - Introdução",
 328 │       discipline: "Física",
 329 │       professor: "Prof. Roberto Alves",
 330 │       progress: 45,
 331 │       thumbnail:
 332 │         "https://images.unsplash.com/photo-1636466497217-26a8cbeaf0aa?w=300&q=80",
 333 │       lastAccessed: "Ontem, 15:20",
 334 │     },
 335 │     {
 336 │       id: "3",
 337 │       title: "Titulação e pH",
 338 │       discipline: "Química",
 339 │       professor: "Profa. Ana Martins",
 340 │       progress: 90,
 341 │       thumbnail:
 342 │         "https://images.unsplash.com/photo-1603126857599-f6e157fa2fe6?w=300&q=80",
 343 │       lastAccessed: "2 dias atrás, 14:15",
 344 │     },
 345 │   ];
 346 │ 
 347 │   // Sample ranking data
 348 │   const rankingData = {
 349 │     position: 42,
 350 │     total: 210,
 351 │     points: 3750,
 352 │     nextReward: 4000,
 353 │     progress: 75, // (3750/4000)*100 = 93.75%
 354 │     trend: "+5", // Subiu 5 posições
 355 │   };
 356 │ 
 357 │   // Sample subject progress data
 358 │   const subjectProgressData = [
 359 │     { subject: "Matemática", progress: 85, goal: 90, color: "#FF6B00" },
 360 │     { subject: "Física", progress: 72, goal: 80, color: "#FF8C40" },
 361 │     { subject: "Química", progress: 65, goal: 75, color: "#E85D04" },
 362 │     { subject: "Biologia", progress: 90, goal: 85, color: "#DC2F02" },
 363 │     { subject: "História", progress: 78, goal: 80, color: "#9D0208" },
 364 │   ];
 365 │ 
 366 │   // Sample today's events data
 367 │   const todayEventsData = [
 368 │     {
 369 │       id: "1",
 370 │       type: "aula",
 371 │       title: "Aula de Matemática",
 372 │       time: "10:00 - 11:30",
 373 │       status: "agora",
 374 │       discipline: "Matemática",
 375 │       isOnline: true,
 376 │     },
 377 │     {
 378 │       id: "2",
 379 │       type: "trabalho",
 380 │       title: "Entrega de Trabalho",
 381 │       time: "até 18:00",
 382 │       status: "pendente",
 383 │       discipline: "Química",
 384 │       isOnline: true,
 385 │     },
 386 │   ];
 387 │ 
 388 │   // Get event icon based on type
 389 │   const getEventIcon = (type: string) => {
 390 │     switch (type) {
 391 │       case "aula":
 392 │         return <Video className="h-4 w-4" />;
 393 │       case "trabalho":
 394 │         return <FileEdit className="h-4 w-4" />;
 395 │       case "prova":
 396 │         return <AlertCircle className="h-4 w-4" />;
 397 │       case "reuniao":
 398 │         return <Users className="h-4 w-4" />;
 399 │       case "lembrete":
 400 │         return <Bell className="h-4 w-4" />;
 401 │       case "tarefa":
 402 │         return <CheckSquare className="h-4 w-4" />;
 403 │       default:
 404 │         return <CalendarIcon className="h-4 w-4" />;
 405 │     }
 406 │   };
 407 │ 
 408 │   // Get event color based on type
 409 │   const getEventColor = (type: string) => {
 410 │     switch (type) {
 411 │       case "aula":
 412 │         return "blue";
 413 │       case "trabalho":
 414 │       case "tarefa":
 415 │         return "amber";
 416 │       case "prova":
 417 │         return "red";
 418 │       case "reuniao":
 419 │         return "green";
 420 │       case "lembrete":
 421 │         return "yellow";
 422 │       case "evento":
 423 │         return "purple";
 424 │       default:
 425 │         return "gray";
 426 │     }
 427 │   };
 428 │ 
 429 │   // Get task icon based on type
 430 │   const getTaskIcon = (discipline: string) => {
 431 │     switch (discipline) {
 432 │       case "Matemática":
 433 │         return <span className="text-[#FF6B00] font-bold">π</span>;
 434 │       case "Física":
 435 │         return <span className="text-[#FF8C40] font-bold">⚛</span>;
 436 │       case "Química":
 437 │         return <span className="text-[#E85D04] font-bold">⚗</span>;
 438 │       case "Biologia":
 439 │         return <span className="text-[#DC2F02] font-bold">🧬</span>;
 440 │       case "História":
 441 │         return <span className="text-[#9D0208] font-bold">📜</span>;
 442 │       default:
 443 │         return <BookOpen className="h-4 w-4" />;
 444 │     }
 445 │   };
 446 │ 
 447 │   // Get priority badge color
 448 │   const getPriorityColor = (priority: string) => {
 449 │     switch (priority) {
 450 │       case "alta":
 451 │         return "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300";
 452 │       case "média":
 453 │         return "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300";
 454 │       case "baixa":
 455 │         return "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300";
 456 │       default:
 457 │         return "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300";
 458 │     }
 459 │   };
 460 │ 
 461 │   // Get status badge color
 462 │   const getStatusBadge = (status: string) => {
 463 │     switch (status) {
 464 │       case "agora":
 465 │         return <Badge className="bg-green-500 text-white">Agora</Badge>;
 466 │       case "pendente":
 467 │         return <Badge className="bg-amber-500 text-white">Pendente</Badge>;
 468 │       default:
 469 │         return null;
 470 │     }
 471 │   };
 472 │ 
 473 │   // Handle search input
 474 │   const handleSearchInput = (e: React.ChangeEvent<HTMLInputElement>) => {
 475 │     const query = e.target.value;
 476 │     setSearchQuery(query);
 477 │ 
 478 │     if (query.length > 2) {
 479 │       // Simulate search suggestions
 480 │       const suggestions = [
 481 │         "Aula de Matemática",
 482 │         "Prova de Física",
 483 │         "Grupo de Estudos",
 484 │         "Entrega de Trabalho",
 485 │         "Matemática",
 486 │         "Física",
 487 │         "Prof. Carlos Santos",
 488 │       ].filter((item) => item.toLowerCase().includes(query.toLowerCase()));
 489 │ 
 490 │       setSearchSuggestions(suggestions);
 491 │       setShowSearchSuggestions(suggestions.length > 0);
 492 │     } else {
 493 │       setShowSearchSuggestions(false);
 494 │     }
 495 │   };
 496 │ 
 497 │   // Open event details modal
 498 │   const openEventDetails = (event: any) => {
 499 │     setSelectedEvent(event);
 500 │     setShowEventDetailsModal(true);
 501 │   };
 502 │ 
 503 │   // Add new event
 504 │   const handleAddEvent = async (newEvent: Omit<CalendarEvent, 'id'>) => {
 505 │     try {
 506 │       // O evento já foi salvo no banco de dados pelo modal
 507 │       // Agora apenas atualizamos a interface
 508 │       const updatedEvents = await getAllEvents();
 509 │       setEvents(updatedEvents);
 510 │     } catch (error) {
 511 │       console.error("Erro ao atualizar lista de eventos:", error);
 512 │     }
 513 │   };
 514 │ 
 515 │   // Edit event
 516 │   const handleEditEvent = (editedEvent: any) => {
 517 │     const updatedEvents = { ...eventData };
 518 │ 
 519 │     // Find the event in all days and update it
 520 │     let eventFound = false;
 521 │ 
 522 │     Object.keys(updatedEvents).forEach((day) => {
 523 │       const dayNum = parseInt(day);
 524 │       const eventIndex = updatedEvents[dayNum].findIndex(
 525 │         (event) => event.id === editedEvent.id,
 526 │       );
 527 │ 
 528 │       if (eventIndex !== -1) {
 529 │         // Update the event in place
 530 │         updatedEvents[dayNum][eventIndex] = {
 531 │           ...editedEvent,
 532 │           color: getEventColor(editedEvent.type),
 533 │           time: editedEvent.startTime || editedEvent.time || "00:00",
 534 │         };
 535 │         eventFound = true;
 536 │       }
 537 │     });
 538 │ 
 539 │     // If the event wasn't found (rare case) or if the date changed
 540 │     if (!eventFound && editedEvent.startDate) {
 541 │       const newDay = new Date(editedEvent.startDate).getDate();
 542 │       handleDeleteEvent(editedEvent.id);
 543 │ 
 544 │       // Add to the new day
 545 │       const eventWithColor = {
 546 │         ...editedEvent,
 547 │         color: getEventColor(editedEvent.type),
 548 │         time: editedEvent.startTime || "00:00",
 549 │       };
 550 │ 
 551 │       if (updatedEvents[newDay]) {
 552 │         updatedEvents[newDay] = [...updatedEvents[newDay], eventWithColor];
 553 │       } else {
 554 │         updatedEvents[newDay] = [eventWithColor];
 555 │       }
 556 │     }
 557 │ 
 558 │     setEventData(updatedEvents);
 559 │ 
 560 │     // Exibe uma mensagem de sucesso
 561 │     toast({
 562 │       title: "Evento atualizado",
 563 │       description: "O evento foi atualizado com sucesso.",
 564 │     });
 565 │   };
 566 │ 
 567 │   // Delete event
 568 │   const handleDeleteEvent = (eventId: string) => {
 569 │     const updatedEvents = { ...eventData };
 570 │ 
 571 │     // Find and remove the event
 572 │     Object.keys(updatedEvents).forEach((day) => {
 573 │       const dayNum = parseInt(day);
 574 │       updatedEvents[dayNum] = updatedEvents[dayNum].filter(
 575 │         (event) => event.id !== eventId,
 576 │       );
 577 │ 
 578 │       // Remove the day if it has no events
 579 │       if (updatedEvents[dayNum].length === 0) {
 580 │         delete updatedEvents[dayNum];
 581 │       }
 582 │     });
 583 │ 
 584 │     setEventData(updatedEvents);
 585 │   };
 586 │ 
 587 │   // Handle event drag and drop
 588 │   const handleEventDrop = (event: any, newDay: number) => {
 589 │     // First, remove the event from its original day
 590 │     const updatedEvents = { ...eventData };
 591 │     let eventToMove = null;
 592 │ 
 593 │     // Find and remove the event from its original day
 594 │     Object.keys(updatedEvents).forEach((day) => {
 595 │       const dayNum = parseInt(day);
 596 │       const eventIndex = updatedEvents[dayNum].findIndex(
 597 │         (e) => e.id === event.id,
 598 │       );
 599 │ 
 600 │       if (eventIndex !== -1) {
 601 │         // Save the event before removing it
 602 │         eventToMove = { ...updatedEvents[dayNum][eventIndex] };
 603 │ 
 604 │         // Remove the event from its original day
 605 │         updatedEvents[dayNum] = updatedEvents[dayNum].filter(
 606 │           (e) => e.id !== event.id,
 607 │         );
 608 │ 
 609 │         // Remove the day if it has no events
 610 │         if (updatedEvents[dayNum].length === 0) {
 611 │           delete updatedEvents[dayNum];
 612 │         }
 613 │       }
 614 │     });
 615 │ 
 616 │     // If we found the event, add it to the new day
 617 │     if (eventToMove) {
 618 │       // Update the event's date if it has one
 619 │       if (eventToMove.startDate) {
 620 │         const oldDate = new Date(eventToMove.startDate);
 621 │         const newDate = new Date(oldDate);
 622 │         newDate.setDate(newDay);
 623 │         eventToMove.startDate = newDate;
 624 │ 
 625 │         // Also update endDate if it exists
 626 │         if (eventToMove.endDate) {
 627 │           const oldEndDate = new Date(eventToMove.endDate);
 628 │           const dayDiff = Math.round(
 629 │             (oldEndDate.getTime() - oldDate.getTime()) / (1000 * 60 * 60 * 24),
 630 │           );
 631 │           const newEndDate = new Date(newDate);
 632 │           newEndDate.setDate(newDate.getDate() + dayDiff);
 633 │           eventToMove.endDate = newEndDate;
 634 │         }
 635 │       }
 636 │ 
 637 │       // Add the event to the new day
 638 │       if (updatedEvents[newDay]) {
 639 │         updatedEvents[newDay] = [...updatedEvents[newDay], eventToMove];
 640 │       } else {
 641 │         updatedEvents[newDay] = [eventToMove];
 642 │       }
 643 │ 
 644 │       setEventData(updatedEvents);
 645 │     }
 646 │   };
 647 │ 
 648 │   // Handle time range change
 649 │   const handleTimeRangeChange = (range: string) => {
 650 │     setTimeRange(range);
 651 │   };
 652 │ 
 653 │   // Handle subject filter change
 654 │   const handleSubjectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
 655 │     setSelectedSubject(e.target.value);
 656 │   };
 657 │ 
 658 │   // Handle add task
 659 │   const handleAddTask = (newTask: any) => {
 660 │     try {
 661 │       if (!newTask || !newTask.title) {
 662 │         console.error("Invalid task data", newTask);
 663 │         return;
 664 │       }
 665 │ 
 666 │       // First close modal to prevent UI freezing
 667 │       setShowAddTaskModal(false);
 668 │ 
 669 │       setTimeout(() => {
 670 │         // Format the task for the dashboard view
 671 │         const formattedTask = {
 672 │           id: newTask.id || `task-${Date.now()}`,
 673 │           title: newTask.title,
 674 │           discipline: newTask.discipline || "Geral",
 675 │           dueDate: newTask.dueDate
 676 │             ? `Vence ${new Date(newTask.dueDate).toLocaleDateString("pt-BR")}`
 677 │             : "Sem data definida",
 678 │           progress: newTask.progress || 0,
 679 │           urgent: newTask.priority === "alta",
 680 │           priority: newTask.priority || "média",
 681 │         };
 682 │ 
 683 │         // Update the tasks list in the dashboard
 684 │         setTasksData((prev) => [formattedTask, ...prev]);
 685 │ 
 686 │         // Show success message
 687 │         toast({
 688 │           title: "Tarefa adicionada",
 689 │           description: "A nova tarefa foi adicionada com sucesso.",
 690 │         });
 691 │ 
 692 │         // Refresh the tasks view
 693 │         setTimeout(() => {
 694 │           const tasksView = document.querySelector(
 695 │             '[data-testid="tasks-view"]',
 696 │           );
 697 │           if (tasksView) {
 698 │             const refreshEvent = new CustomEvent("refresh-tasks", {
 699 │               detail: newTask,
 700 │             });
 701 │             tasksView.dispatchEvent(refreshEvent);
 702 │           }
 703 │         }, 200); // Small delay to ensure DOM is ready
 704 │       }, 100);
 705 │     } catch (error) {
 706 │       console.error("Error adding task:", error);
 707 │       toast({
 708 │         title: "Erro ao adicionar tarefa",
 709 │         description: "Ocorreu um erro ao adicionar a tarefa. Tente novamente.",
 710 │         variant: "destructive",
 711 │       });
 712 │     }
 713 │   };
 714 │ 
 715 │   // Calendar State
 716 │   const [events, setEvents] = useState<CalendarEvent[]>([]);
 717 │   const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);
     ·          ──────┬──────
     ·                ╰── `selectedEvent` redefined here
 718 │ 
 719 │   // Calendar View
 720 │   const [view, setView] = useState<"month" | "week" | "day">("month");
     ╰────

  × the name `setSelectedEvent` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/agenda/index.tsx:107:1]
 107 │   const [showEpictusAIModal, setShowEpictusAIModal] = useState(false);
 108 │   const [showEpictusCalendarModal, setShowEpictusCalendarModal] =
 109 │     useState(false);
 110 │   const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);
     ·                         ────────┬───────
     ·                                 ╰── previous definition of `setSelectedEvent` here
 111 │   const [showSetGoalModal, setShowSetGoalModal] = useState(false);
 112 │   const [showAddTaskModal, setShowAddTaskModal] = useState(false);
 113 │   const [showAISuggestionsModal, setShowAISuggestionsModal] = useState(false);
 114 │   const [tasksData, setTasksData] = useState([
 115 │     {
 116 │       id: "1",
 117 │       title: "Lista de Exercícios - Funções Trigonométricas",
 118 │       discipline: "Matemática",
 119 │       dueDate: "Vence hoje, 18:00",
 120 │       progress: 75,
 121 │       urgent: true,
 122 │       priority: "alta",
 123 │     },
 124 │     {
 125 │       id: "2",
 126 │       title: "Relatório de Experimento - Titulação",
 127 │       discipline: "Química",
 128 │       dueDate: "Vence em 2 dias",
 129 │       progress: 30,
 130 │       urgent: false,
 131 │       priority: "média",
 132 │     },
 133 │     {
 134 │       id: "3",
 135 │       title: "Preparação para Prova - Mecânica Quântica",
 136 │       discipline: "Física",
 137 │       dueDate: "Vence em 1 dia",
 138 │       progress: 10,
 139 │       urgent: true,
 140 │       priority: "alta",
 141 │     },
 142 │   ]);
 143 │ 
 144 │   // Get current date for calendar
 145 │   const currentDate = new Date();
 146 │   const currentDay = currentDate.getDate();
 147 │   const currentMonth = currentDate.getMonth();
 148 │   const currentYear = currentDate.getFullYear();
 149 │ 
 150 │   // Update URL when active tab changes
 151 │   useEffect(() => {
 152 │     setSearchParams({ view: activeTab });
 153 │   }, [activeTab, setSearchParams]);
 154 │ 
 155 │   // Update active tab when URL changes
 156 │   useEffect(() => {
 157 │     if (viewParam) {
 158 │       setActiveTab(viewParam);
 159 │     }
 160 │   }, [viewParam]);
 161 │ 
 162 │   // Dados de eventos para o calendário (vazio por padrão)
 163 │   const [eventData, setEventData] = useState<Record<number, any[]>>({});
 164 │ 
 165 │   // Função para formatar eventos próximos a partir do eventData
 166 │   const getUpcomingEvents = () => {
 167 │     const today = new Date();
 168 │     today.setHours(0, 0, 0, 0); // Normaliza a data atual para comparação
 169 │     const upcoming: any[] = [];
 170 │ 
 171 │     // Percorre todos os dias com eventos
 172 │     Object.keys(eventData).forEach(day => {
 173 │       const dayEvents = eventData[parseInt(day)] || [];
 174 │ 
 175 │       // Para cada evento nesse dia
 176 │       dayEvents.forEach(event => {
 177 │         if (event.startDate) {
 178 │           const eventDate = new Date(event.startDate);
 179 │           eventDate.setHours(0, 0, 0, 0); // Normaliza a data do evento para comparação
 180 │ 
 181 │           // Adiciona eventos que ocorrem hoje ou no futuro
 182 │           if (eventDate >= today) {
 183 │             // Formata a data com date-fns
 184 │             const formattedDate = format(eventDate, "dd/MM/yyyy", { locale: ptBR });
 185 │ 
 186 │             upcoming.push({
 187 │               id: event.id,
 188 │               type: event.type,
 189 │               title: event.title,
 190 │               day: formattedDate,
 191 │               discipline: event.discipline || "Geral",
 192 │               isOnline: event.isOnline || false,
 193 │               color: event.color,
 194 │               details: event.details,
 195 │               startTime: event.startTime || event.time || "00:00",
 196 │               // Guardar a data original para ordenação
 197 │               originalDate: eventDate,
 198 │               originalTime: event.startTime || event.time || "00:00"
 199 │             });
 200 │           }
 201 │         }
 202 │       });
 203 │     });
 204 │ 
 205 │     // Ordena eventos cronologicamente (por data e hora)
 206 │     upcoming.sort((a, b) => {
 207 │       // Primeiro compara por data
 208 │       const dateComparison = a.originalDate.getTime() - b.originalDate.getTime();
 209 │ 
 210 │       // Se for a mesma data, compara pelo horário
 211 │       if (dateComparison === 0) {
 212 │         const [hoursA, minutesA] = a.originalTime.split(':').map(Number);
 213 │         const [hoursB, minutesB] = b.originalTime.split(':').map(Number);
 214 │ 
 215 │         // Compara horas
 216 │         if (hoursA !== hoursB) {
 217 │           return hoursA - hoursB;
 218 │         }
 219 │ 
 220 │         // Se as horas forem iguais, compara minutos
 221 │         return minutesA - minutesB;
 222 │       }
 223 │ 
 224 │       return dateComparison;
 225 │     });
 226 │ 
 227 │     return upcoming;
 228 │   };
 229 │ 
 230 │   // Array de eventos próximos atualizado a partir do eventData
 231 │   const upcomingEventsData = getUpcomingEvents();
 232 │ 
 233 │   // Sample AI recommendations
 234 │   const aiRecommendations = [
 235 │     {
 236 │       id: "1",
 237 │       priority: "high",
 238 │       title: "Prioridade Alta: Você tem uma prova de Física amanhã",
 239 │       description:
 240 │         "Recomendo revisar os conceitos de Mecânica Quântica hoje à noite.",
 241 │       actions: [
 242 │         {
 243 │           label: "Ver Material",
 244 │           icon: <FileText className="h-3.5 w-3.5 mr-1" />,
 245 │           variant: "outline",
 246 │         },
 247 │         {
 248 │           label: "Criar Resumo",
 249 │           icon: <FileEdit className="h-3.5 w-3.5 mr-1" />,
 250 │           variant: "default",
 251 │         },
 252 │       ],
 253 │       icon: <AlertCircle className="h-5 w-5 text-red-500" />,
 254 │     },
 255 │     {
 256 │       id: "2",
 257 │       priority: "medium",
 258 │       title: "Seu desempenho em Química caiu 15% na última semana",
 259 │       description: "Que tal revisar os conceitos de titulação?",
 260 │       actions: [
 261 │         {
 262 │           label: "Ver Desempenho",
 263 │           icon: <LineChart className="h-3.5 w-3.5 mr-1" />,
 264 │           variant: "outline",
 265 │         },
 266 │         {
 267 │           label: "Praticar Exercícios",
 268 │           icon: <CheckSquare className="h-3.5 w-3.5 mr-1" />,
 269 │           variant: "default",
 270 │         },
 271 │       ],
 272 │       icon: <Flame className="h-5 w-5 text-amber-500" />,
 273 │     },
 274 │     {
 275 │       id: "3",
 276 │       priority: "low",
 277 │       title: "Você está com uma sequência de 7 dias de estudo!",
 278 │       description: "Continue assim para ganhar mais pontos de experiência.",
 279 │       actions: [
 280 │         {
 281 │           label: "Ver Conquistas",
 282 │           icon: <Trophy className="h-3.5 w-3.5 mr-1" />,
 283 │           variant: "outline",
 284 │         },
 285 │       ],
 286 │       icon: <Zap className="h-5 w-5 text-green-500" />,
 287 │     },
 288 │   ];
 289 │ 
 290 │   // Sample study time data
 291 │   const studyTimeData = {
 292 │     total: 32,
 293 │     goal: 40,
 294 │     progress: 80, // 32/40 = 80%
 295 │     byDay: [
 296 │       { day: "Seg", hours: 5 },
 297 │       { day: "Ter", hours: 6 },
 298 │       { day: "Qua", hours: 4 },
 299 │       { day: "Qui", hours: 7 },
 300 │       { day: "Sex", hours: 5 },
 301 │       { day: "Sáb", hours: 3 },
 302 │       { day: "Dom", hours: 2 },
 303 │     ],
 304 │     bySubject: [
 305 │       { subject: "Matemática", hours: 10, color: "#FF6B00" },
 306 │       { subject: "Física", hours: 8, color: "#FF8C40" },
 307 │       { subject: "Química", hours: 6, color: "#E85D04" },
 308 │       { subject: "Biologia", hours: 5, color: "#DC2F02" },
 309 │       { subject: "História", hours: 3, color: "#9D0208" },
 310 │     ],
 311 │   };
 312 │ 
 313 │   // Sample last accessed classes
 314 │   const lastAccessedClasses = [
 315 │     {
 316 │       id: "1",
 317 │       title: "Funções Trigonométricas",
 318 │       discipline: "Matemática",
 319 │       professor: "Prof. Carlos Santos",
 320 │       progress: 75,
 321 │       thumbnail:
 322 │         "https://images.unsplash.com/photo-1635070041078-e363dbe005cb?w=300&q=80",
 323 │       lastAccessed: "Hoje, 10:30",
 324 │     },
 325 │     {
 326 │       id: "2",
 327 │       title: "Mecânica Quântica - Introdução",
 328 │       discipline: "Física",
 329 │       professor: "Prof. Roberto Alves",
 330 │       progress: 45,
 331 │       thumbnail:
 332 │         "https://images.unsplash.com/photo-1636466497217-26a8cbeaf0aa?w=300&q=80",
 333 │       lastAccessed: "Ontem, 15:20",
 334 │     },
 335 │     {
 336 │       id: "3",
 337 │       title: "Titulação e pH",
 338 │       discipline: "Química",
 339 │       professor: "Profa. Ana Martins",
 340 │       progress: 90,
 341 │       thumbnail:
 342 │         "https://images.unsplash.com/photo-1603126857599-f6e157fa2fe6?w=300&q=80",
 343 │       lastAccessed: "2 dias atrás, 14:15",
 344 │     },
 345 │   ];
 346 │ 
 347 │   // Sample ranking data
 348 │   const rankingData = {
 349 │     position: 42,
 350 │     total: 210,
 351 │     points: 3750,
 352 │     nextReward: 4000,
 353 │     progress: 75, // (3750/4000)*100 = 93.75%
 354 │     trend: "+5", // Subiu 5 posições
 355 │   };
 356 │ 
 357 │   // Sample subject progress data
 358 │   const subjectProgressData = [
 359 │     { subject: "Matemática", progress: 85, goal: 90, color: "#FF6B00" },
 360 │     { subject: "Física", progress: 72, goal: 80, color: "#FF8C40" },
 361 │     { subject: "Química", progress: 65, goal: 75, color: "#E85D04" },
 362 │     { subject: "Biologia", progress: 90, goal: 85, color: "#DC2F02" },
 363 │     { subject: "História", progress: 78, goal: 80, color: "#9D0208" },
 364 │   ];
 365 │ 
 366 │   // Sample today's events data
 367 │   const todayEventsData = [
 368 │     {
 369 │       id: "1",
 370 │       type: "aula",
 371 │       title: "Aula de Matemática",
 372 │       time: "10:00 - 11:30",
 373 │       status: "agora",
 374 │       discipline: "Matemática",
 375 │       isOnline: true,
 376 │     },
 377 │     {
 378 │       id: "2",
 379 │       type: "trabalho",
 380 │       title: "Entrega de Trabalho",
 381 │       time: "até 18:00",
 382 │       status: "pendente",
 383 │       discipline: "Química",
 384 │       isOnline: true,
 385 │     },
 386 │   ];
 387 │ 
 388 │   // Get event icon based on type
 389 │   const getEventIcon = (type: string) => {
 390 │     switch (type) {
 391 │       case "aula":
 392 │         return <Video className="h-4 w-4" />;
 393 │       case "trabalho":
 394 │         return <FileEdit className="h-4 w-4" />;
 395 │       case "prova":
 396 │         return <AlertCircle className="h-4 w-4" />;
 397 │       case "reuniao":
 398 │         return <Users className="h-4 w-4" />;
 399 │       case "lembrete":
 400 │         return <Bell className="h-4 w-4" />;
 401 │       case "tarefa":
 402 │         return <CheckSquare className="h-4 w-4" />;
 403 │       default:
 404 │         return <CalendarIcon className="h-4 w-4" />;
 405 │     }
 406 │   };
 407 │ 
 408 │   // Get event color based on type
 409 │   const getEventColor = (type: string) => {
 410 │     switch (type) {
 411 │       case "aula":
 412 │         return "blue";
 413 │       case "trabalho":
 414 │       case "tarefa":
 415 │         return "amber";
 416 │       case "prova":
 417 │         return "red";
 418 │       case "reuniao":
 419 │         return "green";
 420 │       case "lembrete":
 421 │         return "yellow";
 422 │       case "evento":
 423 │         return "purple";
 424 │       default:
 425 │         return "gray";
 426 │     }
 427 │   };
 428 │ 
 429 │   // Get task icon based on type
 430 │   const getTaskIcon = (discipline: string) => {
 431 │     switch (discipline) {
 432 │       case "Matemática":
 433 │         return <span className="text-[#FF6B00] font-bold">π</span>;
 434 │       case "Física":
 435 │         return <span className="text-[#FF8C40] font-bold">⚛</span>;
 436 │       case "Química":
 437 │         return <span className="text-[#E85D04] font-bold">⚗</span>;
 438 │       case "Biologia":
 439 │         return <span className="text-[#DC2F02] font-bold">🧬</span>;
 440 │       case "História":
 441 │         return <span className="text-[#9D0208] font-bold">📜</span>;
 442 │       default:
 443 │         return <BookOpen className="h-4 w-4" />;
 444 │     }
 445 │   };
 446 │ 
 447 │   // Get priority badge color
 448 │   const getPriorityColor = (priority: string) => {
 449 │     switch (priority) {
 450 │       case "alta":
 451 │         return "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300";
 452 │       case "média":
 453 │         return "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300";
 454 │       case "baixa":
 455 │         return "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300";
 456 │       default:
 457 │         return "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300";
 458 │     }
 459 │   };
 460 │ 
 461 │   // Get status badge color
 462 │   const getStatusBadge = (status: string) => {
 463 │     switch (status) {
 464 │       case "agora":
 465 │         return <Badge className="bg-green-500 text-white">Agora</Badge>;
 466 │       case "pendente":
 467 │         return <Badge className="bg-amber-500 text-white">Pendente</Badge>;
 468 │       default:
 469 │         return null;
 470 │     }
 471 │   };
 472 │ 
 473 │   // Handle search input
 474 │   const handleSearchInput = (e: React.ChangeEvent<HTMLInputElement>) => {
 475 │     const query = e.target.value;
 476 │     setSearchQuery(query);
 477 │ 
 478 │     if (query.length > 2) {
 479 │       // Simulate search suggestions
 480 │       const suggestions = [
 481 │         "Aula de Matemática",
 482 │         "Prova de Física",
 483 │         "Grupo de Estudos",
 484 │         "Entrega de Trabalho",
 485 │         "Matemática",
 486 │         "Física",
 487 │         "Prof. Carlos Santos",
 488 │       ].filter((item) => item.toLowerCase().includes(query.toLowerCase()));
 489 │ 
 490 │       setSearchSuggestions(suggestions);
 491 │       setShowSearchSuggestions(suggestions.length > 0);
 492 │     } else {
 493 │       setShowSearchSuggestions(false);
 494 │     }
 495 │   };
 496 │ 
 497 │   // Open event details modal
 498 │   const openEventDetails = (event: any) => {
 499 │     setSelectedEvent(event);
 500 │     setShowEventDetailsModal(true);
 501 │   };
 502 │ 
 503 │   // Add new event
 504 │   const handleAddEvent = async (newEvent: Omit<CalendarEvent, 'id'>) => {
 505 │     try {
 506 │       // O evento já foi salvo no banco de dados pelo modal
 507 │       // Agora apenas atualizamos a interface
 508 │       const updatedEvents = await getAllEvents();
 509 │       setEvents(updatedEvents);
 510 │     } catch (error) {
 511 │       console.error("Erro ao atualizar lista de eventos:", error);
 512 │     }
 513 │   };
 514 │ 
 515 │   // Edit event
 516 │   const handleEditEvent = (editedEvent: any) => {
 517 │     const updatedEvents = { ...eventData };
 518 │ 
 519 │     // Find the event in all days and update it
 520 │     let eventFound = false;
 521 │ 
 522 │     Object.keys(updatedEvents).forEach((day) => {
 523 │       const dayNum = parseInt(day);
 524 │       const eventIndex = updatedEvents[dayNum].findIndex(
 525 │         (event) => event.id === editedEvent.id,
 526 │       );
 527 │ 
 528 │       if (eventIndex !== -1) {
 529 │         // Update the event in place
 530 │         updatedEvents[dayNum][eventIndex] = {
 531 │           ...editedEvent,
 532 │           color: getEventColor(editedEvent.type),
 533 │           time: editedEvent.startTime || editedEvent.time || "00:00",
 534 │         };
 535 │         eventFound = true;
 536 │       }
 537 │     });
 538 │ 
 539 │     // If the event wasn't found (rare case) or if the date changed
 540 │     if (!eventFound && editedEvent.startDate) {
 541 │       const newDay = new Date(editedEvent.startDate).getDate();
 542 │       handleDeleteEvent(editedEvent.id);
 543 │ 
 544 │       // Add to the new day
 545 │       const eventWithColor = {
 546 │         ...editedEvent,
 547 │         color: getEventColor(editedEvent.type),
 548 │         time: editedEvent.startTime || "00:00",
 549 │       };
 550 │ 
 551 │       if (updatedEvents[newDay]) {
 552 │         updatedEvents[newDay] = [...updatedEvents[newDay], eventWithColor];
 553 │       } else {
 554 │         updatedEvents[newDay] = [eventWithColor];
 555 │       }
 556 │     }
 557 │ 
 558 │     setEventData(updatedEvents);
 559 │ 
 560 │     // Exibe uma mensagem de sucesso
 561 │     toast({
 562 │       title: "Evento atualizado",
 563 │       description: "O evento foi atualizado com sucesso.",
 564 │     });
 565 │   };
 566 │ 
 567 │   // Delete event
 568 │   const handleDeleteEvent = (eventId: string) => {
 569 │     const updatedEvents = { ...eventData };
 570 │ 
 571 │     // Find and remove the event
 572 │     Object.keys(updatedEvents).forEach((day) => {
 573 │       const dayNum = parseInt(day);
 574 │       updatedEvents[dayNum] = updatedEvents[dayNum].filter(
 575 │         (event) => event.id !== eventId,
 576 │       );
 577 │ 
 578 │       // Remove the day if it has no events
 579 │       if (updatedEvents[dayNum].length === 0) {
 580 │         delete updatedEvents[dayNum];
 581 │       }
 582 │     });
 583 │ 
 584 │     setEventData(updatedEvents);
 585 │   };
 586 │ 
 587 │   // Handle event drag and drop
 588 │   const handleEventDrop = (event: any, newDay: number) => {
 589 │     // First, remove the event from its original day
 590 │     const updatedEvents = { ...eventData };
 591 │     let eventToMove = null;
 592 │ 
 593 │     // Find and remove the event from its original day
 594 │     Object.keys(updatedEvents).forEach((day) => {
 595 │       const dayNum = parseInt(day);
 596 │       const eventIndex = updatedEvents[dayNum].findIndex(
 597 │         (e) => e.id === event.id,
 598 │       );
 599 │ 
 600 │       if (eventIndex !== -1) {
 601 │         // Save the event before removing it
 602 │         eventToMove = { ...updatedEvents[dayNum][eventIndex] };
 603 │ 
 604 │         // Remove the event from its original day
 605 │         updatedEvents[dayNum] = updatedEvents[dayNum].filter(
 606 │           (e) => e.id !== event.id,
 607 │         );
 608 │ 
 609 │         // Remove the day if it has no events
 610 │         if (updatedEvents[dayNum].length === 0) {
 611 │           delete updatedEvents[dayNum];
 612 │         }
 613 │       }
 614 │     });
 615 │ 
 616 │     // If we found the event, add it to the new day
 617 │     if (eventToMove) {
 618 │       // Update the event's date if it has one
 619 │       if (eventToMove.startDate) {
 620 │         const oldDate = new Date(eventToMove.startDate);
 621 │         const newDate = new Date(oldDate);
 622 │         newDate.setDate(newDay);
 623 │         eventToMove.startDate = newDate;
 624 │ 
 625 │         // Also update endDate if it exists
 626 │         if (eventToMove.endDate) {
 627 │           const oldEndDate = new Date(eventToMove.endDate);
 628 │           const dayDiff = Math.round(
 629 │             (oldEndDate.getTime() - oldDate.getTime()) / (1000 * 60 * 60 * 24),
 630 │           );
 631 │           const newEndDate = new Date(newDate);
 632 │           newEndDate.setDate(newDate.getDate() + dayDiff);
 633 │           eventToMove.endDate = newEndDate;
 634 │         }
 635 │       }
 636 │ 
 637 │       // Add the event to the new day
 638 │       if (updatedEvents[newDay]) {
 639 │         updatedEvents[newDay] = [...updatedEvents[newDay], eventToMove];
 640 │       } else {
 641 │         updatedEvents[newDay] = [eventToMove];
 642 │       }
 643 │ 
 644 │       setEventData(updatedEvents);
 645 │     }
 646 │   };
 647 │ 
 648 │   // Handle time range change
 649 │   const handleTimeRangeChange = (range: string) => {
 650 │     setTimeRange(range);
 651 │   };
 652 │ 
 653 │   // Handle subject filter change
 654 │   const handleSubjectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
 655 │     setSelectedSubject(e.target.value);
 656 │   };
 657 │ 
 658 │   // Handle add task
 659 │   const handleAddTask = (newTask: any) => {
 660 │     try {
 661 │       if (!newTask || !newTask.title) {
 662 │         console.error("Invalid task data", newTask);
 663 │         return;
 664 │       }
 665 │ 
 666 │       // First close modal to prevent UI freezing
 667 │       setShowAddTaskModal(false);
 668 │ 
 669 │       setTimeout(() => {
 670 │         // Format the task for the dashboard view
 671 │         const formattedTask = {
 672 │           id: newTask.id || `task-${Date.now()}`,
 673 │           title: newTask.title,
 674 │           discipline: newTask.discipline || "Geral",
 675 │           dueDate: newTask.dueDate
 676 │             ? `Vence ${new Date(newTask.dueDate).toLocaleDateString("pt-BR")}`
 677 │             : "Sem data definida",
 678 │           progress: newTask.progress || 0,
 679 │           urgent: newTask.priority === "alta",
 680 │           priority: newTask.priority || "média",
 681 │         };
 682 │ 
 683 │         // Update the tasks list in the dashboard
 684 │         setTasksData((prev) => [formattedTask, ...prev]);
 685 │ 
 686 │         // Show success message
 687 │         toast({
 688 │           title: "Tarefa adicionada",
 689 │           description: "A nova tarefa foi adicionada com sucesso.",
 690 │         });
 691 │ 
 692 │         // Refresh the tasks view
 693 │         setTimeout(() => {
 694 │           const tasksView = document.querySelector(
 695 │             '[data-testid="tasks-view"]',
 696 │           );
 697 │           if (tasksView) {
 698 │             const refreshEvent = new CustomEvent("refresh-tasks", {
 699 │               detail: newTask,
 700 │             });
 701 │             tasksView.dispatchEvent(refreshEvent);
 702 │           }
 703 │         }, 200); // Small delay to ensure DOM is ready
 704 │       }, 100);
 705 │     } catch (error) {
 706 │       console.error("Error adding task:", error);
 707 │       toast({
 708 │         title: "Erro ao adicionar tarefa",
 709 │         description: "Ocorreu um erro ao adicionar a tarefa. Tente novamente.",
 710 │         variant: "destructive",
 711 │       });
 712 │     }
 713 │   };
 714 │ 
 715 │   // Calendar State
 716 │   const [events, setEvents] = useState<CalendarEvent[]>([]);
 717 │   const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);
     ·                         ────────┬───────
     ·                                 ╰── `setSelectedEvent` redefined here
 718 │ 
 719 │   // Calendar View
 720 │   const [view, setView] = useState<"month" | "week" | "day">("month");
     ╰────
/home/runner/workspace/src/pages/agenda/index.tsx:107:1
988|                        <MonthView
989|                          eventData={eventData}
990|                          selectedDay={selectedDay}
   |                                     ^
991|                          setSelectedDay={setSelectedDay}
992|                          onEventClick={openEventDetails}