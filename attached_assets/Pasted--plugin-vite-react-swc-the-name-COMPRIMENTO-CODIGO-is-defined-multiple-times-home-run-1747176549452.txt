[plugin:vite:react-swc] × the name `COMPRIMENTO_CODIGO` is defined multiple times
     ╭─[/home/runner/workspace/src/lib/gruposEstudoStorage.ts:25:1]
  25 │ 
  26 │ // Caracteres permitidos para códigos de grupo (sem caracteres ambíguos como I, O, 0, 1)
  27 │ const CARACTERES_PERMITIDOS = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789";
  28 │ const COMPRIMENTO_CODIGO = 7; // Código com 7 caracteres
     ·       ─────────┬────────
     ·                ╰── previous definition of `COMPRIMENTO_CODIGO` here
  29 │ 
  30 │ /**
  31 │  * Salva o código de um grupo em múltiplas camadas de armazenamento para garantir persistência
  32 │  * @param grupoId - ID do grupo
  33 │  * @param codigo - Código de convite gerado
  34 │  * @returns boolean indicando se conseguiu salvar no servidor
  35 │  */
  36 │ export const salvarCodigoGrupo = async (grupoId: string, codigo: string): Promise<boolean> => {
  37 │   let sucessoLocal = false;
  38 │   let sucessoServidor = false;
  39 │   
  40 │   // 1. Salvar no armazenamento dedicado (principal)
  41 │   try {
  42 │     const CODIGOS_STORAGE_KEY = 'epictus_codigos_grupo';
  43 │     const codigosGrupos = JSON.parse(localStorage.getItem(CODIGOS_STORAGE_KEY) || '{}');
  44 │     codigosGrupos[grupoId] = codigo;
  45 │     localStorage.setItem(CODIGOS_STORAGE_KEY, JSON.stringify(codigosGrupos));
  46 │     console.log(`Código ${codigo} armazenado no storage dedicado para grupo ${grupoId}`);
  47 │     sucessoLocal = true;
  48 │   } catch (storageError) {
  49 │     console.error('Erro ao salvar no storage dedicado:', storageError);
  50 │   }
  51 │ 
  52 │   // 2. Salvar no localStorage de grupos (backup secundário)
  53 │   try {
  54 │     // Verificar primeiro no armazenamento padronizado
  55 │     const grupos = obterGruposLocal();
  56 │     const grupoIndex = grupos.findIndex(g => g.id === grupoId);
  57 │     
  58 │     if (grupoIndex >= 0) {
  59 │       grupos[grupoIndex].codigo = codigo;
  60 │       localStorage.setItem('epictus_grupos_estudo', JSON.stringify(grupos));
  61 │       console.log(`Código ${codigo} armazenado no localStorage para grupo ${grupoId}`);
  62 │       sucessoLocal = true;
  63 │     }
  64 │     
  65 │     // Para compatibilidade, verificar também o armazenamento legado
  66 │     const gruposLegados = obterGruposLocalStorage();
  67 │     const grupoLegadoIndex = gruposLegados.findIndex(g => g.id === grupoId);
  68 │     
  69 │     if (grupoLegadoIndex >= 0) {
  70 │       gruposLegados[grupoLegadoIndex].codigo = codigo;
  71 │       localStorage.setItem('grupos_estudo', JSON.stringify(gruposLegados));
  72 │     }
  73 │   } catch (localError) {
  74 │     console.error('Erro ao salvar no localStorage:', localError);
  75 │   }
  76 │   
  77 │   // 3. Salvar no sessionStorage (recuperação em caso de falhas)
  78 │   try {
  79 │     const backupKey = `grupo_codigo_${grupoId}`;
  80 │     sessionStorage.setItem(backupKey, codigo);
  81 │   } catch (sessionError) {
  82 │     console.error('Erro ao salvar no sessionStorage:', sessionError);
  83 │   }
  84 │     
  85 │   // 4. Tentar salvar no Supabase
  86 │   try {
  87 │     const { error } = await supabase
  88 │       .from('grupos_estudo')
  89 │       .update({ codigo })
  90 │       .eq('id', grupoId);
  91 │     
  92 │     if (error) {
  93 │       console.error('Erro ao atualizar código no Supabase:', error);
  94 │     } else {
  95 │       console.log(`Código ${codigo} salvo com sucesso no Supabase para grupo ${grupoId}`);
  96 │       sucessoServidor = true;
  97 │     }
  98 │   } catch (serverError) {
  99 │     console.error('Erro ao acessar Supabase:', serverError);
 100 │   }
 101 │   
 102 │   // Retornar true se conseguiu salvar em pelo menos uma das camadas
 103 │   return sucessoLocal || sucessoServidor;
 104 │ };
 105 │ 
 106 │ /**
 107 │  * Obtém grupos de estudo do localStorage
 108 │  */
 109 │ const obterGruposLocalStorage = (): GrupoEstudo[] => {
 110 │   try {
 111 │     const gruposStr = localStorage.getItem('grupos_estudo');
 112 │     return gruposStr ? JSON.parse(gruposStr) : [];
 113 │   } catch (e) {
 114 │     console.error('Erro ao obter grupos do localStorage:', e);
 115 │     return [];
 116 │   }
 117 │ };
 118 │ 
 119 │ const COMPRIMENTO_CODIGO = 7; // Código com 7 caracteres conforme a especificação
     ·       ─────────┬────────
     ·                ╰── `COMPRIMENTO_CODIGO` redefined here
 120 │ 
 121 │ /**
 122 │  * Gera uma string aleatória para ser usada como código de grupo
     ╰────
/home/runner/workspace/src/lib/gruposEstudoStorage.ts:25:1
147|        const codigosGrupos = JSON.parse(localStorage.getItem(CODIGOS_STORAGE_KEY) || '{}');
148|        
149|        // Verificar se algum grupo tem este código
   |                   ^
150|        const codigosExistentes = Object.values(codigosGrupos);
151|        if (codigosExistentes.includes(codigo)) {