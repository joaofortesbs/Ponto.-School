Prompt para Integração do Modal de Histórico de Conversas com o Chat e Supabase
Objetivo : 

Integrar o modal de histórico de conversas, previamente criado, com um sistema de chat de conversa em tempo real, de modo que todas as conversas realizadas pelos usuários sejam salvas no banco de dados do Supabase e exibidas no modal. O modal deve exibir apenas as conversas do usuário logado, e as conversas devem ser persistidas no perfil do usuário no Supabase.

Contexto e Estrutura Existente
Você tem um modal de histórico de conversas implementado em um aplicativo web, com a seguinte estrutura e funcionalidades:

Modal de Histórico :
Localizado à esquerda da tela, com um design de tema escuro.
Contém uma barra de pesquisa no topo para filtrar conversas por título.
Um botão "Ações" que exibe um menu suspenso com opções como "Arquivar conversas", "Excluir conversas" e "Exportar histórico".
Um botão "Criar novo chat privado" no topo e no rodapé, que inicia uma nova conversa.
Conversas organizadas em frascos temporais: "Ontem", "Últimos 7 dias" e "Este ano".
Cada conversa exibe um título e um timestamp (ex.: "Há 27 horas" ou "16 de abr.").
Os itens de conversa são clicáveis, e ao clicar, a conversa é marcada como selecionada (com um fundo destacado).
Uma área à direita do modal exibe a mensagem "Selecione uma conversa para pré-visualizar".
Tecnologias Utilizadas :
Frontend: HTML, CSS e JavaScript puro.
Dados simulados: Um array estático conversationsData com objetos contendo title , timestamp e date .
Agora, você precisa integrar esse modal com um sistema de chat funcional, onde:

As conversas realizadas no chat devem ser salvas automaticamente no banco de dados do Supabase, associado ao perfil do usuário logado.
O modal deve exibir apenas as conversas do usuário logado, puxando os dados do Supabase.
O sistema de chat deve ser básico, permitindo que o usuário envie mensagens em tempo real, e essas mensagens devem ser salvas como parte de uma conversa no Supabase.
Requisitos de Integração
Estrutura do Chat de Conversa :
Crie uma área de chat à direita do modal (onde atualmente está uma área de pré-visualização).
A área de bate-papo deve ter:
Um cabeçalho com o título da conversa (o mesmo título exibido no modal).
Uma lista de mensagens, onde as mensagens do usuário aparecem à direita e as respostas (simuladas, para este caso) aparecem à esquerda.
Um campo de entrada de texto na parte inferior para enviar novas mensagens.
Um botão "Enviar" ao lado do campo de entrada.
Quando o usuário clica no botão "Criar novo chat privado", uma nova conversa é iniciada, e o título da conversa deve ser gerado automaticamente com base na primeira mensagem enviada (ex.: se a primeira mensagem for "Como melhorar meu site?", o título pode ser "Otimização de Site").
Quando o usuário clica em uma conversa no modal, a área de chat deve carregar as mensagens dessa conversa.
Integração com Supabase :
Use o Supabase como backend para autenticação de usuários e armazenamento de conversas.
Autenticação :
Implemente um sistema de login simples com Supabase Auth, onde o usuário pode fazer login com email e senha.
Exiba um formulário de login na tela inicial, e só mostre o modal e o chat após o login.
Estrutura do Banco de Dados :
Crie uma tabela de conversas no Supabase com os seguintes campos:
id : UUID (chave primária, gerada automaticamente).
user_id : UUID (referência ao ID do usuário logado, obtido do Supabase Auth).
title : string (título da conversa).
criado_at : timestamp (dados de criação da conversa).
atualizado_at : timestamp (dados da última mensagem, para ordenação).
Crie uma tabela messages no Supabase com os seguintes campos:
id : UUID (chave primária, gerada automaticamente).
conversa_id : UUID (chave estrangeira referenciando conversas.id ).
user_id : UUID (ID do usuário que enviou a mensagem).
content : string (conteúdo da mensagem).
is_user : booleano (indica se a mensagem é do usuário ou uma resposta simulada).
criado_at : timestamp (dados de envio da mensagem).
Políticas de Segurança (RLS) :
Habilitar Row Level Security (RLS) nas tabelas.
Crie políticas para garantir que os usuários possam acessar suas próprias conversas e mensagens:
Para conversas : user_id = auth.uid() .
Para mensagens : conversa_id deve pertencer a uma conversa onde user_id = auth.uid() .