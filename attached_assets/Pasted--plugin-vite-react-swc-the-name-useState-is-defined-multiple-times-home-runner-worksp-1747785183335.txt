[plugin:vite:react-swc] × the name `useState` is defined multiple times
     ╭─[/home/runner/workspace/src/hooks/useAuth.ts:1:1]
   1 │ 
   2 │ import { useState, useEffect } from 'react';
     ·          ────┬───
     ·              ╰── previous definition of `useState` here
   3 │ import { supabase } from '@/lib/supabase';
   4 │ 
   5 │ type User = {
   6 │   id: string;
   7 │   email?: string;
   8 │   username?: string;
   9 │ };
  10 │ 
  11 │ export const useAuth = () => {
  12 │   const [user, setUser] = useState<User | null>(null);
  13 │   const [loading, setLoading] = useState(true);
  14 │   const [error, setError] = useState<string | null>(null);
  15 │ 
  16 │   useEffect(() => {
  17 │     const fetchUser = async () => {
  18 │       try {
  19 │         setLoading(true);
  20 │         
  21 │         // Verificar se há uma sessão ativa do Supabase
  22 │         const { data: { session }, error: sessionError } = await supabase.auth.getSession();
  23 │         
  24 │         if (sessionError) {
  25 │           throw sessionError;
  26 │         }
  27 │         
  28 │         if (session?.user) {
  29 │           // Obter perfil do usuário se necessário
  30 │           const { data: profileData, error: profileError } = await supabase
  31 │             .from('profiles')
  32 │             .select('username')
  33 │             .eq('id', session.user.id)
  34 │             .single();
  35 │             
  36 │           if (profileError && profileError.code !== 'PGRST116') { // Ignorar erro "não encontrado"
  37 │             console.warn("Erro ao buscar perfil:", profileError);
  38 │           }
  39 │           
  40 │           // Definir usuário com dados da sessão e perfil
  41 │           setUser({
  42 │             id: session.user.id,
  43 │             email: session.user.email,
  44 │             username: profileData?.username
  45 │           });
  46 │         } else {
  47 │           // Fallback para ID local persistido (para testes e desenvolvimento)
  48 │           const localUserId = localStorage.getItem('user_id') || sessionStorage.getItem('user_id');
  49 │           
  50 │           if (localUserId) {
  51 │             setUser({
  52 │               id: localUserId,
  53 │               username: localStorage.getItem('username') || sessionStorage.getItem('username') || undefined
  54 │             });
  55 │             console.log("Usando ID de usuário local:", localUserId);
  56 │           } else {
  57 │             setUser(null);
  58 │           }
  59 │         }
  60 │         
  61 │         setError(null);
  62 │       } catch (err: any) {
  63 │         console.error("Erro de autenticação:", err);
  64 │         setError(err.message || "Erro ao verificar autenticação");
  65 │         setUser(null);
  66 │       } finally {
  67 │         setLoading(false);
  68 │       }
  69 │     };
  70 │ 
  71 │     fetchUser();
  72 │ 
  73 │     // Configurar listener para mudanças na autenticação
  74 │     const { data: authListener } = supabase.auth.onAuthStateChange(
  75 │       async (event, session) => {
  76 │         if (session?.user) {
  77 │           setUser({
  78 │             id: session.user.id,
  79 │             email: session.user.email,
  80 │             username: undefined // Será atualizado na próxima verificação
  81 │           });
  82 │         } else {
  83 │           setUser(null);
  84 │         }
  85 │       }
  86 │     );
  87 │ 
  88 │     return () => {
  89 │       // Limpar listener ao desmontar
  90 │       if (authListener && authListener.subscription) {
  91 │         authListener.subscription.unsubscribe();
  92 │       }
  93 │     };
  94 │   }, []);
  95 │ 
  96 │   return { user, loading, error };
  97 │ };
  98 │ 
  99 │ export default useAuth;
 100 │ 
 101 │ import { useState, useEffect, useCallback } from 'react';
     ·          ────┬───
     ·              ╰── `useState` redefined here
 102 │ import { supabase } from '@/lib/supabase';
 103 │ import { useNavigate } from 'react-router-dom';
 104 │ import { User, Session, AuthError } from '@supabase/supabase-js';
     ╰────

  × the name `useEffect` is defined multiple times
     ╭─[/home/runner/workspace/src/hooks/useAuth.ts:1:1]
   1 │ 
   2 │ import { useState, useEffect } from 'react';
     ·                    ────┬────
     ·                        ╰── previous definition of `useEffect` here
   3 │ import { supabase } from '@/lib/supabase';
   4 │ 
   5 │ type User = {
   6 │   id: string;
   7 │   email?: string;
   8 │   username?: string;
   9 │ };
  10 │ 
  11 │ export const useAuth = () => {
  12 │   const [user, setUser] = useState<User | null>(null);
  13 │   const [loading, setLoading] = useState(true);
  14 │   const [error, setError] = useState<string | null>(null);
  15 │ 
  16 │   useEffect(() => {
  17 │     const fetchUser = async () => {
  18 │       try {
  19 │         setLoading(true);
  20 │         
  21 │         // Verificar se há uma sessão ativa do Supabase
  22 │         const { data: { session }, error: sessionError } = await supabase.auth.getSession();
  23 │         
  24 │         if (sessionError) {
  25 │           throw sessionError;
  26 │         }
  27 │         
  28 │         if (session?.user) {
  29 │           // Obter perfil do usuário se necessário
  30 │           const { data: profileData, error: profileError } = await supabase
  31 │             .from('profiles')
  32 │             .select('username')
  33 │             .eq('id', session.user.id)
  34 │             .single();
  35 │             
  36 │           if (profileError && profileError.code !== 'PGRST116') { // Ignorar erro "não encontrado"
  37 │             console.warn("Erro ao buscar perfil:", profileError);
  38 │           }
  39 │           
  40 │           // Definir usuário com dados da sessão e perfil
  41 │           setUser({
  42 │             id: session.user.id,
  43 │             email: session.user.email,
  44 │             username: profileData?.username
  45 │           });
  46 │         } else {
  47 │           // Fallback para ID local persistido (para testes e desenvolvimento)
  48 │           const localUserId = localStorage.getItem('user_id') || sessionStorage.getItem('user_id');
  49 │           
  50 │           if (localUserId) {
  51 │             setUser({
  52 │               id: localUserId,
  53 │               username: localStorage.getItem('username') || sessionStorage.getItem('username') || undefined
  54 │             });
  55 │             console.log("Usando ID de usuário local:", localUserId);
  56 │           } else {
  57 │             setUser(null);
  58 │           }
  59 │         }
  60 │         
  61 │         setError(null);
  62 │       } catch (err: any) {
  63 │         console.error("Erro de autenticação:", err);
  64 │         setError(err.message || "Erro ao verificar autenticação");
  65 │         setUser(null);
  66 │       } finally {
  67 │         setLoading(false);
  68 │       }
  69 │     };
  70 │ 
  71 │     fetchUser();
  72 │ 
  73 │     // Configurar listener para mudanças na autenticação
  74 │     const { data: authListener } = supabase.auth.onAuthStateChange(
  75 │       async (event, session) => {
  76 │         if (session?.user) {
  77 │           setUser({
  78 │             id: session.user.id,
  79 │             email: session.user.email,
  80 │             username: undefined // Será atualizado na próxima verificação
  81 │           });
  82 │         } else {
  83 │           setUser(null);
  84 │         }
  85 │       }
  86 │     );
  87 │ 
  88 │     return () => {
  89 │       // Limpar listener ao desmontar
  90 │       if (authListener && authListener.subscription) {
  91 │         authListener.subscription.unsubscribe();
  92 │       }
  93 │     };
  94 │   }, []);
  95 │ 
  96 │   return { user, loading, error };
  97 │ };
  98 │ 
  99 │ export default useAuth;
 100 │ 
 101 │ import { useState, useEffect, useCallback } from 'react';
     ·                    ────┬────
     ·                        ╰── `useEffect` redefined here
 102 │ import { supabase } from '@/lib/supabase';
 103 │ import { useNavigate } from 'react-router-dom';
 104 │ import { User, Session, AuthError } from '@supabase/supabase-js';
     ╰────

  × the name `supabase` is defined multiple times
     ╭─[/home/runner/workspace/src/hooks/useAuth.ts:1:1]
   1 │ 
   2 │ import { useState, useEffect } from 'react';
   3 │ import { supabase } from '@/lib/supabase';
     ·          ────┬───
     ·              ╰── previous definition of `supabase` here
   4 │ 
   5 │ type User = {
   6 │   id: string;
   7 │   email?: string;
   8 │   username?: string;
   9 │ };
  10 │ 
  11 │ export const useAuth = () => {
  12 │   const [user, setUser] = useState<User | null>(null);
  13 │   const [loading, setLoading] = useState(true);
  14 │   const [error, setError] = useState<string | null>(null);
  15 │ 
  16 │   useEffect(() => {
  17 │     const fetchUser = async () => {
  18 │       try {
  19 │         setLoading(true);
  20 │         
  21 │         // Verificar se há uma sessão ativa do Supabase
  22 │         const { data: { session }, error: sessionError } = await supabase.auth.getSession();
  23 │         
  24 │         if (sessionError) {
  25 │           throw sessionError;
  26 │         }
  27 │         
  28 │         if (session?.user) {
  29 │           // Obter perfil do usuário se necessário
  30 │           const { data: profileData, error: profileError } = await supabase
  31 │             .from('profiles')
  32 │             .select('username')
  33 │             .eq('id', session.user.id)
  34 │             .single();
  35 │             
  36 │           if (profileError && profileError.code !== 'PGRST116') { // Ignorar erro "não encontrado"
  37 │             console.warn("Erro ao buscar perfil:", profileError);
  38 │           }
  39 │           
  40 │           // Definir usuário com dados da sessão e perfil
  41 │           setUser({
  42 │             id: session.user.id,
  43 │             email: session.user.email,
  44 │             username: profileData?.username
  45 │           });
  46 │         } else {
  47 │           // Fallback para ID local persistido (para testes e desenvolvimento)
  48 │           const localUserId = localStorage.getItem('user_id') || sessionStorage.getItem('user_id');
  49 │           
  50 │           if (localUserId) {
  51 │             setUser({
  52 │               id: localUserId,
  53 │               username: localStorage.getItem('username') || sessionStorage.getItem('username') || undefined
  54 │             });
  55 │             console.log("Usando ID de usuário local:", localUserId);
  56 │           } else {
  57 │             setUser(null);
  58 │           }
  59 │         }
  60 │         
  61 │         setError(null);
  62 │       } catch (err: any) {
  63 │         console.error("Erro de autenticação:", err);
  64 │         setError(err.message || "Erro ao verificar autenticação");
  65 │         setUser(null);
  66 │       } finally {
  67 │         setLoading(false);
  68 │       }
  69 │     };
  70 │ 
  71 │     fetchUser();
  72 │ 
  73 │     // Configurar listener para mudanças na autenticação
  74 │     const { data: authListener } = supabase.auth.onAuthStateChange(
  75 │       async (event, session) => {
  76 │         if (session?.user) {
  77 │           setUser({
  78 │             id: session.user.id,
  79 │             email: session.user.email,
  80 │             username: undefined // Será atualizado na próxima verificação
  81 │           });
  82 │         } else {
  83 │           setUser(null);
  84 │         }
  85 │       }
  86 │     );
  87 │ 
  88 │     return () => {
  89 │       // Limpar listener ao desmontar
  90 │       if (authListener && authListener.subscription) {
  91 │         authListener.subscription.unsubscribe();
  92 │       }
  93 │     };
  94 │   }, []);
  95 │ 
  96 │   return { user, loading, error };
  97 │ };
  98 │ 
  99 │ export default useAuth;
 100 │ 
 101 │ import { useState, useEffect, useCallback } from 'react';
 102 │ import { supabase } from '@/lib/supabase';
     ·          ────┬───
     ·              ╰── `supabase` redefined here
 103 │ import { useNavigate } from 'react-router-dom';
 104 │ import { User, Session, AuthError } from '@supabase/supabase-js';
     ╰────

  × the name `useAuth` is defined multiple times
     ╭─[/home/runner/workspace/src/hooks/useAuth.ts:8:1]
   8 │   username?: string;
   9 │ };
  10 │ 
  11 │ export const useAuth = () => {
     ·              ───┬───
     ·                 ╰── previous definition of `useAuth` here
  12 │   const [user, setUser] = useState<User | null>(null);
  13 │   const [loading, setLoading] = useState(true);
  14 │   const [error, setError] = useState<string | null>(null);
  15 │ 
  16 │   useEffect(() => {
  17 │     const fetchUser = async () => {
  18 │       try {
  19 │         setLoading(true);
  20 │         
  21 │         // Verificar se há uma sessão ativa do Supabase
  22 │         const { data: { session }, error: sessionError } = await supabase.auth.getSession();
  23 │         
  24 │         if (sessionError) {
  25 │           throw sessionError;
  26 │         }
  27 │         
  28 │         if (session?.user) {
  29 │           // Obter perfil do usuário se necessário
  30 │           const { data: profileData, error: profileError } = await supabase
  31 │             .from('profiles')
  32 │             .select('username')
  33 │             .eq('id', session.user.id)
  34 │             .single();
  35 │             
  36 │           if (profileError && profileError.code !== 'PGRST116') { // Ignorar erro "não encontrado"
  37 │             console.warn("Erro ao buscar perfil:", profileError);
  38 │           }
  39 │           
  40 │           // Definir usuário com dados da sessão e perfil
  41 │           setUser({
  42 │             id: session.user.id,
  43 │             email: session.user.email,
  44 │             username: profileData?.username
  45 │           });
  46 │         } else {
  47 │           // Fallback para ID local persistido (para testes e desenvolvimento)
  48 │           const localUserId = localStorage.getItem('user_id') || sessionStorage.getItem('user_id');
  49 │           
  50 │           if (localUserId) {
  51 │             setUser({
  52 │               id: localUserId,
  53 │               username: localStorage.getItem('username') || sessionStorage.getItem('username') || undefined
  54 │             });
  55 │             console.log("Usando ID de usuário local:", localUserId);
  56 │           } else {
  57 │             setUser(null);
  58 │           }
  59 │         }
  60 │         
  61 │         setError(null);
  62 │       } catch (err: any) {
  63 │         console.error("Erro de autenticação:", err);
  64 │         setError(err.message || "Erro ao verificar autenticação");
  65 │         setUser(null);
  66 │       } finally {
  67 │         setLoading(false);
  68 │       }
  69 │     };
  70 │ 
  71 │     fetchUser();
  72 │ 
  73 │     // Configurar listener para mudanças na autenticação
  74 │     const { data: authListener } = supabase.auth.onAuthStateChange(
  75 │       async (event, session) => {
  76 │         if (session?.user) {
  77 │           setUser({
  78 │             id: session.user.id,
  79 │             email: session.user.email,
  80 │             username: undefined // Será atualizado na próxima verificação
  81 │           });
  82 │         } else {
  83 │           setUser(null);
  84 │         }
  85 │       }
  86 │     );
  87 │ 
  88 │     return () => {
  89 │       // Limpar listener ao desmontar
  90 │       if (authListener && authListener.subscription) {
  91 │         authListener.subscription.unsubscribe();
  92 │       }
  93 │     };
  94 │   }, []);
  95 │ 
  96 │   return { user, loading, error };
  97 │ };
  98 │ 
  99 │ export default useAuth;
 100 │ 
 101 │ import { useState, useEffect, useCallback } from 'react';
 102 │ import { supabase } from '@/lib/supabase';
 103 │ import { useNavigate } from 'react-router-dom';
 104 │ import { User, Session, AuthError } from '@supabase/supabase-js';
 105 │ 
 106 │ interface AuthState {
 107 │   user: User | null;
 108 │   session: Session | null;
 109 │   isLoading: boolean;
 110 │   isAuthenticated: boolean;
 111 │   error: AuthError | Error | null;
 112 │ }
 113 │ 
 114 │ export function useAuth() {
     ·                 ───┬───
     ·                    ╰── `useAuth` redefined here
 115 │   const navigate = useNavigate();
 116 │   const [authState, setAuthState] = useState<AuthState>({
 117 │     user: null,
     ╰────

  × the name `default` is exported multiple times
     ╭─[/home/runner/workspace/src/hooks/useAuth.ts:96:1]
  96 │   return { user, loading, error };
  97 │ };
  98 │ 
  99 │ export default useAuth;
     · ───────────┬───────────
     ·            ╰── previous exported here
 100 │ 
 101 │ import { useState, useEffect, useCallback } from 'react';
 102 │ import { supabase } from '@/lib/supabase';
 103 │ import { useNavigate } from 'react-router-dom';
 104 │ import { User, Session, AuthError } from '@supabase/supabase-js';
 105 │ 
 106 │ interface AuthState {
 107 │   user: User | null;
 108 │   session: Session | null;
 109 │   isLoading: boolean;
 110 │   isAuthenticated: boolean;
 111 │   error: AuthError | Error | null;
 112 │ }
 113 │ 
 114 │ export function useAuth() {
 115 │   const navigate = useNavigate();
 116 │   const [authState, setAuthState] = useState<AuthState>({
 117 │     user: null,
 118 │     session: null,
 119 │     isLoading: true,
 120 │     isAuthenticated: false,
 121 │     error: null
 122 │   });
 123 │ 
 124 │   // Função para atualizar o estado de autenticação
 125 │   const setAuth = useCallback((
 126 │     user: User | null, 
 127 │     session: Session | null, 
 128 │     isLoading: boolean = false, 
 129 │     error: AuthError | Error | null = null
 130 │   ) => {
 131 │     setAuthState({
 132 │       user,
 133 │       session,
 134 │       isLoading,
 135 │       isAuthenticated: !!user,
 136 │       error
 137 │     });
 138 │   }, []);
 139 │ 
 140 │   // Função auxiliar para verificar e gerar ID do usuário
 141 │   const checkAndGenerateUserId = useCallback(async (user: User) => {
 142 │     if (!user) return;
 143 │ 
 144 │     try {
 145 │       // Consultar perfil para verificar se já tem ID válido
 146 │       const { data: profileData } = await supabase
 147 │         .from('profiles')
 148 │         .select('user_id, state')
 149 │         .eq('id', user.id)
 150 │         .single();
 151 │ 
 152 │       // Se já tiver ID válido, não precisa gerar
 153 │       if (profileData?.user_id && /^[A-Z]{2}\d{4}[1-2]\d{6}$/.test(profileData.user_id)) {
 154 │         console.log('Usuário já possui ID válido:', profileData.user_id);
 155 │         return;
 156 │       }
 157 │ 
 158 │       console.log('Gerando ID para usuário existente...');
 159 │ 
 160 │       // Obter dados necessários para gerar o ID
 161 │       let uf = profileData?.state || '';
 162 │       const userData = user.user_metadata || {};
 163 │ 
 164 │       // Tentar diferentes fontes para obter a UF
 165 │       if (!uf || uf.length !== 2 || uf === 'BR') {
 166 │         // Tentar do user_metadata
 167 │         if (userData.state && userData.state.length === 2 && userData.state !== 'BR') {
 168 │           uf = userData.state.toUpperCase();
 169 │         } else {
 170 │           // Usar localStorage como fallback
 171 │           const savedState = localStorage.getItem('selectedState');
 172 │           if (savedState && savedState.length === 2 && savedState !== 'BR') {
 173 │             uf = savedState.toUpperCase();
 174 │           } else {
 175 │             // Último recurso: usar SP como padrão
 176 │             uf = 'SP';
 177 │           }
 178 │         }
 179 │       }
 180 │ 
 181 │       // Determinar tipo de conta
 182 │       let tipoConta = 2; // Padrão: tipo básico (2)
 183 │       if (userData.plan_type) {
 184 │         const planLower = userData.plan_type.toLowerCase().trim();
 185 │         if (planLower === 'premium' || planLower === 'full') {
 186 │           tipoConta = 1; // Tipo Full/Premium
 187 │         }
 188 │       }
 189 │ 
 190 │       // Gerar ID usando RPC function
 191 │       const { data: generatedId, error: idError } = await supabase.rpc(
 192 │         'generate_sequential_user_id', 
 193 │         { p_uf: uf, p_tipo_conta: tipoConta }
 194 │       );
 195 │ 
 196 │       if (idError || !generatedId) {
 197 │         console.error('Erro ao gerar ID sequencial:', idError);
 198 │         return;
 199 │       }
 200 │ 
 201 │       if (generatedId) {
 202 │         // Atualizar o perfil com o novo ID
 203 │         const { error: updateError } = await supabase
 204 │           .from('profiles')
 205 │           .update({ 
 206 │             user_id: generatedId,
 207 │             state: uf,
 208 │             updated_at: new Date().toISOString()
 209 │           })
 210 │           .eq('id', user.id);
 211 │ 
 212 │         if (updateError) {
 213 │           console.error('Erro ao atualizar perfil com ID:', updateError);
 214 │         } else {
 215 │           console.log('ID de usuário gerado com sucesso:', generatedId);
 216 │         }
 217 │       }
 218 │     } catch (error) {
 219 │       console.error('Erro ao verificar/gerar ID de usuário:', error);
 220 │     }
 221 │   }, []);
 222 │ 
 223 │   // Verificar o estado de autenticação atual
 224 │   useEffect(() => {
 225 │     const checkAuth = async () => {
 226 │       try {
 227 │         const { data, error } = await supabase.auth.getSession();
 228 │ 
 229 │         if (error) throw error;
 230 │ 
 231 │         const { session } = data;
 232 │         const user = session?.user || null;
 233 │ 
 234 │         setAuth(user, session, false);
 235 │ 
 236 │         // Se tiver usuário, verificar e gerar ID se necessário
 237 │         if (user) {
 238 │           await checkAndGenerateUserId(user);
 239 │         }
 240 │ 
 241 │         // Configurar o listener para mudanças na autenticação
 242 │         const { data: authListener } = supabase.auth.onAuthStateChange(
 243 │           async (event, newSession) => {
 244 │             const user = newSession?.user || null;
 245 │             setAuth(user, newSession, false);
 246 │ 
 247 │             // Verificar e gerar ID quando o usuário fizer login
 248 │             if (event === 'SIGNED_IN' && user) {
 249 │               await checkAndGenerateUserId(user);
 250 │               navigate('/dashboard');
 251 │             } else if (event === 'SIGNED_OUT') {
 252 │               navigate('/login');
 253 │             }
 254 │           }
 255 │         );
 256 │ 
 257 │         // Limpar o listener quando o componente for desmontado
 258 │         return () => {
 259 │           authListener.subscription.unsubscribe();
 260 │         };
 261 │       } catch (error) {
 262 │         console.error('Erro na verificação de autenticação:', error);
 263 │         setAuth(null, null, false, error as AuthError);
 264 │       }
 265 │     };
 266 │ 
 267 │     checkAuth();
 268 │   }, [navigate, setAuth, checkAndGenerateUserId]);
 269 │ 
 270 │   // Função de login
 271 │   const login = useCallback(async (email: string, password: string) => {
 272 │     try {
 273 │       setAuth(null, null, true, null);
 274 │       const { data, error } = await supabase.auth.signInWithPassword({ email, password });
 275 │ 
 276 │       if (error) throw error;
 277 │ 
 278 │       const { user, session } = data;
 279 │       setAuth(user, session, false);
 280 │ 
 281 │       // Verificar e gerar ID de usuário se necessário
 282 │       if (user) {
 283 │         try {
 284 │           // Consultar perfil para verificar se já tem ID válido
 285 │           const { data: profileData } = await supabase
 286 │             .from('profiles')
 287 │             .select('user_id, state')
 288 │             .eq('id', user.id)
 289 │             .single();
 290 │ 
 291 │           // Se não existir ID ou o ID não estiver no formato correto
 292 │           if (!profileData?.user_id || !/^[A-Z]{2}\d{4}[1-2]\d{6}$/.test(profileData.user_id)) {
 293 │             console.log('Gerando ID para novo usuário...');
 294 │ 
 295 │             // Obter dados necessários para gerar o ID
 296 │             let uf = profileData?.state || '';
 297 │             const userData = user.user_metadata || {};
 298 │ 
 299 │             // Tentar diferentes fontes para obter a UF
 300 │             if (!uf || uf.length !== 2 || uf === 'BR') {
 301 │               // Tentar do user_metadata
 302 │               if (userData.state && userData.state.length === 2 && userData.state !== 'BR') {
 303 │                 uf = userData.state.toUpperCase();
 304 │               } else {
 305 │                 // Usar localStorage como fallback
 306 │                 const savedState = localStorage.getItem('selectedState');
 307 │                 if (savedState && savedState.length === 2 && savedState !== 'BR') {
 308 │                   uf = savedState.toUpperCase();
 309 │                 } else {
 310 │                   // Último recurso: usar SP como padrão
 311 │                   uf = 'SP';
 312 │                 }
 313 │               }
 314 │             }
 315 │ 
 316 │             // Determinar tipo de conta
 317 │             let tipoConta = 2; // Padrão: tipo básico (2)
 318 │             if (userData.plan_type) {
 319 │               const planLower = userData.plan_type.toLowerCase().trim();
 320 │               if (planLower === 'premium' || planLower === 'full') {
 321 │                 tipoConta = 1; // Tipo Full/Premium
 322 │               }
 323 │             }
 324 │ 
 325 │             // Gerar ID usando RPC function
 326 │             const { data: generatedId, error: idError } = await supabase.rpc(
 327 │               'generate_sequential_user_id', 
 328 │               { p_uf: uf, p_tipo_conta: tipoConta }
 329 │             );
 330 │ 
 331 │             if (idError || !generatedId) {
 332 │               console.error('Erro ao gerar ID sequencial:', idError);
 333 │               // Continuar sem falhar o login
 334 │             } else if (generatedId) {
 335 │               // Atualizar o perfil com o novo ID
 336 │               const { error: updateError } = await supabase
 337 │                 .from('profiles')
 338 │                 .update({ 
 339 │                   user_id: generatedId,
 340 │                   state: uf,
 341 │                   updated_at: new Date().toISOString()
 342 │                 })
 343 │                 .eq('id', user.id);
 344 │ 
 345 │               if (updateError) {
 346 │                 console.error('Erro ao atualizar perfil com ID:', updateError);
 347 │               } else {
 348 │                 console.log('ID de usuário gerado com sucesso:', generatedId);
 349 │               }
 350 │             }
 351 │           }
 352 │         } catch (idGenError) {
 353 │           console.error('Erro ao gerar ID de usuário:', idGenError);
 354 │           // Continuar sem falhar o login
 355 │         }
 356 │       }
 357 │ 
 358 │       return { user, error: null };
 359 │     } catch (error) {
 360 │       console.error('Erro no login:', error);
 361 │       setAuth(null, null, false, error as AuthError);
 362 │       return { user: null, error };
 363 │     }
 364 │   }, [setAuth]);
 365 │ 
 366 │   // Função de registro
 367 │   const register = useCallback(async (email: string, password: string, userData?: Record<string, any>) => {
 368 │     try {
 369 │       setAuth(null, null, true, null);
 370 │       const { data, error } = await supabase.auth.signUp({ 
 371 │         email, 
 372 │         password,
 373 │         options: { 
 374 │           data: userData,
 375 │           emailRedirectTo: `${window.location.origin}/auth/callback` 
 376 │         }
 377 │       });
 378 │ 
 379 │       if (error) throw error;
 380 │ 
 381 │       const { user, session } = data;
 382 │       setAuth(user, session, false);
 383 │       return { user, error: null };
 384 │     } catch (error) {
 385 │       console.error('Erro no registro:', error);
 386 │       setAuth(null, null, false, error as AuthError);
 387 │       return { user: null, error };
 388 │     }
 389 │   }, [setAuth]);
 390 │ 
 391 │   // Função de logout
 392 │   const logout = useCallback(async () => {
 393 │     try {
 394 │       setAuth(null, null, true, null);
 395 │       const { error } = await supabase.auth.signOut();
 396 │ 
 397 │       if (error) throw error;
 398 │ 
 399 │       setAuth(null, null, false);
 400 │       return { error: null };
 401 │     } catch (error) {
 402 │       console.error('Erro no logout:', error);
 403 │       setAuth(authState.user, authState.session, false, error as AuthError);
 404 │       return { error };
 405 │     }
 406 │   }, [authState.session, authState.user, setAuth]);
 407 │ 
 408 │   // Função para resetar senha
 409 │   const resetPassword = useCallback(async (email: string) => {
 410 │     try {
 411 │       const { error } = await supabase.auth.resetPasswordForEmail(email, {
 412 │         redirectTo: `${window.location.origin}/reset-password`
 413 │       });
 414 │ 
 415 │       if (error) throw error;
 416 │ 
 417 │       return { error: null };
 418 │     } catch (error) {
 419 │       console.error('Erro no reset de senha:', error);
 420 │       return { error };
 421 │     }
 422 │   }, []);
 423 │ 
 424 │   // Função para atualizar senha
 425 │   const updatePassword = useCallback(async (newPassword: string) => {
 426 │     try {
 427 │       const { error } = await supabase.auth.updateUser({ password: newPassword });
 428 │ 
 429 │       if (error) throw error;
 430 │ 
 431 │       return { error: null };
 432 │     } catch (error) {
 433 │       console.error('Erro na atualização de senha:', error);
 434 │       return { error };
 435 │     }
 436 │   }, []);
 437 │ 
 438 │   return {
 439 │     ...authState,
 440 │     login,
 441 │     register,
 442 │     logout,
 443 │     resetPassword,
 444 │     updatePassword
 445 │   };
 446 │ }
 447 │ 
 448 │ export default useAuth;
     · ───────────┬───────────
     ·            ╰── exported more than once
     ╰────

Error: 
  ☞ Exported identifiers must be unique
/home/runner/workspace/src/hooks/useAuth.ts:1:1
1  |  
2  |  import { useState, useEffect } from 'react';
   |  ^
3  |  import { supabase } from '@/lib/supabase';
4  |