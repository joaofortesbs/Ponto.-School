
[plugin:vite:react-swc] × the name `useState` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:1:1]
   1 │ import React, { useState, useEffect } from "react";
     ·                 ────┬───
     ·                     ╰── previous definition of `useState` here
   2 │ import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy, PlusCircle, Settings, Smile, HelpCircle, BarChart2 } from "lucide-react";
   3 │ import { useTheme } from "@/components/ThemeProvider";
   4 │ import { motion, AnimatePresence } from "framer-motion";
   5 │ import { Progress } from "@/components/ui/progress";
   6 │ import DefinirFocoModal, { FocoData } from "./DefinirFocoModal";
   7 │ 
   8 │ // Tipo para atividades
   9 │ interface Atividade {
  10 │   id: number;
  11 │   titulo: string;
  12 │   tipo: "video" | "exercicio" | "revisao" | "tarefa";
  13 │   tempo: string;
  14 │   prazo: string;
  15 │   urgente: boolean;
  16 │   concluido: boolean;
  17 │   progresso: number;
  18 │ }
  19 │ 
  20 │ interface FocoPrincipal {
  21 │   titulo: string;
  22 │   descricao: string;
  23 │   disciplinas: string[];
  24 │   tempoTotal: string;
  25 │   dicaMentor?: string;
  26 │   sentimento?: string;
  27 │ }
  28 │ 
  29 │ export default function FocoDoDiaCard() {
  30 │   const { theme } = useTheme();
  31 │   const isLightMode = theme === "light";
  32 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  33 │   const [atividades, setAtividades] = useState<Atividade[]>([]);
  34 │   const [focoPrincipal, setFocoPrincipal] = useState<FocoPrincipal | null>(null);
  35 │   const [temFoco, setTemFoco] = useState<boolean>(false);
  36 │   const [carregando, setCarregando] = useState<boolean>(true);
  37 │   const [modalAberto, setModalAberto] = useState<boolean>(false);
  38 │   const [gerando, setGerando] = useState<boolean>(false);
  39 │ 
  40 │   // Simular carregamento de dados
  41 │   useEffect(() => {
  42 │     // Aqui faremos uma simulação de carregamento de dados
  43 │     // No futuro, isso seria substituído por chamadas reais à API
  44 │     const timeout = setTimeout(() => {
  45 │       setCarregando(false);
  46 │ 
  47 │       // Verificar se temos dados do foco salvos no localStorage
  48 │       const focoDadosSalvos = localStorage.getItem('focoDia');
  49 │       if (focoDadosSalvos) {
  50 │         try {
  51 │           const dados = JSON.parse(focoDadosSalvos);
  52 │           setFocoPrincipal(dados.focoPrincipal);
  53 │           setAtividades(dados.atividades);
  54 │           setTemFoco(true);
  55 │         } catch (error) {
  56 │           console.error("Erro ao carregar dados do foco:", error);
  57 │         }
  58 │       }
  59 │     }, 1000);
  60 │ 
  61 │     return () => clearTimeout(timeout);
  62 │   }, []);
  63 │ 
  64 │   // Função para lidar com a conclusão de atividades
  65 │   const toggleAtividade = (id: number) => {
  66 │     // Atualizar o estado local - em uma aplicação real, isto também atualizaria o backend
  67 │     const atualizadas = atividades.map(ativ => 
  68 │       ativ.id === id ? { ...ativ, concluido: !ativ.concluido } : ativ
  69 │     );
  70 │ 
  71 │     setAtividades(atualizadas);
  72 │ 
  73 │     // Atualizar no localStorage
  74 │     if (focoPrincipal) {
  75 │       localStorage.setItem('focoDia', JSON.stringify({
  76 │         focoPrincipal,
  77 │         atividades: atualizadas
  78 │       }));
  79 │     }
  80 │   };
  81 │ 
  82 │   // Função para processar dados do modal e gerar o foco
  83 │   const processarDefinicaoFoco = (dados: FocoData) => {
  84 │     setModalAberto(false);
  85 │     setGerando(true);
  86 │ 
  87 │     // Simulando processamento pelo backend/IA
  88 │     setTimeout(() => {
  89 │       // Criar foco principal baseado nos dados recebidos
  90 │       const novoFocoPrincipal: FocoPrincipal = {
  91 │         titulo: dados.objetivo,
  92 │         descricao: dados.objetivoPersonalizado || dados.objetivo,
  93 │         disciplinas: dados.disciplinas,
  94 │         tempoTotal: `${Math.round(dados.tempoEstudo / 60)} hora${dados.tempoEstudo >= 120 ? 's' : ''}`,
  95 │         dicaMentor: gerarDicaMentor(dados.estado),
  96 │         sentimento: dados.estado
  97 │       };
  98 │ 
  99 │       // Gerar atividades baseadas nas informações
 100 │       const novasAtividades = gerarAtividades(dados);
 101 │ 
 102 │       // Atualizar estados
 103 │       setFocoPrincipal(novoFocoPrincipal);
 104 │       setAtividades(novasAtividades);
 105 │       setTemFoco(true);
 106 │       setGerando(false);
 107 │ 
 108 │       // Salvar no localStorage
 109 │       localStorage.setItem('focoDia', JSON.stringify({
 110 │         focoPrincipal: novoFocoPrincipal,
 111 │         atividades: novasAtividades
 112 │       }));
 113 │     }, 2000);
 114 │   };
 115 │ 
 116 │   // Função para gerar dica baseada no estado emocional
 117 │   const gerarDicaMentor = (estado: string): string => {
 118 │     const dicas = {
 119 │       "Motivado(a)": "Aproveite seu ânimo atual para focar nos tópicos mais desafiadores primeiro!",
 120 │       "Um pouco perdido(a)": "Divida seu estudo em etapas menores e comemore cada progresso.",
 121 │       "Cansado(a)": "Alterne entre tópicos diferentes a cada 30 minutos para manter o foco.",
 122 │       "Ansioso(a)": "Pratique 2 minutos de respiração profunda antes de cada sessão de estudo."
 123 │     };
 124 │ 
 125 │     return dicas[estado as keyof typeof dicas] || "Estabeleça pequenas metas e celebre cada conquista no seu estudo.";
 126 │   };
 127 │ 
 128 │   // Função para gerar atividades com base nos dados do formulário
 129 │   const gerarAtividades = (dados: FocoData): Atividade[] => {
 130 │     const tiposAtividade: ("video" | "exercicio" | "revisao" | "tarefa")[] = ["video", "exercicio", "revisao", "tarefa"];
 131 │ 
 132 │     // Se o usuário selecionou tarefas específicas, incluí-las
 133 │     const atividadesTarefas = dados.tarefasSelecionadas.map((tarefa, index) => ({
 134 │       id: Date.now() + index,
 135 │       titulo: tarefa,
 136 │       tipo: "tarefa" as const,
 137 │       tempo: `${Math.floor(Math.random() * 30) + 15}min`,
 138 │       prazo: ["hoje", "amanhã", "esta semana"][Math.floor(Math.random() * 3)],
 139 │       urgente: Math.random() > 0.7,
 140 │       concluido: false,
 141 │       progresso: 0
 142 │     }));
 143 │ 
 144 │     // Gerar atividades extras com base nas disciplinas
 145 │     const atividadesExtra = dados.disciplinas.slice(0, 3).map((disciplina, index) => {
 146 │       const tipo = tiposAtividade[Math.floor(Math.random() * tiposAtividade.length)];
 147 │       const titulos = {
 148 │         video: [`Assistir vídeo de ${disciplina}`, `Aula sobre conceitos de ${disciplina}`],
 149 │         exercicio: [`Exercícios de ${disciplina}`, `Resolver problemas de ${disciplina}`],
 150 │         revisao: [`Revisar anotações de ${disciplina}`, `Resumo do capítulo de ${disciplina}`],
 151 │         tarefa: [`Trabalho de ${disciplina}`, `Projeto de ${disciplina}`]
 152 │       };
 153 │ 
 154 │       return {
 155 │         id: Date.now() + atividadesTarefas.length + index,
 156 │         titulo: titulos[tipo][Math.floor(Math.random() * 2)],
 157 │         tipo,
 158 │         tempo: `${Math.floor(Math.random() * 45) + 15}min`,
 159 │         prazo: ["hoje", "amanhã", "esta semana"][Math.floor(Math.random() * 3)],
 160 │         urgente: Math.random() > 0.7,
 161 │         concluido: false,
 162 │         progresso: 0
 163 │       };
 164 │     });
 165 │ 
 166 │     // Combinar todas as atividades e limitar a 4 no máximo
 167 │     return [...atividadesTarefas, ...atividadesExtra].slice(0, 4);
 168 │   };
 169 │ 
 170 │   // Função para reiniciar o foco
 171 │   const redefinirFoco = () => {
 172 │     setModalAberto(true);
 173 │   };
 174 │ 
 175 │   // Calcular progresso total das atividades
 176 │   const totalAtividades = atividades.length;
 177 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
 178 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
 179 │   const progressoAtividades = totalAtividades > 0 
 180 │     ? Math.round((atividadesConcluidas / totalAtividades) * 100) 
 181 │     : 0;
 182 │ 
 183 │   // Renderizar estado de carregamento
 184 │   if (carregando) {
 185 │     return (
 186 │       <motion.div 
 187 │         className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 188 │         initial={{ opacity: 0, y: 20 }}
 189 │         animate={{ opacity: 1, y: 0 }}
 190 │         transition={{ duration: 0.5, ease: "easeOut" }}
 191 │       >
 192 │         <div className="h-full flex items-center justify-center p-8">
 193 │           <div className="animate-pulse flex flex-col items-center space-y-4 w-full">
 194 │             <div className="w-full flex justify-between items-center">
 195 │               <div className="h-8 bg-gray-300 dark:bg-gray-700 rounded-md w-1/3"></div>
 196 │               <div className="h-8 w-8 bg-gray-300 dark:bg-gray-700 rounded-full"></div>
 197 │             </div>
 198 │             <div className="h-16 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 199 │             <div className="space-y-3 w-full">
 200 │               <div className="h-12 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 201 │               <div className="h-12 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 202 │             </div>
 203 │           </div>
 204 │         </div>
 205 │       </motion.div>
 206 │     );
 207 │   }
 208 │ 
 209 │   // Renderizar estado de geração de foco
 210 │   if (gerando) {
 211 │     return (
 212 │       <motion.div 
 213 │         className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 214 │         initial={{ opacity: 0, y: 20 }}
 215 │         animate={{ opacity: 1, y: 0 }}
 216 │         transition={{ duration: 0.5, ease: "easeOut" }}
 217 │       >
 218 │         <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 219 │           <div className="flex items-center justify-between">
 220 │             <div className="flex items-center gap-3">
 221 │               <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
 222 │                 <Flame className={`h-5 w-5 text-[#FF6B00] animate-pulse`} />
 223 │               </div>
 224 │               <div>
 225 │                 <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
 226 │                   Seu Foco Hoje
 227 │                 </h3>
 228 │               </div>
 229 │             </div>
 230 │           </div>
 231 │         </div>
 232 │ 
 233 │         <div className="h-full p-8 flex flex-col items-center justify-center">
 234 │           <div className="flex flex-col items-center space-y-4">
 235 │             <div className={`p-3 rounded-full ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 236 │               <motion.div
 237 │                 animate={{
 238 │                   rotate: [0, 360]
 239 │                 }}
 240 │                 transition={{
 241 │                   duration: 2,
 242 │                   repeat: Infinity,
 243 │                   ease: "linear"
 244 │                 }}
 245 │               >
 246 │                 <Clock className={`h-6 w-6 text-[#FF6B00]`} />
 247 │               </motion.div>
 248 │             </div>
 249 │             <div className="text-center space-y-2">
 250 │               <h4 className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 251 │                 Organizando seu dia...
 252 │               </h4>
 253 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'} max-w-xs`}>
 254 │                 O Mentor IA está analisando suas preferências e criando seu plano de estudos personalizado.
 255 │               </p>
 256 │             </div>
 257 │ 
 258 │             <div className="w-full max-w-xs mt-4">
 259 │               <div className="h-1.5 w-full bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
 260 │                 <motion.div 
 261 │                   className="h-full bg-[#FF6B00]"
 262 │                   animate={{
 263 │                     width: ['0%', '100%']
 264 │                   }}
 265 │                   transition={{
 266 │                     duration: 2,
 267 │                     ease: "easeInOut"
 268 │                   }}
 269 │                 />
 270 │               </div>
 271 │             </div>
 272 │           </div>
 273 │         </div>
 274 │       </motion.div>
 275 │     );
 276 │   }
 277 │ 
 278 │   return (
 279 │     <motion.div 
 280 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 281 │       initial={{ opacity: 0, y: 20 }}
 282 │       animate={{ opacity: 1, y: 0 }}
 283 │       transition={{ duration: 0.5, ease: "easeOut" }}
 284 │     >
 285 │       {/* Header elegante com gradiente */}
 286 │       <div className={`p-5 relative ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 287 │         {/* Barra de progresso interativa no topo */}
 288 │         <div className="absolute top-0 left-0 h-1 bg-[#FF6B00]/20 w-full overflow-hidden">
 289 │           <motion.div 
 290 │             className="h-full bg-[#FF6B00]" 
 291 │             initial={{ width: '0%' }}
 292 │             animate={{ width: `${progressoTotal}%` }}
 293 │             transition={{ duration: 0.5, ease: "easeOut" }}
 294 │           />
 295 │         </div>
 296 │ 
 297 │         <div className="flex items-center justify-between">
 298 │           <div className="flex items-center gap-3">
 299 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
 300 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
 301 │             </div>
 302 │             <div>
 303 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
 304 │                 Seu Foco Hoje
 305 │               </h3>
 306 │               {temFoco && focoPrincipal && (
 307 │                 <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
 308 │                   <span className="font-bold text-[#FF6B00]">
 309 │                     {focoPrincipal.titulo}
 310 │                   </span>
 311 │                 </p>
 312 │               )}
 313 │             </div>
 314 │           </div>
 315 │ 
 316 │           {/* Indicador de progresso circular - mostrado apenas se houver atividades */}
 317 │           {totalAtividades > 0 && (
 318 │             <div className="hidden md:flex items-center">
 319 │               <div className="relative h-12 w-12 flex items-center justify-center">
 320 │                 <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
 321 │                   <circle 
 322 │                     cx="22" cy="22" r="20" 
 323 │                     fill="none" 
 324 │                     stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
 325 │                     strokeWidth="4"
 326 │                   />
 327 │                   <circle 
 328 │                     cx="22" cy="22" r="20" 
 329 │                     fill="none" 
 330 │                     stroke="#FF6B00" 
 331 │                     strokeWidth="4"
 332 │                     strokeDasharray={126}
 333 │                     strokeDashoffset={126 - (progressoTotal / 100) * 126}
 334 │                     transform="rotate(-90 22 22)"
 335 │                     strokeLinecap="round"
 336 │                   />
 337 │                 </svg>
 338 │                 <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 339 │                   {Math.round(progressoTotal)}%
 340 │                 </span>
 341 │               </div>
 342 │             </div>
 343 │           )}
 344 │         </div>
 345 │       </div>
 346 │ 
 347 │       {/* Conteúdo principal */}
 348 │       <div className="p-5">
 349 │         {/* Exibir foco principal quando definido */}
 350 │         {temFoco && focoPrincipal ? (
 351 │           <>
 352 │             {/* Informações do foco principal */}
 353 │             <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 354 │               <div className="flex gap-2 items-start">
 355 │                 <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 356 │                   <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 357 │                 </div>
 358 │                 <div>
 359 │                   <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 360 │                     <span className="font-medium">Foco principal:</span> {focoPrincipal.descricao}
 361 │                   </p>
 362 │                   {focoPrincipal.disciplinas.length > 0 && (
 363 │                     <div className="mt-1.5 flex flex-wrap gap-1.5">
 364 │                       {focoPrincipal.disciplinas.map((disciplina, idx) => (
 365 │                         <span 
 366 │                           key={idx} 
 367 │                           className={`text-xs px-2 py-0.5 rounded-full ${isLightMode ? 'bg-blue-100 text-blue-700' : 'bg-blue-900/30 text-blue-400'}`}
 368 │                         >
 369 │                           {disciplina}
 370 │                         </span>
 371 │                       ))}
 372 │                     </div>
 373 │                   )}
 374 │                 </div>
 375 │               </div>
 376 │             </div>
 377 │ 
 378 │             {/* Botão de configurações para redefinir foco */}
 379 │             <div className="absolute top-5 right-5">
 380 │               <button 
 381 │                 onClick={redefinirFoco}
 382 │                 className={`p-1.5 rounded-full ${isLightMode ? 'bg-gray-100 hover:bg-gray-200' : 'bg-gray-800 hover:bg-gray-700'} transition-colors`}
 383 │               >
 384 │                 <Settings className={`h-3.5 w-3.5 ${isLightMode ? 'text-gray-600' : 'text-gray-400'}`} />
 385 │               </button>
 386 │             </div>
 387 │ 
 388 │             {/* Lista de atividades */}
 389 │             <div className="space-y-2.5">
 390 │               {atividades.map((atividade, index) => (
 391 │                 <motion.div 
 392 │                   key={atividade.id} 
 393 │                   className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 394 │                   whileHover={{ y: -2 }}
 395 │                   onMouseEnter={() => setHoverIndex(index)}
 396 │                   onMouseLeave={() => setHoverIndex(null)}
 397 │                 >
 398 │                   {/* Indicador de prioridade para tarefas urgentes */}
 399 │                   {atividade.urgente && (
 400 │                     <div className="absolute top-0 right-0">
 401 │                       <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 402 │                     </div>
 403 │                   )}
 404 │ 
 405 │                   <div 
 406 │                     className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 407 │                       atividade.concluido 
 408 │                         ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 409 │                         : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 410 │                     }`}
 411 │                     onClick={(e) => {
 412 │                       e.stopPropagation();
 413 │                       toggleAtividade(atividade.id);
 414 │                     }}
 415 │                   >
 416 │                     {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 417 │                   </div>
 418 │ 
 419 │                   <div className="flex-1">
 420 │                     <div className="flex items-start gap-1.5">
 421 │                       <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 422 │                         {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 423 │                         {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 424 │                         {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 425 │                         {atividade.tipo === 'tarefa' && <Check className="h-3 w-3 text-purple-500" />}
 426 │                       </div>
 427 │                       <div>
 428 │                         <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 429 │                           {atividade.titulo}
 430 │                         </p>
 431 │                         <div className="flex items-center mt-1.5 gap-3">
 432 │                           <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 433 │                             <Clock className="h-3 w-3" /> {atividade.tempo}
 434 │                           </span>
 435 │                           <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 436 │                             {atividade.prazo}
 437 │                           </span>
 438 │                         </div>
 439 │                       </div>
 440 │                     </div>
 441 │ 
 442 │                     {/* Progress bar for individual activities */}
 443 │                     <div className="mt-2">
 444 │                       <Progress value={atividade.progresso} 
 445 │                         className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 446 │                     </div>
 447 │                   </div>
 448 │                 </motion.div>
 449 │               ))}
 450 │             </div>
 451 │ 
 452 │             {/* Dica do Mentor IA no final do card */}
 453 │             {focoPrincipal.dicaMentor && (
 454 │               <div className={`mt-4 p-3 rounded-lg ${isLightMode ? 'bg-green-50' : 'bg-green-900/10'} border ${isLightMode ? 'border-green-100' : 'border-green-800/30'}`}>
 455 │                 <div className="flex gap-2 items-start">
 456 │                   <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-green-100' : 'bg-green-800/30'}`}>
 457 │                     <Check className="h-3.5 w-3.5 text-green-600 dark:text-green-400" />
 458 │                   </div>
 459 │                   <p className={`text-xs ${isLightMode ? 'text-gray-700' : 'text-gray-300'}`}>
 460 │                     <span className="font-medium">Dica do Mentor:</span> {focoPrincipal.dicaMentor}
 461 │                   </p>
 462 │                 </div>
 463 │               </div>
 464 │             )}
 465 │           </>
 466 │         ) : (
 467 │           <>
 468 │             {/* Mensagem de boas-vindas para novos usuários */}
 469 │             <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 470 │               <div className="flex gap-2 items-start">
 471 │                 <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 472 │                   <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 473 │                 </div>
 474 │                 <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 475 │                   <span className="font-medium">Mentor IA:</span> Bem-vindo! Aqui você poderá definir e acompanhar suas atividades diárias prioritárias. Comece definindo seu foco de estudos.
 476 │                 </p>
 477 │               </div>
 478 │             </div>
 479 │ 
 480 │             {/* Estado vazio - Sem atividades */}
 481 │             <div className="py-12 flex flex-col items-center justify-center space-y-4">
 482 │               <div className={`p-3 rounded-full ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/10'}`}>
 483 │                 <Clock className={`h-6 w-6 text-[#FF6B00]`} />
 484 │               </div>
 485 │               <div className="text-center space-y-2">
 486 │                 <h4 className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 487 │                   Nenhuma atividade definida
 488 │                 </h4>
 489 │                 <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'} max-w-xs`}>
 490 │                   Defina um foco de estudo e adicione atividades para organizar seu dia.
 491 │                 </p>
 492 │               </div>
 493 │             </div>
 494 │           </>
 495 │         )}
 496 │ 
 497 │         {/* Footer com botão de ação e métricas */}
 498 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center relative">
 499 │           {atividades.length > 0 ? (
 500 │             <div className="flex items-center gap-2">
 501 │               <div className={`w-5 h-5 rounded-full border ${isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent'} flex items-center justify-center`}>
 502 │                 <span className={`text-xs font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-300'}`}>
 503 │                   {atividadesConcluidas}
 504 │                 </span>
 505 │               </div>
 506 │               <span className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 507 │                 {atividadesConcluidas} de {totalAtividades} atividades
 508 │               </span>
 509 │             </div>
 510 │           ) : (
 511 │             <div></div> // Espaçador para manter o layout com justify-between
 512 │           )}
 513 │ 
 514 │           <motion.button 
 515 │             onClick={() => setModalAberto(true)}
 516 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 517 │             whileHover={{ scale: 1.05 }}
 518 │             whileTap={{ scale: 0.98 }}
 519 │           >
 520 │             {atividades.length > 0 ? "Iniciar Foco" : "Definir Foco"}
 521 │             <ChevronRight className="h-3 w-3" />
 522 │           </motion.button>
 523 │ 
 524 │           {/* Exibir sentimento quando disponível */}
 525 │             {temFoco && focoPrincipal?.sentimento && (
 526 │               <div className="absolute top-2 right-2">
 527 │                 <div className="text-xs bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300 px-2 py-1 rounded-full flex items-center gap-1">
 528 │                   {focoPrincipal.sentimento === "Motivado(a)" && <Smile className="h-3 w-3" />}
 529 │                   {focoPrincipal.sentimento === "Um pouco perdido(a)" && <HelpCircle className="h-3 w-3" />}
 530 │                   {focoPrincipal.sentimento === "Cansado(a)" && <Clock className="h-3 w-3" />}
 531 │                   {focoPrincipal.sentimento === "Ansioso(a)" && <BarChart2 className="h-3 w-3" />}
 532 │                   <span>{focoPrincipal.sentimento}</span>
 533 │                 </div>
 534 │               </div>
 535 │             )}
 536 │         </div>
 537 │       </div>
 538 │ 
 539 │       {/* Modal para definir o foco */}
 540 │       <AnimatePresence>
 541 │         {modalAberto && (
 542 │           <DefinirFocoModal 
 543 │             open={modalAberto}
 544 │             onClose={() => setModalAberto(false)}
 545 │             onSave={processarDefinicaoFoco}
 546 │           />
 547 │         )}
 548 │       </AnimatePresence>
 549 │     </motion.div>
 550 │   );
 551 │ }
 552 │ import React, { useState } from "react";
     ·                 ────┬───
     ·                     ╰── `useState` redefined here
 553 │ import { X } from "lucide-react";
 554 │ import { useTheme } from "@/components/ThemeProvider";
 555 │ import { motion, AnimatePresence } from "framer-motion";
     ╰────

  × the name `useTheme` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:1:1]
   1 │ import React, { useState, useEffect } from "react";
   2 │ import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy, PlusCircle, Settings, Smile, HelpCircle, BarChart2 } from "lucide-react";
   3 │ import { useTheme } from "@/components/ThemeProvider";
     ·          ────┬───
     ·              ╰── previous definition of `useTheme` here
   4 │ import { motion, AnimatePresence } from "framer-motion";
   5 │ import { Progress } from "@/components/ui/progress";
   6 │ import DefinirFocoModal, { FocoData } from "./DefinirFocoModal";
   7 │ 
   8 │ // Tipo para atividades
   9 │ interface Atividade {
  10 │   id: number;
  11 │   titulo: string;
  12 │   tipo: "video" | "exercicio" | "revisao" | "tarefa";
  13 │   tempo: string;
  14 │   prazo: string;
  15 │   urgente: boolean;
  16 │   concluido: boolean;
  17 │   progresso: number;
  18 │ }
  19 │ 
  20 │ interface FocoPrincipal {
  21 │   titulo: string;
  22 │   descricao: string;
  23 │   disciplinas: string[];
  24 │   tempoTotal: string;
  25 │   dicaMentor?: string;
  26 │   sentimento?: string;
  27 │ }
  28 │ 
  29 │ export default function FocoDoDiaCard() {
  30 │   const { theme } = useTheme();
  31 │   const isLightMode = theme === "light";
  32 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  33 │   const [atividades, setAtividades] = useState<Atividade[]>([]);
  34 │   const [focoPrincipal, setFocoPrincipal] = useState<FocoPrincipal | null>(null);
  35 │   const [temFoco, setTemFoco] = useState<boolean>(false);
  36 │   const [carregando, setCarregando] = useState<boolean>(true);
  37 │   const [modalAberto, setModalAberto] = useState<boolean>(false);
  38 │   const [gerando, setGerando] = useState<boolean>(false);
  39 │ 
  40 │   // Simular carregamento de dados
  41 │   useEffect(() => {
  42 │     // Aqui faremos uma simulação de carregamento de dados
  43 │     // No futuro, isso seria substituído por chamadas reais à API
  44 │     const timeout = setTimeout(() => {
  45 │       setCarregando(false);
  46 │ 
  47 │       // Verificar se temos dados do foco salvos no localStorage
  48 │       const focoDadosSalvos = localStorage.getItem('focoDia');
  49 │       if (focoDadosSalvos) {
  50 │         try {
  51 │           const dados = JSON.parse(focoDadosSalvos);
  52 │           setFocoPrincipal(dados.focoPrincipal);
  53 │           setAtividades(dados.atividades);
  54 │           setTemFoco(true);
  55 │         } catch (error) {
  56 │           console.error("Erro ao carregar dados do foco:", error);
  57 │         }
  58 │       }
  59 │     }, 1000);
  60 │ 
  61 │     return () => clearTimeout(timeout);
  62 │   }, []);
  63 │ 
  64 │   // Função para lidar com a conclusão de atividades
  65 │   const toggleAtividade = (id: number) => {
  66 │     // Atualizar o estado local - em uma aplicação real, isto também atualizaria o backend
  67 │     const atualizadas = atividades.map(ativ => 
  68 │       ativ.id === id ? { ...ativ, concluido: !ativ.concluido } : ativ
  69 │     );
  70 │ 
  71 │     setAtividades(atualizadas);
  72 │ 
  73 │     // Atualizar no localStorage
  74 │     if (focoPrincipal) {
  75 │       localStorage.setItem('focoDia', JSON.stringify({
  76 │         focoPrincipal,
  77 │         atividades: atualizadas
  78 │       }));
  79 │     }
  80 │   };
  81 │ 
  82 │   // Função para processar dados do modal e gerar o foco
  83 │   const processarDefinicaoFoco = (dados: FocoData) => {
  84 │     setModalAberto(false);
  85 │     setGerando(true);
  86 │ 
  87 │     // Simulando processamento pelo backend/IA
  88 │     setTimeout(() => {
  89 │       // Criar foco principal baseado nos dados recebidos
  90 │       const novoFocoPrincipal: FocoPrincipal = {
  91 │         titulo: dados.objetivo,
  92 │         descricao: dados.objetivoPersonalizado || dados.objetivo,
  93 │         disciplinas: dados.disciplinas,
  94 │         tempoTotal: `${Math.round(dados.tempoEstudo / 60)} hora${dados.tempoEstudo >= 120 ? 's' : ''}`,
  95 │         dicaMentor: gerarDicaMentor(dados.estado),
  96 │         sentimento: dados.estado
  97 │       };
  98 │ 
  99 │       // Gerar atividades baseadas nas informações
 100 │       const novasAtividades = gerarAtividades(dados);
 101 │ 
 102 │       // Atualizar estados
 103 │       setFocoPrincipal(novoFocoPrincipal);
 104 │       setAtividades(novasAtividades);
 105 │       setTemFoco(true);
 106 │       setGerando(false);
 107 │ 
 108 │       // Salvar no localStorage
 109 │       localStorage.setItem('focoDia', JSON.stringify({
 110 │         focoPrincipal: novoFocoPrincipal,
 111 │         atividades: novasAtividades
 112 │       }));
 113 │     }, 2000);
 114 │   };
 115 │ 
 116 │   // Função para gerar dica baseada no estado emocional
 117 │   const gerarDicaMentor = (estado: string): string => {
 118 │     const dicas = {
 119 │       "Motivado(a)": "Aproveite seu ânimo atual para focar nos tópicos mais desafiadores primeiro!",
 120 │       "Um pouco perdido(a)": "Divida seu estudo em etapas menores e comemore cada progresso.",
 121 │       "Cansado(a)": "Alterne entre tópicos diferentes a cada 30 minutos para manter o foco.",
 122 │       "Ansioso(a)": "Pratique 2 minutos de respiração profunda antes de cada sessão de estudo."
 123 │     };
 124 │ 
 125 │     return dicas[estado as keyof typeof dicas] || "Estabeleça pequenas metas e celebre cada conquista no seu estudo.";
 126 │   };
 127 │ 
 128 │   // Função para gerar atividades com base nos dados do formulário
 129 │   const gerarAtividades = (dados: FocoData): Atividade[] => {
 130 │     const tiposAtividade: ("video" | "exercicio" | "revisao" | "tarefa")[] = ["video", "exercicio", "revisao", "tarefa"];
 131 │ 
 132 │     // Se o usuário selecionou tarefas específicas, incluí-las
 133 │     const atividadesTarefas = dados.tarefasSelecionadas.map((tarefa, index) => ({
 134 │       id: Date.now() + index,
 135 │       titulo: tarefa,
 136 │       tipo: "tarefa" as const,
 137 │       tempo: `${Math.floor(Math.random() * 30) + 15}min`,
 138 │       prazo: ["hoje", "amanhã", "esta semana"][Math.floor(Math.random() * 3)],
 139 │       urgente: Math.random() > 0.7,
 140 │       concluido: false,
 141 │       progresso: 0
 142 │     }));
 143 │ 
 144 │     // Gerar atividades extras com base nas disciplinas
 145 │     const atividadesExtra = dados.disciplinas.slice(0, 3).map((disciplina, index) => {
 146 │       const tipo = tiposAtividade[Math.floor(Math.random() * tiposAtividade.length)];
 147 │       const titulos = {
 148 │         video: [`Assistir vídeo de ${disciplina}`, `Aula sobre conceitos de ${disciplina}`],
 149 │         exercicio: [`Exercícios de ${disciplina}`, `Resolver problemas de ${disciplina}`],
 150 │         revisao: [`Revisar anotações de ${disciplina}`, `Resumo do capítulo de ${disciplina}`],
 151 │         tarefa: [`Trabalho de ${disciplina}`, `Projeto de ${disciplina}`]
 152 │       };
 153 │ 
 154 │       return {
 155 │         id: Date.now() + atividadesTarefas.length + index,
 156 │         titulo: titulos[tipo][Math.floor(Math.random() * 2)],
 157 │         tipo,
 158 │         tempo: `${Math.floor(Math.random() * 45) + 15}min`,
 159 │         prazo: ["hoje", "amanhã", "esta semana"][Math.floor(Math.random() * 3)],
 160 │         urgente: Math.random() > 0.7,
 161 │         concluido: false,
 162 │         progresso: 0
 163 │       };
 164 │     });
 165 │ 
 166 │     // Combinar todas as atividades e limitar a 4 no máximo
 167 │     return [...atividadesTarefas, ...atividadesExtra].slice(0, 4);
 168 │   };
 169 │ 
 170 │   // Função para reiniciar o foco
 171 │   const redefinirFoco = () => {
 172 │     setModalAberto(true);
 173 │   };
 174 │ 
 175 │   // Calcular progresso total das atividades
 176 │   const totalAtividades = atividades.length;
 177 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
 178 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
 179 │   const progressoAtividades = totalAtividades > 0 
 180 │     ? Math.round((atividadesConcluidas / totalAtividades) * 100) 
 181 │     : 0;
 182 │ 
 183 │   // Renderizar estado de carregamento
 184 │   if (carregando) {
 185 │     return (
 186 │       <motion.div 
 187 │         className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 188 │         initial={{ opacity: 0, y: 20 }}
 189 │         animate={{ opacity: 1, y: 0 }}
 190 │         transition={{ duration: 0.5, ease: "easeOut" }}
 191 │       >
 192 │         <div className="h-full flex items-center justify-center p-8">
 193 │           <div className="animate-pulse flex flex-col items-center space-y-4 w-full">
 194 │             <div className="w-full flex justify-between items-center">
 195 │               <div className="h-8 bg-gray-300 dark:bg-gray-700 rounded-md w-1/3"></div>
 196 │               <div className="h-8 w-8 bg-gray-300 dark:bg-gray-700 rounded-full"></div>
 197 │             </div>
 198 │             <div className="h-16 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 199 │             <div className="space-y-3 w-full">
 200 │               <div className="h-12 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 201 │               <div className="h-12 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 202 │             </div>
 203 │           </div>
 204 │         </div>
 205 │       </motion.div>
 206 │     );
 207 │   }
 208 │ 
 209 │   // Renderizar estado de geração de foco
 210 │   if (gerando) {
 211 │     return (
 212 │       <motion.div 
 213 │         className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 214 │         initial={{ opacity: 0, y: 20 }}
 215 │         animate={{ opacity: 1, y: 0 }}
 216 │         transition={{ duration: 0.5, ease: "easeOut" }}
 217 │       >
 218 │         <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 219 │           <div className="flex items-center justify-between">
 220 │             <div className="flex items-center gap-3">
 221 │               <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
 222 │                 <Flame className={`h-5 w-5 text-[#FF6B00] animate-pulse`} />
 223 │               </div>
 224 │               <div>
 225 │                 <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
 226 │                   Seu Foco Hoje
 227 │                 </h3>
 228 │               </div>
 229 │             </div>
 230 │           </div>
 231 │         </div>
 232 │ 
 233 │         <div className="h-full p-8 flex flex-col items-center justify-center">
 234 │           <div className="flex flex-col items-center space-y-4">
 235 │             <div className={`p-3 rounded-full ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 236 │               <motion.div
 237 │                 animate={{
 238 │                   rotate: [0, 360]
 239 │                 }}
 240 │                 transition={{
 241 │                   duration: 2,
 242 │                   repeat: Infinity,
 243 │                   ease: "linear"
 244 │                 }}
 245 │               >
 246 │                 <Clock className={`h-6 w-6 text-[#FF6B00]`} />
 247 │               </motion.div>
 248 │             </div>
 249 │             <div className="text-center space-y-2">
 250 │               <h4 className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 251 │                 Organizando seu dia...
 252 │               </h4>
 253 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'} max-w-xs`}>
 254 │                 O Mentor IA está analisando suas preferências e criando seu plano de estudos personalizado.
 255 │               </p>
 256 │             </div>
 257 │ 
 258 │             <div className="w-full max-w-xs mt-4">
 259 │               <div className="h-1.5 w-full bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
 260 │                 <motion.div 
 261 │                   className="h-full bg-[#FF6B00]"
 262 │                   animate={{
 263 │                     width: ['0%', '100%']
 264 │                   }}
 265 │                   transition={{
 266 │                     duration: 2,
 267 │                     ease: "easeInOut"
 268 │                   }}
 269 │                 />
 270 │               </div>
 271 │             </div>
 272 │           </div>
 273 │         </div>
 274 │       </motion.div>
 275 │     );
 276 │   }
 277 │ 
 278 │   return (
 279 │     <motion.div 
 280 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 281 │       initial={{ opacity: 0, y: 20 }}
 282 │       animate={{ opacity: 1, y: 0 }}
 283 │       transition={{ duration: 0.5, ease: "easeOut" }}
 284 │     >
 285 │       {/* Header elegante com gradiente */}
 286 │       <div className={`p-5 relative ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 287 │         {/* Barra de progresso interativa no topo */}
 288 │         <div className="absolute top-0 left-0 h-1 bg-[#FF6B00]/20 w-full overflow-hidden">
 289 │           <motion.div 
 290 │             className="h-full bg-[#FF6B00]" 
 291 │             initial={{ width: '0%' }}
 292 │             animate={{ width: `${progressoTotal}%` }}
 293 │             transition={{ duration: 0.5, ease: "easeOut" }}
 294 │           />
 295 │         </div>
 296 │ 
 297 │         <div className="flex items-center justify-between">
 298 │           <div className="flex items-center gap-3">
 299 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
 300 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
 301 │             </div>
 302 │             <div>
 303 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
 304 │                 Seu Foco Hoje
 305 │               </h3>
 306 │               {temFoco && focoPrincipal && (
 307 │                 <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
 308 │                   <span className="font-bold text-[#FF6B00]">
 309 │                     {focoPrincipal.titulo}
 310 │                   </span>
 311 │                 </p>
 312 │               )}
 313 │             </div>
 314 │           </div>
 315 │ 
 316 │           {/* Indicador de progresso circular - mostrado apenas se houver atividades */}
 317 │           {totalAtividades > 0 && (
 318 │             <div className="hidden md:flex items-center">
 319 │               <div className="relative h-12 w-12 flex items-center justify-center">
 320 │                 <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
 321 │                   <circle 
 322 │                     cx="22" cy="22" r="20" 
 323 │                     fill="none" 
 324 │                     stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
 325 │                     strokeWidth="4"
 326 │                   />
 327 │                   <circle 
 328 │                     cx="22" cy="22" r="20" 
 329 │                     fill="none" 
 330 │                     stroke="#FF6B00" 
 331 │                     strokeWidth="4"
 332 │                     strokeDasharray={126}
 333 │                     strokeDashoffset={126 - (progressoTotal / 100) * 126}
 334 │                     transform="rotate(-90 22 22)"
 335 │                     strokeLinecap="round"
 336 │                   />
 337 │                 </svg>
 338 │                 <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 339 │                   {Math.round(progressoTotal)}%
 340 │                 </span>
 341 │               </div>
 342 │             </div>
 343 │           )}
 344 │         </div>
 345 │       </div>
 346 │ 
 347 │       {/* Conteúdo principal */}
 348 │       <div className="p-5">
 349 │         {/* Exibir foco principal quando definido */}
 350 │         {temFoco && focoPrincipal ? (
 351 │           <>
 352 │             {/* Informações do foco principal */}
 353 │             <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 354 │               <div className="flex gap-2 items-start">
 355 │                 <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 356 │                   <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 357 │                 </div>
 358 │                 <div>
 359 │                   <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 360 │                     <span className="font-medium">Foco principal:</span> {focoPrincipal.descricao}
 361 │                   </p>
 362 │                   {focoPrincipal.disciplinas.length > 0 && (
 363 │                     <div className="mt-1.5 flex flex-wrap gap-1.5">
 364 │                       {focoPrincipal.disciplinas.map((disciplina, idx) => (
 365 │                         <span 
 366 │                           key={idx} 
 367 │                           className={`text-xs px-2 py-0.5 rounded-full ${isLightMode ? 'bg-blue-100 text-blue-700' : 'bg-blue-900/30 text-blue-400'}`}
 368 │                         >
 369 │                           {disciplina}
 370 │                         </span>
 371 │                       ))}
 372 │                     </div>
 373 │                   )}
 374 │                 </div>
 375 │               </div>
 376 │             </div>
 377 │ 
 378 │             {/* Botão de configurações para redefinir foco */}
 379 │             <div className="absolute top-5 right-5">
 380 │               <button 
 381 │                 onClick={redefinirFoco}
 382 │                 className={`p-1.5 rounded-full ${isLightMode ? 'bg-gray-100 hover:bg-gray-200' : 'bg-gray-800 hover:bg-gray-700'} transition-colors`}
 383 │               >
 384 │                 <Settings className={`h-3.5 w-3.5 ${isLightMode ? 'text-gray-600' : 'text-gray-400'}`} />
 385 │               </button>
 386 │             </div>
 387 │ 
 388 │             {/* Lista de atividades */}
 389 │             <div className="space-y-2.5">
 390 │               {atividades.map((atividade, index) => (
 391 │                 <motion.div 
 392 │                   key={atividade.id} 
 393 │                   className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 394 │                   whileHover={{ y: -2 }}
 395 │                   onMouseEnter={() => setHoverIndex(index)}
 396 │                   onMouseLeave={() => setHoverIndex(null)}
 397 │                 >
 398 │                   {/* Indicador de prioridade para tarefas urgentes */}
 399 │                   {atividade.urgente && (
 400 │                     <div className="absolute top-0 right-0">
 401 │                       <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 402 │                     </div>
 403 │                   )}
 404 │ 
 405 │                   <div 
 406 │                     className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 407 │                       atividade.concluido 
 408 │                         ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 409 │                         : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 410 │                     }`}
 411 │                     onClick={(e) => {
 412 │                       e.stopPropagation();
 413 │                       toggleAtividade(atividade.id);
 414 │                     }}
 415 │                   >
 416 │                     {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 417 │                   </div>
 418 │ 
 419 │                   <div className="flex-1">
 420 │                     <div className="flex items-start gap-1.5">
 421 │                       <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 422 │                         {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 423 │                         {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 424 │                         {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 425 │                         {atividade.tipo === 'tarefa' && <Check className="h-3 w-3 text-purple-500" />}
 426 │                       </div>
 427 │                       <div>
 428 │                         <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 429 │                           {atividade.titulo}
 430 │                         </p>
 431 │                         <div className="flex items-center mt-1.5 gap-3">
 432 │                           <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 433 │                             <Clock className="h-3 w-3" /> {atividade.tempo}
 434 │                           </span>
 435 │                           <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 436 │                             {atividade.prazo}
 437 │                           </span>
 438 │                         </div>
 439 │                       </div>
 440 │                     </div>
 441 │ 
 442 │                     {/* Progress bar for individual activities */}
 443 │                     <div className="mt-2">
 444 │                       <Progress value={atividade.progresso} 
 445 │                         className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 446 │                     </div>
 447 │                   </div>
 448 │                 </motion.div>
 449 │               ))}
 450 │             </div>
 451 │ 
 452 │             {/* Dica do Mentor IA no final do card */}
 453 │             {focoPrincipal.dicaMentor && (
 454 │               <div className={`mt-4 p-3 rounded-lg ${isLightMode ? 'bg-green-50' : 'bg-green-900/10'} border ${isLightMode ? 'border-green-100' : 'border-green-800/30'}`}>
 455 │                 <div className="flex gap-2 items-start">
 456 │                   <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-green-100' : 'bg-green-800/30'}`}>
 457 │                     <Check className="h-3.5 w-3.5 text-green-600 dark:text-green-400" />
 458 │                   </div>
 459 │                   <p className={`text-xs ${isLightMode ? 'text-gray-700' : 'text-gray-300'}`}>
 460 │                     <span className="font-medium">Dica do Mentor:</span> {focoPrincipal.dicaMentor}
 461 │                   </p>
 462 │                 </div>
 463 │               </div>
 464 │             )}
 465 │           </>
 466 │         ) : (
 467 │           <>
 468 │             {/* Mensagem de boas-vindas para novos usuários */}
 469 │             <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 470 │               <div className="flex gap-2 items-start">
 471 │                 <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 472 │                   <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 473 │                 </div>
 474 │                 <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 475 │                   <span className="font-medium">Mentor IA:</span> Bem-vindo! Aqui você poderá definir e acompanhar suas atividades diárias prioritárias. Comece definindo seu foco de estudos.
 476 │                 </p>
 477 │               </div>
 478 │             </div>
 479 │ 
 480 │             {/* Estado vazio - Sem atividades */}
 481 │             <div className="py-12 flex flex-col items-center justify-center space-y-4">
 482 │               <div className={`p-3 rounded-full ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/10'}`}>
 483 │                 <Clock className={`h-6 w-6 text-[#FF6B00]`} />
 484 │               </div>
 485 │               <div className="text-center space-y-2">
 486 │                 <h4 className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 487 │                   Nenhuma atividade definida
 488 │                 </h4>
 489 │                 <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'} max-w-xs`}>
 490 │                   Defina um foco de estudo e adicione atividades para organizar seu dia.
 491 │                 </p>
 492 │               </div>
 493 │             </div>
 494 │           </>
 495 │         )}
 496 │ 
 497 │         {/* Footer com botão de ação e métricas */}
 498 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center relative">
 499 │           {atividades.length > 0 ? (
 500 │             <div className="flex items-center gap-2">
 501 │               <div className={`w-5 h-5 rounded-full border ${isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent'} flex items-center justify-center`}>
 502 │                 <span className={`text-xs font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-300'}`}>
 503 │                   {atividadesConcluidas}
 504 │                 </span>
 505 │               </div>
 506 │               <span className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 507 │                 {atividadesConcluidas} de {totalAtividades} atividades
 508 │               </span>
 509 │             </div>
 510 │           ) : (
 511 │             <div></div> // Espaçador para manter o layout com justify-between
 512 │           )}
 513 │ 
 514 │           <motion.button 
 515 │             onClick={() => setModalAberto(true)}
 516 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 517 │             whileHover={{ scale: 1.05 }}
 518 │             whileTap={{ scale: 0.98 }}
 519 │           >
 520 │             {atividades.length > 0 ? "Iniciar Foco" : "Definir Foco"}
 521 │             <ChevronRight className="h-3 w-3" />
 522 │           </motion.button>
 523 │ 
 524 │           {/* Exibir sentimento quando disponível */}
 525 │             {temFoco && focoPrincipal?.sentimento && (
 526 │               <div className="absolute top-2 right-2">
 527 │                 <div className="text-xs bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300 px-2 py-1 rounded-full flex items-center gap-1">
 528 │                   {focoPrincipal.sentimento === "Motivado(a)" && <Smile className="h-3 w-3" />}
 529 │                   {focoPrincipal.sentimento === "Um pouco perdido(a)" && <HelpCircle className="h-3 w-3" />}
 530 │                   {focoPrincipal.sentimento === "Cansado(a)" && <Clock className="h-3 w-3" />}
 531 │                   {focoPrincipal.sentimento === "Ansioso(a)" && <BarChart2 className="h-3 w-3" />}
 532 │                   <span>{focoPrincipal.sentimento}</span>
 533 │                 </div>
 534 │               </div>
 535 │             )}
 536 │         </div>
 537 │       </div>
 538 │ 
 539 │       {/* Modal para definir o foco */}
 540 │       <AnimatePresence>
 541 │         {modalAberto && (
 542 │           <DefinirFocoModal 
 543 │             open={modalAberto}
 544 │             onClose={() => setModalAberto(false)}
 545 │             onSave={processarDefinicaoFoco}
 546 │           />
 547 │         )}
 548 │       </AnimatePresence>
 549 │     </motion.div>
 550 │   );
 551 │ }
 552 │ import React, { useState } from "react";
 553 │ import { X } from "lucide-react";
 554 │ import { useTheme } from "@/components/ThemeProvider";
     ·          ────┬───
     ·              ╰── `useTheme` redefined here
 555 │ import { motion, AnimatePresence } from "framer-motion";
 556 │ import { Separator } from "@/components/ui/separator";
 557 │ import { Input } from "@/components/ui/input";
     ╰────

  × the name `motion` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:1:1]
   1 │ import React, { useState, useEffect } from "react";
   2 │ import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy, PlusCircle, Settings, Smile, HelpCircle, BarChart2 } from "lucide-react";
   3 │ import { useTheme } from "@/components/ThemeProvider";
   4 │ import { motion, AnimatePresence } from "framer-motion";
     ·          ───┬──
     ·             ╰── previous definition of `motion` here
   5 │ import { Progress } from "@/components/ui/progress";
   6 │ import DefinirFocoModal, { FocoData } from "./DefinirFocoModal";
   7 │ 
   8 │ // Tipo para atividades
   9 │ interface Atividade {
  10 │   id: number;
  11 │   titulo: string;
  12 │   tipo: "video" | "exercicio" | "revisao" | "tarefa";
  13 │   tempo: string;
  14 │   prazo: string;
  15 │   urgente: boolean;
  16 │   concluido: boolean;
  17 │   progresso: number;
  18 │ }
  19 │ 
  20 │ interface FocoPrincipal {
  21 │   titulo: string;
  22 │   descricao: string;
  23 │   disciplinas: string[];
  24 │   tempoTotal: string;
  25 │   dicaMentor?: string;
  26 │   sentimento?: string;
  27 │ }
  28 │ 
  29 │ export default function FocoDoDiaCard() {
  30 │   const { theme } = useTheme();
  31 │   const isLightMode = theme === "light";
  32 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  33 │   const [atividades, setAtividades] = useState<Atividade[]>([]);
  34 │   const [focoPrincipal, setFocoPrincipal] = useState<FocoPrincipal | null>(null);
  35 │   const [temFoco, setTemFoco] = useState<boolean>(false);
  36 │   const [carregando, setCarregando] = useState<boolean>(true);
  37 │   const [modalAberto, setModalAberto] = useState<boolean>(false);
  38 │   const [gerando, setGerando] = useState<boolean>(false);
  39 │ 
  40 │   // Simular carregamento de dados
  41 │   useEffect(() => {
  42 │     // Aqui faremos uma simulação de carregamento de dados
  43 │     // No futuro, isso seria substituído por chamadas reais à API
  44 │     const timeout = setTimeout(() => {
  45 │       setCarregando(false);
  46 │ 
  47 │       // Verificar se temos dados do foco salvos no localStorage
  48 │       const focoDadosSalvos = localStorage.getItem('focoDia');
  49 │       if (focoDadosSalvos) {
  50 │         try {
  51 │           const dados = JSON.parse(focoDadosSalvos);
  52 │           setFocoPrincipal(dados.focoPrincipal);
  53 │           setAtividades(dados.atividades);
  54 │           setTemFoco(true);
  55 │         } catch (error) {
  56 │           console.error("Erro ao carregar dados do foco:", error);
  57 │         }
  58 │       }
  59 │     }, 1000);
  60 │ 
  61 │     return () => clearTimeout(timeout);
  62 │   }, []);
  63 │ 
  64 │   // Função para lidar com a conclusão de atividades
  65 │   const toggleAtividade = (id: number) => {
  66 │     // Atualizar o estado local - em uma aplicação real, isto também atualizaria o backend
  67 │     const atualizadas = atividades.map(ativ => 
  68 │       ativ.id === id ? { ...ativ, concluido: !ativ.concluido } : ativ
  69 │     );
  70 │ 
  71 │     setAtividades(atualizadas);
  72 │ 
  73 │     // Atualizar no localStorage
  74 │     if (focoPrincipal) {
  75 │       localStorage.setItem('focoDia', JSON.stringify({
  76 │         focoPrincipal,
  77 │         atividades: atualizadas
  78 │       }));
  79 │     }
  80 │   };
  81 │ 
  82 │   // Função para processar dados do modal e gerar o foco
  83 │   const processarDefinicaoFoco = (dados: FocoData) => {
  84 │     setModalAberto(false);
  85 │     setGerando(true);
  86 │ 
  87 │     // Simulando processamento pelo backend/IA
  88 │     setTimeout(() => {
  89 │       // Criar foco principal baseado nos dados recebidos
  90 │       const novoFocoPrincipal: FocoPrincipal = {
  91 │         titulo: dados.objetivo,
  92 │         descricao: dados.objetivoPersonalizado || dados.objetivo,
  93 │         disciplinas: dados.disciplinas,
  94 │         tempoTotal: `${Math.round(dados.tempoEstudo / 60)} hora${dados.tempoEstudo >= 120 ? 's' : ''}`,
  95 │         dicaMentor: gerarDicaMentor(dados.estado),
  96 │         sentimento: dados.estado
  97 │       };
  98 │ 
  99 │       // Gerar atividades baseadas nas informações
 100 │       const novasAtividades = gerarAtividades(dados);
 101 │ 
 102 │       // Atualizar estados
 103 │       setFocoPrincipal(novoFocoPrincipal);
 104 │       setAtividades(novasAtividades);
 105 │       setTemFoco(true);
 106 │       setGerando(false);
 107 │ 
 108 │       // Salvar no localStorage
 109 │       localStorage.setItem('focoDia', JSON.stringify({
 110 │         focoPrincipal: novoFocoPrincipal,
 111 │         atividades: novasAtividades
 112 │       }));
 113 │     }, 2000);
 114 │   };
 115 │ 
 116 │   // Função para gerar dica baseada no estado emocional
 117 │   const gerarDicaMentor = (estado: string): string => {
 118 │     const dicas = {
 119 │       "Motivado(a)": "Aproveite seu ânimo atual para focar nos tópicos mais desafiadores primeiro!",
 120 │       "Um pouco perdido(a)": "Divida seu estudo em etapas menores e comemore cada progresso.",
 121 │       "Cansado(a)": "Alterne entre tópicos diferentes a cada 30 minutos para manter o foco.",
 122 │       "Ansioso(a)": "Pratique 2 minutos de respiração profunda antes de cada sessão de estudo."
 123 │     };
 124 │ 
 125 │     return dicas[estado as keyof typeof dicas] || "Estabeleça pequenas metas e celebre cada conquista no seu estudo.";
 126 │   };
 127 │ 
 128 │   // Função para gerar atividades com base nos dados do formulário
 129 │   const gerarAtividades = (dados: FocoData): Atividade[] => {
 130 │     const tiposAtividade: ("video" | "exercicio" | "revisao" | "tarefa")[] = ["video", "exercicio", "revisao", "tarefa"];
 131 │ 
 132 │     // Se o usuário selecionou tarefas específicas, incluí-las
 133 │     const atividadesTarefas = dados.tarefasSelecionadas.map((tarefa, index) => ({
 134 │       id: Date.now() + index,
 135 │       titulo: tarefa,
 136 │       tipo: "tarefa" as const,
 137 │       tempo: `${Math.floor(Math.random() * 30) + 15}min`,
 138 │       prazo: ["hoje", "amanhã", "esta semana"][Math.floor(Math.random() * 3)],
 139 │       urgente: Math.random() > 0.7,
 140 │       concluido: false,
 141 │       progresso: 0
 142 │     }));
 143 │ 
 144 │     // Gerar atividades extras com base nas disciplinas
 145 │     const atividadesExtra = dados.disciplinas.slice(0, 3).map((disciplina, index) => {
 146 │       const tipo = tiposAtividade[Math.floor(Math.random() * tiposAtividade.length)];
 147 │       const titulos = {
 148 │         video: [`Assistir vídeo de ${disciplina}`, `Aula sobre conceitos de ${disciplina}`],
 149 │         exercicio: [`Exercícios de ${disciplina}`, `Resolver problemas de ${disciplina}`],
 150 │         revisao: [`Revisar anotações de ${disciplina}`, `Resumo do capítulo de ${disciplina}`],
 151 │         tarefa: [`Trabalho de ${disciplina}`, `Projeto de ${disciplina}`]
 152 │       };
 153 │ 
 154 │       return {
 155 │         id: Date.now() + atividadesTarefas.length + index,
 156 │         titulo: titulos[tipo][Math.floor(Math.random() * 2)],
 157 │         tipo,
 158 │         tempo: `${Math.floor(Math.random() * 45) + 15}min`,
 159 │         prazo: ["hoje", "amanhã", "esta semana"][Math.floor(Math.random() * 3)],
 160 │         urgente: Math.random() > 0.7,
 161 │         concluido: false,
 162 │         progresso: 0
 163 │       };
 164 │     });
 165 │ 
 166 │     // Combinar todas as atividades e limitar a 4 no máximo
 167 │     return [...atividadesTarefas, ...atividadesExtra].slice(0, 4);
 168 │   };
 169 │ 
 170 │   // Função para reiniciar o foco
 171 │   const redefinirFoco = () => {
 172 │     setModalAberto(true);
 173 │   };
 174 │ 
 175 │   // Calcular progresso total das atividades
 176 │   const totalAtividades = atividades.length;
 177 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
 178 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
 179 │   const progressoAtividades = totalAtividades > 0 
 180 │     ? Math.round((atividadesConcluidas / totalAtividades) * 100) 
 181 │     : 0;
 182 │ 
 183 │   // Renderizar estado de carregamento
 184 │   if (carregando) {
 185 │     return (
 186 │       <motion.div 
 187 │         className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 188 │         initial={{ opacity: 0, y: 20 }}
 189 │         animate={{ opacity: 1, y: 0 }}
 190 │         transition={{ duration: 0.5, ease: "easeOut" }}
 191 │       >
 192 │         <div className="h-full flex items-center justify-center p-8">
 193 │           <div className="animate-pulse flex flex-col items-center space-y-4 w-full">
 194 │             <div className="w-full flex justify-between items-center">
 195 │               <div className="h-8 bg-gray-300 dark:bg-gray-700 rounded-md w-1/3"></div>
 196 │               <div className="h-8 w-8 bg-gray-300 dark:bg-gray-700 rounded-full"></div>
 197 │             </div>
 198 │             <div className="h-16 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 199 │             <div className="space-y-3 w-full">
 200 │               <div className="h-12 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 201 │               <div className="h-12 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 202 │             </div>
 203 │           </div>
 204 │         </div>
 205 │       </motion.div>
 206 │     );
 207 │   }
 208 │ 
 209 │   // Renderizar estado de geração de foco
 210 │   if (gerando) {
 211 │     return (
 212 │       <motion.div 
 213 │         className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 214 │         initial={{ opacity: 0, y: 20 }}
 215 │         animate={{ opacity: 1, y: 0 }}
 216 │         transition={{ duration: 0.5, ease: "easeOut" }}
 217 │       >
 218 │         <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 219 │           <div className="flex items-center justify-between">
 220 │             <div className="flex items-center gap-3">
 221 │               <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
 222 │                 <Flame className={`h-5 w-5 text-[#FF6B00] animate-pulse`} />
 223 │               </div>
 224 │               <div>
 225 │                 <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
 226 │                   Seu Foco Hoje
 227 │                 </h3>
 228 │               </div>
 229 │             </div>
 230 │           </div>
 231 │         </div>
 232 │ 
 233 │         <div className="h-full p-8 flex flex-col items-center justify-center">
 234 │           <div className="flex flex-col items-center space-y-4">
 235 │             <div className={`p-3 rounded-full ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 236 │               <motion.div
 237 │                 animate={{
 238 │                   rotate: [0, 360]
 239 │                 }}
 240 │                 transition={{
 241 │                   duration: 2,
 242 │                   repeat: Infinity,
 243 │                   ease: "linear"
 244 │                 }}
 245 │               >
 246 │                 <Clock className={`h-6 w-6 text-[#FF6B00]`} />
 247 │               </motion.div>
 248 │             </div>
 249 │             <div className="text-center space-y-2">
 250 │               <h4 className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 251 │                 Organizando seu dia...
 252 │               </h4>
 253 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'} max-w-xs`}>
 254 │                 O Mentor IA está analisando suas preferências e criando seu plano de estudos personalizado.
 255 │               </p>
 256 │             </div>
 257 │ 
 258 │             <div className="w-full max-w-xs mt-4">
 259 │               <div className="h-1.5 w-full bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
 260 │                 <motion.div 
 261 │                   className="h-full bg-[#FF6B00]"
 262 │                   animate={{
 263 │                     width: ['0%', '100%']
 264 │                   }}
 265 │                   transition={{
 266 │                     duration: 2,
 267 │                     ease: "easeInOut"
 268 │                   }}
 269 │                 />
 270 │               </div>
 271 │             </div>
 272 │           </div>
 273 │         </div>
 274 │       </motion.div>
 275 │     );
 276 │   }
 277 │ 
 278 │   return (
 279 │     <motion.div 
 280 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 281 │       initial={{ opacity: 0, y: 20 }}
 282 │       animate={{ opacity: 1, y: 0 }}
 283 │       transition={{ duration: 0.5, ease: "easeOut" }}
 284 │     >
 285 │       {/* Header elegante com gradiente */}
 286 │       <div className={`p-5 relative ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 287 │         {/* Barra de progresso interativa no topo */}
 288 │         <div className="absolute top-0 left-0 h-1 bg-[#FF6B00]/20 w-full overflow-hidden">
 289 │           <motion.div 
 290 │             className="h-full bg-[#FF6B00]" 
 291 │             initial={{ width: '0%' }}
 292 │             animate={{ width: `${progressoTotal}%` }}
 293 │             transition={{ duration: 0.5, ease: "easeOut" }}
 294 │           />
 295 │         </div>
 296 │ 
 297 │         <div className="flex items-center justify-between">
 298 │           <div className="flex items-center gap-3">
 299 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
 300 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
 301 │             </div>
 302 │             <div>
 303 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
 304 │                 Seu Foco Hoje
 305 │               </h3>
 306 │               {temFoco && focoPrincipal && (
 307 │                 <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
 308 │                   <span className="font-bold text-[#FF6B00]">
 309 │                     {focoPrincipal.titulo}
 310 │                   </span>
 311 │                 </p>
 312 │               )}
 313 │             </div>
 314 │           </div>
 315 │ 
 316 │           {/* Indicador de progresso circular - mostrado apenas se houver atividades */}
 317 │           {totalAtividades > 0 && (
 318 │             <div className="hidden md:flex items-center">
 319 │               <div className="relative h-12 w-12 flex items-center justify-center">
 320 │                 <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
 321 │                   <circle 
 322 │                     cx="22" cy="22" r="20" 
 323 │                     fill="none" 
 324 │                     stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
 325 │                     strokeWidth="4"
 326 │                   />
 327 │                   <circle 
 328 │                     cx="22" cy="22" r="20" 
 329 │                     fill="none" 
 330 │                     stroke="#FF6B00" 
 331 │                     strokeWidth="4"
 332 │                     strokeDasharray={126}
 333 │                     strokeDashoffset={126 - (progressoTotal / 100) * 126}
 334 │                     transform="rotate(-90 22 22)"
 335 │                     strokeLinecap="round"
 336 │                   />
 337 │                 </svg>
 338 │                 <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 339 │                   {Math.round(progressoTotal)}%
 340 │                 </span>
 341 │               </div>
 342 │             </div>
 343 │           )}
 344 │         </div>
 345 │       </div>
 346 │ 
 347 │       {/* Conteúdo principal */}
 348 │       <div className="p-5">
 349 │         {/* Exibir foco principal quando definido */}
 350 │         {temFoco && focoPrincipal ? (
 351 │           <>
 352 │             {/* Informações do foco principal */}
 353 │             <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 354 │               <div className="flex gap-2 items-start">
 355 │                 <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 356 │                   <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 357 │                 </div>
 358 │                 <div>
 359 │                   <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 360 │                     <span className="font-medium">Foco principal:</span> {focoPrincipal.descricao}
 361 │                   </p>
 362 │                   {focoPrincipal.disciplinas.length > 0 && (
 363 │                     <div className="mt-1.5 flex flex-wrap gap-1.5">
 364 │                       {focoPrincipal.disciplinas.map((disciplina, idx) => (
 365 │                         <span 
 366 │                           key={idx} 
 367 │                           className={`text-xs px-2 py-0.5 rounded-full ${isLightMode ? 'bg-blue-100 text-blue-700' : 'bg-blue-900/30 text-blue-400'}`}
 368 │                         >
 369 │                           {disciplina}
 370 │                         </span>
 371 │                       ))}
 372 │                     </div>
 373 │                   )}
 374 │                 </div>
 375 │               </div>
 376 │             </div>
 377 │ 
 378 │             {/* Botão de configurações para redefinir foco */}
 379 │             <div className="absolute top-5 right-5">
 380 │               <button 
 381 │                 onClick={redefinirFoco}
 382 │                 className={`p-1.5 rounded-full ${isLightMode ? 'bg-gray-100 hover:bg-gray-200' : 'bg-gray-800 hover:bg-gray-700'} transition-colors`}
 383 │               >
 384 │                 <Settings className={`h-3.5 w-3.5 ${isLightMode ? 'text-gray-600' : 'text-gray-400'}`} />
 385 │               </button>
 386 │             </div>
 387 │ 
 388 │             {/* Lista de atividades */}
 389 │             <div className="space-y-2.5">
 390 │               {atividades.map((atividade, index) => (
 391 │                 <motion.div 
 392 │                   key={atividade.id} 
 393 │                   className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 394 │                   whileHover={{ y: -2 }}
 395 │                   onMouseEnter={() => setHoverIndex(index)}
 396 │                   onMouseLeave={() => setHoverIndex(null)}
 397 │                 >
 398 │                   {/* Indicador de prioridade para tarefas urgentes */}
 399 │                   {atividade.urgente && (
 400 │                     <div className="absolute top-0 right-0">
 401 │                       <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 402 │                     </div>
 403 │                   )}
 404 │ 
 405 │                   <div 
 406 │                     className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 407 │                       atividade.concluido 
 408 │                         ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 409 │                         : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 410 │                     }`}
 411 │                     onClick={(e) => {
 412 │                       e.stopPropagation();
 413 │                       toggleAtividade(atividade.id);
 414 │                     }}
 415 │                   >
 416 │                     {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 417 │                   </div>
 418 │ 
 419 │                   <div className="flex-1">
 420 │                     <div className="flex items-start gap-1.5">
 421 │                       <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 422 │                         {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 423 │                         {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 424 │                         {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 425 │                         {atividade.tipo === 'tarefa' && <Check className="h-3 w-3 text-purple-500" />}
 426 │                       </div>
 427 │                       <div>
 428 │                         <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 429 │                           {atividade.titulo}
 430 │                         </p>
 431 │                         <div className="flex items-center mt-1.5 gap-3">
 432 │                           <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 433 │                             <Clock className="h-3 w-3" /> {atividade.tempo}
 434 │                           </span>
 435 │                           <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 436 │                             {atividade.prazo}
 437 │                           </span>
 438 │                         </div>
 439 │                       </div>
 440 │                     </div>
 441 │ 
 442 │                     {/* Progress bar for individual activities */}
 443 │                     <div className="mt-2">
 444 │                       <Progress value={atividade.progresso} 
 445 │                         className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 446 │                     </div>
 447 │                   </div>
 448 │                 </motion.div>
 449 │               ))}
 450 │             </div>
 451 │ 
 452 │             {/* Dica do Mentor IA no final do card */}
 453 │             {focoPrincipal.dicaMentor && (
 454 │               <div className={`mt-4 p-3 rounded-lg ${isLightMode ? 'bg-green-50' : 'bg-green-900/10'} border ${isLightMode ? 'border-green-100' : 'border-green-800/30'}`}>
 455 │                 <div className="flex gap-2 items-start">
 456 │                   <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-green-100' : 'bg-green-800/30'}`}>
 457 │                     <Check className="h-3.5 w-3.5 text-green-600 dark:text-green-400" />
 458 │                   </div>
 459 │                   <p className={`text-xs ${isLightMode ? 'text-gray-700' : 'text-gray-300'}`}>
 460 │                     <span className="font-medium">Dica do Mentor:</span> {focoPrincipal.dicaMentor}
 461 │                   </p>
 462 │                 </div>
 463 │               </div>
 464 │             )}
 465 │           </>
 466 │         ) : (
 467 │           <>
 468 │             {/* Mensagem de boas-vindas para novos usuários */}
 469 │             <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 470 │               <div className="flex gap-2 items-start">
 471 │                 <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 472 │                   <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 473 │                 </div>
 474 │                 <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 475 │                   <span className="font-medium">Mentor IA:</span> Bem-vindo! Aqui você poderá definir e acompanhar suas atividades diárias prioritárias. Comece definindo seu foco de estudos.
 476 │                 </p>
 477 │               </div>
 478 │             </div>
 479 │ 
 480 │             {/* Estado vazio - Sem atividades */}
 481 │             <div className="py-12 flex flex-col items-center justify-center space-y-4">
 482 │               <div className={`p-3 rounded-full ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/10'}`}>
 483 │                 <Clock className={`h-6 w-6 text-[#FF6B00]`} />
 484 │               </div>
 485 │               <div className="text-center space-y-2">
 486 │                 <h4 className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 487 │                   Nenhuma atividade definida
 488 │                 </h4>
 489 │                 <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'} max-w-xs`}>
 490 │                   Defina um foco de estudo e adicione atividades para organizar seu dia.
 491 │                 </p>
 492 │               </div>
 493 │             </div>
 494 │           </>
 495 │         )}
 496 │ 
 497 │         {/* Footer com botão de ação e métricas */}
 498 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center relative">
 499 │           {atividades.length > 0 ? (
 500 │             <div className="flex items-center gap-2">
 501 │               <div className={`w-5 h-5 rounded-full border ${isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent'} flex items-center justify-center`}>
 502 │                 <span className={`text-xs font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-300'}`}>
 503 │                   {atividadesConcluidas}
 504 │                 </span>
 505 │               </div>
 506 │               <span className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 507 │                 {atividadesConcluidas} de {totalAtividades} atividades
 508 │               </span>
 509 │             </div>
 510 │           ) : (
 511 │             <div></div> // Espaçador para manter o layout com justify-between
 512 │           )}
 513 │ 
 514 │           <motion.button 
 515 │             onClick={() => setModalAberto(true)}
 516 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 517 │             whileHover={{ scale: 1.05 }}
 518 │             whileTap={{ scale: 0.98 }}
 519 │           >
 520 │             {atividades.length > 0 ? "Iniciar Foco" : "Definir Foco"}
 521 │             <ChevronRight className="h-3 w-3" />
 522 │           </motion.button>
 523 │ 
 524 │           {/* Exibir sentimento quando disponível */}
 525 │             {temFoco && focoPrincipal?.sentimento && (
 526 │               <div className="absolute top-2 right-2">
 527 │                 <div className="text-xs bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300 px-2 py-1 rounded-full flex items-center gap-1">
 528 │                   {focoPrincipal.sentimento === "Motivado(a)" && <Smile className="h-3 w-3" />}
 529 │                   {focoPrincipal.sentimento === "Um pouco perdido(a)" && <HelpCircle className="h-3 w-3" />}
 530 │                   {focoPrincipal.sentimento === "Cansado(a)" && <Clock className="h-3 w-3" />}
 531 │                   {focoPrincipal.sentimento === "Ansioso(a)" && <BarChart2 className="h-3 w-3" />}
 532 │                   <span>{focoPrincipal.sentimento}</span>
 533 │                 </div>
 534 │               </div>
 535 │             )}
 536 │         </div>
 537 │       </div>
 538 │ 
 539 │       {/* Modal para definir o foco */}
 540 │       <AnimatePresence>
 541 │         {modalAberto && (
 542 │           <DefinirFocoModal 
 543 │             open={modalAberto}
 544 │             onClose={() => setModalAberto(false)}
 545 │             onSave={processarDefinicaoFoco}
 546 │           />
 547 │         )}
 548 │       </AnimatePresence>
 549 │     </motion.div>
 550 │   );
 551 │ }
 552 │ import React, { useState } from "react";
 553 │ import { X } from "lucide-react";
 554 │ import { useTheme } from "@/components/ThemeProvider";
 555 │ import { motion, AnimatePresence } from "framer-motion";
     ·          ───┬──
     ·             ╰── `motion` redefined here
 556 │ import { Separator } from "@/components/ui/separator";
 557 │ import { Input } from "@/components/ui/input";
 558 │ import { Label } from "@/components/ui/label";
     ╰────

  × the name `AnimatePresence` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:1:1]
   1 │ import React, { useState, useEffect } from "react";
   2 │ import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy, PlusCircle, Settings, Smile, HelpCircle, BarChart2 } from "lucide-react";
   3 │ import { useTheme } from "@/components/ThemeProvider";
   4 │ import { motion, AnimatePresence } from "framer-motion";
     ·                  ───────┬───────
     ·                         ╰── previous definition of `AnimatePresence` here
   5 │ import { Progress } from "@/components/ui/progress";
   6 │ import DefinirFocoModal, { FocoData } from "./DefinirFocoModal";
   7 │ 
   8 │ // Tipo para atividades
   9 │ interface Atividade {
  10 │   id: number;
  11 │   titulo: string;
  12 │   tipo: "video" | "exercicio" | "revisao" | "tarefa";
  13 │   tempo: string;
  14 │   prazo: string;
  15 │   urgente: boolean;
  16 │   concluido: boolean;
  17 │   progresso: number;
  18 │ }
  19 │ 
  20 │ interface FocoPrincipal {
  21 │   titulo: string;
  22 │   descricao: string;
  23 │   disciplinas: string[];
  24 │   tempoTotal: string;
  25 │   dicaMentor?: string;
  26 │   sentimento?: string;
  27 │ }
  28 │ 
  29 │ export default function FocoDoDiaCard() {
  30 │   const { theme } = useTheme();
  31 │   const isLightMode = theme === "light";
  32 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  33 │   const [atividades, setAtividades] = useState<Atividade[]>([]);
  34 │   const [focoPrincipal, setFocoPrincipal] = useState<FocoPrincipal | null>(null);
  35 │   const [temFoco, setTemFoco] = useState<boolean>(false);
  36 │   const [carregando, setCarregando] = useState<boolean>(true);
  37 │   const [modalAberto, setModalAberto] = useState<boolean>(false);
  38 │   const [gerando, setGerando] = useState<boolean>(false);
  39 │ 
  40 │   // Simular carregamento de dados
  41 │   useEffect(() => {
  42 │     // Aqui faremos uma simulação de carregamento de dados
  43 │     // No futuro, isso seria substituído por chamadas reais à API
  44 │     const timeout = setTimeout(() => {
  45 │       setCarregando(false);
  46 │ 
  47 │       // Verificar se temos dados do foco salvos no localStorage
  48 │       const focoDadosSalvos = localStorage.getItem('focoDia');
  49 │       if (focoDadosSalvos) {
  50 │         try {
  51 │           const dados = JSON.parse(focoDadosSalvos);
  52 │           setFocoPrincipal(dados.focoPrincipal);
  53 │           setAtividades(dados.atividades);
  54 │           setTemFoco(true);
  55 │         } catch (error) {
  56 │           console.error("Erro ao carregar dados do foco:", error);
  57 │         }
  58 │       }
  59 │     }, 1000);
  60 │ 
  61 │     return () => clearTimeout(timeout);
  62 │   }, []);
  63 │ 
  64 │   // Função para lidar com a conclusão de atividades
  65 │   const toggleAtividade = (id: number) => {
  66 │     // Atualizar o estado local - em uma aplicação real, isto também atualizaria o backend
  67 │     const atualizadas = atividades.map(ativ => 
  68 │       ativ.id === id ? { ...ativ, concluido: !ativ.concluido } : ativ
  69 │     );
  70 │ 
  71 │     setAtividades(atualizadas);
  72 │ 
  73 │     // Atualizar no localStorage
  74 │     if (focoPrincipal) {
  75 │       localStorage.setItem('focoDia', JSON.stringify({
  76 │         focoPrincipal,
  77 │         atividades: atualizadas
  78 │       }));
  79 │     }
  80 │   };
  81 │ 
  82 │   // Função para processar dados do modal e gerar o foco
  83 │   const processarDefinicaoFoco = (dados: FocoData) => {
  84 │     setModalAberto(false);
  85 │     setGerando(true);
  86 │ 
  87 │     // Simulando processamento pelo backend/IA
  88 │     setTimeout(() => {
  89 │       // Criar foco principal baseado nos dados recebidos
  90 │       const novoFocoPrincipal: FocoPrincipal = {
  91 │         titulo: dados.objetivo,
  92 │         descricao: dados.objetivoPersonalizado || dados.objetivo,
  93 │         disciplinas: dados.disciplinas,
  94 │         tempoTotal: `${Math.round(dados.tempoEstudo / 60)} hora${dados.tempoEstudo >= 120 ? 's' : ''}`,
  95 │         dicaMentor: gerarDicaMentor(dados.estado),
  96 │         sentimento: dados.estado
  97 │       };
  98 │ 
  99 │       // Gerar atividades baseadas nas informações
 100 │       const novasAtividades = gerarAtividades(dados);
 101 │ 
 102 │       // Atualizar estados
 103 │       setFocoPrincipal(novoFocoPrincipal);
 104 │       setAtividades(novasAtividades);
 105 │       setTemFoco(true);
 106 │       setGerando(false);
 107 │ 
 108 │       // Salvar no localStorage
 109 │       localStorage.setItem('focoDia', JSON.stringify({
 110 │         focoPrincipal: novoFocoPrincipal,
 111 │         atividades: novasAtividades
 112 │       }));
 113 │     }, 2000);
 114 │   };
 115 │ 
 116 │   // Função para gerar dica baseada no estado emocional
 117 │   const gerarDicaMentor = (estado: string): string => {
 118 │     const dicas = {
 119 │       "Motivado(a)": "Aproveite seu ânimo atual para focar nos tópicos mais desafiadores primeiro!",
 120 │       "Um pouco perdido(a)": "Divida seu estudo em etapas menores e comemore cada progresso.",
 121 │       "Cansado(a)": "Alterne entre tópicos diferentes a cada 30 minutos para manter o foco.",
 122 │       "Ansioso(a)": "Pratique 2 minutos de respiração profunda antes de cada sessão de estudo."
 123 │     };
 124 │ 
 125 │     return dicas[estado as keyof typeof dicas] || "Estabeleça pequenas metas e celebre cada conquista no seu estudo.";
 126 │   };
 127 │ 
 128 │   // Função para gerar atividades com base nos dados do formulário
 129 │   const gerarAtividades = (dados: FocoData): Atividade[] => {
 130 │     const tiposAtividade: ("video" | "exercicio" | "revisao" | "tarefa")[] = ["video", "exercicio", "revisao", "tarefa"];
 131 │ 
 132 │     // Se o usuário selecionou tarefas específicas, incluí-las
 133 │     const atividadesTarefas = dados.tarefasSelecionadas.map((tarefa, index) => ({
 134 │       id: Date.now() + index,
 135 │       titulo: tarefa,
 136 │       tipo: "tarefa" as const,
 137 │       tempo: `${Math.floor(Math.random() * 30) + 15}min`,
 138 │       prazo: ["hoje", "amanhã", "esta semana"][Math.floor(Math.random() * 3)],
 139 │       urgente: Math.random() > 0.7,
 140 │       concluido: false,
 141 │       progresso: 0
 142 │     }));
 143 │ 
 144 │     // Gerar atividades extras com base nas disciplinas
 145 │     const atividadesExtra = dados.disciplinas.slice(0, 3).map((disciplina, index) => {
 146 │       const tipo = tiposAtividade[Math.floor(Math.random() * tiposAtividade.length)];
 147 │       const titulos = {
 148 │         video: [`Assistir vídeo de ${disciplina}`, `Aula sobre conceitos de ${disciplina}`],
 149 │         exercicio: [`Exercícios de ${disciplina}`, `Resolver problemas de ${disciplina}`],
 150 │         revisao: [`Revisar anotações de ${disciplina}`, `Resumo do capítulo de ${disciplina}`],
 151 │         tarefa: [`Trabalho de ${disciplina}`, `Projeto de ${disciplina}`]
 152 │       };
 153 │ 
 154 │       return {
 155 │         id: Date.now() + atividadesTarefas.length + index,
 156 │         titulo: titulos[tipo][Math.floor(Math.random() * 2)],
 157 │         tipo,
 158 │         tempo: `${Math.floor(Math.random() * 45) + 15}min`,
 159 │         prazo: ["hoje", "amanhã", "esta semana"][Math.floor(Math.random() * 3)],
 160 │         urgente: Math.random() > 0.7,
 161 │         concluido: false,
 162 │         progresso: 0
 163 │       };
 164 │     });
 165 │ 
 166 │     // Combinar todas as atividades e limitar a 4 no máximo
 167 │     return [...atividadesTarefas, ...atividadesExtra].slice(0, 4);
 168 │   };
 169 │ 
 170 │   // Função para reiniciar o foco
 171 │   const redefinirFoco = () => {
 172 │     setModalAberto(true);
 173 │   };
 174 │ 
 175 │   // Calcular progresso total das atividades
 176 │   const totalAtividades = atividades.length;
 177 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
 178 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
 179 │   const progressoAtividades = totalAtividades > 0 
 180 │     ? Math.round((atividadesConcluidas / totalAtividades) * 100) 
 181 │     : 0;
 182 │ 
 183 │   // Renderizar estado de carregamento
 184 │   if (carregando) {
 185 │     return (
 186 │       <motion.div 
 187 │         className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 188 │         initial={{ opacity: 0, y: 20 }}
 189 │         animate={{ opacity: 1, y: 0 }}
 190 │         transition={{ duration: 0.5, ease: "easeOut" }}
 191 │       >
 192 │         <div className="h-full flex items-center justify-center p-8">
 193 │           <div className="animate-pulse flex flex-col items-center space-y-4 w-full">
 194 │             <div className="w-full flex justify-between items-center">
 195 │               <div className="h-8 bg-gray-300 dark:bg-gray-700 rounded-md w-1/3"></div>
 196 │               <div className="h-8 w-8 bg-gray-300 dark:bg-gray-700 rounded-full"></div>
 197 │             </div>
 198 │             <div className="h-16 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 199 │             <div className="space-y-3 w-full">
 200 │               <div className="h-12 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 201 │               <div className="h-12 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 202 │             </div>
 203 │           </div>
 204 │         </div>
 205 │       </motion.div>
 206 │     );
 207 │   }
 208 │ 
 209 │   // Renderizar estado de geração de foco
 210 │   if (gerando) {
 211 │     return (
 212 │       <motion.div 
 213 │         className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 214 │         initial={{ opacity: 0, y: 20 }}
 215 │         animate={{ opacity: 1, y: 0 }}
 216 │         transition={{ duration: 0.5, ease: "easeOut" }}
 217 │       >
 218 │         <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 219 │           <div className="flex items-center justify-between">
 220 │             <div className="flex items-center gap-3">
 221 │               <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
 222 │                 <Flame className={`h-5 w-5 text-[#FF6B00] animate-pulse`} />
 223 │               </div>
 224 │               <div>
 225 │                 <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
 226 │                   Seu Foco Hoje
 227 │                 </h3>
 228 │               </div>
 229 │             </div>
 230 │           </div>
 231 │         </div>
 232 │ 
 233 │         <div className="h-full p-8 flex flex-col items-center justify-center">
 234 │           <div className="flex flex-col items-center space-y-4">
 235 │             <div className={`p-3 rounded-full ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 236 │               <motion.div
 237 │                 animate={{
 238 │                   rotate: [0, 360]
 239 │                 }}
 240 │                 transition={{
 241 │                   duration: 2,
 242 │                   repeat: Infinity,
 243 │                   ease: "linear"
 244 │                 }}
 245 │               >
 246 │                 <Clock className={`h-6 w-6 text-[#FF6B00]`} />
 247 │               </motion.div>
 248 │             </div>
 249 │             <div className="text-center space-y-2">
 250 │               <h4 className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 251 │                 Organizando seu dia...
 252 │               </h4>
 253 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'} max-w-xs`}>
 254 │                 O Mentor IA está analisando suas preferências e criando seu plano de estudos personalizado.
 255 │               </p>
 256 │             </div>
 257 │ 
 258 │             <div className="w-full max-w-xs mt-4">
 259 │               <div className="h-1.5 w-full bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
 260 │                 <motion.div 
 261 │                   className="h-full bg-[#FF6B00]"
 262 │                   animate={{
 263 │                     width: ['0%', '100%']
 264 │                   }}
 265 │                   transition={{
 266 │                     duration: 2,
 267 │                     ease: "easeInOut"
 268 │                   }}
 269 │                 />
 270 │               </div>
 271 │             </div>
 272 │           </div>
 273 │         </div>
 274 │       </motion.div>
 275 │     );
 276 │   }
 277 │ 
 278 │   return (
 279 │     <motion.div 
 280 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 281 │       initial={{ opacity: 0, y: 20 }}
 282 │       animate={{ opacity: 1, y: 0 }}
 283 │       transition={{ duration: 0.5, ease: "easeOut" }}
 284 │     >
 285 │       {/* Header elegante com gradiente */}
 286 │       <div className={`p-5 relative ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 287 │         {/* Barra de progresso interativa no topo */}
 288 │         <div className="absolute top-0 left-0 h-1 bg-[#FF6B00]/20 w-full overflow-hidden">
 289 │           <motion.div 
 290 │             className="h-full bg-[#FF6B00]" 
 291 │             initial={{ width: '0%' }}
 292 │             animate={{ width: `${progressoTotal}%` }}
 293 │             transition={{ duration: 0.5, ease: "easeOut" }}
 294 │           />
 295 │         </div>
 296 │ 
 297 │         <div className="flex items-center justify-between">
 298 │           <div className="flex items-center gap-3">
 299 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
 300 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
 301 │             </div>
 302 │             <div>
 303 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
 304 │                 Seu Foco Hoje
 305 │               </h3>
 306 │               {temFoco && focoPrincipal && (
 307 │                 <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
 308 │                   <span className="font-bold text-[#FF6B00]">
 309 │                     {focoPrincipal.titulo}
 310 │                   </span>
 311 │                 </p>
 312 │               )}
 313 │             </div>
 314 │           </div>
 315 │ 
 316 │           {/* Indicador de progresso circular - mostrado apenas se houver atividades */}
 317 │           {totalAtividades > 0 && (
 318 │             <div className="hidden md:flex items-center">
 319 │               <div className="relative h-12 w-12 flex items-center justify-center">
 320 │                 <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
 321 │                   <circle 
 322 │                     cx="22" cy="22" r="20" 
 323 │                     fill="none" 
 324 │                     stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
 325 │                     strokeWidth="4"
 326 │                   />
 327 │                   <circle 
 328 │                     cx="22" cy="22" r="20" 
 329 │                     fill="none" 
 330 │                     stroke="#FF6B00" 
 331 │                     strokeWidth="4"
 332 │                     strokeDasharray={126}
 333 │                     strokeDashoffset={126 - (progressoTotal / 100) * 126}
 334 │                     transform="rotate(-90 22 22)"
 335 │                     strokeLinecap="round"
 336 │                   />
 337 │                 </svg>
 338 │                 <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 339 │                   {Math.round(progressoTotal)}%
 340 │                 </span>
 341 │               </div>
 342 │             </div>
 343 │           )}
 344 │         </div>
 345 │       </div>
 346 │ 
 347 │       {/* Conteúdo principal */}
 348 │       <div className="p-5">
 349 │         {/* Exibir foco principal quando definido */}
 350 │         {temFoco && focoPrincipal ? (
 351 │           <>
 352 │             {/* Informações do foco principal */}
 353 │             <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 354 │               <div className="flex gap-2 items-start">
 355 │                 <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 356 │                   <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 357 │                 </div>
 358 │                 <div>
 359 │                   <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 360 │                     <span className="font-medium">Foco principal:</span> {focoPrincipal.descricao}
 361 │                   </p>
 362 │                   {focoPrincipal.disciplinas.length > 0 && (
 363 │                     <div className="mt-1.5 flex flex-wrap gap-1.5">
 364 │                       {focoPrincipal.disciplinas.map((disciplina, idx) => (
 365 │                         <span 
 366 │                           key={idx} 
 367 │                           className={`text-xs px-2 py-0.5 rounded-full ${isLightMode ? 'bg-blue-100 text-blue-700' : 'bg-blue-900/30 text-blue-400'}`}
 368 │                         >
 369 │                           {disciplina}
 370 │                         </span>
 371 │                       ))}
 372 │                     </div>
 373 │                   )}
 374 │                 </div>
 375 │               </div>
 376 │             </div>
 377 │ 
 378 │             {/* Botão de configurações para redefinir foco */}
 379 │             <div className="absolute top-5 right-5">
 380 │               <button 
 381 │                 onClick={redefinirFoco}
 382 │                 className={`p-1.5 rounded-full ${isLightMode ? 'bg-gray-100 hover:bg-gray-200' : 'bg-gray-800 hover:bg-gray-700'} transition-colors`}
 383 │               >
 384 │                 <Settings className={`h-3.5 w-3.5 ${isLightMode ? 'text-gray-600' : 'text-gray-400'}`} />
 385 │               </button>
 386 │             </div>
 387 │ 
 388 │             {/* Lista de atividades */}
 389 │             <div className="space-y-2.5">
 390 │               {atividades.map((atividade, index) => (
 391 │                 <motion.div 
 392 │                   key={atividade.id} 
 393 │                   className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 394 │                   whileHover={{ y: -2 }}
 395 │                   onMouseEnter={() => setHoverIndex(index)}
 396 │                   onMouseLeave={() => setHoverIndex(null)}
 397 │                 >
 398 │                   {/* Indicador de prioridade para tarefas urgentes */}
 399 │                   {atividade.urgente && (
 400 │                     <div className="absolute top-0 right-0">
 401 │                       <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 402 │                     </div>
 403 │                   )}
 404 │ 
 405 │                   <div 
 406 │                     className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 407 │                       atividade.concluido 
 408 │                         ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 409 │                         : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 410 │                     }`}
 411 │                     onClick={(e) => {
 412 │                       e.stopPropagation();
 413 │                       toggleAtividade(atividade.id);
 414 │                     }}
 415 │                   >
 416 │                     {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 417 │                   </div>
 418 │ 
 419 │                   <div className="flex-1">
 420 │                     <div className="flex items-start gap-1.5">
 421 │                       <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 422 │                         {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 423 │                         {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 424 │                         {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 425 │                         {atividade.tipo === 'tarefa' && <Check className="h-3 w-3 text-purple-500" />}
 426 │                       </div>
 427 │                       <div>
 428 │                         <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 429 │                           {atividade.titulo}
 430 │                         </p>
 431 │                         <div className="flex items-center mt-1.5 gap-3">
 432 │                           <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 433 │                             <Clock className="h-3 w-3" /> {atividade.tempo}
 434 │                           </span>
 435 │                           <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 436 │                             {atividade.prazo}
 437 │                           </span>
 438 │                         </div>
 439 │                       </div>
 440 │                     </div>
 441 │ 
 442 │                     {/* Progress bar for individual activities */}
 443 │                     <div className="mt-2">
 444 │                       <Progress value={atividade.progresso} 
 445 │                         className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 446 │                     </div>
 447 │                   </div>
 448 │                 </motion.div>
 449 │               ))}
 450 │             </div>
 451 │ 
 452 │             {/* Dica do Mentor IA no final do card */}
 453 │             {focoPrincipal.dicaMentor && (
 454 │               <div className={`mt-4 p-3 rounded-lg ${isLightMode ? 'bg-green-50' : 'bg-green-900/10'} border ${isLightMode ? 'border-green-100' : 'border-green-800/30'}`}>
 455 │                 <div className="flex gap-2 items-start">
 456 │                   <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-green-100' : 'bg-green-800/30'}`}>
 457 │                     <Check className="h-3.5 w-3.5 text-green-600 dark:text-green-400" />
 458 │                   </div>
 459 │                   <p className={`text-xs ${isLightMode ? 'text-gray-700' : 'text-gray-300'}`}>
 460 │                     <span className="font-medium">Dica do Mentor:</span> {focoPrincipal.dicaMentor}
 461 │                   </p>
 462 │                 </div>
 463 │               </div>
 464 │             )}
 465 │           </>
 466 │         ) : (
 467 │           <>
 468 │             {/* Mensagem de boas-vindas para novos usuários */}
 469 │             <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 470 │               <div className="flex gap-2 items-start">
 471 │                 <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 472 │                   <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 473 │                 </div>
 474 │                 <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 475 │                   <span className="font-medium">Mentor IA:</span> Bem-vindo! Aqui você poderá definir e acompanhar suas atividades diárias prioritárias. Comece definindo seu foco de estudos.
 476 │                 </p>
 477 │               </div>
 478 │             </div>
 479 │ 
 480 │             {/* Estado vazio - Sem atividades */}
 481 │             <div className="py-12 flex flex-col items-center justify-center space-y-4">
 482 │               <div className={`p-3 rounded-full ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/10'}`}>
 483 │                 <Clock className={`h-6 w-6 text-[#FF6B00]`} />
 484 │               </div>
 485 │               <div className="text-center space-y-2">
 486 │                 <h4 className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 487 │                   Nenhuma atividade definida
 488 │                 </h4>
 489 │                 <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'} max-w-xs`}>
 490 │                   Defina um foco de estudo e adicione atividades para organizar seu dia.
 491 │                 </p>
 492 │               </div>
 493 │             </div>
 494 │           </>
 495 │         )}
 496 │ 
 497 │         {/* Footer com botão de ação e métricas */}
 498 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center relative">
 499 │           {atividades.length > 0 ? (
 500 │             <div className="flex items-center gap-2">
 501 │               <div className={`w-5 h-5 rounded-full border ${isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent'} flex items-center justify-center`}>
 502 │                 <span className={`text-xs font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-300'}`}>
 503 │                   {atividadesConcluidas}
 504 │                 </span>
 505 │               </div>
 506 │               <span className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 507 │                 {atividadesConcluidas} de {totalAtividades} atividades
 508 │               </span>
 509 │             </div>
 510 │           ) : (
 511 │             <div></div> // Espaçador para manter o layout com justify-between
 512 │           )}
 513 │ 
 514 │           <motion.button 
 515 │             onClick={() => setModalAberto(true)}
 516 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 517 │             whileHover={{ scale: 1.05 }}
 518 │             whileTap={{ scale: 0.98 }}
 519 │           >
 520 │             {atividades.length > 0 ? "Iniciar Foco" : "Definir Foco"}
 521 │             <ChevronRight className="h-3 w-3" />
 522 │           </motion.button>
 523 │ 
 524 │           {/* Exibir sentimento quando disponível */}
 525 │             {temFoco && focoPrincipal?.sentimento && (
 526 │               <div className="absolute top-2 right-2">
 527 │                 <div className="text-xs bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300 px-2 py-1 rounded-full flex items-center gap-1">
 528 │                   {focoPrincipal.sentimento === "Motivado(a)" && <Smile className="h-3 w-3" />}
 529 │                   {focoPrincipal.sentimento === "Um pouco perdido(a)" && <HelpCircle className="h-3 w-3" />}
 530 │                   {focoPrincipal.sentimento === "Cansado(a)" && <Clock className="h-3 w-3" />}
 531 │                   {focoPrincipal.sentimento === "Ansioso(a)" && <BarChart2 className="h-3 w-3" />}
 532 │                   <span>{focoPrincipal.sentimento}</span>
 533 │                 </div>
 534 │               </div>
 535 │             )}
 536 │         </div>
 537 │       </div>
 538 │ 
 539 │       {/* Modal para definir o foco */}
 540 │       <AnimatePresence>
 541 │         {modalAberto && (
 542 │           <DefinirFocoModal 
 543 │             open={modalAberto}
 544 │             onClose={() => setModalAberto(false)}
 545 │             onSave={processarDefinicaoFoco}
 546 │           />
 547 │         )}
 548 │       </AnimatePresence>
 549 │     </motion.div>
 550 │   );
 551 │ }
 552 │ import React, { useState } from "react";
 553 │ import { X } from "lucide-react";
 554 │ import { useTheme } from "@/components/ThemeProvider";
 555 │ import { motion, AnimatePresence } from "framer-motion";
     ·                  ───────┬───────
     ·                         ╰── `AnimatePresence` redefined here
 556 │ import { Separator } from "@/components/ui/separator";
 557 │ import { Input } from "@/components/ui/input";
 558 │ import { Label } from "@/components/ui/label";
     ╰────

  × the name `Progress` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:2:1]
   2 │ import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy, PlusCircle, Settings, Smile, HelpCircle, BarChart2 } from "lucide-react";
   3 │ import { useTheme } from "@/components/ThemeProvider";
   4 │ import { motion, AnimatePresence } from "framer-motion";
   5 │ import { Progress } from "@/components/ui/progress";
     ·          ────┬───
     ·              ╰── previous definition of `Progress` here
   6 │ import DefinirFocoModal, { FocoData } from "./DefinirFocoModal";
   7 │ 
   8 │ // Tipo para atividades
   9 │ interface Atividade {
  10 │   id: number;
  11 │   titulo: string;
  12 │   tipo: "video" | "exercicio" | "revisao" | "tarefa";
  13 │   tempo: string;
  14 │   prazo: string;
  15 │   urgente: boolean;
  16 │   concluido: boolean;
  17 │   progresso: number;
  18 │ }
  19 │ 
  20 │ interface FocoPrincipal {
  21 │   titulo: string;
  22 │   descricao: string;
  23 │   disciplinas: string[];
  24 │   tempoTotal: string;
  25 │   dicaMentor?: string;
  26 │   sentimento?: string;
  27 │ }
  28 │ 
  29 │ export default function FocoDoDiaCard() {
  30 │   const { theme } = useTheme();
  31 │   const isLightMode = theme === "light";
  32 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  33 │   const [atividades, setAtividades] = useState<Atividade[]>([]);
  34 │   const [focoPrincipal, setFocoPrincipal] = useState<FocoPrincipal | null>(null);
  35 │   const [temFoco, setTemFoco] = useState<boolean>(false);
  36 │   const [carregando, setCarregando] = useState<boolean>(true);
  37 │   const [modalAberto, setModalAberto] = useState<boolean>(false);
  38 │   const [gerando, setGerando] = useState<boolean>(false);
  39 │ 
  40 │   // Simular carregamento de dados
  41 │   useEffect(() => {
  42 │     // Aqui faremos uma simulação de carregamento de dados
  43 │     // No futuro, isso seria substituído por chamadas reais à API
  44 │     const timeout = setTimeout(() => {
  45 │       setCarregando(false);
  46 │ 
  47 │       // Verificar se temos dados do foco salvos no localStorage
  48 │       const focoDadosSalvos = localStorage.getItem('focoDia');
  49 │       if (focoDadosSalvos) {
  50 │         try {
  51 │           const dados = JSON.parse(focoDadosSalvos);
  52 │           setFocoPrincipal(dados.focoPrincipal);
  53 │           setAtividades(dados.atividades);
  54 │           setTemFoco(true);
  55 │         } catch (error) {
  56 │           console.error("Erro ao carregar dados do foco:", error);
  57 │         }
  58 │       }
  59 │     }, 1000);
  60 │ 
  61 │     return () => clearTimeout(timeout);
  62 │   }, []);
  63 │ 
  64 │   // Função para lidar com a conclusão de atividades
  65 │   const toggleAtividade = (id: number) => {
  66 │     // Atualizar o estado local - em uma aplicação real, isto também atualizaria o backend
  67 │     const atualizadas = atividades.map(ativ => 
  68 │       ativ.id === id ? { ...ativ, concluido: !ativ.concluido } : ativ
  69 │     );
  70 │ 
  71 │     setAtividades(atualizadas);
  72 │ 
  73 │     // Atualizar no localStorage
  74 │     if (focoPrincipal) {
  75 │       localStorage.setItem('focoDia', JSON.stringify({
  76 │         focoPrincipal,
  77 │         atividades: atualizadas
  78 │       }));
  79 │     }
  80 │   };
  81 │ 
  82 │   // Função para processar dados do modal e gerar o foco
  83 │   const processarDefinicaoFoco = (dados: FocoData) => {
  84 │     setModalAberto(false);
  85 │     setGerando(true);
  86 │ 
  87 │     // Simulando processamento pelo backend/IA
  88 │     setTimeout(() => {
  89 │       // Criar foco principal baseado nos dados recebidos
  90 │       const novoFocoPrincipal: FocoPrincipal = {
  91 │         titulo: dados.objetivo,
  92 │         descricao: dados.objetivoPersonalizado || dados.objetivo,
  93 │         disciplinas: dados.disciplinas,
  94 │         tempoTotal: `${Math.round(dados.tempoEstudo / 60)} hora${dados.tempoEstudo >= 120 ? 's' : ''}`,
  95 │         dicaMentor: gerarDicaMentor(dados.estado),
  96 │         sentimento: dados.estado
  97 │       };
  98 │ 
  99 │       // Gerar atividades baseadas nas informações
 100 │       const novasAtividades = gerarAtividades(dados);
 101 │ 
 102 │       // Atualizar estados
 103 │       setFocoPrincipal(novoFocoPrincipal);
 104 │       setAtividades(novasAtividades);
 105 │       setTemFoco(true);
 106 │       setGerando(false);
 107 │ 
 108 │       // Salvar no localStorage
 109 │       localStorage.setItem('focoDia', JSON.stringify({
 110 │         focoPrincipal: novoFocoPrincipal,
 111 │         atividades: novasAtividades
 112 │       }));
 113 │     }, 2000);
 114 │   };
 115 │ 
 116 │   // Função para gerar dica baseada no estado emocional
 117 │   const gerarDicaMentor = (estado: string): string => {
 118 │     const dicas = {
 119 │       "Motivado(a)": "Aproveite seu ânimo atual para focar nos tópicos mais desafiadores primeiro!",
 120 │       "Um pouco perdido(a)": "Divida seu estudo em etapas menores e comemore cada progresso.",
 121 │       "Cansado(a)": "Alterne entre tópicos diferentes a cada 30 minutos para manter o foco.",
 122 │       "Ansioso(a)": "Pratique 2 minutos de respiração profunda antes de cada sessão de estudo."
 123 │     };
 124 │ 
 125 │     return dicas[estado as keyof typeof dicas] || "Estabeleça pequenas metas e celebre cada conquista no seu estudo.";
 126 │   };
 127 │ 
 128 │   // Função para gerar atividades com base nos dados do formulário
 129 │   const gerarAtividades = (dados: FocoData): Atividade[] => {
 130 │     const tiposAtividade: ("video" | "exercicio" | "revisao" | "tarefa")[] = ["video", "exercicio", "revisao", "tarefa"];
 131 │ 
 132 │     // Se o usuário selecionou tarefas específicas, incluí-las
 133 │     const atividadesTarefas = dados.tarefasSelecionadas.map((tarefa, index) => ({
 134 │       id: Date.now() + index,
 135 │       titulo: tarefa,
 136 │       tipo: "tarefa" as const,
 137 │       tempo: `${Math.floor(Math.random() * 30) + 15}min`,
 138 │       prazo: ["hoje", "amanhã", "esta semana"][Math.floor(Math.random() * 3)],
 139 │       urgente: Math.random() > 0.7,
 140 │       concluido: false,
 141 │       progresso: 0
 142 │     }));
 143 │ 
 144 │     // Gerar atividades extras com base nas disciplinas
 145 │     const atividadesExtra = dados.disciplinas.slice(0, 3).map((disciplina, index) => {
 146 │       const tipo = tiposAtividade[Math.floor(Math.random() * tiposAtividade.length)];
 147 │       const titulos = {
 148 │         video: [`Assistir vídeo de ${disciplina}`, `Aula sobre conceitos de ${disciplina}`],
 149 │         exercicio: [`Exercícios de ${disciplina}`, `Resolver problemas de ${disciplina}`],
 150 │         revisao: [`Revisar anotações de ${disciplina}`, `Resumo do capítulo de ${disciplina}`],
 151 │         tarefa: [`Trabalho de ${disciplina}`, `Projeto de ${disciplina}`]
 152 │       };
 153 │ 
 154 │       return {
 155 │         id: Date.now() + atividadesTarefas.length + index,
 156 │         titulo: titulos[tipo][Math.floor(Math.random() * 2)],
 157 │         tipo,
 158 │         tempo: `${Math.floor(Math.random() * 45) + 15}min`,
 159 │         prazo: ["hoje", "amanhã", "esta semana"][Math.floor(Math.random() * 3)],
 160 │         urgente: Math.random() > 0.7,
 161 │         concluido: false,
 162 │         progresso: 0
 163 │       };
 164 │     });
 165 │ 
 166 │     // Combinar todas as atividades e limitar a 4 no máximo
 167 │     return [...atividadesTarefas, ...atividadesExtra].slice(0, 4);
 168 │   };
 169 │ 
 170 │   // Função para reiniciar o foco
 171 │   const redefinirFoco = () => {
 172 │     setModalAberto(true);
 173 │   };
 174 │ 
 175 │   // Calcular progresso total das atividades
 176 │   const totalAtividades = atividades.length;
 177 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
 178 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
 179 │   const progressoAtividades = totalAtividades > 0 
 180 │     ? Math.round((atividadesConcluidas / totalAtividades) * 100) 
 181 │     : 0;
 182 │ 
 183 │   // Renderizar estado de carregamento
 184 │   if (carregando) {
 185 │     return (
 186 │       <motion.div 
 187 │         className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 188 │         initial={{ opacity: 0, y: 20 }}
 189 │         animate={{ opacity: 1, y: 0 }}
 190 │         transition={{ duration: 0.5, ease: "easeOut" }}
 191 │       >
 192 │         <div className="h-full flex items-center justify-center p-8">
 193 │           <div className="animate-pulse flex flex-col items-center space-y-4 w-full">
 194 │             <div className="w-full flex justify-between items-center">
 195 │               <div className="h-8 bg-gray-300 dark:bg-gray-700 rounded-md w-1/3"></div>
 196 │               <div className="h-8 w-8 bg-gray-300 dark:bg-gray-700 rounded-full"></div>
 197 │             </div>
 198 │             <div className="h-16 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 199 │             <div className="space-y-3 w-full">
 200 │               <div className="h-12 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 201 │               <div className="h-12 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 202 │             </div>
 203 │           </div>
 204 │         </div>
 205 │       </motion.div>
 206 │     );
 207 │   }
 208 │ 
 209 │   // Renderizar estado de geração de foco
 210 │   if (gerando) {
 211 │     return (
 212 │       <motion.div 
 213 │         className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 214 │         initial={{ opacity: 0, y: 20 }}
 215 │         animate={{ opacity: 1, y: 0 }}
 216 │         transition={{ duration: 0.5, ease: "easeOut" }}
 217 │       >
 218 │         <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 219 │           <div className="flex items-center justify-between">
 220 │             <div className="flex items-center gap-3">
 221 │               <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
 222 │                 <Flame className={`h-5 w-5 text-[#FF6B00] animate-pulse`} />
 223 │               </div>
 224 │               <div>
 225 │                 <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
 226 │                   Seu Foco Hoje
 227 │                 </h3>
 228 │               </div>
 229 │             </div>
 230 │           </div>
 231 │         </div>
 232 │ 
 233 │         <div className="h-full p-8 flex flex-col items-center justify-center">
 234 │           <div className="flex flex-col items-center space-y-4">
 235 │             <div className={`p-3 rounded-full ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 236 │               <motion.div
 237 │                 animate={{
 238 │                   rotate: [0, 360]
 239 │                 }}
 240 │                 transition={{
 241 │                   duration: 2,
 242 │                   repeat: Infinity,
 243 │                   ease: "linear"
 244 │                 }}
 245 │               >
 246 │                 <Clock className={`h-6 w-6 text-[#FF6B00]`} />
 247 │               </motion.div>
 248 │             </div>
 249 │             <div className="text-center space-y-2">
 250 │               <h4 className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 251 │                 Organizando seu dia...
 252 │               </h4>
 253 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'} max-w-xs`}>
 254 │                 O Mentor IA está analisando suas preferências e criando seu plano de estudos personalizado.
 255 │               </p>
 256 │             </div>
 257 │ 
 258 │             <div className="w-full max-w-xs mt-4">
 259 │               <div className="h-1.5 w-full bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
 260 │                 <motion.div 
 261 │                   className="h-full bg-[#FF6B00]"
 262 │                   animate={{
 263 │                     width: ['0%', '100%']
 264 │                   }}
 265 │                   transition={{
 266 │                     duration: 2,
 267 │                     ease: "easeInOut"
 268 │                   }}
 269 │                 />
 270 │               </div>
 271 │             </div>
 272 │           </div>
 273 │         </div>
 274 │       </motion.div>
 275 │     );
 276 │   }
 277 │ 
 278 │   return (
 279 │     <motion.div 
 280 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 281 │       initial={{ opacity: 0, y: 20 }}
 282 │       animate={{ opacity: 1, y: 0 }}
 283 │       transition={{ duration: 0.5, ease: "easeOut" }}
 284 │     >
 285 │       {/* Header elegante com gradiente */}
 286 │       <div className={`p-5 relative ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 287 │         {/* Barra de progresso interativa no topo */}
 288 │         <div className="absolute top-0 left-0 h-1 bg-[#FF6B00]/20 w-full overflow-hidden">
 289 │           <motion.div 
 290 │             className="h-full bg-[#FF6B00]" 
 291 │             initial={{ width: '0%' }}
 292 │             animate={{ width: `${progressoTotal}%` }}
 293 │             transition={{ duration: 0.5, ease: "easeOut" }}
 294 │           />
 295 │         </div>
 296 │ 
 297 │         <div className="flex items-center justify-between">
 298 │           <div className="flex items-center gap-3">
 299 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
 300 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
 301 │             </div>
 302 │             <div>
 303 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
 304 │                 Seu Foco Hoje
 305 │               </h3>
 306 │               {temFoco && focoPrincipal && (
 307 │                 <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
 308 │                   <span className="font-bold text-[#FF6B00]">
 309 │                     {focoPrincipal.titulo}
 310 │                   </span>
 311 │                 </p>
 312 │               )}
 313 │             </div>
 314 │           </div>
 315 │ 
 316 │           {/* Indicador de progresso circular - mostrado apenas se houver atividades */}
 317 │           {totalAtividades > 0 && (
 318 │             <div className="hidden md:flex items-center">
 319 │               <div className="relative h-12 w-12 flex items-center justify-center">
 320 │                 <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
 321 │                   <circle 
 322 │                     cx="22" cy="22" r="20" 
 323 │                     fill="none" 
 324 │                     stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
 325 │                     strokeWidth="4"
 326 │                   />
 327 │                   <circle 
 328 │                     cx="22" cy="22" r="20" 
 329 │                     fill="none" 
 330 │                     stroke="#FF6B00" 
 331 │                     strokeWidth="4"
 332 │                     strokeDasharray={126}
 333 │                     strokeDashoffset={126 - (progressoTotal / 100) * 126}
 334 │                     transform="rotate(-90 22 22)"
 335 │                     strokeLinecap="round"
 336 │                   />
 337 │                 </svg>
 338 │                 <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 339 │                   {Math.round(progressoTotal)}%
 340 │                 </span>
 341 │               </div>
 342 │             </div>
 343 │           )}
 344 │         </div>
 345 │       </div>
 346 │ 
 347 │       {/* Conteúdo principal */}
 348 │       <div className="p-5">
 349 │         {/* Exibir foco principal quando definido */}
 350 │         {temFoco && focoPrincipal ? (
 351 │           <>
 352 │             {/* Informações do foco principal */}
 353 │             <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 354 │               <div className="flex gap-2 items-start">
 355 │                 <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 356 │                   <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 357 │                 </div>
 358 │                 <div>
 359 │                   <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 360 │                     <span className="font-medium">Foco principal:</span> {focoPrincipal.descricao}
 361 │                   </p>
 362 │                   {focoPrincipal.disciplinas.length > 0 && (
 363 │                     <div className="mt-1.5 flex flex-wrap gap-1.5">
 364 │                       {focoPrincipal.disciplinas.map((disciplina, idx) => (
 365 │                         <span 
 366 │                           key={idx} 
 367 │                           className={`text-xs px-2 py-0.5 rounded-full ${isLightMode ? 'bg-blue-100 text-blue-700' : 'bg-blue-900/30 text-blue-400'}`}
 368 │                         >
 369 │                           {disciplina}
 370 │                         </span>
 371 │                       ))}
 372 │                     </div>
 373 │                   )}
 374 │                 </div>
 375 │               </div>
 376 │             </div>
 377 │ 
 378 │             {/* Botão de configurações para redefinir foco */}
 379 │             <div className="absolute top-5 right-5">
 380 │               <button 
 381 │                 onClick={redefinirFoco}
 382 │                 className={`p-1.5 rounded-full ${isLightMode ? 'bg-gray-100 hover:bg-gray-200' : 'bg-gray-800 hover:bg-gray-700'} transition-colors`}
 383 │               >
 384 │                 <Settings className={`h-3.5 w-3.5 ${isLightMode ? 'text-gray-600' : 'text-gray-400'}`} />
 385 │               </button>
 386 │             </div>
 387 │ 
 388 │             {/* Lista de atividades */}
 389 │             <div className="space-y-2.5">
 390 │               {atividades.map((atividade, index) => (
 391 │                 <motion.div 
 392 │                   key={atividade.id} 
 393 │                   className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 394 │                   whileHover={{ y: -2 }}
 395 │                   onMouseEnter={() => setHoverIndex(index)}
 396 │                   onMouseLeave={() => setHoverIndex(null)}
 397 │                 >
 398 │                   {/* Indicador de prioridade para tarefas urgentes */}
 399 │                   {atividade.urgente && (
 400 │                     <div className="absolute top-0 right-0">
 401 │                       <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 402 │                     </div>
 403 │                   )}
 404 │ 
 405 │                   <div 
 406 │                     className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 407 │                       atividade.concluido 
 408 │                         ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 409 │                         : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 410 │                     }`}
 411 │                     onClick={(e) => {
 412 │                       e.stopPropagation();
 413 │                       toggleAtividade(atividade.id);
 414 │                     }}
 415 │                   >
 416 │                     {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 417 │                   </div>
 418 │ 
 419 │                   <div className="flex-1">
 420 │                     <div className="flex items-start gap-1.5">
 421 │                       <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 422 │                         {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 423 │                         {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 424 │                         {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 425 │                         {atividade.tipo === 'tarefa' && <Check className="h-3 w-3 text-purple-500" />}
 426 │                       </div>
 427 │                       <div>
 428 │                         <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 429 │                           {atividade.titulo}
 430 │                         </p>
 431 │                         <div className="flex items-center mt-1.5 gap-3">
 432 │                           <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 433 │                             <Clock className="h-3 w-3" /> {atividade.tempo}
 434 │                           </span>
 435 │                           <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 436 │                             {atividade.prazo}
 437 │                           </span>
 438 │                         </div>
 439 │                       </div>
 440 │                     </div>
 441 │ 
 442 │                     {/* Progress bar for individual activities */}
 443 │                     <div className="mt-2">
 444 │                       <Progress value={atividade.progresso} 
 445 │                         className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 446 │                     </div>
 447 │                   </div>
 448 │                 </motion.div>
 449 │               ))}
 450 │             </div>
 451 │ 
 452 │             {/* Dica do Mentor IA no final do card */}
 453 │             {focoPrincipal.dicaMentor && (
 454 │               <div className={`mt-4 p-3 rounded-lg ${isLightMode ? 'bg-green-50' : 'bg-green-900/10'} border ${isLightMode ? 'border-green-100' : 'border-green-800/30'}`}>
 455 │                 <div className="flex gap-2 items-start">
 456 │                   <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-green-100' : 'bg-green-800/30'}`}>
 457 │                     <Check className="h-3.5 w-3.5 text-green-600 dark:text-green-400" />
 458 │                   </div>
 459 │                   <p className={`text-xs ${isLightMode ? 'text-gray-700' : 'text-gray-300'}`}>
 460 │                     <span className="font-medium">Dica do Mentor:</span> {focoPrincipal.dicaMentor}
 461 │                   </p>
 462 │                 </div>
 463 │               </div>
 464 │             )}
 465 │           </>
 466 │         ) : (
 467 │           <>
 468 │             {/* Mensagem de boas-vindas para novos usuários */}
 469 │             <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 470 │               <div className="flex gap-2 items-start">
 471 │                 <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 472 │                   <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 473 │                 </div>
 474 │                 <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 475 │                   <span className="font-medium">Mentor IA:</span> Bem-vindo! Aqui você poderá definir e acompanhar suas atividades diárias prioritárias. Comece definindo seu foco de estudos.
 476 │                 </p>
 477 │               </div>
 478 │             </div>
 479 │ 
 480 │             {/* Estado vazio - Sem atividades */}
 481 │             <div className="py-12 flex flex-col items-center justify-center space-y-4">
 482 │               <div className={`p-3 rounded-full ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/10'}`}>
 483 │                 <Clock className={`h-6 w-6 text-[#FF6B00]`} />
 484 │               </div>
 485 │               <div className="text-center space-y-2">
 486 │                 <h4 className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 487 │                   Nenhuma atividade definida
 488 │                 </h4>
 489 │                 <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'} max-w-xs`}>
 490 │                   Defina um foco de estudo e adicione atividades para organizar seu dia.
 491 │                 </p>
 492 │               </div>
 493 │             </div>
 494 │           </>
 495 │         )}
 496 │ 
 497 │         {/* Footer com botão de ação e métricas */}
 498 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center relative">
 499 │           {atividades.length > 0 ? (
 500 │             <div className="flex items-center gap-2">
 501 │               <div className={`w-5 h-5 rounded-full border ${isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent'} flex items-center justify-center`}>
 502 │                 <span className={`text-xs font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-300'}`}>
 503 │                   {atividadesConcluidas}
 504 │                 </span>
 505 │               </div>
 506 │               <span className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 507 │                 {atividadesConcluidas} de {totalAtividades} atividades
 508 │               </span>
 509 │             </div>
 510 │           ) : (
 511 │             <div></div> // Espaçador para manter o layout com justify-between
 512 │           )}
 513 │ 
 514 │           <motion.button 
 515 │             onClick={() => setModalAberto(true)}
 516 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 517 │             whileHover={{ scale: 1.05 }}
 518 │             whileTap={{ scale: 0.98 }}
 519 │           >
 520 │             {atividades.length > 0 ? "Iniciar Foco" : "Definir Foco"}
 521 │             <ChevronRight className="h-3 w-3" />
 522 │           </motion.button>
 523 │ 
 524 │           {/* Exibir sentimento quando disponível */}
 525 │             {temFoco && focoPrincipal?.sentimento && (
 526 │               <div className="absolute top-2 right-2">
 527 │                 <div className="text-xs bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300 px-2 py-1 rounded-full flex items-center gap-1">
 528 │                   {focoPrincipal.sentimento === "Motivado(a)" && <Smile className="h-3 w-3" />}
 529 │                   {focoPrincipal.sentimento === "Um pouco perdido(a)" && <HelpCircle className="h-3 w-3" />}
 530 │                   {focoPrincipal.sentimento === "Cansado(a)" && <Clock className="h-3 w-3" />}
 531 │                   {focoPrincipal.sentimento === "Ansioso(a)" && <BarChart2 className="h-3 w-3" />}
 532 │                   <span>{focoPrincipal.sentimento}</span>
 533 │                 </div>
 534 │               </div>
 535 │             )}
 536 │         </div>
 537 │       </div>
 538 │ 
 539 │       {/* Modal para definir o foco */}
 540 │       <AnimatePresence>
 541 │         {modalAberto && (
 542 │           <DefinirFocoModal 
 543 │             open={modalAberto}
 544 │             onClose={() => setModalAberto(false)}
 545 │             onSave={processarDefinicaoFoco}
 546 │           />
 547 │         )}
 548 │       </AnimatePresence>
 549 │     </motion.div>
 550 │   );
 551 │ }
 552 │ import React, { useState } from "react";
 553 │ import { X } from "lucide-react";
 554 │ import { useTheme } from "@/components/ThemeProvider";
 555 │ import { motion, AnimatePresence } from "framer-motion";
 556 │ import { Separator } from "@/components/ui/separator";
 557 │ import { Input } from "@/components/ui/input";
 558 │ import { Label } from "@/components/ui/label";
 559 │ import { Textarea } from "@/components/ui/textarea";
 560 │ import { Button } from "@/components/ui/button";
 561 │ import { Checkbox } from "@/components/ui/checkbox";
 562 │ import { Progress } from "@/components/ui/progress";
     ·          ────┬───
     ·              ╰── `Progress` redefined here
 563 │ import { ScrollArea } from "@/components/ui/scroll-area"
 564 │ 
 565 │ // Define a interface para os dados do foco
     ╰────

  × the name `DefinirFocoModal` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:3:1]
   3 │ import { useTheme } from "@/components/ThemeProvider";
   4 │ import { motion, AnimatePresence } from "framer-motion";
   5 │ import { Progress } from "@/components/ui/progress";
   6 │ import DefinirFocoModal, { FocoData } from "./DefinirFocoModal";
     ·        ────────┬───────
     ·                ╰── previous definition of `DefinirFocoModal` here
   7 │ 
   8 │ // Tipo para atividades
   9 │ interface Atividade {
  10 │   id: number;
  11 │   titulo: string;
  12 │   tipo: "video" | "exercicio" | "revisao" | "tarefa";
  13 │   tempo: string;
  14 │   prazo: string;
  15 │   urgente: boolean;
  16 │   concluido: boolean;
  17 │   progresso: number;
  18 │ }
  19 │ 
  20 │ interface FocoPrincipal {
  21 │   titulo: string;
  22 │   descricao: string;
  23 │   disciplinas: string[];
  24 │   tempoTotal: string;
  25 │   dicaMentor?: string;
  26 │   sentimento?: string;
  27 │ }
  28 │ 
  29 │ export default function FocoDoDiaCard() {
  30 │   const { theme } = useTheme();
  31 │   const isLightMode = theme === "light";
  32 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  33 │   const [atividades, setAtividades] = useState<Atividade[]>([]);
  34 │   const [focoPrincipal, setFocoPrincipal] = useState<FocoPrincipal | null>(null);
  35 │   const [temFoco, setTemFoco] = useState<boolean>(false);
  36 │   const [carregando, setCarregando] = useState<boolean>(true);
  37 │   const [modalAberto, setModalAberto] = useState<boolean>(false);
  38 │   const [gerando, setGerando] = useState<boolean>(false);
  39 │ 
  40 │   // Simular carregamento de dados
  41 │   useEffect(() => {
  42 │     // Aqui faremos uma simulação de carregamento de dados
  43 │     // No futuro, isso seria substituído por chamadas reais à API
  44 │     const timeout = setTimeout(() => {
  45 │       setCarregando(false);
  46 │ 
  47 │       // Verificar se temos dados do foco salvos no localStorage
  48 │       const focoDadosSalvos = localStorage.getItem('focoDia');
  49 │       if (focoDadosSalvos) {
  50 │         try {
  51 │           const dados = JSON.parse(focoDadosSalvos);
  52 │           setFocoPrincipal(dados.focoPrincipal);
  53 │           setAtividades(dados.atividades);
  54 │           setTemFoco(true);
  55 │         } catch (error) {
  56 │           console.error("Erro ao carregar dados do foco:", error);
  57 │         }
  58 │       }
  59 │     }, 1000);
  60 │ 
  61 │     return () => clearTimeout(timeout);
  62 │   }, []);
  63 │ 
  64 │   // Função para lidar com a conclusão de atividades
  65 │   const toggleAtividade = (id: number) => {
  66 │     // Atualizar o estado local - em uma aplicação real, isto também atualizaria o backend
  67 │     const atualizadas = atividades.map(ativ => 
  68 │       ativ.id === id ? { ...ativ, concluido: !ativ.concluido } : ativ
  69 │     );
  70 │ 
  71 │     setAtividades(atualizadas);
  72 │ 
  73 │     // Atualizar no localStorage
  74 │     if (focoPrincipal) {
  75 │       localStorage.setItem('focoDia', JSON.stringify({
  76 │         focoPrincipal,
  77 │         atividades: atualizadas
  78 │       }));
  79 │     }
  80 │   };
  81 │ 
  82 │   // Função para processar dados do modal e gerar o foco
  83 │   const processarDefinicaoFoco = (dados: FocoData) => {
  84 │     setModalAberto(false);
  85 │     setGerando(true);
  86 │ 
  87 │     // Simulando processamento pelo backend/IA
  88 │     setTimeout(() => {
  89 │       // Criar foco principal baseado nos dados recebidos
  90 │       const novoFocoPrincipal: FocoPrincipal = {
  91 │         titulo: dados.objetivo,
  92 │         descricao: dados.objetivoPersonalizado || dados.objetivo,
  93 │         disciplinas: dados.disciplinas,
  94 │         tempoTotal: `${Math.round(dados.tempoEstudo / 60)} hora${dados.tempoEstudo >= 120 ? 's' : ''}`,
  95 │         dicaMentor: gerarDicaMentor(dados.estado),
  96 │         sentimento: dados.estado
  97 │       };
  98 │ 
  99 │       // Gerar atividades baseadas nas informações
 100 │       const novasAtividades = gerarAtividades(dados);
 101 │ 
 102 │       // Atualizar estados
 103 │       setFocoPrincipal(novoFocoPrincipal);
 104 │       setAtividades(novasAtividades);
 105 │       setTemFoco(true);
 106 │       setGerando(false);
 107 │ 
 108 │       // Salvar no localStorage
 109 │       localStorage.setItem('focoDia', JSON.stringify({
 110 │         focoPrincipal: novoFocoPrincipal,
 111 │         atividades: novasAtividades
 112 │       }));
 113 │     }, 2000);
 114 │   };
 115 │ 
 116 │   // Função para gerar dica baseada no estado emocional
 117 │   const gerarDicaMentor = (estado: string): string => {
 118 │     const dicas = {
 119 │       "Motivado(a)": "Aproveite seu ânimo atual para focar nos tópicos mais desafiadores primeiro!",
 120 │       "Um pouco perdido(a)": "Divida seu estudo em etapas menores e comemore cada progresso.",
 121 │       "Cansado(a)": "Alterne entre tópicos diferentes a cada 30 minutos para manter o foco.",
 122 │       "Ansioso(a)": "Pratique 2 minutos de respiração profunda antes de cada sessão de estudo."
 123 │     };
 124 │ 
 125 │     return dicas[estado as keyof typeof dicas] || "Estabeleça pequenas metas e celebre cada conquista no seu estudo.";
 126 │   };
 127 │ 
 128 │   // Função para gerar atividades com base nos dados do formulário
 129 │   const gerarAtividades = (dados: FocoData): Atividade[] => {
 130 │     const tiposAtividade: ("video" | "exercicio" | "revisao" | "tarefa")[] = ["video", "exercicio", "revisao", "tarefa"];
 131 │ 
 132 │     // Se o usuário selecionou tarefas específicas, incluí-las
 133 │     const atividadesTarefas = dados.tarefasSelecionadas.map((tarefa, index) => ({
 134 │       id: Date.now() + index,
 135 │       titulo: tarefa,
 136 │       tipo: "tarefa" as const,
 137 │       tempo: `${Math.floor(Math.random() * 30) + 15}min`,
 138 │       prazo: ["hoje", "amanhã", "esta semana"][Math.floor(Math.random() * 3)],
 139 │       urgente: Math.random() > 0.7,
 140 │       concluido: false,
 141 │       progresso: 0
 142 │     }));
 143 │ 
 144 │     // Gerar atividades extras com base nas disciplinas
 145 │     const atividadesExtra = dados.disciplinas.slice(0, 3).map((disciplina, index) => {
 146 │       const tipo = tiposAtividade[Math.floor(Math.random() * tiposAtividade.length)];
 147 │       const titulos = {
 148 │         video: [`Assistir vídeo de ${disciplina}`, `Aula sobre conceitos de ${disciplina}`],
 149 │         exercicio: [`Exercícios de ${disciplina}`, `Resolver problemas de ${disciplina}`],
 150 │         revisao: [`Revisar anotações de ${disciplina}`, `Resumo do capítulo de ${disciplina}`],
 151 │         tarefa: [`Trabalho de ${disciplina}`, `Projeto de ${disciplina}`]
 152 │       };
 153 │ 
 154 │       return {
 155 │         id: Date.now() + atividadesTarefas.length + index,
 156 │         titulo: titulos[tipo][Math.floor(Math.random() * 2)],
 157 │         tipo,
 158 │         tempo: `${Math.floor(Math.random() * 45) + 15}min`,
 159 │         prazo: ["hoje", "amanhã", "esta semana"][Math.floor(Math.random() * 3)],
 160 │         urgente: Math.random() > 0.7,
 161 │         concluido: false,
 162 │         progresso: 0
 163 │       };
 164 │     });
 165 │ 
 166 │     // Combinar todas as atividades e limitar a 4 no máximo
 167 │     return [...atividadesTarefas, ...atividadesExtra].slice(0, 4);
 168 │   };
 169 │ 
 170 │   // Função para reiniciar o foco
 171 │   const redefinirFoco = () => {
 172 │     setModalAberto(true);
 173 │   };
 174 │ 
 175 │   // Calcular progresso total das atividades
 176 │   const totalAtividades = atividades.length;
 177 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
 178 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
 179 │   const progressoAtividades = totalAtividades > 0 
 180 │     ? Math.round((atividadesConcluidas / totalAtividades) * 100) 
 181 │     : 0;
 182 │ 
 183 │   // Renderizar estado de carregamento
 184 │   if (carregando) {
 185 │     return (
 186 │       <motion.div 
 187 │         className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 188 │         initial={{ opacity: 0, y: 20 }}
 189 │         animate={{ opacity: 1, y: 0 }}
 190 │         transition={{ duration: 0.5, ease: "easeOut" }}
 191 │       >
 192 │         <div className="h-full flex items-center justify-center p-8">
 193 │           <div className="animate-pulse flex flex-col items-center space-y-4 w-full">
 194 │             <div className="w-full flex justify-between items-center">
 195 │               <div className="h-8 bg-gray-300 dark:bg-gray-700 rounded-md w-1/3"></div>
 196 │               <div className="h-8 w-8 bg-gray-300 dark:bg-gray-700 rounded-full"></div>
 197 │             </div>
 198 │             <div className="h-16 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 199 │             <div className="space-y-3 w-full">
 200 │               <div className="h-12 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 201 │               <div className="h-12 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 202 │             </div>
 203 │           </div>
 204 │         </div>
 205 │       </motion.div>
 206 │     );
 207 │   }
 208 │ 
 209 │   // Renderizar estado de geração de foco
 210 │   if (gerando) {
 211 │     return (
 212 │       <motion.div 
 213 │         className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 214 │         initial={{ opacity: 0, y: 20 }}
 215 │         animate={{ opacity: 1, y: 0 }}
 216 │         transition={{ duration: 0.5, ease: "easeOut" }}
 217 │       >
 218 │         <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 219 │           <div className="flex items-center justify-between">
 220 │             <div className="flex items-center gap-3">
 221 │               <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
 222 │                 <Flame className={`h-5 w-5 text-[#FF6B00] animate-pulse`} />
 223 │               </div>
 224 │               <div>
 225 │                 <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
 226 │                   Seu Foco Hoje
 227 │                 </h3>
 228 │               </div>
 229 │             </div>
 230 │           </div>
 231 │         </div>
 232 │ 
 233 │         <div className="h-full p-8 flex flex-col items-center justify-center">
 234 │           <div className="flex flex-col items-center space-y-4">
 235 │             <div className={`p-3 rounded-full ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 236 │               <motion.div
 237 │                 animate={{
 238 │                   rotate: [0, 360]
 239 │                 }}
 240 │                 transition={{
 241 │                   duration: 2,
 242 │                   repeat: Infinity,
 243 │                   ease: "linear"
 244 │                 }}
 245 │               >
 246 │                 <Clock className={`h-6 w-6 text-[#FF6B00]`} />
 247 │               </motion.div>
 248 │             </div>
 249 │             <div className="text-center space-y-2">
 250 │               <h4 className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 251 │                 Organizando seu dia...
 252 │               </h4>
 253 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'} max-w-xs`}>
 254 │                 O Mentor IA está analisando suas preferências e criando seu plano de estudos personalizado.
 255 │               </p>
 256 │             </div>
 257 │ 
 258 │             <div className="w-full max-w-xs mt-4">
 259 │               <div className="h-1.5 w-full bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
 260 │                 <motion.div 
 261 │                   className="h-full bg-[#FF6B00]"
 262 │                   animate={{
 263 │                     width: ['0%', '100%']
 264 │                   }}
 265 │                   transition={{
 266 │                     duration: 2,
 267 │                     ease: "easeInOut"
 268 │                   }}
 269 │                 />
 270 │               </div>
 271 │             </div>
 272 │           </div>
 273 │         </div>
 274 │       </motion.div>
 275 │     );
 276 │   }
 277 │ 
 278 │   return (
 279 │     <motion.div 
 280 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 281 │       initial={{ opacity: 0, y: 20 }}
 282 │       animate={{ opacity: 1, y: 0 }}
 283 │       transition={{ duration: 0.5, ease: "easeOut" }}
 284 │     >
 285 │       {/* Header elegante com gradiente */}
 286 │       <div className={`p-5 relative ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 287 │         {/* Barra de progresso interativa no topo */}
 288 │         <div className="absolute top-0 left-0 h-1 bg-[#FF6B00]/20 w-full overflow-hidden">
 289 │           <motion.div 
 290 │             className="h-full bg-[#FF6B00]" 
 291 │             initial={{ width: '0%' }}
 292 │             animate={{ width: `${progressoTotal}%` }}
 293 │             transition={{ duration: 0.5, ease: "easeOut" }}
 294 │           />
 295 │         </div>
 296 │ 
 297 │         <div className="flex items-center justify-between">
 298 │           <div className="flex items-center gap-3">
 299 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
 300 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
 301 │             </div>
 302 │             <div>
 303 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
 304 │                 Seu Foco Hoje
 305 │               </h3>
 306 │               {temFoco && focoPrincipal && (
 307 │                 <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
 308 │                   <span className="font-bold text-[#FF6B00]">
 309 │                     {focoPrincipal.titulo}
 310 │                   </span>
 311 │                 </p>
 312 │               )}
 313 │             </div>
 314 │           </div>
 315 │ 
 316 │           {/* Indicador de progresso circular - mostrado apenas se houver atividades */}
 317 │           {totalAtividades > 0 && (
 318 │             <div className="hidden md:flex items-center">
 319 │               <div className="relative h-12 w-12 flex items-center justify-center">
 320 │                 <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
 321 │                   <circle 
 322 │                     cx="22" cy="22" r="20" 
 323 │                     fill="none" 
 324 │                     stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
 325 │                     strokeWidth="4"
 326 │                   />
 327 │                   <circle 
 328 │                     cx="22" cy="22" r="20" 
 329 │                     fill="none" 
 330 │                     stroke="#FF6B00" 
 331 │                     strokeWidth="4"
 332 │                     strokeDasharray={126}
 333 │                     strokeDashoffset={126 - (progressoTotal / 100) * 126}
 334 │                     transform="rotate(-90 22 22)"
 335 │                     strokeLinecap="round"
 336 │                   />
 337 │                 </svg>
 338 │                 <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 339 │                   {Math.round(progressoTotal)}%
 340 │                 </span>
 341 │               </div>
 342 │             </div>
 343 │           )}
 344 │         </div>
 345 │       </div>
 346 │ 
 347 │       {/* Conteúdo principal */}
 348 │       <div className="p-5">
 349 │         {/* Exibir foco principal quando definido */}
 350 │         {temFoco && focoPrincipal ? (
 351 │           <>
 352 │             {/* Informações do foco principal */}
 353 │             <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 354 │               <div className="flex gap-2 items-start">
 355 │                 <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 356 │                   <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 357 │                 </div>
 358 │                 <div>
 359 │                   <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 360 │                     <span className="font-medium">Foco principal:</span> {focoPrincipal.descricao}
 361 │                   </p>
 362 │                   {focoPrincipal.disciplinas.length > 0 && (
 363 │                     <div className="mt-1.5 flex flex-wrap gap-1.5">
 364 │                       {focoPrincipal.disciplinas.map((disciplina, idx) => (
 365 │                         <span 
 366 │                           key={idx} 
 367 │                           className={`text-xs px-2 py-0.5 rounded-full ${isLightMode ? 'bg-blue-100 text-blue-700' : 'bg-blue-900/30 text-blue-400'}`}
 368 │                         >
 369 │                           {disciplina}
 370 │                         </span>
 371 │                       ))}
 372 │                     </div>
 373 │                   )}
 374 │                 </div>
 375 │               </div>
 376 │             </div>
 377 │ 
 378 │             {/* Botão de configurações para redefinir foco */}
 379 │             <div className="absolute top-5 right-5">
 380 │               <button 
 381 │                 onClick={redefinirFoco}
 382 │                 className={`p-1.5 rounded-full ${isLightMode ? 'bg-gray-100 hover:bg-gray-200' : 'bg-gray-800 hover:bg-gray-700'} transition-colors`}
 383 │               >
 384 │                 <Settings className={`h-3.5 w-3.5 ${isLightMode ? 'text-gray-600' : 'text-gray-400'}`} />
 385 │               </button>
 386 │             </div>
 387 │ 
 388 │             {/* Lista de atividades */}
 389 │             <div className="space-y-2.5">
 390 │               {atividades.map((atividade, index) => (
 391 │                 <motion.div 
 392 │                   key={atividade.id} 
 393 │                   className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 394 │                   whileHover={{ y: -2 }}
 395 │                   onMouseEnter={() => setHoverIndex(index)}
 396 │                   onMouseLeave={() => setHoverIndex(null)}
 397 │                 >
 398 │                   {/* Indicador de prioridade para tarefas urgentes */}
 399 │                   {atividade.urgente && (
 400 │                     <div className="absolute top-0 right-0">
 401 │                       <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 402 │                     </div>
 403 │                   )}
 404 │ 
 405 │                   <div 
 406 │                     className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 407 │                       atividade.concluido 
 408 │                         ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 409 │                         : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 410 │                     }`}
 411 │                     onClick={(e) => {
 412 │                       e.stopPropagation();
 413 │                       toggleAtividade(atividade.id);
 414 │                     }}
 415 │                   >
 416 │                     {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 417 │                   </div>
 418 │ 
 419 │                   <div className="flex-1">
 420 │                     <div className="flex items-start gap-1.5">
 421 │                       <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 422 │                         {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 423 │                         {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 424 │                         {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 425 │                         {atividade.tipo === 'tarefa' && <Check className="h-3 w-3 text-purple-500" />}
 426 │                       </div>
 427 │                       <div>
 428 │                         <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 429 │                           {atividade.titulo}
 430 │                         </p>
 431 │                         <div className="flex items-center mt-1.5 gap-3">
 432 │                           <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 433 │                             <Clock className="h-3 w-3" /> {atividade.tempo}
 434 │                           </span>
 435 │                           <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 436 │                             {atividade.prazo}
 437 │                           </span>
 438 │                         </div>
 439 │                       </div>
 440 │                     </div>
 441 │ 
 442 │                     {/* Progress bar for individual activities */}
 443 │                     <div className="mt-2">
 444 │                       <Progress value={atividade.progresso} 
 445 │                         className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 446 │                     </div>
 447 │                   </div>
 448 │                 </motion.div>
 449 │               ))}
 450 │             </div>
 451 │ 
 452 │             {/* Dica do Mentor IA no final do card */}
 453 │             {focoPrincipal.dicaMentor && (
 454 │               <div className={`mt-4 p-3 rounded-lg ${isLightMode ? 'bg-green-50' : 'bg-green-900/10'} border ${isLightMode ? 'border-green-100' : 'border-green-800/30'}`}>
 455 │                 <div className="flex gap-2 items-start">
 456 │                   <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-green-100' : 'bg-green-800/30'}`}>
 457 │                     <Check className="h-3.5 w-3.5 text-green-600 dark:text-green-400" />
 458 │                   </div>
 459 │                   <p className={`text-xs ${isLightMode ? 'text-gray-700' : 'text-gray-300'}`}>
 460 │                     <span className="font-medium">Dica do Mentor:</span> {focoPrincipal.dicaMentor}
 461 │                   </p>
 462 │                 </div>
 463 │               </div>
 464 │             )}
 465 │           </>
 466 │         ) : (
 467 │           <>
 468 │             {/* Mensagem de boas-vindas para novos usuários */}
 469 │             <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 470 │               <div className="flex gap-2 items-start">
 471 │                 <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 472 │                   <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 473 │                 </div>
 474 │                 <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 475 │                   <span className="font-medium">Mentor IA:</span> Bem-vindo! Aqui você poderá definir e acompanhar suas atividades diárias prioritárias. Comece definindo seu foco de estudos.
 476 │                 </p>
 477 │               </div>
 478 │             </div>
 479 │ 
 480 │             {/* Estado vazio - Sem atividades */}
 481 │             <div className="py-12 flex flex-col items-center justify-center space-y-4">
 482 │               <div className={`p-3 rounded-full ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/10'}`}>
 483 │                 <Clock className={`h-6 w-6 text-[#FF6B00]`} />
 484 │               </div>
 485 │               <div className="text-center space-y-2">
 486 │                 <h4 className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 487 │                   Nenhuma atividade definida
 488 │                 </h4>
 489 │                 <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'} max-w-xs`}>
 490 │                   Defina um foco de estudo e adicione atividades para organizar seu dia.
 491 │                 </p>
 492 │               </div>
 493 │             </div>
 494 │           </>
 495 │         )}
 496 │ 
 497 │         {/* Footer com botão de ação e métricas */}
 498 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center relative">
 499 │           {atividades.length > 0 ? (
 500 │             <div className="flex items-center gap-2">
 501 │               <div className={`w-5 h-5 rounded-full border ${isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent'} flex items-center justify-center`}>
 502 │                 <span className={`text-xs font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-300'}`}>
 503 │                   {atividadesConcluidas}
 504 │                 </span>
 505 │               </div>
 506 │               <span className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 507 │                 {atividadesConcluidas} de {totalAtividades} atividades
 508 │               </span>
 509 │             </div>
 510 │           ) : (
 511 │             <div></div> // Espaçador para manter o layout com justify-between
 512 │           )}
 513 │ 
 514 │           <motion.button 
 515 │             onClick={() => setModalAberto(true)}
 516 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 517 │             whileHover={{ scale: 1.05 }}
 518 │             whileTap={{ scale: 0.98 }}
 519 │           >
 520 │             {atividades.length > 0 ? "Iniciar Foco" : "Definir Foco"}
 521 │             <ChevronRight className="h-3 w-3" />
 522 │           </motion.button>
 523 │ 
 524 │           {/* Exibir sentimento quando disponível */}
 525 │             {temFoco && focoPrincipal?.sentimento && (
 526 │               <div className="absolute top-2 right-2">
 527 │                 <div className="text-xs bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300 px-2 py-1 rounded-full flex items-center gap-1">
 528 │                   {focoPrincipal.sentimento === "Motivado(a)" && <Smile className="h-3 w-3" />}
 529 │                   {focoPrincipal.sentimento === "Um pouco perdido(a)" && <HelpCircle className="h-3 w-3" />}
 530 │                   {focoPrincipal.sentimento === "Cansado(a)" && <Clock className="h-3 w-3" />}
 531 │                   {focoPrincipal.sentimento === "Ansioso(a)" && <BarChart2 className="h-3 w-3" />}
 532 │                   <span>{focoPrincipal.sentimento}</span>
 533 │                 </div>
 534 │               </div>
 535 │             )}
 536 │         </div>
 537 │       </div>
 538 │ 
 539 │       {/* Modal para definir o foco */}
 540 │       <AnimatePresence>
 541 │         {modalAberto && (
 542 │           <DefinirFocoModal 
 543 │             open={modalAberto}
 544 │             onClose={() => setModalAberto(false)}
 545 │             onSave={processarDefinicaoFoco}
 546 │           />
 547 │         )}
 548 │       </AnimatePresence>
 549 │     </motion.div>
 550 │   );
 551 │ }
 552 │ import React, { useState } from "react";
 553 │ import { X } from "lucide-react";
 554 │ import { useTheme } from "@/components/ThemeProvider";
 555 │ import { motion, AnimatePresence } from "framer-motion";
 556 │ import { Separator } from "@/components/ui/separator";
 557 │ import { Input } from "@/components/ui/input";
 558 │ import { Label } from "@/components/ui/label";
 559 │ import { Textarea } from "@/components/ui/textarea";
 560 │ import { Button } from "@/components/ui/button";
 561 │ import { Checkbox } from "@/components/ui/checkbox";
 562 │ import { Progress } from "@/components/ui/progress";
 563 │ import { ScrollArea } from "@/components/ui/scroll-area"
 564 │ 
 565 │ // Define a interface para os dados do foco
 566 │ export interface FocoData {
 567 │   objetivo: string;
 568 │   objetivoPersonalizado?: string;
 569 │   disciplinas: string[];
 570 │   tempoEstudo: number;
 571 │   estado: string;
 572 │   tarefasSelecionadas: string[];
 573 │ }
 574 │ 
 575 │ interface DefinirFocoModalProps {
 576 │   open: boolean;
 577 │   onClose: () => void;
 578 │   onSave: (data: FocoData) => void;
 579 │   onProgressChange?: (progress: number) => void;
 580 │ }
 581 │ 
 582 │ const DefinirFocoModal: React.FC<DefinirFocoModalProps> = ({ open, onClose, onSave, onProgressChange }) => {
     ·       ────────┬───────
     ·               ╰── `DefinirFocoModal` redefined here
 583 │   const { theme } = useTheme();
 584 │   const isLightMode = theme === "light";
     ╰────

  × the name `default` is exported multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:26:1]
  26 │       sentimento?: string;
  27 │     }
  28 │     
  29 │ ╭─▶ export default function FocoDoDiaCard() {
  30 │ │     const { theme } = useTheme();
  31 │ │     const isLightMode = theme === "light";
  32 │ │     const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  33 │ │     const [atividades, setAtividades] = useState<Atividade[]>([]);
  34 │ │     const [focoPrincipal, setFocoPrincipal] = useState<FocoPrincipal | null>(null);
  35 │ │     const [temFoco, setTemFoco] = useState<boolean>(false);
  36 │ │     const [carregando, setCarregando] = useState<boolean>(true);
  37 │ │     const [modalAberto, setModalAberto] = useState<boolean>(false);
  38 │ │     const [gerando, setGerando] = useState<boolean>(false);
  39 │ │   
  40 │ │     // Simular carregamento de dados
  41 │ │     useEffect(() => {
  42 │ │       // Aqui faremos uma simulação de carregamento de dados
  43 │ │       // No futuro, isso seria substituído por chamadas reais à API
  44 │ │       const timeout = setTimeout(() => {
  45 │ │         setCarregando(false);
  46 │ │   
  47 │ │         // Verificar se temos dados do foco salvos no localStorage
  48 │ │         const focoDadosSalvos = localStorage.getItem('focoDia');
  49 │ │         if (focoDadosSalvos) {
  50 │ │           try {
  51 │ │             const dados = JSON.parse(focoDadosSalvos);
  52 │ │             setFocoPrincipal(dados.focoPrincipal);
  53 │ │             setAtividades(dados.atividades);
  54 │ │             setTemFoco(true);
  55 │ │           } catch (error) {
  56 │ │             console.error("Erro ao carregar dados do foco:", error);
  57 │ │           }
  58 │ │         }
  59 │ │       }, 1000);
  60 │ │   
  61 │ │       return () => clearTimeout(timeout);
  62 │ │     }, []);
  63 │ │   
  64 │ │     // Função para lidar com a conclusão de atividades
  65 │ │     const toggleAtividade = (id: number) => {
  66 │ │       // Atualizar o estado local - em uma aplicação real, isto também atualizaria o backend
  67 │ │       const atualizadas = atividades.map(ativ => 
  68 │ │         ativ.id === id ? { ...ativ, concluido: !ativ.concluido } : ativ
  69 │ │       );
  70 │ │   
  71 │ │       setAtividades(atualizadas);
  72 │ │   
  73 │ │       // Atualizar no localStorage
  74 │ │       if (focoPrincipal) {
  75 │ │         localStorage.setItem('focoDia', JSON.stringify({
  76 │ │           focoPrincipal,
  77 │ │           atividades: atualizadas
  78 │ │         }));
  79 │ │       }
  80 │ │     };
  81 │ │   
  82 │ │     // Função para processar dados do modal e gerar o foco
  83 │ │     const processarDefinicaoFoco = (dados: FocoData) => {
  84 │ │       setModalAberto(false);
  85 │ │       setGerando(true);
  86 │ │   
  87 │ │       // Simulando processamento pelo backend/IA
  88 │ │       setTimeout(() => {
  89 │ │         // Criar foco principal baseado nos dados recebidos
  90 │ │         const novoFocoPrincipal: FocoPrincipal = {
  91 │ │           titulo: dados.objetivo,
  92 │ │           descricao: dados.objetivoPersonalizado || dados.objetivo,
  93 │ │           disciplinas: dados.disciplinas,
  94 │ │           tempoTotal: `${Math.round(dados.tempoEstudo / 60)} hora${dados.tempoEstudo >= 120 ? 's' : ''}`,
  95 │ │           dicaMentor: gerarDicaMentor(dados.estado),
  96 │ │           sentimento: dados.estado
  97 │ │         };
  98 │ │   
  99 │ │         // Gerar atividades baseadas nas informações
 100 │ │         const novasAtividades = gerarAtividades(dados);
 101 │ │   
 102 │ │         // Atualizar estados
 103 │ │         setFocoPrincipal(novoFocoPrincipal);
 104 │ │         setAtividades(novasAtividades);
 105 │ │         setTemFoco(true);
 106 │ │         setGerando(false);
 107 │ │   
 108 │ │         // Salvar no localStorage
 109 │ │         localStorage.setItem('focoDia', JSON.stringify({
 110 │ │           focoPrincipal: novoFocoPrincipal,
 111 │ │           atividades: novasAtividades
 112 │ │         }));
 113 │ │       }, 2000);
 114 │ │     };
 115 │ │   
 116 │ │     // Função para gerar dica baseada no estado emocional
 117 │ │     const gerarDicaMentor = (estado: string): string => {
 118 │ │       const dicas = {
 119 │ │         "Motivado(a)": "Aproveite seu ânimo atual para focar nos tópicos mais desafiadores primeiro!",
 120 │ │         "Um pouco perdido(a)": "Divida seu estudo em etapas menores e comemore cada progresso.",
 121 │ │         "Cansado(a)": "Alterne entre tópicos diferentes a cada 30 minutos para manter o foco.",
 122 │ │         "Ansioso(a)": "Pratique 2 minutos de respiração profunda antes de cada sessão de estudo."
 123 │ │       };
 124 │ │   
 125 │ │       return dicas[estado as keyof typeof dicas] || "Estabeleça pequenas metas e celebre cada conquista no seu estudo.";
 126 │ │     };
 127 │ │   
 128 │ │     // Função para gerar atividades com base nos dados do formulário
 129 │ │     const gerarAtividades = (dados: FocoData): Atividade[] => {
 130 │ │       const tiposAtividade: ("video" | "exercicio" | "revisao" | "tarefa")[] = ["video", "exercicio", "revisao", "tarefa"];
 131 │ │   
 132 │ │       // Se o usuário selecionou tarefas específicas, incluí-las
 133 │ │       const atividadesTarefas = dados.tarefasSelecionadas.map((tarefa, index) => ({
 134 │ │         id: Date.now() + index,
 135 │ │         titulo: tarefa,
 136 │ │         tipo: "tarefa" as const,
 137 │ │         tempo: `${Math.floor(Math.random() * 30) + 15}min`,
 138 │ │         prazo: ["hoje", "amanhã", "esta semana"][Math.floor(Math.random() * 3)],
 139 │ │         urgente: Math.random() > 0.7,
 140 │ │         concluido: false,
 141 │ │         progresso: 0
 142 │ │       }));
 143 │ │   
 144 │ │       // Gerar atividades extras com base nas disciplinas
 145 │ │       const atividadesExtra = dados.disciplinas.slice(0, 3).map((disciplina, index) => {
 146 │ │         const tipo = tiposAtividade[Math.floor(Math.random() * tiposAtividade.length)];
 147 │ │         const titulos = {
 148 │ │           video: [`Assistir vídeo de ${disciplina}`, `Aula sobre conceitos de ${disciplina}`],
 149 │ │           exercicio: [`Exercícios de ${disciplina}`, `Resolver problemas de ${disciplina}`],
 150 │ │           revisao: [`Revisar anotações de ${disciplina}`, `Resumo do capítulo de ${disciplina}`],
 151 │ │           tarefa: [`Trabalho de ${disciplina}`, `Projeto de ${disciplina}`]
 152 │ │         };
 153 │ │   
 154 │ │         return {
 155 │ │           id: Date.now() + atividadesTarefas.length + index,
 156 │ │           titulo: titulos[tipo][Math.floor(Math.random() * 2)],
 157 │ │           tipo,
 158 │ │           tempo: `${Math.floor(Math.random() * 45) + 15}min`,
 159 │ │           prazo: ["hoje", "amanhã", "esta semana"][Math.floor(Math.random() * 3)],
 160 │ │           urgente: Math.random() > 0.7,
 161 │ │           concluido: false,
 162 │ │           progresso: 0
 163 │ │         };
 164 │ │       });
 165 │ │   
 166 │ │       // Combinar todas as atividades e limitar a 4 no máximo
 167 │ │       return [...atividadesTarefas, ...atividadesExtra].slice(0, 4);
 168 │ │     };
 169 │ │   
 170 │ │     // Função para reiniciar o foco
 171 │ │     const redefinirFoco = () => {
 172 │ │       setModalAberto(true);
 173 │ │     };
 174 │ │   
 175 │ │     // Calcular progresso total das atividades
 176 │ │     const totalAtividades = atividades.length;
 177 │ │     const atividadesConcluidas = atividades.filter(a => a.concluido).length;
 178 │ │     const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
 179 │ │     const progressoAtividades = totalAtividades > 0 
 180 │ │       ? Math.round((atividadesConcluidas / totalAtividades) * 100) 
 181 │ │       : 0;
 182 │ │   
 183 │ │     // Renderizar estado de carregamento
 184 │ │     if (carregando) {
 185 │ │       return (
 186 │ │         <motion.div 
 187 │ │           className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 188 │ │           initial={{ opacity: 0, y: 20 }}
 189 │ │           animate={{ opacity: 1, y: 0 }}
 190 │ │           transition={{ duration: 0.5, ease: "easeOut" }}
 191 │ │         >
 192 │ │           <div className="h-full flex items-center justify-center p-8">
 193 │ │             <div className="animate-pulse flex flex-col items-center space-y-4 w-full">
 194 │ │               <div className="w-full flex justify-between items-center">
 195 │ │                 <div className="h-8 bg-gray-300 dark:bg-gray-700 rounded-md w-1/3"></div>
 196 │ │                 <div className="h-8 w-8 bg-gray-300 dark:bg-gray-700 rounded-full"></div>
 197 │ │               </div>
 198 │ │               <div className="h-16 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 199 │ │               <div className="space-y-3 w-full">
 200 │ │                 <div className="h-12 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 201 │ │                 <div className="h-12 bg-gray-200 dark:bg-gray-800 rounded-lg w-full"></div>
 202 │ │               </div>
 203 │ │             </div>
 204 │ │           </div>
 205 │ │         </motion.div>
 206 │ │       );
 207 │ │     }
 208 │ │   
 209 │ │     // Renderizar estado de geração de foco
 210 │ │     if (gerando) {
 211 │ │       return (
 212 │ │         <motion.div 
 213 │ │           className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 214 │ │           initial={{ opacity: 0, y: 20 }}
 215 │ │           animate={{ opacity: 1, y: 0 }}
 216 │ │           transition={{ duration: 0.5, ease: "easeOut" }}
 217 │ │         >
 218 │ │           <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 219 │ │             <div className="flex items-center justify-between">
 220 │ │               <div className="flex items-center gap-3">
 221 │ │                 <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
 222 │ │                   <Flame className={`h-5 w-5 text-[#FF6B00] animate-pulse`} />
 223 │ │                 </div>
 224 │ │                 <div>
 225 │ │                   <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
 226 │ │                     Seu Foco Hoje
 227 │ │                   </h3>
 228 │ │                 </div>
 229 │ │               </div>
 230 │ │             </div>
 231 │ │           </div>
 232 │ │   
 233 │ │           <div className="h-full p-8 flex flex-col items-center justify-center">
 234 │ │             <div className="flex flex-col items-center space-y-4">
 235 │ │               <div className={`p-3 rounded-full ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 236 │ │                 <motion.div
 237 │ │                   animate={{
 238 │ │                     rotate: [0, 360]
 239 │ │                   }}
 240 │ │                   transition={{
 241 │ │                     duration: 2,
 242 │ │                     repeat: Infinity,
 243 │ │                     ease: "linear"
 244 │ │                   }}
 245 │ │                 >
 246 │ │                   <Clock className={`h-6 w-6 text-[#FF6B00]`} />
 247 │ │                 </motion.div>
 248 │ │               </div>
 249 │ │               <div className="text-center space-y-2">
 250 │ │                 <h4 className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 251 │ │                   Organizando seu dia...
 252 │ │                 </h4>
 253 │ │                 <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'} max-w-xs`}>
 254 │ │                   O Mentor IA está analisando suas preferências e criando seu plano de estudos personalizado.
 255 │ │                 </p>
 256 │ │               </div>
 257 │ │   
 258 │ │               <div className="w-full max-w-xs mt-4">
 259 │ │                 <div className="h-1.5 w-full bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
 260 │ │                   <motion.div 
 261 │ │                     className="h-full bg-[#FF6B00]"
 262 │ │                     animate={{
 263 │ │                       width: ['0%', '100%']
 264 │ │                     }}
 265 │ │                     transition={{
 266 │ │                       duration: 2,
 267 │ │                       ease: "easeInOut"
 268 │ │                     }}
 269 │ │                   />
 270 │ │                 </div>
 271 │ │               </div>
 272 │ │             </div>
 273 │ │           </div>
 274 │ │         </motion.div>
 275 │ │       );
 276 │ │     }
 277 │ │   
 278 │ │     return (
 279 │ │       <motion.div 
 280 │ │         className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'} h-full`}
 281 │ │         initial={{ opacity: 0, y: 20 }}
 282 │ │         animate={{ opacity: 1, y: 0 }}
 283 │ │         transition={{ duration: 0.5, ease: "easeOut" }}
 284 │ │       >
 285 │ │         {/* Header elegante com gradiente */}
 286 │ │         <div className={`p-5 relative ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 287 │ │           {/* Barra de progresso interativa no topo */}
 288 │ │           <div className="absolute top-0 left-0 h-1 bg-[#FF6B00]/20 w-full overflow-hidden">
 289 │ │             <motion.div 
 290 │ │               className="h-full bg-[#FF6B00]" 
 291 │ │               initial={{ width: '0%' }}
 292 │ │               animate={{ width: `${progressoTotal}%` }}
 293 │ │               transition={{ duration: 0.5, ease: "easeOut" }}
 294 │ │             />
 295 │ │           </div>
 296 │ │   
 297 │ │           <div className="flex items-center justify-between">
 298 │ │             <div className="flex items-center gap-3">
 299 │ │               <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
 300 │ │                 <Flame className={`h-5 w-5 text-[#FF6B00]`} />
 301 │ │               </div>
 302 │ │               <div>
 303 │ │                 <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
 304 │ │                   Seu Foco Hoje
 305 │ │                 </h3>
 306 │ │                 {temFoco && focoPrincipal && (
 307 │ │                   <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
 308 │ │                     <span className="font-bold text-[#FF6B00]">
 309 │ │                       {focoPrincipal.titulo}
 310 │ │                     </span>
 311 │ │                   </p>
 312 │ │                 )}
 313 │ │               </div>
 314 │ │             </div>
 315 │ │   
 316 │ │             {/* Indicador de progresso circular - mostrado apenas se houver atividades */}
 317 │ │             {totalAtividades > 0 && (
 318 │ │               <div className="hidden md:flex items-center">
 319 │ │                 <div className="relative h-12 w-12 flex items-center justify-center">
 320 │ │                   <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
 321 │ │                     <circle 
 322 │ │                       cx="22" cy="22" r="20" 
 323 │ │                       fill="none" 
 324 │ │                       stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
 325 │ │                       strokeWidth="4"
 326 │ │                     />
 327 │ │                     <circle 
 328 │ │                       cx="22" cy="22" r="20" 
 329 │ │                       fill="none" 
 330 │ │                       stroke="#FF6B00" 
 331 │ │                       strokeWidth="4"
 332 │ │                       strokeDasharray={126}
 333 │ │                       strokeDashoffset={126 - (progressoTotal / 100) * 126}
 334 │ │                       transform="rotate(-90 22 22)"
 335 │ │                       strokeLinecap="round"
 336 │ │                     />
 337 │ │                   </svg>
 338 │ │                   <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 339 │ │                     {Math.round(progressoTotal)}%
 340 │ │                   </span>
 341 │ │                 </div>
 342 │ │               </div>
 343 │ │             )}
 344 │ │           </div>
 345 │ │         </div>
 346 │ │   
 347 │ │         {/* Conteúdo principal */}
 348 │ │         <div className="p-5">
 349 │ │           {/* Exibir foco principal quando definido */}
 350 │ │           {temFoco && focoPrincipal ? (
 351 │ │             <>
 352 │ │               {/* Informações do foco principal */}
 353 │ │               <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 354 │ │                 <div className="flex gap-2 items-start">
 355 │ │                   <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 356 │ │                     <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 357 │ │                   </div>
 358 │ │                   <div>
 359 │ │                     <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 360 │ │                       <span className="font-medium">Foco principal:</span> {focoPrincipal.descricao}
 361 │ │                     </p>
 362 │ │                     {focoPrincipal.disciplinas.length > 0 && (
 363 │ │                       <div className="mt-1.5 flex flex-wrap gap-1.5">
 364 │ │                         {focoPrincipal.disciplinas.map((disciplina, idx) => (
 365 │ │                           <span 
 366 │ │                             key={idx} 
 367 │ │                             className={`text-xs px-2 py-0.5 rounded-full ${isLightMode ? 'bg-blue-100 text-blue-700' : 'bg-blue-900/30 text-blue-400'}`}
 368 │ │                           >
 369 │ │                             {disciplina}
 370 │ │                           </span>
 371 │ │                         ))}
 372 │ │                       </div>
 373 │ │                     )}
 374 │ │                   </div>
 375 │ │                 </div>
 376 │ │               </div>
 377 │ │   
 378 │ │               {/* Botão de configurações para redefinir foco */}
 379 │ │               <div className="absolute top-5 right-5">
 380 │ │                 <button 
 381 │ │                   onClick={redefinirFoco}
 382 │ │                   className={`p-1.5 rounded-full ${isLightMode ? 'bg-gray-100 hover:bg-gray-200' : 'bg-gray-800 hover:bg-gray-700'} transition-colors`}
 383 │ │                 >
 384 │ │                   <Settings className={`h-3.5 w-3.5 ${isLightMode ? 'text-gray-600' : 'text-gray-400'}`} />
 385 │ │                 </button>
 386 │ │               </div>
 387 │ │   
 388 │ │               {/* Lista de atividades */}
 389 │ │               <div className="space-y-2.5">
 390 │ │                 {atividades.map((atividade, index) => (
 391 │ │                   <motion.div 
 392 │ │                     key={atividade.id} 
 393 │ │                     className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 394 │ │                     whileHover={{ y: -2 }}
 395 │ │                     onMouseEnter={() => setHoverIndex(index)}
 396 │ │                     onMouseLeave={() => setHoverIndex(null)}
 397 │ │                   >
 398 │ │                     {/* Indicador de prioridade para tarefas urgentes */}
 399 │ │                     {atividade.urgente && (
 400 │ │                       <div className="absolute top-0 right-0">
 401 │ │                         <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 402 │ │                       </div>
 403 │ │                     )}
 404 │ │   
 405 │ │                     <div 
 406 │ │                       className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 407 │ │                         atividade.concluido 
 408 │ │                           ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 409 │ │                           : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 410 │ │                       }`}
 411 │ │                       onClick={(e) => {
 412 │ │                         e.stopPropagation();
 413 │ │                         toggleAtividade(atividade.id);
 414 │ │                       }}
 415 │ │                     >
 416 │ │                       {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 417 │ │                     </div>
 418 │ │   
 419 │ │                     <div className="flex-1">
 420 │ │                       <div className="flex items-start gap-1.5">
 421 │ │                         <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 422 │ │                           {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 423 │ │                           {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 424 │ │                           {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 425 │ │                           {atividade.tipo === 'tarefa' && <Check className="h-3 w-3 text-purple-500" />}
 426 │ │                         </div>
 427 │ │                         <div>
 428 │ │                           <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 429 │ │                             {atividade.titulo}
 430 │ │                           </p>
 431 │ │                           <div className="flex items-center mt-1.5 gap-3">
 432 │ │                             <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 433 │ │                               <Clock className="h-3 w-3" /> {atividade.tempo}
 434 │ │                             </span>
 435 │ │                             <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 436 │ │                               {atividade.prazo}
 437 │ │                             </span>
 438 │ │                           </div>
 439 │ │                         </div>
 440 │ │                       </div>
 441 │ │   
 442 │ │                       {/* Progress bar for individual activities */}
 443 │ │                       <div className="mt-2">
 444 │ │                         <Progress value={atividade.progresso} 
 445 │ │                           className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 446 │ │                       </div>
 447 │ │                     </div>
 448 │ │                   </motion.div>
 449 │ │                 ))}
 450 │ │               </div>
 451 │ │   
 452 │ │               {/* Dica do Mentor IA no final do card */}
 453 │ │               {focoPrincipal.dicaMentor && (
 454 │ │                 <div className={`mt-4 p-3 rounded-lg ${isLightMode ? 'bg-green-50' : 'bg-green-900/10'} border ${isLightMode ? 'border-green-100' : 'border-green-800/30'}`}>
 455 │ │                   <div className="flex gap-2 items-start">
 456 │ │                     <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-green-100' : 'bg-green-800/30'}`}>
 457 │ │                       <Check className="h-3.5 w-3.5 text-green-600 dark:text-green-400" />
 458 │ │                     </div>
 459 │ │                     <p className={`text-xs ${isLightMode ? 'text-gray-700' : 'text-gray-300'}`}>
 460 │ │                       <span className="font-medium">Dica do Mentor:</span> {focoPrincipal.dicaMentor}
 461 │ │                     </p>
 462 │ │                   </div>
 463 │ │                 </div>
 464 │ │               )}
 465 │ │             </>
 466 │ │           ) : (
 467 │ │             <>
 468 │ │               {/* Mensagem de boas-vindas para novos usuários */}
 469 │ │               <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 470 │ │                 <div className="flex gap-2 items-start">
 471 │ │                   <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 472 │ │                     <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 473 │ │                   </div>
 474 │ │                   <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 475 │ │                     <span className="font-medium">Mentor IA:</span> Bem-vindo! Aqui você poderá definir e acompanhar suas atividades diárias prioritárias. Comece definindo seu foco de estudos.
 476 │ │                   </p>
 477 │ │                 </div>
 478 │ │               </div>
 479 │ │   
 480 │ │               {/* Estado vazio - Sem atividades */}
 481 │ │               <div className="py-12 flex flex-col items-center justify-center space-y-4">
 482 │ │                 <div className={`p-3 rounded-full ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/10'}`}>
 483 │ │                   <Clock className={`h-6 w-6 text-[#FF6B00]`} />
 484 │ │                 </div>
 485 │ │                 <div className="text-center space-y-2">
 486 │ │                   <h4 className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 487 │ │                     Nenhuma atividade definida
 488 │ │                   </h4>
 489 │ │                   <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'} max-w-xs`}>
 490 │ │                     Defina um foco de estudo e adicione atividades para organizar seu dia.
 491 │ │                   </p>
 492 │ │                 </div>
 493 │ │               </div>
 494 │ │             </>
 495 │ │           )}
 496 │ │   
 497 │ │           {/* Footer com botão de ação e métricas */}
 498 │ │           <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center relative">
 499 │ │             {atividades.length > 0 ? (
 500 │ │               <div className="flex items-center gap-2">
 501 │ │                 <div className={`w-5 h-5 rounded-full border ${isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent'} flex items-center justify-center`}>
 502 │ │                   <span className={`text-xs font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-300'}`}>
 503 │ │                     {atividadesConcluidas}
 504 │ │                   </span>
 505 │ │                 </div>
 506 │ │                 <span className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 507 │ │                   {atividadesConcluidas} de {totalAtividades} atividades
 508 │ │                 </span>
 509 │ │               </div>
 510 │ │             ) : (
 511 │ │               <div></div> // Espaçador para manter o layout com justify-between
 512 │ │             )}
 513 │ │   
 514 │ │             <motion.button 
 515 │ │               onClick={() => setModalAberto(true)}
 516 │ │               className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 517 │ │               whileHover={{ scale: 1.05 }}
 518 │ │               whileTap={{ scale: 0.98 }}
 519 │ │             >
 520 │ │               {atividades.length > 0 ? "Iniciar Foco" : "Definir Foco"}
 521 │ │               <ChevronRight className="h-3 w-3" />
 522 │ │             </motion.button>
 523 │ │   
 524 │ │             {/* Exibir sentimento quando disponível */}
 525 │ │               {temFoco && focoPrincipal?.sentimento && (
 526 │ │                 <div className="absolute top-2 right-2">
 527 │ │                   <div className="text-xs bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300 px-2 py-1 rounded-full flex items-center gap-1">
 528 │ │                     {focoPrincipal.sentimento === "Motivado(a)" && <Smile className="h-3 w-3" />}
 529 │ │                     {focoPrincipal.sentimento === "Um pouco perdido(a)" && <HelpCircle className="h-3 w-3" />}
 530 │ │                     {focoPrincipal.sentimento === "Cansado(a)" && <Clock className="h-3 w-3" />}
 531 │ │                     {focoPrincipal.sentimento === "Ansioso(a)" && <BarChart2 className="h-3 w-3" />}
 532 │ │                     <span>{focoPrincipal.sentimento}</span>
 533 │ │                   </div>
 534 │ │                 </div>
 535 │ │               )}
 536 │ │           </div>
 537 │ │         </div>
 538 │ │   
 539 │ │         {/* Modal para definir o foco */}
 540 │ │         <AnimatePresence>
 541 │ │           {modalAberto && (
 542 │ │             <DefinirFocoModal 
 543 │ │               open={modalAberto}
 544 │ │               onClose={() => setModalAberto(false)}
 545 │ │               onSave={processarDefinicaoFoco}
 546 │ │             />
 547 │ │           )}
 548 │ │         </AnimatePresence>
 549 │ │       </motion.div>
 550 │ │     );
 551 │ ├─▶ }
     · ╰──── previous exported here
 552 │     import React, { useState } from "react";
 553 │     import { X } from "lucide-react";
 554 │     import { useTheme } from "@/components/ThemeProvider";
 555 │     import { motion, AnimatePresence } from "framer-motion";
 556 │     import { Separator } from "@/components/ui/separator";
 557 │     import { Input } from "@/components/ui/input";
 558 │     import { Label } from "@/components/ui/label";
 559 │     import { Textarea } from "@/components/ui/textarea";
 560 │     import { Button } from "@/components/ui/button";
 561 │     import { Checkbox } from "@/components/ui/checkbox";
 562 │     import { Progress } from "@/components/ui/progress";
 563 │     import { ScrollArea } from "@/components/ui/scroll-area"
 564 │     
 565 │     // Define a interface para os dados do foco
 566 │     export interface FocoData {
 567 │       objetivo: string;
 568 │       objetivoPersonalizado?: string;
 569 │       disciplinas: string[];
 570 │       tempoEstudo: number;
 571 │       estado: string;
 572 │       tarefasSelecionadas: string[];
 573 │     }
 574 │     
 575 │     interface DefinirFocoModalProps {
 576 │       open: boolean;
 577 │       onClose: () => void;
 578 │       onSave: (data: FocoData) => void;
 579 │       onProgressChange?: (progress: number) => void;
 580 │     }
 581 │     
 582 │     const DefinirFocoModal: React.FC<DefinirFocoModalProps> = ({ open, onClose, onSave, onProgressChange }) => {
 583 │       const { theme } = useTheme();
 584 │       const isLightMode = theme === "light";
 585 │     
 586 │       // Estados para os campos do formulário
 587 │       const [objetivo, setObjetivo] = useState("");
 588 │       const [objetivoPersonalizado, setObjetivoPersonalizado] = useState("");
 589 │       const [disciplinas, setDisciplinas] = useState<string[]>([]);
 590 │       const [tempoEstudo, setTempoEstudo] = useState(60); // Tempo em minutos
 591 │       const [estado, setEstado] = useState("Motivado(a)");
 592 │       const [tarefas, setTarefas] = useState(["Revisar capítulo 1", "Fazer exercícios da lista 2", "Assistir vídeo sobre o tema X"]);
 593 │       const [tarefasSelecionadas, setTarefasSelecionadas] = useState<string[]>([]);
 594 │     
 595 │       // Estados para modal
 596 │       const [modalOpen, setModalOpen] = useState(false);
 597 │       const [gerando, setGerando] = useState(false);
 598 │       const [focoSalvo, setFocoSalvo] = useState<FocoData | null>(null);
 599 │       const [definirFocoProgresso, setDefinirFocoProgresso] = useState(0);
 600 │     
 601 │       // Variantes para animações do modal
 602 │       const modalVariants = {
 603 │         hidden: { opacity: 0, y: 50 },
 604 │         visible: { opacity: 1, y: 0, transition: { duration: 0.3 } },
 605 │         exit: { opacity: 0, y: 50, transition: { duration: 0.3 } }
 606 │       };
 607 │     
 608 │       // Array de estados emocionais
 609 │       const estadosEmocionais = ["Motivado(a)", "Um pouco perdido(a)", "Cansado(a)", "Ansioso(a)"];
 610 │     
 611 │       // Array de disciplinas
 612 │       const disciplinasOptions = ["Matemática", "Física", "Química", "Biologia", "História", "Geografia", "Português", "Inglês"];
 613 │     
 614 │       // Função para lidar com a seleção de disciplinas
 615 │       const handleDisciplinaChange = (disciplina: string) => {
 616 │         setDisciplinas((prevDisciplinas) =>
 617 │           prevDisciplinas.includes(disciplina)
 618 │             ? prevDisciplinas.filter((d) => d !== disciplina)
 619 │             : [...prevDisciplinas, disciplina]
 620 │         );
 621 │       };
 622 │     
 623 │       // Função para lidar com a seleção de tarefas
 624 │       const handleTarefaChange = (tarefa: string) => {
 625 │         setTarefasSelecionadas((prevTarefas) =>
 626 │           prevTarefas.includes(tarefa)
 627 │             ? prevTarefas.filter((t) => t !== tarefa)
 628 │             : [...prevTarefas, tarefa]
 629 │         );
 630 │       };
 631 │     
 632 │       // Função para salvar os dados do foco
 633 │       const handleSaveFoco = () => {
 634 │         const data: FocoData = {
 635 │           objetivo,
 636 │           objetivoPersonalizado,
 637 │           disciplinas,
 638 │           tempoEstudo,
 639 │           estado,
 640 │           tarefasSelecionadas,
 641 │         };
 642 │     
 643 │         setFocoSalvo(data);
 644 │         onSave(data);
 645 │         onClose();
 646 │       };
 647 │     
 648 │       // Função para abrir o modal
 649 │       const abrirModal = () => {
 650 │         setModalOpen(true);
 651 │         setDefinirFocoProgresso(0); // Reinicia o progresso
 652 │       };
 653 │     
 654 │       // Função para fechar o modal
 655 │       const fecharModal = () => {
 656 │         setModalOpen(false);
 657 │       };
 658 │     
 659 │       // Função para atualizar o progresso
 660 │       const atualizarProgresso = (progresso: number) => {
 661 │         setDefinirFocoProgresso(progresso);
 662 │       };
 663 │     
 664 │       return (
 665 │         <AnimatePresence>
 666 │           {open && (
 667 │             <motion.div
 668 │               className="fixed top-0 left-0 w-full h-full flex items-center justify-center bg-black/50 z-50"
 669 │               variants={modalVariants}
 670 │               initial="hidden"
 671 │               animate="visible"
 672 │               exit="exit"
 673 │             >
 674 │               <motion.div
 675 │                 className={`bg-white dark:bg-gray-900 rounded-lg shadow-xl w-full max-w-md mx-4`}
 676 │                 onClick={(e) => e.stopPropagation()}
 677 │               >
 678 │                 {/* Header do modal */}
 679 │                 <div className="flex items-center justify-between p-4 border-b dark:border-gray-800">
 680 │                   <h2 className="text-lg font-semibold text-gray-800 dark:text-white">Defina seu Foco de Hoje</h2>
 681 │                   <button onClick={onClose} className="p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700">
 682 │                     <X className="h-5 w-5 text-gray-600 dark:text-gray-400" />
 683 │                   </button>
 684 │                 </div>
 685 │     
 686 │                 {/* Progress bar no topo do modal */}
 687 │                 <Progress value={definirFocoProgresso} className="mt-1 mx-4" />
 688 │     
 689 │                 {/* Conteúdo do modal */}
 690 │                 <div className="p-4 space-y-4">
 691 │                   <div>
 692 │                     <Label htmlFor="objetivo" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
 693 │                       Qual o seu objetivo de estudo hoje?
 694 │                     </Label>
 695 │                     <Input
 696 │                       type="text"
 697 │                       id="objetivo"
 698 │                       className="mt-1 block w-full sm:text-sm rounded-md dark:bg-gray-800 dark:border-gray-700 dark:text-white"
 699 │                       value={objetivo}
 700 │                       onChange={(e) => {
 701 │                         setObjetivo(e.target.value);
 702 │                         onProgressChange?.(20); // Altere o valor conforme necessário
 703 │                       }}
 704 │                     />
 705 │                   </div>
 706 │                   <div>
 707 │                     <Label htmlFor="objetivoPersonalizado" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
 708 │                       Seu objetivo é diferente das opções acima?
 709 │                     </Label>
 710 │                     <Textarea
 711 │                       id="objetivoPersonalizado"
 712 │                       rows={3}
 713 │                       className="mt-1 block w-full sm:text-sm rounded-md dark:bg-gray-800 dark:border-gray-700 dark:text-white"
 714 │                       value={objetivoPersonalizado}
 715 │                       onChange={(e) => setObjetivoPersonalizado(e.target.value)}
 716 │                     />
 717 │                   </div>
 718 │                   <div>
 719 │                     <Label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
 720 │                       Quais disciplinas você vai estudar hoje?
 721 │                     </Label>
 722 │                     <div className="mt-2 flex flex-wrap gap-2">
 723 │                       {disciplinasOptions.map((disciplina) => (
 724 │                         <div key={disciplina} className="flex items-center">
 725 │                           <Checkbox
 726 │                             id={`disciplina-${disciplina}`}
 727 │                             checked={disciplinas.includes(disciplina)}
 728 │                             onCheckedChange={() => {
 729 │                               handleDisciplinaChange(disciplina);
 730 │                               onProgressChange?.(40); // Altere o valor conforme necessário
 731 │                             }}
 732 │                             className="rounded dark:bg-gray-800 dark:border-gray-700 dark:text-white"
 733 │                           />
 734 │                           <Label htmlFor={`disciplina-${disciplina}`} className="ml-2 text-sm text-gray-700 dark:text-gray-300">
 735 │                             {disciplina}
 736 │                           </Label>
 737 │                         </div>
 738 │                       ))}
 739 │                     </div>
 740 │                   </div>
 741 │                   <div>
 742 │                     <Label htmlFor="tempoEstudo" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
 743 │                       Quanto tempo você vai estudar hoje (em minutos)?
 744 │                     </Label>
 745 │                     <Input
 746 │                       type="number"
 747 │                       id="tempoEstudo"
 748 │                       className="mt-1 block w-full sm:text-sm rounded-md dark:bg-gray-800 dark:border-gray-700 dark:text-white"
 749 │                       value={tempoEstudo}
 750 │                       onChange={(e) => {
 751 │                         const value = parseInt(e.target.value);
 752 │                         setTempoEstudo(value);
 753 │                         onProgressChange?.(60); // Altere o valor conforme necessário
 754 │                       }}
 755 │                     />
 756 │                   </div>
 757 │                   <div>
 758 │                     <Label htmlFor="estado" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
 759 │                       Como você está se sentindo hoje?
 760 │                     </Label>
 761 │                     <select
 762 │                       id="estado"
 763 │                       className="mt-1 block w-full sm:text-sm rounded-md dark:bg-gray-800 dark:border-gray-700 dark:text-white"
 764 │                       value={estado}
 765 │                       onChange={(e) => {
 766 │                         setEstado(e.target.value);
 767 │                         onProgressChange?.(80); // Altere o valor conforme necessário
 768 │                       }}
 769 │                     >
 770 │                       {estadosEmocionais.map((estado) => (
 771 │                         <option key={estado} value={estado}>
 772 │                           {estado}
 773 │                         </option>
 774 │                       ))}
 775 │                     </select>
 776 │                   </div>
 777 │                   <div>
 778 │                     <Label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
 779 │                       Selecione algumas tarefas para hoje:
 780 │                     </Label>
 781 │                     <ScrollArea className="h-40 rounded-md border dark:bg-gray-800 dark:border-gray-700">
 782 │                       <div className="relative">
 783 │                         {tarefas.map((tarefa) => (
 784 │                           <div key={tarefa} className="flex items-center p-2 hover:bg-gray-100 dark:hover:bg-gray-700">
 785 │                             <Checkbox
 786 │                               id={`tarefa-${tarefa}`}
 787 │                               checked={tarefasSelecionadas.includes(tarefa)}
 788 │                               onCheckedChange={() => {
 789 │                                 handleTarefaChange(tarefa);
 790 │                                 onProgressChange?.(100); // Altere o valor conforme necessário
 791 │                               }}
 792 │                               className="rounded dark:bg-gray-800 dark:border-gray-700 dark:text-white"
 793 │                             />
 794 │                             <Label htmlFor={`tarefa-${tarefa}`} className="ml-2 text-sm text-gray-700 dark:text-gray-300">
 795 │                               {tarefa}
 796 │                             </Label>
 797 │                           </div>
 798 │                         ))}
 799 │                       </div>
 800 │                     </ScrollArea>
 801 │                   </div>
 802 │                 </div>
 803 │     
 804 │                 {/* Footer do modal */}
 805 │                 <div className="flex justify-end p-4 border-t dark:border-gray-800">
 806 │                   <Button type="button" variant="ghost" className="mr-2" onClick={onClose}>
 807 │                     Cancelar
 808 │                   </Button>
 809 │                   <Button type="button" onClick={handleSaveFoco}>
 810 │                     Salvar Foco
 811 │                   </Button>
 812 │                 </div>
 813 │               </motion.div>
 814 │             </motion.div>
 815 │           )}
 816 │         </AnimatePresence>
 817 │       );
 818 │     };
 819 │     
 820 │ ╭─▶ export default DefinirFocoModal;
     · │────────────────┬───────────────
     · │                ╰── exported more than once
     ╰────

Error: 
  ☞ Exported identifiers must be unique
/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:1:1
1  |  import React, { useState, useEffect } from "react";
   |   ^
2  |  import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy, PlusCircle, Settings, Smile, HelpCircle, BarChart2 } from "lucide-react";
3  |  import { useTheme } from "@/components/ThemeProvider";