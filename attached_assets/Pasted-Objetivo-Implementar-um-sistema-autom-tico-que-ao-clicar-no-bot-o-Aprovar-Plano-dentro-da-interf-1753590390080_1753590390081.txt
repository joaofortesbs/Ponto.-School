Objetivo:
Implementar um sistema autom√°tico que, ao clicar no bot√£o ‚ÄúAprovar Plano‚Äù dentro da interface de Plano de A√ß√£o (dentro do Card de Constru√ß√£o), realiza os seguintes passos:

Identifica e localiza todos os mini-cards de atividades listados no plano aprovado.

Acessa o modal de ‚ÄúEditar Materiais‚Äù de cada uma dessas atividades.

Preenche automaticamente todos os campos do modal com base nas informa√ß√µes da IA que foram geradas anteriormente no pr√≥prio Plano de A√ß√£o.

Aciona automaticamente o bot√£o ‚ÄúConstruir Atividade‚Äù dentro do modal.

Garante que a atividade seja constru√≠da com sucesso (pr√©-visualiza√ß√£o gerada) e salva em mem√≥ria.

Tudo isso de forma autom√°tica, sequencial, ass√≠ncrona e invis√≠vel para o usu√°rio.

Restri√ß√µes:
‚ùå N√£o alterar o design de nenhum Card, Modal ou Layout j√° existente.
‚úÖ Utilizar apenas as estruturas j√° existentes da interface atual.
‚úÖ Respeitar a estrutura modular e separada de l√≥gica vs interface.

üìÇ Estrutura Esperada dos Arquivos:

src/features/schoolpower/construction/auto/autoBuildActivities.ts

src/features/schoolpower/construction/api/fillActivityModalFields.ts

src/features/schoolpower/construction/hooks/useAutoActivityBuilder.ts

src/features/schoolpower/construction/utils/getActivityDataFromPlan.ts

üß† Fluxo L√≥gico Completo da Constru√ß√£o Autom√°tica

Detec√ß√£o do Evento:

A fun√ß√£o principal (autoBuildActivities) √© disparada quando o bot√£o ‚ÄúAprovar Plano‚Äù √© clicado dentro da interface de Plano de A√ß√£o.

Esse bot√£o j√° existe na UI atual, conforme imagem enviada, e est√° localizado dentro do Card de Constru√ß√£o.

Coleta de Dados:

A fun√ß√£o coleta todos os dados do plano de a√ß√£o aprovado, principalmente os campos gerados pela IA para cada atividade (ex: t√≠tulo, descri√ß√£o, disciplina, formato, objetivos, materiais, dificuldade, dura√ß√£o etc).

Esses dados est√£o organizados por tipo de atividade e ID.

Mapeamento por ID:

A cada mini-card de atividade dentro da interface de Constru√ß√£o de Atividades corresponde um ID exclusivo (ex: atividadeId: 'atividade-001').

A fun√ß√£o vai iterar por todos os IDs e executar os seguintes passos para cada um:

Abertura virtual do Modal:

Simula a abertura do modal de ‚ÄúEditar Materiais‚Äù para cada atividade (sem anima√ß√£o vis√≠vel para o usu√°rio).

Internamente, o sistema carrega o componente EditActivityModal.tsx com o ID correspondente da atividade.

Preenchimento Autom√°tico:

Dentro do modal, o sistema usa a fun√ß√£o fillActivityModalFields para popular todos os campos com os dados gerados pela IA (vindos do plano de a√ß√£o).

Disparo do Bot√£o ‚ÄúConstruir Atividade‚Äù:

Ap√≥s todos os campos estarem preenchidos, o sistema aciona automaticamente o bot√£o ‚ÄúConstruir Atividade‚Äù, como se o usu√°rio clicasse manualmente.

Isso chama a fun√ß√£o que j√° existe dentro do modal (handleGenerate ou similar), que chama a IA e preenche a pr√©-visualiza√ß√£o no lado direito do modal.

Armazenamento Tempor√°rio:

O conte√∫do da atividade gerada √© salvo localmente na Store (Zustand ou Context) e vinculado ao ID da atividade.

Isso garante que, mesmo que o usu√°rio abra o modal novamente, ver√° a vers√£o j√° constru√≠da.

üîÅ Execu√ß√£o Sequencial com Controle de Estado

A fun√ß√£o autoBuildActivities deve ser ass√≠ncrona e aguardar a finaliza√ß√£o de cada etapa antes de ir para a pr√≥xima.

Exemplo:
await fillActivityModalFields(activityId, generatedData);
await triggerGenerateButton(activityId);

‚úÖ Tratamento de Erros:

Se alguma atividade n√£o tiver dados completos no plano de a√ß√£o, ela deve ser ignorada e logada no console.

Em caso de erro de gera√ß√£o, exibir fallback: "Erro ao gerar atividade. Tente novamente manualmente."

‚úÖ Status de Feedback:

Adicionar uma badge discreta no canto superior direito do mini-card da atividade com o texto ‚Äú‚úîÔ∏è Constru√≠da‚Äù assim que a atividade for gerada com sucesso.

üß© Sugest√£o de C√≥digo (autoBuildActivities.ts):

export const autoBuildActivities = async (planData: PlanData[]) => {
for (const activity of planData) {
const { id, generatedFields } = activity;

scss
Copiar
Editar
try {
  await openModalSilently(id);
  await fillActivityModalFields(id, generatedFields);
  await triggerGenerateButton(id);
  markAsBuilt(id);
} catch (e) {
  console.error(`Erro ao construir atividade ${id}:`, e);
}
}
};

üìå Considera√ß√µes T√©cnicas:

A estrutura do modal EditActivityModal j√° est√° pronta e funcionando, portanto nenhuma modifica√ß√£o estrutural √© necess√°ria.

A IA j√° est√° integrada ao bot√£o de Construir Atividade.

O sistema vai simular a entrada dos dados e o clique no bot√£o, mas tudo feito via fun√ß√µes internas ‚Äî sem manipula√ß√£o visual do DOM.

üì¶ Resultado Esperado:

Ao clicar em "Aprovar Plano", todas as atividades listadas no plano ser√£o constru√≠das automaticamente e estar√£o prontas para visualiza√ß√£o ou exporta√ß√£o.

O sistema ser√° modular, escal√°vel e n√£o ir√° interferir na experi√™ncia visual do usu√°rio.