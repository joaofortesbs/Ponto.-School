

Objetivo: Corrigir a exibição dos membros do grupo de estudos na mini-seção "Membros" dentro da interface interna do respectivo Grupo de Estudos, garantindo que todos os membros sejam exibidos corretamente em uma grade de mini-cards, conforme o design visual representado nas imagens enviadas. Cada mini-card deve conter a imagem de perfil do usuário, o nome do usuário e um indicador de status (online ou offline). As alterações devem ser feitas de forma cuidadosa e cirúrgica, preservando todas as funcionalidades existentes, sem alterar elementos fora de contexto ou introduzir erros/bugs, e mantendo o design/layout da mini-seção "Grupos de Estudos" (incluindo modais de "Adicionar Grupo" e "Criar Novo Grupo").



Instruções Gerais





Escopo Restrito: Foque exclusivamente na função accessGroup e na função loadMembers no frontend para corrigir e garantir a exibição dos membros. Não modifique o design ou layout das outras mini-seções ("Discussões", "Tarefas", "Configurações", "Notificações"), nem os modais de "Adicionar Grupo" e "Criar Novo Grupo", nem outras partes do código (ex.: createGroup, joinGroupByCode, loadAllGroups).



Preservação: Mantenha intactas todas as funcionalidades existentes (criação via modal, adesão, saída/exclusão, chat, pesquisa, contagem de online, modal de configurações), sem impacto no layout ou design fora do escopo.



Eficiência: Use Supabase para carregar os membros e seus status de forma confiável, com validação e logs detalhados para identificar e corrigir falhas. Garanta que a grade seja responsiva e os mini-cards sejam uniformes, conforme as imagens.



Testes Completos: Após as alterações, teste a mini-seção "Membros" e envie os logs.



Análise de Problemas





Problema Identificado: Os membros não estão aparecendo, possivelmente devido a:





Falha na chamada ao Supabase ou filtro incorreto em membros_grupos.



Erro na função loadMembers não sendo chamada corretamente ao ativar a seção "Membros".



Cache userCache não sendo populado ou acessado adequadamente.



Solução: Verificar e corrigir a lógica de carregamento, garantir que loadMembers seja chamada ao alternar para "Membros", e logar cada etapa para depuração.



Descrição da Interface da Mini-Seção Membros





Estrutura da Grade: Um contêiner com display: grid, grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)), gap: 15px, e padding: 10px para organizar os mini-cards, refletindo o layout visual das imagens.



Mini-Card:





Dimensões: Largura mínima de 200px, altura automática (~150px), borda-radius de 8px, fundo #f9f9f9, e sombra leve (box-shadow: 0 2px 4px rgba(0,0,0,0.1)).



Imagem de Perfil: Um <img> com width: 50px, height: 50px, border-radius: 50%, e object-fit: cover, carregado de avatar_url ou gerado via https://ui-avatars.com/api/?name= se ausente.



Nome do Usuário: Um <strong> ao lado da imagem, com margin-left: 10px, cor #333, e tamanho de fonte 16px.



Status: Um <span> abaixo do nome, com texto "Online" (cor #2ecc71) ou "Offline" (cor #e74c3c), atualizado via user_sessions.



Modificações no Frontend (JavaScript)

 // Atualizar accessGroup para incluir a mini-seção Membros e garantir chamada inicial const accessGroup = async (groupId) => { try { console.log(`Acessando grupo ${groupId}...`); const userId = await validateUserAuth(); if (!userId) { console.error('Usuário não autenticado.'); alert('Usuário não autenticado.'); return; } 

// Ocultar o cabeçalho de Minhas Turmas
const header = document.querySelector('.groups-header');
if (header) header.style.display = 'none';

// Cache para nomes e imagens de perfil
const userCache = new Map();
const { data: users } = await supabase
  .from('auth.users')
  .select('id, user_metadata')
  .in('id', (await supabase.from('membros_grupos').select('user_id').eq('grupo_id', groupId)).data.map(u => u.user_id));
if (!users) throw new Error('Nenhum usuário encontrado no grupo.');
users.forEach(user => {
  const metadata = user.user_metadata || {};
  userCache.set(user.id, {
    name: metadata.name || `Usuário ${user.id.slice(0, 5)}`,
    avatar_url: metadata.avatar_url || null
  });
});
console.log(`Cache de usuários populado com ${userCache.size} entradas.`);

// Contagem de membros online
let onlineCount = 0;
const updateOnlineCount = () => {
  const now = new Date();
  onlineCount = (supabase
    .from('user_sessions')
    .select('user_id', { count: 'exact' })
    .eq('grupo_id', groupId)
    .gte('last_active', new Date(now - 30 * 1000).toISOString())
  ).then(({ count }) => count || 0);
};
setInterval(updateOnlineCount, 15000);
updateOnlineCount();

const groupInterface = document.createElement('div');
groupInterface.id = 'group-interface';
groupInterface.style.cssText = 'margin-left: 250px; padding: 20px;';
groupInterface.innerHTML = `
  <div style="display: flex; justify-content: space-between; border-bottom: 1px solid #ccc; padding-bottom: 10px;">
    <div class="mini-sections">
      <button class="active" style="background: #3498db; color: white; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;" onclick="switchSection('discussions', '${groupId}')">Discussões</button>
      <button style="background: #ddd; color: #666; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;" onclick="switchSection('members', '${groupId}')">Membros</button>
      <button disabled style="background: #ddd; color: #666; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;">Tarefas</button>
      <button disabled style="background: #ddd; color: #666; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;">Configurações</button>
      <button disabled style="background: #ddd; color: #666; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;">Notificações</button>
    </div>
    <div style="display: flex; align-items: center;">
      <span id="online-count" style="margin-right: 10px; color: #2ecc71;">Online: <span id="online-number">0</span></span>
      <button id="search-icon" style="background: none; border: none; cursor: pointer; margin-right: 10px;">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
      </button>
      <button id="menu-icon" style="background: none; border: none; cursor: pointer;">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="12" cy="12" r="1"></circle><circle cx="12" cy="5" r="1"></circle><circle cx="12" cy="19" r="1"></circle>
        </svg>
      </button>
    </div>
  </div>
  <div id="discussions-content" style="margin-top: 20px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; min-height: 200px; display: block;">
    <div id="chat-messages" style="display: flex; flex-direction: column-reverse;"></div>
  </div>
  <div id="members-content" style="margin-top: 20px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; min-height: 200px; display: none;">
    <div id="members-grid" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 15px;"></div>
  </div>
  <div style="margin-top: 10px; display: flex; align-items: center;">
    <input id="chat-input" type="text" placeholder="Digite sua mensagem..." style="flex-grow: 1; padding: 5px; border: 1px solid #ccc; border-radius: 5px; margin-right: 5px;">
    <button onclick="sendMessage('${groupId}')" style="background: #2ecc71; color: white; border: none; padding: 5px 10px; border-radius: 5px;">Enviar</button>
  </div>
  <div id="search-bar" style="display: none; margin-top: 10px;">
    <input id="search-input" type="text" placeholder="Pesquisar mensagens..." style="width: 200px; padding: 5px; border: 1px solid #ccc; border-radius: 5px;">
    <button onclick="hideSearchBar()" style="background: #e74c3c; color: white; border: none; padding: 5px 10px; border-radius: 5px; margin-left: 5px;">Fechar</button>
  </div>
`;
document.getElementById('main-content').innerHTML = '';
document.getElementById('main-content').appendChild(groupInterface);

// Atualizar contagem de online
setInterval(() => {
  updateOnlineCount().then(count => {
    document.getElementById('online-number').textContent = count;
  });
}, 15000);

// Configurar Realtime para chat e online
const channel = supabase
  .channel(`chat-${groupId}`)
  .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'mensagens', filter: `grupo_id=eq.${groupId}` }, (payload) => {
    addMessageToChat(payload.new, userCache);
  })
  .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'user_sessions', filter: `grupo_id=eq.${groupId}` }, () => {
    updateOnlineCount().then(count => document.getElementById('online-number').textContent = count);
    loadMembers(groupId, userCache); // Atualizar status dos membros
  })
  .on('postgres_changes', { event: 'DELETE', schema: 'public', table: 'user_sessions', filter: `grupo_id=eq.${groupId}` }, () => {
    updateOnlineCount().then(count => document.getElementById('online-number').textContent = count);
    loadMembers(groupId, userCache); // Atualizar status dos membros
  })
  .subscribe(async (status) => {
    if (status === 'SUBSCRIBED') {
      console.log(`Subscribed to chat and online channel for group ${groupId}`);
      const { data: messages } = await supabase
        .from('mensagens')
        .select('*')
        .eq('grupo_id', groupId)
        .order('enviado_em', { ascending: false });
      messages.forEach(message => addMessageToChat(message, userCache));
      updateOnlineCount().then(count => document.getElementById('online-number').textContent = count);
      switchSection('discussions', groupId); // Iniciar com Discussões
      loadMembers(groupId, userCache); // Carregar membros inicialmente
    }
  });

// Evento para ícone de pesquisa
document.getElementById('search-icon').addEventListener('click', () => {
  document.getElementById('search-bar').style.display = 'block';
  document.getElementById('search-input').focus();
  filterMessages(groupId);
});

// Evento para ícone de três pontos
document.getElementById('menu-icon').addEventListener('click', () => showOptionsModal(groupId));

console.log(`Interface do grupo ${groupId} carregada com chat configurado.`);

} catch (error) { console.error('Erro ao acessar grupo:', error.message, error.stack); alert('Erro ao acessar o grupo. Verifique o console.'); const header = document.querySelector('.groups-header'); if (header) header.style.display = 'flex'; } };

// Função para carregar e exibir membros (corrigida e detalhada) const loadMembers = async (groupId, userCache) => { try { console.log(Carregando membros para o grupo ${groupId}...); const now = new Date(); const { data: members, error: membersError } = await supabase .from('membros_grupos') .select('user_id') .eq('grupo_id', groupId); if (membersError) throw membersError; if (!members || members.length === 0) { console.warn('Nenhum membro encontrado para o grupo.'); document.getElementById('members-grid').innerHTML = '

Nenhum membro encontrado.

'; return; } console.log(Membros encontrados: ${members.length});



const { data: sessions, error: sessionsError } = await supabase
  .from('user_sessions')
  .select('user_id')
  .eq('grupo_id', groupId)
  .gte('last_active', new Date(now - 30 * 1000).toISOString());
if (sessionsError) throw sessionsError;
const onlineUsers = new Set(sessions.map(s => s.user_id));
console.log(`Usuários online: ${onlineUsers.size}`);

const membersGrid = document.getElementById('members-grid');
membersGrid.innerHTML = ''; // Limpar antes de renderizar
members.forEach(member => {
  const userData = userCache.get(member.user_id);
  if (!userData) {
    console.warn(`Dados não encontrados para o usuário ${member.user_id}`);
    return;
  }
  const isOnline = onlineUsers.has(member.user_id);
  const memberCard = document.createElement('div');
  memberCard.style.cssText = 'min-width: 200px; height: auto; background: #f9f9f9; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); padding: 10px; display: flex; align-items: center;';
  memberCard.innerHTML = `
    <img src="${userData.avatar_url || `https://ui-avatars.com/api/?name=${encodeURIComponent(userData.name)}`}" alt="${userData.name}" style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;">
    <div style="margin-left: 10px;">
      <strong style="color: #333; font-size: 16px;">${userData.name}</strong><br>
      <span style="color: ${isOnline ? '#2ecc71' : '#e74c3c'};">${isOnline ? 'Online' : 'Offline'}</span>
    </div>
  `;
  membersGrid.appendChild(memberCard);
});
console.log(`Membros renderizados com sucesso para o grupo ${groupId}.`);

} catch (error) { console.error('Erro ao carregar membros:', error.message, error.stack); alert('Erro ao carregar membros. Verifique o console.'); setTimeout(() => loadMembers(groupId, userCache), 2000); // Retry após 2 segundos } };

// Função para alternar entre seções (corrigida para chamar loadMembers) const switchSection = (section, groupId) => { const sections = ['discussions', 'members']; sections.forEach(s => { const content = document.getElementById(${s}-content); if (content) content.style.display = s === section ? 'block' : 'none'; const button = document.querySelector(button[onclick*="switchSection('${s}'"]); if (button) { button.style.background = s === section ? '#3498db' : '#ddd'; button.style.color = s === section ? 'white' : '#666'; } }); if (section === 'members') { loadMembers(groupId, userCache); // Garantir que os membros sejam carregados ao alternar } console.log(Seção ${section} ativada para o grupo ${groupId}.); };

// Funções auxiliares mantidas (returnToGroups, updateOnlineCount, filterMessages, hideSearchBar, loadInitialMessages, showOptionsModal, showSettingsModal, addMessageToChat, sendMessage, etc.) sem alterações