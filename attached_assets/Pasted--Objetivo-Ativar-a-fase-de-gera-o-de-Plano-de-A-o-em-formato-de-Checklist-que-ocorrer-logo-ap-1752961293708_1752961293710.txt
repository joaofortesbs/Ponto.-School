üöÄ Objetivo:
Ativar a fase de gera√ß√£o de Plano de A√ß√£o em formato de Checklist, que ocorrer√° logo ap√≥s o usu√°rio preencher o Card de Contextualiza√ß√£o, dentro da se√ß√£o School Power da Ponto. School, utilizando a API Gemini, gerando tarefas personalizadas e poss√≠veis de serem executadas pelo School Power, vinculadas √†s Atividades Gerais cadastradas.

üéØ Resumo do fluxo:
‚úÖ O usu√°rio envia a mensagem inicial na ChatInput.
‚úÖ O usu√°rio preenche o Card de Contextualiza√ß√£o.
‚úÖ Ap√≥s o envio, a API Gemini ser√° chamada, utilizando:

Mensagem inicial

Respostas do Quiz de Contextualiza√ß√£o

Lista de Atividades Gerais dispon√≠veis no School Power (consultadas do schoolPowerFeatures.json)

‚úÖ A IA retornar√° um Plano de A√ß√£o em formato de Checklist com no m√≠nimo 5 tarefas, garantindo que todas as tarefas sejam atividades que o School Power consegue gerar.

‚úÖ Um novo Card de Plano de A√ß√£o ser√° exibido, substituindo suavemente o Card de Contextualiza√ß√£o (com anima√ß√£o), exibindo:

O t√≠tulo de cada tarefa

Descri√ß√£o curta de cada tarefa

Checkbox interativo para marcar como lida

Bot√£o ‚ÄúAprovar Plano‚Äù, que ao ser clicado, dispara a gera√ß√£o de todas as tarefas aprovadas automaticamente pelo School Power.

üìÅ Arquivo a ser criado:
1Ô∏è‚É£ src/features/schoolpower/actionplan/ActionPlanCard.tsx
‚úÖ Componente React respons√°vel por exibir o Plano de A√ß√£o em formato de Checklist gerado pela IA.

Funcionalidades do componente:

Recebe via props:

actionPlan: ActionPlanItem[]

onApprove: () => void

Interface:

ts
Copiar
Editar
interface ActionPlanItem {
  id: string;
  title: string;
  description: string;
  approved: boolean;
}
Renderiza:

T√≠tulo: Plano de A√ß√£o Gerado

Descri√ß√£o orientando o usu√°rio: ‚ÄúRevise o plano abaixo e clique em aprovar para gerar as atividades automaticamente.‚Äù

Lista de CheckList:

Cada item com:

Checkbox para marcar como lido

T√≠tulo da tarefa

Descri√ß√£o curta

Bot√£o laranja ‚ÄúAprovar Plano‚Äù, estilizado de forma coerente com o design Ponto. School.

Feedback visual de loading durante o carregamento e envio das aprova√ß√µes.

‚úÖ Utilizar anima√ß√£o suave com Framer Motion para a transi√ß√£o do ContextualizationCard para o ActionPlanCard.

‚öôÔ∏è Integra√ß√£o com o fluxo atual:
1Ô∏è‚É£ Ao o usu√°rio enviar o Quiz de Contextualiza√ß√£o:

Chamar a API Gemini (usando a GEMINI API Key: AIzaSyD-Sso0SdyYKoA4M3tQhcWjQ1AoddB7Wo4)

Enviar no prompt:

Mensagem inicial enviada pelo usu√°rio

Respostas do Card de Contextualiza√ß√£o

Lista de Atividades Gerais dispon√≠veis em schoolPowerFeatures.json

Solicitar que a IA gere no m√≠nimo 5 tarefas em formato de checklist, garantindo:

Cada tarefa seja uma das atividades que o School Power consegue gerar.

Cada tarefa tenha t√≠tulo curto e descri√ß√£o curta.

Retorne em formato JSON:

json
Copiar
Editar
[
  {
    "id": "atividade-1",
    "title": "Atividade 1",
    "description": "Descri√ß√£o curta da atividade"
  },
  ...
]
Armazenar a lista no estado global de School Power.

2Ô∏è‚É£ Trocar o estado do fluxo de "contextualizing" para "actionplan" e exibir o ActionPlanCard.

3Ô∏è‚É£ Ao clicar em ‚ÄúAprovar Plano‚Äù:

Trocar o estado do fluxo para "generatingActivities" para ativar a gera√ß√£o autom√°tica das atividades pelo School Power.

Utilizar a lista aprovada para gerar as atividades reais.

Ativar loaders e feedbacks visuais enquanto as atividades s√£o geradas.

üìå Considera√ß√µes T√©cnicas:
‚úÖ Utilizar TypeScript estrito para consist√™ncia.
‚úÖ Utilizar Framer Motion para transi√ß√µes suaves.
‚úÖ Garantir que o ActionPlanCard seja modular, reativo e reutiliz√°vel.
‚úÖ Se necess√°rio, utilizar zustand para armazenar o actionPlan de forma persistente no fluxo da se√ß√£o.
‚úÖ Utilizar axios ou fetch para chamada da API Gemini com manuseio robusto de erros e timeouts.
‚úÖ Estruturar de forma que futuras expans√µes (como personaliza√ß√£o dos planos ou gera√ß√£o incremental) possam ser facilmente implementadas.

üîç Exemplo de prompt para enviar √† Gemini:
css
Copiar
Editar
Voc√™ √© uma IA que ajuda professores a planejar atividades para seus alunos. Aqui est√£o as informa√ß√µes:

Mensagem inicial do professor:
"{mensagem_inicial}"

Respostas do Quiz:
Mat√©rias e temas: "{subjects}"
P√∫blico-alvo: "{audience}"
Restri√ß√µes: "{restrictions}"
Datas importantes: "{dates}"
Observa√ß√µes: "{notes}"

Lista de atividades que voc√™ pode sugerir:
{atividades_permitidas_do_school_power}

Com base nessas informa√ß√µes, gere um plano de a√ß√£o em formato de checklist, com no m√≠nimo 5 tarefas, garantindo que cada tarefa seja uma das atividades da lista, com um t√≠tulo curto e uma descri√ß√£o curta para cada uma. Responda em JSON no formato:
[
  {"id":"atividade-1","title":"T√≠tulo","description":"Descri√ß√£o"},
  ...
]
‚úÖ Resumo do que ser√° entregue:
‚úÖ Um ActionPlanCard.tsx funcional, limpo e esteticamente integrado.
‚úÖ Integra√ß√£o completa com o fluxo do School Power.
‚úÖ Gera√ß√£o autom√°tica e personalizada de plano de a√ß√£o utilizando a API Gemini.
‚úÖ Restri√ß√µes que garantem que apenas atividades poss√≠veis pelo School Power sejam sugeridas.
‚úÖ Prepara√ß√£o para gera√ß√£o de atividades ap√≥s a aprova√ß√£o do plano pelo usu√°rio.

