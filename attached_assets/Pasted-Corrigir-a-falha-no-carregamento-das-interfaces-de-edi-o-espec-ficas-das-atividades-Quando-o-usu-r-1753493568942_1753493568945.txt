Corrigir a falha no carregamento das interfaces de edição específicas das atividades. Quando o usuário clicar no botão “Editar” de um card de atividade dentro da tela de Construção de Atividades, o sistema deve localizar e renderizar corretamente a interface de edição da atividade associada ao ID, com campos dinâmicos e visualização ao vivo da atividade sendo construída.

—

🧠 Contexto do Erro Atual:

Ao clicar em “Editar”, o sistema tenta acessar a interface da atividade com base em seu ID (ex: prova-funcao-1grau), mas retorna a mensagem “Atividade não encontrada”.

Isso indica que a lógica de roteamento/carregamento dinâmico está com falha na identificação ou importação dos módulos correspondentes à atividade.

—

✅ Soluções que a IA deve implementar:

CORRIGIR O MAPEAMENTO DOS IDS DE ATIVIDADE:

Criar um dicionário centralizado em src/features/schoolpower/activities/activityRegistry.ts que faça o mapeamento de todos os IDs válidos para os componentes de edição e visualização, como:

ts
Copiar
Editar
export const activityRegistry = {
  "prova-funcao-1grau": {
    editor: lazy(() => import("./prova-funcao-1grau/EditActivity")),
    preview: lazy(() => import("./prova-funcao-1grau/ActivityPreview")),
  },
  "jogo-funcao-1grau": {
    editor: lazy(() => import("./jogo-funcao-1grau/EditActivity")),
    preview: lazy(() => import("./jogo-funcao-1grau/ActivityPreview")),
  },
  // ... e assim por diante
};
AJUSTAR O COMPONENTE EditActivityContainer.tsx:

Refatorar esse componente para:

Ler o selectedActivityId vindo do contexto global.

Verificar se o ID existe no activityRegistry.

Se sim: carregar dinamicamente os componentes editor e preview.

Se não: exibir mensagem de erro personalizada.

Exemplo básico de uso:

tsx
Copiar
Editar
const activity = activityRegistry[selectedActivityId];
if (!activity) return <NotFound id={selectedActivityId} />;

const Editor = activity.editor;
const Preview = activity.preview;
TESTAR COM AO MENOS UMA ATIVIDADE:

Criar a pasta src/features/schoolpower/activities/prova-funcao-1grau/ com:

EditActivity.tsx (com campos como título, número de questões, etc.)

ActivityPreview.tsx (renderização simples com base no estado do formulário)

GARANTIR QUE O SISTEMA SUPORTE IMPORTAÇÃO DINÂMICA:

Os componentes devem usar React.lazy e Suspense para carregar a interface sem travar o app.

TRATAMENTO DE ERROS:

O sistema deve ter fallback padrão para quando:

O ID passado não for encontrado.

Houver falha na importação de um módulo.

(Opcional mas recomendado) ARQUIVO DE TIPAGEM CENTRAL:

Criar um tipo central para atividade:

ts
Copiar
Editar
type ActivityComponentSet = {
  editor: LazyExoticComponent<FC>;
  preview: LazyExoticComponent<FC>;
};
—

📁 Estrutura esperada para o ID “prova-funcao-1grau”:

src/features/schoolpower/activities/prova-funcao-1grau/
├── EditActivity.tsx
├── ActivityPreview.tsx
└── schema.ts (opcional)

—

🔁 Comportamento esperado após a correção:

O botão “Editar” nos cards redireciona corretamente para uma interface dividida:

Painel Esquerdo: Campos personalizados da atividade.

Painel Direito: Visualização ao vivo.

Nenhuma atividade válida deve exibir o erro “não encontrada”.

A estrutura é modular e expansível: adicionar uma nova atividade requer apenas:

Criar a pasta da atividade

Adicionar os dois arquivos necessários

Atualizar o activityRegistry.ts

—

🧪 Testes esperados:

Testar com os IDs:

prova-funcao-1grau

jogo-funcao-1grau

Confirmar que ao clicar no botão de edição dos cards correspondentes:

Os componentes são renderizados corretamente.

A visualização responde aos inputs do formulário.

—

🧠 Reforço estratégico:
Essa etapa garante a base da construção modular do School Power, e deve funcionar com 100% de confiabilidade. Isso vai permitir escalar para dezenas (ou centenas) de atividades em diferentes disciplinas, com interfaces personalizadas para cada uma. A modularidade é prioridade absoluta.

—

🚀 Frase de ativação final:

Corrija o erro e implemente o sistema de carregamento modular para que o botão “Editar” leve corretamente o usuário à interface específica de cada atividade. Use importação dinâmica via activityRegistry, crie os componentes iniciais e garanta robustez, escalabilidade e fluidez na experiência. Avance com excelência.