Criar um sistema funcional que permite à IA (via Gemini) preencher corretamente os campos necessários da atividade com base no ID (inicialmente só para "Lista de Exercícios") e mostrar isso no mini-card do Plano de Ação.

Vamos montar tudo o que precisa ser feito com organização, nome de arquivos claros e o primeiro prompt ideal.

✅ Etapas dessa primeira fase

Criar um novo arquivo com todos os campos necessários por tipo de atividade.

Alterar o prompt que será enviado para a IA, puxando os campos desse arquivo de apoio com base no ID da atividade.

Garantir que, ao receber a resposta da IA, os dados sejam aplicados corretamente nos campos esperados do mini-card de sugestão (Plano de Ação).

Testar essa estrutura apenas para o ID da atividade "Lista de Exercícios" (exemplo: id: "list_exercicios").

🧩 Etapa 1: Novo arquivo com os campos necessários por tipo de atividade

📁 Caminho sugerido:
src/features/schoolpower/data/activityFieldDefinitions.json

📄 Estrutura do arquivo:

[
{
"id": "list_exercicios",
"label": "Lista de Exercícios",
"camposNecessarios": [
"titulo",
"descricao",
"disciplina",
"tema",
"anoEscolaridade",
"numeroQuestoes",
"modeloQuestoes",
"nivelDificuldade",
"fontes"
]
},
{
"id": "debate",
"label": "Debate em Sala",
"camposNecessarios": [
"titulo",
"descricao",
"disciplina",
"tema",
"duracaoEstimada",
"formatoEntrega",
"objetivosAprendizagem",
"materiaisNecessarios"
]
}
// ... incluir todas as 82 atividades futuramente
]

Este arquivo será usado para definir dinamicamente o que precisa ser preenchido pela IA para cada tipo de atividade.

🧩 Etapa 2: Alterar o prompt enviado para a IA do Gemini

📁 Arquivo para modificar:
src/features/schoolpower/services/generatePersonalizedPlan.ts

🔧 O que fazer:

Importar o arquivo activityFieldDefinitions.json.

Para cada atividade sugerida no plano, buscar o ID dela no arquivo e pegar os campos obrigatórios.

Montar o prompt usando esses campos como estrutura-base.

Enviar esse prompt para o Gemini, pedindo que retorne preenchido com base nas diretrizes da escola, do aluno e dos dados pedagógicos.

✅ Exemplo de trecho do prompt gerado para a IA (em português):

Prompt gerado dinamicamente:

Quero que você gere uma sugestão de atividade do tipo "Lista de Exercícios", com os seguintes campos preenchidos:

título

descrição

disciplina

tema

anoEscolaridade

numeroQuestoes

modeloQuestoes

nivelDificuldade

fontes

Esses campos devem ser preenchidos com base no tema de "Substantivos e Verbos" para a disciplina de Português, dentro do contexto pedagógico da BNCC. A sugestão será apresentada ao professor para validação, então utilize uma linguagem clara, didática e profissional.

Responda no formato JSON com as seguintes chaves:
{
"id": "list_exercicios",
"titulo": "...",
"descricao": "...",
"disciplina": "...",
"tema": "...",
"anoEscolaridade": "...",
"numeroQuestoes": "...",
"modeloQuestoes": "...",
"nivelDificuldade": "...",
"fontes": "..."
}

🧩 Etapa 3: Mostrar campos no mini-card (Plano de Ação)

📁 Componente afetado:
Provavelmente dentro de: src/features/schoolpower/components/cards/ActivitySuggestionCard.vue (ou tsx)

🔧 O que fazer:

Ajustar para que os campos vindos da IA (conforme o JSON de resposta) sejam exibidos dentro do mini-card de sugestão.

Exibir os campos apenas definidos como "camposNecessarios" para aquele ID de atividade.

Pode usar uma estrutura de componente dinâmica para iterar sobre os campos e mostrar com os nomes legíveis (ex: "Modelo de Questões", "Nível de Dificuldade", etc.).

🧩 Etapa 4: Aprovar teoria com o ID “list_exercicios”

Testar no ambiente de desenvolvimento.

Usar o ID "list_exercicios".

Conferir se a IA recebe o prompt correto e se o retorno preenche corretamente o mini-card.

Validar se os campos aparecem exatamente como configurado na interface da imagem que você me mandou.

🚀 Resumo dos arquivos criados/modificados:

✅ Novo: src/features/schoolpower/data/activityFieldDefinitions.json
(guarda os campos por ID da atividade)

✏️ Editar: src/features/schoolpower/services/generatePersonalizedPlan.ts
(alimenta o prompt da IA com base no ID e nos campos definidos)

✏️ Editar: src/features/schoolpower/components/cards/ActivitySuggestionCard.vue (ou tsx)
(renderiza os campos vindos da IA dinamicamente no mini-card)