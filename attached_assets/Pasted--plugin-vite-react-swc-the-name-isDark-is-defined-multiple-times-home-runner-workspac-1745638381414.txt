[plugin:vite:react-swc] × the name `isDark` is defined multiple times
     ╭─[/home/runner/workspace/src/components/epictus-ia/EpictusTurboMode.tsx:107:1]
 107 │     };
 108 │   }, []);
 109 │ 
 110 │   const isDark = theme === "dark";
     ·         ───┬──
     ·            ╰── previous definition of `isDark` here
 111 │ 
 112 │   const profileOptions = [
 113 │     { 
 114 │       id: "estudante",
 115 │       icon: <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-[#0055B8]"><path d="M12 10v-2a2 2 0 0 0-2-2V4"></path><path d="M10 4H8a2 2 0 0 0-2 2v1a2 2 0 0 0-2 2v1"></path><path d="M14 4h2a2 2 0 0 1 2 2v1a2 2 0 0 1 2 2v1"></path><path d="M18 15v1a2 2 0 0 1-2 2h-1a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2h-1a2 2 0 0 1-2-2v-1a2 2 0 0 1 2-2h7a2 2 0 0 1 2 2Z"></path></svg>, 
 116 │       color: "#0055B8", 
 117 │       name: "Estudante",
 118 │       onClick: () => {
 119 │         setSelectedProfile("Estudante");
 120 │         const event = new CustomEvent('profileSelected', { 
 121 │           detail: { 
 122 │             name: "Estudante", 
 123 │             icon: <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white"><path d="M12 10v-2a2 2 0 0 0-2-2V4"></path><path d="M10 4H8a2 2 0 0 0-2 2v1a2 2 0 0 0-2 2v1"></path><path d="M14 4h2a2 2 0 0 1 2 2v1a2 2 0 0 1 2 2v1"></path><path d="M18 15v1a2 2 0 0 1-2 2h-1a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2h-1a2 2 0 0 1-2-2v-1a2 2 0 0 1 2-2h7a2 2 0 0 1 2 2Z"></path></svg>
 124 │           } 
 125 │         });
 126 │         window.dispatchEvent(event);
 127 │       }
 128 │     },
 129 │     { 
 130 │       id: "professor",
 131 │       icon: <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-[#0055B8]"><path d="M8 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3.93a2 2 0 0 1-1.66-.9L15.12 4a2 2 0 0 0-1.66-.9H8.83A3 3 0 0 0 6 5.17V17"></path><path d="M2 14h7"></path><path d="M6 10 2 14l4 4"></path></svg>, 
 132 │       color: "#0055B8", 
 133 │       name: "Professor",
 134 │       onClick: () => {
 135 │         setSelectedProfile("Professor");
 136 │         const event = new CustomEvent('profileSelected', { 
 137 │           detail: { 
 138 │             name: "Professor", 
 139 │             icon: <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white"><path d="M8 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3.93a2 2 0 0 1-1.66-.9L15.12 4a2 2 0 0 0-1.66-.9H8.83A3 3 0 0 0 6 5.17V17"></path><path d="M2 14h7"></path><path d="M6 10 2 14l4 4"></path></svg>
 140 │           } 
 141 │         });
 142 │         window.dispatchEvent(event);
 143 │       }
 144 │     },
 145 │     { 
 146 │       id: "coordenador",
 147 │       icon: <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-[#0055B8]"><path d="M15.5 2H8.6c-.4 0-.8.2-1.1.5-.3.3-.5.7-.5 1.1v12.8c0 .4.2.8.5 1.1.3.3.7.5 1.1.5h9.8c.4 0 .8-.2 1.1-.5.3-.3.5-.7.5-1.1V6.5L15.5 2z"></path><path d="M3 7.6v12.8c0 .4.2.8.5 1.1.3.3.7.5 1.1.5h9.8"></path><path d="M15 2v5h5"></path></svg>, 
 148 │       color: "#0055B8", 
 149 │       name: "Coordenador",
 150 │       onClick: () => {
 151 │         setSelectedProfile("Coordenador");
 152 │         const event = new CustomEvent('profileSelected', { 
 153 │           detail: { 
 154 │             name: "Coordenador", 
 155 │             icon: <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white"><path d="M15.5 2H8.6c-.4 0-.8.2-1.1.5-.3.3-.5.7-.5 1.1v12.8c0 .4.2.8.5 1.1.3.3.7.5 1.1.5h9.8c.4 0 .8-.2 1.1-.5.3-.3.5-.7.5-1.1V6.5L15.5 2z"></path><path d="M3 7.6v12.8c0 .4.2.8.5 1.1.3.3.7.5 1.1.5h9.8"></path><path d="M15 2v5h5"></path></svg>
 156 │           } 
 157 │         });
 158 │         window.dispatchEvent(event);
 159 │       }
 160 │     },
 161 │     { 
 162 │       id: "expert",
 163 │       icon: <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-[#0055B8]"><path d="M12 2a10 10 0 1 0 10 10 4 4 0 0 1-5-5 4 4 0 0 1-5-5"></path><path d="M8.5 8.5v.01"></path><path d="M16 15.5v.01"></path><path d="M12 12v.01"></path><path d="M11 17v.01"></path><path d="M7 14v.01"></path></svg>, 
 164 │       color: "#0055B8", 
 165 │       name: "Expert",
 166 │       onClick: () => {
 167 │         setSelectedProfile("Expert");
 168 │         const event = new CustomEvent('profileSelected', { 
 169 │           detail: { 
 170 │             name: "Expert", 
 171 │             icon: <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white"><path d="M12 2a10 10 0 1 0 10 10 4 4 0 0 1-5-5 4 4 0 0 1-5-5"></path><path d="M8.5 8.5v.01"></path><path d="M16 15.5v.01"></path><path d="M12 12v.01"></path><path d="M11 17v.01"></path><path d="M7 14v.01"></path></svg>
 172 │           } 
 173 │         });
 174 │         window.dispatchEvent(event);
 175 │       }
 176 │     }
 177 │   ];
 178 │ 
 179 │   const handleSendMessage = async () => {
 180 │     if (!inputMessage.trim()) return;
 181 │ 
 182 │     const currentConversationId = messages.length > 0 && messages[messages.length - 1].conversationId 
 183 │       ? messages[messages.length - 1].conversationId 
 184 │       : uuidv4();
 185 │ 
 186 │     const possibleTitle = messages.length <= 2 
 187 │       ? inputMessage.slice(0, 40) + (inputMessage.length > 40 ? "..." : "") 
 188 │       : null;
 189 │ 
 190 │     let tipoConversa = "duvidas"; 
 191 │     const lowerInput = inputMessage.toLowerCase();
 192 │ 
 193 │     if (lowerInput.includes("corrige") || lowerInput.includes("revisar") || lowerInput.includes("analisar")) {
 194 │       tipoConversa = "correcao";
 195 │     } else if (lowerInput.includes("resumo") || lowerInput.includes("resumir")) {
 196 │       tipoConversa = "resumo";
 197 │     } else if (lowerInput.includes("simulado") || lowerInput.includes("exercícios") || lowerInput.includes("questões")) {
 198 │       tipoConversa = "simulado";
 199 │     } else if (lowerInput.includes("explica") || lowerInput.includes("conteúdo") || lowerInput.includes("conceito")) {
 200 │       tipoConversa = "conteudo";
 201 │     }
 202 │ 
 203 │     const userMessage: Message = {
 204 │       id: uuidv4(),
 205 │       sender: "user",
 206 │       content: inputMessage,
 207 │       timestamp: new Date(),
 208 │       conversationId: currentConversationId,
 209 │       metadata: {
 210 │         tipo: tipoConversa,
 211 │         titulo: possibleTitle
 212 │       }
 213 │     };
 214 │ 
 215 │     setInputMessage("");
 216 │     const updatedMessages = [...messages, userMessage];
 217 │     setMessages(updatedMessages);
 218 │ 
 219 │     try {
 220 │       localStorage.setItem('epictus_beta_chat', JSON.stringify(updatedMessages));
 221 │ 
 222 │       const conversationsIndex = localStorage.getItem('epictus_conversations_index') || '{}';
 223 │       const conversationsObj = JSON.parse(conversationsIndex);
 224 │ 
 225 │       if (!conversationsObj[currentConversationId]) {
 226 │         conversationsObj[currentConversationId] = {
 227 │           id: currentConversationId,
 228 │           timestamp: new Date(),
 229 │           titulo: possibleTitle || "Conversa em " + new Date().toLocaleDateString(),
 230 │           tipo: tipoConversa,
 231 │           previa: inputMessage.slice(0, 100) + (inputMessage.length > 100 ? "..." : ""),
 232 │           mensagens: [userMessage.id]
 233 │         };
 234 │       } else {
 235 │         conversationsObj[currentConversationId].mensagens.push(userMessage.id);
 236 │         conversationsObj[currentConversationId].timestamp = new Date();
 237 │         if (conversationsObj[currentConversationId].mensagens.length <= 3) {
 238 │           conversationsObj[currentConversationId].previa = inputMessage.slice(0, 100) + (inputMessage.length > 100 ? "..." : "");
 239 │         }
 240 │       }
 241 │ 
 242 │       localStorage.setItem('epictus_conversations_index', JSON.stringify(conversationsObj));
 243 │     } catch (error) {
 244 │       console.error("Erro ao salvar histórico do chat:", error);
 245 │     }
 246 │ 
 247 │     setIsTyping(true);
 248 │     // Simulate API call and response (replace with actual API call)
 249 │     setTimeout(async () => {
 250 │       const responseContent = "This is a simulated AI response.";
 251 │       const currentConversationId = userMessage.conversationId || uuidv4();
 252 │       const aiResponse: Message = {
 253 │         id: uuidv4(),
 254 │         sender: "ia",
 255 │         content: responseContent,
 256 │         timestamp: new Date(),
 257 │         conversationId: currentConversationId,
 258 │         metadata: {
 259 │           tipo: userMessage.metadata?.tipo || "duvidas"
 260 │         }
 261 │       };
 262 │       const newMessages = [...messages, userMessage, aiResponse];
 263 │       setMessages(newMessages);
 264 │       try {
 265 │         localStorage.setItem('epictus_beta_chat', JSON.stringify(newMessages));
 266 │         const conversationsIndex = localStorage.getItem('epictus_conversations_index') || '{}';
 267 │         const conversationsObj = JSON.parse(conversationsIndex);
 268 │         if (conversationsObj[currentConversationId]) {
 269 │           conversationsObj[currentConversationId].mensagens.push(aiResponse.id);
 270 │           localStorage.setItem('epictus_conversations_index', JSON.stringify(conversationsObj));
 271 │         }
 272 │       } catch (error) {
 273 │         console.error("Erro ao salvar histórico do chat:", error);
 274 │       }
 275 │       setIsTyping(false);
 276 │     }, 1000);
 277 │   };
 278 │ 
 279 │   const isDark = theme === "dark";
     ·         ───┬──
     ·            ╰── `isDark` redefined here
 280 │ 
 281 │   return (
 282 │     <div className="w-full flex flex-col items-center">
     ╰────
/home/runner/workspace/src/components/epictus-ia/EpictusTurboMode.tsx:107:1
