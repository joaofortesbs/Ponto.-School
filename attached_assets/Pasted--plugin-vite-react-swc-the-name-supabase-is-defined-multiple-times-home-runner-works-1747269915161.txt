[plugin:vite:react-swc] × the name `supabase` is defined multiple times
      ╭─[/home/runner/workspace/src/lib/grupoCodigoUtils.ts:2:1]
    2 │  * Utilitários para gerenciar códigos dos grupos de estudo
    3 │  * Este arquivo centraliza operações comuns relacionadas aos códigos dos grupos
    4 │  */
    5 │ import { supabase } from '@/lib/supabase';
      ·          ────┬───
      ·              ╰── previous definition of `supabase` here
    6 │ import { gerarCodigoUnico, salvarCodigoNoBanco, buscarGrupoPorCodigo } from './codigosGruposService';
    7 │ 
    8 │ /**
    9 │  * Obtém um código de grupo existente de várias fontes
   10 │  * @param grupoId - ID do grupo para buscar o código
   11 │  * @returns O código encontrado ou null se não existir
   12 │  */
   13 │ export const obterCodigoGrupoExistente = async (grupoId: string): Promise<string | null> => {
   14 │   if (!grupoId) return null;
   15 │ 
   16 │   try {
   17 │     // 1. Verificar primeiro no banco de dados central (principal)
   18 │     try {
   19 │       const { data, error } = await supabase
   20 │         .from('grupos_estudo')
   21 │         .select('codigo')
   22 │         .eq('id', grupoId)
   23 │         .single();
   24 │ 
   25 │       if (!error && data?.codigo) {
   26 │         console.log(`Código recuperado do banco de dados: ${data.codigo}`);
   27 │ 
   28 │         // Salvar em storages locais como backup
   29 │         salvarCodigoEmStoragesLocais(grupoId, data.codigo);
   30 │ 
   31 │         return data.codigo;
   32 │       }
   33 │     } catch (dbError) {
   34 │       console.error('Erro ao buscar código no banco de dados:', dbError);
   35 │     }
   36 │ 
   37 │     // 2. Verificar no armazenamento dedicado para códigos (local)
   38 │     const CODIGOS_STORAGE_KEY = 'epictus_codigos_grupo';
   39 │     const codigosGrupos = JSON.parse(localStorage.getItem(CODIGOS_STORAGE_KEY) || '{}');
   40 │ 
   41 │     if (codigosGrupos[grupoId]) {
   42 │       console.log(`Código recuperado do storage dedicado: ${codigosGrupos[grupoId]}`);
   43 │ 
   44 │       // Tentar sincronizar com o banco de dados
   45 │       try {
   46 │         await supabase
   47 │           .from('grupos_estudo')
   48 │           .update({ codigo: codigosGrupos[grupoId] })
   49 │           .eq('id', grupoId);
   50 │       } catch (syncError) {
   51 │         console.error('Erro ao sincronizar código com banco de dados:', syncError);
   52 │       }
   53 │ 
   54 │       return codigosGrupos[grupoId];
   55 │     }
   56 │ 
   57 │     // 3. Verificar no localStorage de grupos
   58 │     const GRUPOS_STORAGE_KEY = 'epictus_grupos_estudo';
   59 │     const grupos = JSON.parse(localStorage.getItem(GRUPOS_STORAGE_KEY) || '[]');
   60 │     const grupo = grupos.find((g: any) => g.id === grupoId);
   61 │ 
   62 │     if (grupo?.codigo) {
   63 │       console.log(`Código recuperado do localStorage: ${grupo.codigo}`);
   64 │ 
   65 │       // Aproveitar para salvar no storage dedicado
   66 │       codigosGrupos[grupoId] = grupo.codigo;
   67 │       localStorage.setItem(CODIGOS_STORAGE_KEY, JSON.stringify(codigosGrupos));
   68 │ 
   69 │       // Tentar sincronizar com o banco de dados
   70 │       try {
   71 │         await supabase
   72 │           .from('grupos_estudo')
   73 │           .update({ codigo: grupo.codigo })
   74 │           .eq('id', grupoId);
   75 │       } catch (syncError) {
   76 │         console.error('Erro ao sincronizar código com banco de dados:', syncError);
   77 │       }
   78 │ 
   79 │       return grupo.codigo;
   80 │     }
   81 │ 
   82 │     // 4. Verificar na sessionStorage (mecanismo de recuperação)
   83 │     const sessionCodigo = sessionStorage.getItem(`grupo_codigo_${grupoId}`);
   84 │     if (sessionCodigo) {
   85 │       console.log(`Código recuperado da sessionStorage: ${sessionCodigo}`);
   86 │ 
   87 │       // Sincronizar com outros armazenamentos
   88 │       salvarCodigoEmStoragesLocais(grupoId, sessionCodigo);
   89 │ 
   90 │       // Tentar sincronizar com o banco de dados
   91 │       try {
   92 │         await supabase
   93 │           .from('grupos_estudo')
   94 │           .update({ codigo: sessionCodigo })
   95 │           .eq('id', grupoId);
   96 │       } catch (syncError) {
   97 │         console.error('Erro ao sincronizar código com banco de dados:', syncError);
   98 │       }
   99 │ 
  100 │       return sessionCodigo;
  101 │     }
  102 │   } catch (error) {
  103 │     console.error('Erro ao buscar código de grupo:', error);
  104 │   }
  105 │ 
  106 │   return null;
  107 │ };
  108 │ 
  109 │ /**
  110 │  * Salva um código de grupo em múltiplas camadas de armazenamento
  111 │  * @param grupoId - ID do grupo
  112 │  * @param codigo - Código a ser salvo
  113 │  */
  114 │ export const salvarCodigoGrupo = async (grupoId: string, codigo: string): Promise<void> => {
  115 │   if (!grupoId || !codigo) return;
  116 │ 
  117 │   const codigoNormalizado = codigo.toUpperCase();
  118 │ 
  119 │   try {
  120 │     // 1. Salvar no banco de dados central
  121 │     try {
  122 │       // Primeiro buscar os dados do grupo
  123 │       const { data: grupoData, error: grupoError } = await supabase
  124 │         .from('grupos_estudo')
  125 │         .select('*')
  126 │         .eq('id', grupoId)
  127 │         .single();
  128 │ 
  129 │       if (!grupoError && grupoData) {
  130 │         // Atualizar o código no grupo
  131 │         const { error: updateError } = await supabase
  132 │           .from('grupos_estudo')
  133 │           .update({ codigo: codigoNormalizado })
  134 │           .eq('id', grupoId);
  135 │ 
  136 │         if (updateError) {
  137 │           console.error('Erro ao atualizar código no grupo:', updateError);
  138 │         } else {
  139 │           console.log(`Código ${codigoNormalizado} atualizado com sucesso no grupo ${grupoId}`);
  140 │         }
  141 │ 
  142 │         // Garantir que o código está na tabela central de códigos (independente do trigger)
  143 │         const { error: codigoError } = await supabase
  144 │           .from('codigos_grupos_estudo')
  145 │           .upsert({
  146 │             codigo: codigoNormalizado,
  147 │             grupo_id: grupoId,
  148 │             nome: grupoData.nome,
  149 │             descricao: grupoData.descricao || '',
  150 │             user_id: grupoData.user_id,
  151 │             privado: grupoData.privado || false,
  152 │             membros: grupoData.membros || 1,
  153 │             visibilidade: grupoData.visibilidade || 'todos',
  154 │             disciplina: grupoData.disciplina || '',
  155 │             cor: grupoData.cor || '#FF6B00',
  156 │             membros_ids: grupoData.membros_ids || [],
  157 │             ultima_atualizacao: new Date().toISOString()
  158 │           }, { onConflict: 'codigo' });
  159 │ 
  160 │         if (codigoError) {
  161 │           console.error('Erro ao salvar na tabela central de códigos:', codigoError);
  162 │         } else {
  163 │           console.log(`Código ${codigoNormalizado} salvo com sucesso na tabela central`);
  164 │         }
  165 │       } else {
  166 │         // Se não encontrar o grupo, tentar salvar o código com dados mínimos
  167 │         console.warn(`Grupo ${grupoId} não encontrado. Tentando salvar código com dados mínimos.`);
  168 │ 
  169 │         // Buscar informações básicas no localStorage
  170 │         const grupos = JSON.parse(localStorage.getItem('epictus_grupos_estudo') || '[]');
  171 │         const grupoLocal = grupos.find((g: any) => g.id === grupoId);
  172 │ 
  173 │         if (grupoLocal) {
  174 │           const { error: codigoMinError } = await supabase
  175 │             .from('codigos_grupos_estudo')
  176 │             .upsert({
  177 │               codigo: codigoNormalizado,
  178 │               grupo_id: grupoId,
  179 │               nome: grupoLocal.nome || 'Grupo de Estudo',
  180 │               descricao: grupoLocal.descricao || '',
  181 │               user_id: grupoLocal.user_id,
  182 │               privado: grupoLocal.privado || false,
  183 │               membros: grupoLocal.membros || 1,
  184 │               visibilidade: grupoLocal.visibilidade || 'todos',
  185 │               disciplina: grupoLocal.disciplina || '',
  186 │               cor: grupoLocal.cor || '#FF6B00',
  187 │               membros_ids: grupoLocal.membros_ids || []
  188 │             }, { onConflict: 'codigo' });
  189 │ 
  190 │           if (codigoMinError) {
  191 │             console.error('Erro ao salvar código mínimo na tabela central:', codigoMinError);
  192 │           } else {
  193 │             console.log(`Código ${codigoNormalizado} salvo com dados mínimos na tabela central`);
  194 │           }
  195 │         } else {
  196 │           console.error(`Não foi possível encontrar informações para o grupo ${grupoId}`);
  197 │         }
  198 │       }
  199 │     } catch (dbError) {
  200 │       console.error('Erro ao salvar código no banco de dados:', dbError);
  201 │     }
  202 │ 
  203 │     // 2. Salvar em armazenamentos locais como backup
  204 │     salvarCodigoEmStoragesLocais(grupoId, codigoNormalizado);
  205 │ 
  206 │     console.log(`Código ${codigoNormalizado} salvo com sucesso para o grupo ${grupoId}`);
  207 │   } catch (error) {
  208 │     console.error('Erro ao salvar código de grupo:', error);
  209 │   }
  210 │ };
  211 │ 
  212 │ /**
  213 │  * Função auxiliar para salvar o código em armazenamentos locais
  214 │  * @param grupoId - ID do grupo
  215 │  * @param codigo - Código a ser salvo
  216 │  */
  217 │ const salvarCodigoEmStoragesLocais = (grupoId: string, codigo: string): void => {
  218 │   try {
  219 │     // Salvar no armazenamento dedicado para códigos
  220 │     const CODIGOS_STORAGE_KEY = 'epictus_codigos_grupo';
  221 │     const codigosGrupos = JSON.parse(localStorage.getItem(CODIGOS_STORAGE_KEY) || '{}');
  222 │     codigosGrupos[grupoId] = codigo.toUpperCase();
  223 │     localStorage.setItem(CODIGOS_STORAGE_KEY, JSON.stringify(codigosGrupos));
  224 │ 
  225 │     // Salvar no localStorage de grupos
  226 │     const GRUPOS_STORAGE_KEY = 'epictus_grupos_estudo';
  227 │     const grupos = JSON.parse(localStorage.getItem(GRUPOS_STORAGE_KEY) || '[]');
  228 │     const grupoIndex = grupos.findIndex((g: any) => g.id === grupoId);
  229 │ 
  230 │     if (grupoIndex >= 0) {
  231 │       grupos[grupoIndex].codigo = codigo.toUpperCase();
  232 │       localStorage.setItem(GRUPOS_STORAGE_KEY, JSON.stringify(grupos));
  233 │     }
  234 │ 
  235 │     // Salvar na sessionStorage para recuperação rápida
  236 │     sessionStorage.setItem(`grupo_codigo_${grupoId}`, codigo.toUpperCase());
  237 │   } catch (error) {
  238 │     console.error('Erro ao salvar código em armazenamentos locais:', error);
  239 │   }
  240 │ };
  241 │ 
  242 │ /**
  243 │  * Gerar um código único para um grupo e salvar em todos os armazenamentos
  244 │  * @param grupoId - ID do grupo para o qual gerar código
  245 │  * @returns O código gerado
  246 │  */
  247 │ export const gerarESalvarCodigoUnico = async (grupoId: string): Promise<string> => {
  248 │   try {
  249 │     // Primeiro verificar se já existe um código
  250 │     const codigoExistente = await obterCodigoGrupoExistente(grupoId);
  251 │     if (codigoExistente) {
  252 │       console.log(`Grupo ${grupoId} já possui o código ${codigoExistente}`);
  253 │       return codigoExistente;
  254 │     }
  255 │ 
  256 │     console.log(`Gerando novo código para o grupo ${grupoId}...`);
  257 │ 
  258 │     // Gerar um novo código único
  259 │     const novoCodigo = await gerarCodigoUnico();
  260 │ 
  261 │     // Salvar o código em todos os lugares
  262 │     await salvarCodigoGrupo(grupoId, novoCodigo);
  263 │ 
  264 │     console.log(`Novo código ${novoCodigo} gerado e salvo para o grupo ${grupoId}`);
  265 │     return novoCodigo;
  266 │   } catch (error) {
  267 │     console.error('Erro ao gerar e salvar código único:', error);
  268 │ 
  269 │     // Fallback para garantir que sempre retornamos algo
  270 │     const fallbackCodigo = Array(7)
  271 │       .fill(0)
  272 │       .map(() => "ABCDEFGHJKLMNPQRSTUVWXYZ23456789".charAt(Math.floor(Math.random() * 32)))
  273 │       .join('');
  274 │ 
  275 │     try {
  276 │       await salvarCodigoGrupo(grupoId, fallbackCodigo);
  277 │     } catch (fallbackError) {
  278 │       console.error('Erro ao salvar código fallback:', fallbackError);
  279 │     }
  280 │ 
  281 │     return fallbackCodigo;
  282 │   }
  283 │ };
  284 │ 
  285 │ /**
  286 │  * Verifica se um código existe em qualquer grupo
  287 │  * @param codigo - Código a ser verificado
  288 │  * @returns true se o código existir em algum grupo
  289 │  */
  290 │ export const verificarCodigoExiste = async (codigo: string): Promise<boolean> => {
  291 │   if (!codigo) return false;
  292 │ 
  293 │   try {
  294 │     // Normalizar o código para comparação
  295 │     const codigoNormalizado = codigo.trim().toUpperCase();
  296 │ 
  297 │     // Verificar no banco de dados central (principal)
  298 │     try {
  299 │       const { data, error } = await supabase
  300 │         .from('codigos_grupos_estudo')
  301 │         .select('codigo')
  302 │         .eq('codigo', codigoNormalizado)
  303 │         .single();
  304 │ 
  305 │       if (!error && data) {
  306 │         console.log(`Código ${codigoNormalizado} encontrado no banco de dados central`);
  307 │         return true;
  308 │       }
  309 │     } catch (dbError) {
  310 │       console.error('Erro ao verificar código no banco de dados:', dbError);
  311 │     }
  312 │ 
  313 │     // Verificar no armazenamento dedicado como fallback
  314 │     const CODIGOS_STORAGE_KEY = 'epictus_codigos_grupo';
  315 │     const codigosGrupos = JSON.parse(localStorage.getItem(CODIGOS_STORAGE_KEY) || '{}');
  316 │ 
  317 │     // Verificar se o código existe como valor em qualquer entrada
  318 │     if (Object.values(codigosGrupos).some((c: any) => 
  319 │       c.toUpperCase() === codigoNormalizado)) {
  320 │       console.log(`Código ${codigoNormalizado} encontrado no storage local dedicado`);
  321 │       return true;
  322 │     }
  323 │ 
  324 │     // Verificar também no localStorage de grupos
  325 │     const GRUPOS_STORAGE_KEY = 'epictus_grupos_estudo';
  326 │     const grupos = JSON.parse(localStorage.getItem(GRUPOS_STORAGE_KEY) || '[]');
  327 │ 
  328 │     if (grupos.some((g: any) => 
  329 │       g.codigo && g.codigo.toUpperCase() === codigoNormalizado)) {
  330 │       console.log(`Código ${codigoNormalizado} encontrado no storage local de grupos`);
  331 │       return true;
  332 │     }
  333 │ 
  334 │     return false;
  335 │   } catch (error) {
  336 │     console.error('Erro ao verificar existência de código:', error);
  337 │     return false;
  338 │   }
  339 │ };
  340 │ 
  341 │ /**
  342 │  * Busca um grupo pelo seu código
  343 │  * @param codigo - Código do grupo a ser buscado
  344 │  * @returns O grupo encontrado ou null
  345 │  */
  346 │ export const buscarGrupoComCodigo = async (codigo: string): Promise<any | null> => {
  347 │   if (!codigo) {
  348 │     console.log('Código vazio, retornando null');
  349 │     return null;
  350 │   }
  351 │ 
  352 │   try {
  353 │     // Normalizar o código
  354 │     const codigoNormalizado = codigo.trim().toUpperCase();
  355 │     console.log(`Buscando grupo com código: ${codigoNormalizado}`);
  356 │ 
  357 │     // ETAPA 1: Buscar diretamente na tabela de códigos
  358 │     let grupoEncontrado = null;
  359 │ 
  360 │     try {
  361 │       const { data: dataCodigos, error: codigosError } = await supabase
  362 │         .from('codigos_grupos_estudo')
  363 │         .select('*')
  364 │         .eq('codigo', codigoNormalizado)
  365 │         .maybeSingle();
  366 │ 
  367 │       if (codigosError) {
  368 │         console.error('Erro ao buscar na tabela de códigos:', codigosError);
  369 │       } else if (dataCodigos) {
  370 │         console.log('Grupo encontrado na tabela de códigos:', dataCodigos);
  371 │         grupoEncontrado = dataCodigos;
  372 │ 
  373 │         // Tentar complementar dados da tabela principal
  374 │         try {
  375 │           const { data: grupoCompleto, error: grupoError } = await supabase
  376 │             .from('grupos_estudo')
  377 │             .select('*')
  378 │             .eq('id', dataCodigos.grupo_id)
  379 │             .single();
  380 │ 
  381 │           if (!grupoError && grupoCompleto) {
  382 │             console.log('Dados complementares encontrados na tabela de grupos:', grupoCompleto);
  383 │ 
  384 │             // Mesclamos os dados para ter informações completas
  385 │             grupoEncontrado = {
  386 │               ...grupoCompleto,
  387 │               ...dataCodigos,
  388 │               codigo: codigoNormalizado
  389 │             };
  390 │           }
  391 │         } catch (complementError) {
  392 │           console.error('Erro ao buscar dados complementares:', complementError);
  393 │         }
  394 │       } else {
  395 │         console.log('Nenhum grupo encontrado na tabela de códigos');
  396 │       }
  397 │     } catch (error) {
  398 │       console.error('Exceção ao buscar na tabela de códigos:', error);
  399 │     }
  400 │ 
  401 │     // ETAPA 2: Se não encontrou na tabela de códigos, buscar diretamente na tabela de grupos
  402 │     if (!grupoEncontrado) {
  403 │       try {
  404 │         const { data: dataGrupos, error: gruposError } = await supabase
  405 │           .from('grupos_estudo')
  406 │           .select('*')
  407 │           .eq('codigo', codigoNormalizado)
  408 │           .maybeSingle();
  409 │ 
  410 │         if (gruposError) {
  411 │           console.error('Erro ao buscar na tabela de grupos:', gruposError);
  412 │         } else if (dataGrupos) {
  413 │           console.log('Grupo encontrado na tabela de grupos:', dataGrupos);
  414 │           grupoEncontrado = {
  415 │             ...dataGrupos,
  416 │             codigo: codigoNormalizado
  417 │           };
  418 │ 
  419 │           // Sincronizar com a tabela de códigos para manter consistência
  420 │           try {
  421 │             const { error: syncError } = await supabase
  422 │               .from('codigos_grupos_estudo')
  423 │               .upsert({
  424 │                 codigo: codigoNormalizado,
  425 │                 grupo_id: dataGrupos.id,
  426 │                 nome: dataGrupos.nome || 'Grupo sem nome',
  427 │                 descricao: dataGrupos.descricao || '',
  428 │                 user_id: dataGrupos.user_id,
  429 │                 privado: dataGrupos.privado || false,
  430 │                 membros: dataGrupos.membros || 1,
  431 │                 visibilidade: dataGrupos.visibilidade || 'todos',
  432 │                 disciplina: dataGrupos.disciplina || '',
  433 │                 cor: dataGrupos.cor || '#FF6B00',
  434 │                 membros_ids: dataGrupos.membros_ids || [],
  435 │                 data_criacao: dataGrupos.data_criacao || new Date().toISOString(),
  436 │                 ultima_atualizacao: new Date().toISOString()
  437 │               }, { onConflict: 'codigo' });
  438 │ 
  439 │             if (syncError) {
  440 │               console.error('Erro ao sincronizar com tabela de códigos:', syncError);
  441 │             } else {
  442 │               console.log('Grupo sincronizado com a tabela de códigos');
  443 │             }
  444 │           } catch (syncError) {
  445 │             console.error('Exceção ao sincronizar com tabela de códigos:', syncError);
  446 │           }
  447 │         } else {
  448 │           console.log('Nenhum grupo encontrado na tabela de grupos');
  449 │         }
  450 │       } catch (error) {
  451 │         console.error('Exceção ao buscar na tabela de grupos:', error);
  452 │       }
  453 │     }
  454 │ 
  455 │     // ETAPA 3: Se ainda não encontrou, buscar no localStorage
  456 │     if (!grupoEncontrado) {
  457 │       try {
  458 │         const GRUPOS_STORAGE_KEY = 'epictus_grupos_estudo';
  459 │         const grupos = JSON.parse(localStorage.getItem(GRUPOS_STORAGE_KEY) || '[]');
  460 │ 
  461 │         const grupoLocal = grupos.find((g: any) => 
  462 │           g.codigo && g.codigo.toUpperCase() === codigoNormalizado);
  463 │ 
  464 │         if (grupoLocal) {
  465 │           console.log('Grupo encontrado no localStorage:', grupoLocal);
  466 │           grupoEncontrado = grupoLocal;
  467 │ 
  468 │           // Sincronizar com a tabela de códigos para futuros acessos
  469 │           try {
  470 │             const { error: syncError } = await supabase
  471 │               .from('codigos_grupos_estudo')
  472 │               .upsert({
  473 │                 codigo: codigoNormalizado,
  474 │                 grupo_id: grupoLocal.id,
  475 │                 nome: grupoLocal.nome || 'Grupo sem nome',
  476 │                 descricao: grupoLocal.descricao || '',
  477 │                 user_id: grupoLocal.user_id || grupoLocal.criador,
  478 │                 privado: grupoLocal.privado || false,
  479 │                 membros: grupoLocal.membros || 1,
  480 │                 visibilidade: grupoLocal.visibilidade || 'todos',
  481 │                 disciplina: grupoLocal.disciplina || '',
  482 │                 cor: grupoLocal.cor || '#FF6B00',
  483 │                 membros_ids: grupoLocal.membros_ids || [],
  484 │                 data_criacao: grupoLocal.dataCriacao || new Date().toISOString(),
  485 │                 ultima_atualizacao: new Date().toISOString()
  486 │               }, { onConflict: 'codigo' });
  487 │ 
  488 │             if (syncError) {
  489 │               console.error('Erro ao sincronizar grupo do localStorage:', syncError);
  490 │             } else {
  491 │               console.log('Grupo do localStorage sincronizado com a tabela de códigos');
  492 │             }
  493 │           } catch (syncError) {
  494 │             console.error('Exceção ao sincronizar grupo do localStorage:', syncError);
  495 │           }
  496 │         } else {
  497 │           console.log('Nenhum grupo encontrado no localStorage');
  498 │         }
  499 │       } catch (storageError) {
  500 │         console.error('Erro ao buscar no localStorage:', storageError);
  501 │       }
  502 │     }
  503 │ 
  504 │     // Se não encontramos o grupo em nenhum lugar
  505 │     if (!grupoEncontrado) {
  506 │       console.log(`Nenhum grupo encontrado para o código ${codigoNormalizado} em nenhuma fonte`);
  507 │       return null;
  508 │     }
  509 │ 
  510 │     return grupoEncontrado;
  511 │   } catch (error) {
  512 │     console.error('Erro ao buscar grupo por código:', error);
  513 │     return null;
  514 │   }
  515 │ };
  516 │ 
  517 │ // Verifica se um código de grupo existe no banco de dados e o sincroniza se necessário
  518 │ export const verificarSeCodigoExiste = async (codigo: string): Promise<boolean> => {
  519 │   try {
  520 │     if (!codigo || codigo.trim() === '') {
  521 │       console.log('Código vazio, retornando false');
  522 │       return false;
  523 │     }
  524 │ 
  525 │     const codigoNormalizado = codigo.trim().toUpperCase();
  526 │     console.log(`Verificando se o código ${codigoNormalizado} existe...`);
  527 │ 
  528 │     // Primeiro, verificar na tabela de códigos (a principal fonte de verdade)
  529 │     try {
  530 │       const { data: dataCodigos, error: errorCodigos } = await supabase
  531 │         .from('codigos_grupos_estudo')
  532 │         .select('codigo')
  533 │         .eq('codigo', codigoNormalizado)
  534 │         .maybeSingle();
  535 │ 
  536 │       if (!errorCodigos && dataCodigos) {
  537 │         console.log(`Código ${codigoNormalizado} encontrado na tabela de códigos!`);
  538 │         return true;
  539 │       }
  540 │ 
  541 │       if (errorCodigos && errorCodigos.code !== 'PGRST116') {
  542 │         console.error("Erro ao verificar código na tabela de códigos:", errorCodigos);
  543 │       }
  544 │     } catch (e) {
  545 │       console.error("Exceção ao verificar código na tabela de códigos:", e);
  546 │     }
  547 │ 
  548 │     // Se não encontrou na tabela de códigos, verificar na tabela de grupos
  549 │     try {
  550 │       const { data: dataGrupos, error: errorGrupos } = await supabase
  551 │         .from('grupos_estudo')
  552 │         .select('*')  // Alterado para selecionar todos os campos para sincronização
  553 │         .eq('codigo', codigoNormalizado)
  554 │         .maybeSingle();
  555 │ 
  556 │       if (!errorGrupos && dataGrupos) {
  557 │         console.log(`Código ${codigoNormalizado} encontrado na tabela de grupos!`);
  558 │ 
  559 │         // Sincronizar automaticamente com a tabela de códigos
  560 │         try {
  561 │           const { error: syncError } = await supabase
  562 │             .from('codigos_grupos_estudo')
  563 │             .upsert({
  564 │               codigo: codigoNormalizado,
  565 │               grupo_id: dataGrupos.id,
  566 │               nome: dataGrupos.nome || 'Grupo sem nome',
  567 │               descricao: dataGrupos.descricao || '',
  568 │               user_id: dataGrupos.user_id,
  569 │               privado: dataGrupos.privado || false,
  570 │               membros: dataGrupos.membros || 1,
  571 │               visibilidade: dataGrupos.visibilidade || 'todos',
  572 │               disciplina: dataGrupos.disciplina || '',
  573 │               cor: dataGrupos.cor || '#FF6B00',
  574 │               membros_ids: dataGrupos.membros_ids || [],
  575 │               data_criacao: dataGrupos.data_criacao || new Date().toISOString(),
  576 │               ultima_atualizacao: new Date().toISOString()
  577 │             }, { onConflict: 'codigo' });
  578 │ 
  579 │           if (syncError) {
  580 │             console.error('Erro ao sincronizar código com tabela de códigos:', syncError);
  581 │           } else {
  582 │             console.log('Código sincronizado com a tabela central');
  583 │           }
  584 │         } catch (syncError) {
  585 │           console.error('Erro ao sincronizar código:', syncError);
  586 │         }
  587 │ 
  588 │         return true;
  589 │       }
  590 │ 
  591 │       if (errorGrupos && errorGrupos.code !== 'PGRST116') {
  592 │         console.error("Erro ao verificar código na tabela de grupos:", errorGrupos);
  593 │       }
  594 │     } catch (e) {
  595 │       console.error("Exceção ao verificar código na tabela de grupos:", e);
  596 │     }
  597 │ 
  598 │     // Verificar nos armazenamentos locais como último recurso e sincronizar se encontrado
  599 │     try {
  600 │       const grupos = JSON.parse(localStorage.getItem('epictus_grupos_estudo') || '[]');
  601 │       const grupo = grupos.find((g: any) => g.codigo && g.codigo.toUpperCase() === codigoNormalizado);
  602 │ 
  603 │       if (grupo) {
  604 │         console.log(`Código ${codigoNormalizado} encontrado no storage de grupos`);
  605 │ 
  606 │         // Sincronizar com a tabela de códigos
  607 │         try {
  608 │           const { error: syncError } = await supabase
  609 │             .from('codigos_grupos_estudo')
  610 │             .upsert({
  611 │               codigo: codigoNormalizado,
  612 │               grupo_id: grupo.id,
  613 │               nome: grupo.nome || 'Grupo sem nome',
  614 │               descricao: grupo.descricao || '',
  615 │               user_id: grupo.user_id || grupo.criador,
  616 │               privado: grupo.privado || false,
  617 │               membros: grupo.membros || 1,
  618 │               visibilidade: grupo.visibilidade || 'todos',
  619 │               disciplina: grupo.disciplina || '',
  620 │               cor: grupo.cor || '#FF6B00',
  621 │               membros_ids: grupo.membros_ids || [],
  622 │               data_criacao: grupo.dataCriacao || grupo.data_criacao || new Date().toISOString(),
  623 │               ultima_atualizacao: new Date().toISOString()
  624 │             }, { onConflict: 'codigo' });
  625 │ 
  626 │           if (syncError) {
  627 │             console.error('Erro ao sincronizar grupo do localStorage:', syncError);
  628 │           } else {
  629 │             console.log('Grupo do localStorage sincronizado com a tabela de códigos');
  630 │           }
  631 │         } catch (syncError) {
  632 │           console.error('Exceção ao sincronizar grupo do localStorage:', syncError);
  633 │         }
  634 │ 
  635 │         return true;
  636 │       }
  637 │ 
  638 │       // Verificar separadamente no storage de códigos
  639 │       const codigosGrupos = JSON.parse(localStorage.getItem('epictus_codigos_grupo') || '{}');
  640 │       const grupoIdComCodigo = Object.entries(codigosGrupos).find(
  641 │         ([_, codigo]) => typeof codigo === 'string' && (codigo as string).toUpperCase() === codigoNormalizado
  642 │       );
  643 │ 
  644 │       if (grupoIdComCodigo) {
  645 │         const [grupoId, _] = grupoIdComCodigo;
  646 │         console.log(`Código ${codigoNormalizado} encontrado no storage de códigos para o grupo ${grupoId}`);
  647 │ 
  648 │         // Tentar buscar informações do grupo para sincronização
  649 │         const grupoLocal = grupos.find((g: any) => g.id === grupoId);
  650 │         if (grupoLocal) {
  651 │           try {
  652 │             const { error: syncError } = await supabase
  653 │               .from('codigos_grupos_estudo')
  654 │               .upsert({
  655 │                 codigo: codigoNormalizado,
  656 │                 grupo_id: grupoId,
  657 │                 nome: grupoLocal.nome || 'Grupo sem nome',
  658 │                 descricao: grupoLocal.descricao || '',
  659 │                 user_id: grupoLocal.user_id || grupoLocal.criador,
  660 │                 privado: grupoLocal.privado || false,
  661 │                 membros: grupoLocal.membros || 1,
  662 │                 visibilidade: grupoLocal.visibilidade || 'todos',
  663 │                 disciplina: grupoLocal.disciplina || '',
  664 │                 cor: grupoLocal.cor || '#FF6B00',
  665 │                 membros_ids: grupoLocal.membros_ids || [],
  666 │                 data_criacao: grupoLocal.dataCriacao || grupoLocal.data_criacao || new Date().toISOString(),
  667 │                 ultima_atualizacao: new Date().toISOString()
  668 │               }, { onConflict: 'codigo' });
  669 │ 
  670 │             if (syncError) {
  671 │               console.error('Erro ao sincronizar código do localStorage:', syncError);
  672 │             } else {
  673 │               console.log('Código do localStorage sincronizado com a tabela central');
  674 │             }
  675 │           } catch (syncError) {
  676 │             console.error('Exceção ao sincronizar código do localStorage:', syncError);
  677 │           }
  678 │         }
  679 │ 
  680 │         return true;
  681 │       }
  682 │     } catch (e) {
  683 │       console.error("Erro ao verificar códigos no localStorage:", e);
  684 │     }
  685 │ 
  686 │     console.log(`Código ${codigoNormalizado} não encontrado em nenhuma fonte`);
  687 │     return false;
  688 │   } catch (error) {
  689 │     console.error("Erro ao verificar código:", error);
  690 │     return false;
  691 │   }
  692 │ };
  693 │ 
  694 │ /**
  695 │  * Verifica se um código pertence a um grupo criado pelo usuário ou do qual ele já é membro
  696 │  * @param codigo - O código do grupo a verificar
  697 │  * @param userId - ID do usuário atual
  698 │  * @returns Objeto contendo o resultado da verificação e detalhes do grupo, se aplicável
  699 │  */
  700 │ export const verificarRelacaoUsuarioComGrupo = async (
  701 │   codigo: string, 
  702 │   userId: string
  703 │ ): Promise<{ 
  704 │   pertenceAoUsuario: boolean, 
  705 │   jaEMembro: boolean, 
  706 │   nomeGrupo: string,
  707 │   grupoId: string | null
  708 │ }> => {
  709 │   try {
  710 │     if (!codigo || !userId) {
  711 │       console.log('Verificação abortada: código ou userId não fornecidos');
  712 │       return { pertenceAoUsuario: false, jaEMembro: false, nomeGrupo: '', grupoId: null };
  713 │     }
  714 │ 
  715 │     const codigoNormalizado = codigo.trim().toUpperCase();
  716 │     console.log(`Verificando relação para o código: ${codigoNormalizado} e usuário: ${userId}`);
  717 │ 
  718 │     // Primeiro verificar na tabela de códigos (principal fonte)
  719 │     let grupoInfo = null;
  720 │ 
  721 │     // Buscar na tabela de códigos com manejo de erro melhorado
  722 │     try {
  723 │       const { data: dataCodigos, error: errorCodigos } = await supabase
  724 │         .from('codigos_grupos_estudo')
  725 │         .select('*')
  726 │         .eq('codigo', codigoNormalizado)
  727 │         .maybeSingle();
  728 │ 
  729 │       if (errorCodigos) {
  730 │         console.error('Erro ao buscar na tabela de códigos:', errorCodigos);
  731 │       } else if (dataCodigos) {
  732 │         console.log('Grupo encontrado na tabela de códigos:', dataCodigos);
  733 │         grupoInfo = dataCodigos;
  734 │       } else {
  735 │         console.log('Nenhum grupo encontrado na tabela de códigos');
  736 │       }
  737 │     } catch (e) {
  738 │       console.error('Exceção ao buscar na tabela de códigos:', e);
  739 │     }
  740 │ 
  741 │     // Se não encontrou na tabela de códigos, buscar na tabela de grupos
  742 │     if (!grupoInfo) {
  743 │       try {
  744 │         const { data: dataGrupos, error: errorGrupos } = await supabase
  745 │           .from('grupos_estudo')
  746 │           .select('*')
  747 │           .eq('codigo', codigoNormalizado)
  748 │           .maybeSingle();
  749 │ 
  750 │         if (errorGrupos) {
  751 │           console.error('Erro ao buscar na tabela de grupos:', errorGrupos);
  752 │         } else if (dataGrupos) {
  753 │           console.log('Grupo encontrado na tabela de grupos:', dataGrupos);
  754 │           grupoInfo = dataGrupos;
  755 │ 
  756 │           // Se encontrou na tabela de grupos, tentar sincronizar com a tabela de códigos
  757 │           try {
  758 │             const { error: syncError } = await supabase
  759 │               .from('codigos_grupos_estudo')
  760 │               .upsert({
  761 │                 codigo: codigoNormalizado,
  762 │                 grupo_id: dataGrupos.id,
  763 │                 nome: dataGrupos.nome || 'Grupo sem nome',
  764 │                 descricao: dataGrupos.descricao || '',
  765 │                 user_id: dataGrupos.user_id,
  766 │                 privado: dataGrupos.privado || false,
  767 │                 membros: dataGrupos.membros || 1,
  768 │                 visibilidade: dataGrupos.visibilidade || 'todos',
  769 │                 disciplina: dataGrupos.disciplina || '',
  770 │                 cor: dataGrupos.cor || '#FF6B00',
  771 │                 membros_ids: dataGrupos.membros_ids || [],
  772 │                 data_criacao: dataGrupos.data_criacao || new Date().toISOString(),
  773 │                 ultima_atualizacao: new Date().toISOString()
  774 │               }, { onConflict: 'codigo' });
  775 │ 
  776 │             if (syncError) {
  777 │               console.error('Erro ao sincronizar com tabela de códigos:', syncError);
  778 │             } else {
  779 │               console.log('Grupo sincronizado com a tabela de códigos');
  780 │             }
  781 │           } catch (syncError) {
  782 │             console.error('Exceção ao sincronizar com tabela de códigos:', syncError);
  783 │           }
  784 │         } else {
  785 │           console.log('Nenhum grupo encontrado na tabela de grupos');
  786 │         }
  787 │       } catch (e) {
  788 │         console.error('Exceção ao buscar na tabela de grupos:', e);
  789 │       }
  790 │     }
  791 │ 
  792 │     // Verificar no localStorage como último recurso
  793 │     if (!grupoInfo) {
  794 │       try {
  795 │         const gruposStorage = localStorage.getItem('epictus_grupos_estudo');
  796 │         if (gruposStorage) {
  797 │           const grupos = JSON.parse(gruposStorage);
  798 │           const grupoLocalStorage = grupos.find((g: any) => g.codigo === codigoNormalizado);
  799 │ 
  800 │           if (grupoLocalStorage) {
  801 │             console.log('Grupo encontrado no localStorage:', grupoLocalStorage);
  802 │             grupoInfo = grupoLocalStorage;
  803 │ 
  804 │             // Tentar sincronizar este grupo com a tabela de códigos
  805 │             try {
  806 │               const { error: syncError } = await supabase
  807 │                 .from('codigos_grupos_estudo')
  808 │                 .upsert({
  809 │                   codigo: codigoNormalizado,
  810 │                   grupo_id: grupoLocalStorage.id,
  811 │                   nome: grupoLocalStorage.nome || 'Grupo sem nome',
  812 │                   descricao: grupoLocalStorage.descricao || '',
  813 │                   user_id: grupoLocalStorage.user_id || userId,
  814 │                   privado: grupoLocalStorage.privado || false,
  815 │                   membros: grupoLocalStorage.membros || 1,
  816 │                   visibilidade: grupoLocalStorage.visibilidade || 'todos',
  817 │                   disciplina: grupoLocalStorage.disciplina || '',
  818 │                   cor: grupoLocalStorage.cor || '#FF6B00',
  819 │                   membros_ids: grupoLocalStorage.membros_ids || [],
  820 │                   data_criacao: grupoLocalStorage.dataCriacao || new Date().toISOString(),
  821 │                   ultima_atualizacao: new Date().toISOString()
  822 │                 }, { onConflict: 'codigo' });
  823 │ 
  824 │               if (syncError) {
  825 │                 console.error('Erro ao sincronizar grupo do localStorage:', syncError);
  826 │               } else {
  827 │                 console.log('Grupo do localStorage sincronizado com a tabela de códigos');
  828 │               }
  829 │             } catch (syncError) {
  830 │               console.error('Exceção ao sincronizar grupo do localStorage:', syncError);
  831 │             }
  832 │           } else {
  833 │             console.log('Nenhum grupo com este código encontrado no localStorage');
  834 │           }
  835 │         }
  836 │       } catch (e) {
  837 │         console.error('Exceção ao verificar grupos no localStorage:', e);
  838 │       }
  839 │     }
  840 │ 
  841 │     // Se não encontrou o grupo em nenhuma das fontes
  842 │     if (!grupoInfo) {
  843 │       console.log('Não foi possível encontrar o grupo em nenhuma fonte');
  844 │       return { pertenceAoUsuario: false, jaEMembro: false, nomeGrupo: '', grupoId: null };
  845 │     }
  846 │ 
  847 │     // Verificar se o usuário é o criador do grupo
  848 │     const pertenceAoUsuario = grupoInfo.user_id === userId;
  849 │     console.log(`É o criador? ${pertenceAoUsuario} (user_id: ${grupoInfo.user_id}, userId: ${userId})`);
  850 │ 
  851 │     // Verificar se o usuário já é membro
  852 │     let membrosIds = [];
  853 │     try {
  854 │       membrosIds = Array.isArray(grupoInfo.membros_ids) 
  855 │         ? grupoInfo.membros_ids 
  856 │         : (typeof grupoInfo.membros_ids === 'string' 
  857 │             ? JSON.parse(grupoInfo.membros_ids) 
  858 │             : []);
  859 │     } catch (e) {
  860 │       console.error('Erro ao processar membros_ids:', e);
  861 │       membrosIds = [];
  862 │     }
  863 │ 
  864 │     const jaEMembro = membrosIds.includes(userId);
  865 │     console.log(`É membro? ${jaEMembro} (membros: ${JSON.stringify(membrosIds)})`);
  866 │ 
  867 │     // Verificar também no localStorage
  868 │     let membroLocalStorage = false;
  869 │     try {
  870 │       const gruposStorage = localStorage.getItem('epictus_grupos_estudo');
  871 │       if (gruposStorage) {
  872 │         const grupos = JSON.parse(gruposStorage);
  873 │         const grupoLocalStorage = grupos.find((g: any) => 
  874 │           g.id === (grupoInfo.id || grupoInfo.grupo_id)
  875 │         );
  876 │         membroLocalStorage = !!grupoLocalStorage;
  877 │         console.log(`Está no localStorage? ${membroLocalStorage}`);
  878 │       }
  879 │     } catch (e) {
  880 │       console.error("Erro ao verificar grupos no localStorage:", e);
  881 │     }
  882 │ 
  883 │     return { 
  884 │       pertenceAoUsuario, 
  885 │       jaEMembro: jaEMembro || membroLocalStorage || pertenceAoUsuario, 
  886 │       nomeGrupo: grupoInfo.nome || 'Grupo sem nome',
  887 │       grupoId: grupoInfo.id || grupoInfo.grupo_id
  888 │     };
  889 │   } catch (error) {
  890 │     console.error("Erro ao verificar relação do usuário com o grupo:", error);
  891 │     return { pertenceAoUsuario: false, jaEMembro: false, nomeGrupo: '', grupoId: null };
  892 │   }
  893 │ };
  894 │ 
  895 │ // Gera um código único para um grupo
  896 │ export const gerarCodigoGrupo = (): string => {
  897 │   const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  898 │   let codigo = '';
  899 │ 
  900 │   // Primeiro segmento (4 caracteres)
  901 │   for (let i = 0; i < 4; i++) {
  902 │     codigo += caracteres.charAt(Math.floor(Math.random() * caracteres.length));
  903 │   }
  904 │ 
  905 │   codigo += '-';
  906 │ 
  907 │   // Segundo segmento (4 caracteres)
  908 │   for (let i = 0; i < 4; i++) {
  909 │     codigo += caracteres.charAt(Math.floor(Math.random() * caracteres.length));
  910 │   }
  911 │ 
  912 │   codigo += '-';
  913 │ 
  914 │   // Terceiro segmento (4 caracteres)
  915 │   for (let i = 0; i < 4; i++) {
  916 │     codigo += caracteres.charAt(Math.floor(Math.random() * caracteres.length));
  917 │   }
  918 │ 
  919 │   return codigo;
  920 │ };
  921 │ 
  922 │ // Registra um novo código de grupo no banco de dados
  923 │ export const registrarCodigoGrupo = async (grupoId: string): Promise<string | null> => {
  924 │   try {
  925 │     const codigo = gerarCodigoGrupo();
  926 │ 
  927 │     // Aqui seria feito o registro real no banco de dados
  928 │     // Exemplo de implementação real:
  929 │     /*
  930 │     const { data, error } = await supabase
  931 │       .from('codigos_grupos')
  932 │       .insert({
  933 │         codigo,
  934 │         grupo_id: grupoId,
  935 │         ativo: true,
  936 │         data_criacao: new Date(),
  937 │         data_expiracao: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 dias
  938 │       });
  939 │ 
  940 │     if (error) {
  941 │       console.error("Erro ao registrar código:", error);
  942 │       return null;
  943 │     }
  944 │     */
  945 │ 
  946 │     return codigo;
  947 │   } catch (error) {
  948 │     console.error("Erro ao registrar código:", error);
  949 │     return null;
  950 │   }
  951 │ };
  952 │ 
  953 │ export const criarGrupo = async (dados: Omit<GrupoEstudo, 'id'>): Promise<GrupoEstudo | null> => {
  954 │   try {
  955 │     // Verificar se estamos online e tem conexão com Supabase
  956 │     let grupoSalvoRemotamente = false;
  957 │     let resultado: GrupoEstudo | null = null;
  958 │ 
  959 │     try {
  960 │       // Gerar um código único para o grupo antes da inserção
  961 │       const codigo = await gerarCodigoUnico();
  962 │ 
  963 │       // Adicionar o código ao objeto de dados
  964 │       const dadosComCodigo = {
  965 │         ...dados,
  966 │         codigo: codigo.toUpperCase()
  967 │       };
  968 │ 
  969 │       // Tentar inserir no Supabase
  970 │       const { data, error } = await supabase
  971 │         .from('grupos_estudo')
  972 │         .insert(dadosComCodigo)
  973 │         .select('*')
  974 │         .single();
  975 │ 
  976 │       if (!error && data) {
  977 │         console.log('Grupo criado com sucesso no Supabase:', data);
  978 │         grupoSalvoRemotamente = true;
  979 │         resultado = data;
  980 │ 
  981 │         // IMPORTANTE: Forçar inserção na tabela de códigos independente do trigger
  982 │         try {
  983 │           // Inserir diretamente na tabela de códigos para garantir que os dados estejam lá
  984 │           const { error: codigoError } = await supabase
  985 │             .from('codigos_grupos_estudo')
  986 │             .insert({
  987 │               codigo: data.codigo,
  988 │               grupo_id: data.id,
  989 │               nome: data.nome,
  990 │               descricao: data.descricao || '',
  991 │               user_id: data.user_id,
  992 │               privado: data.privado || false,
  993 │               membros: data.membros || 1,
  994 │               visibilidade: data.visibilidade || 'todos',
  995 │               disciplina: data.disciplina || '',
  996 │               cor: data.cor || '#FF6B00',
  997 │               membros_ids: data.membros_ids || [],
  998 │               data_criacao: new Date().toISOString()
  999 │             });
 1000 │ 
 1001 │           if (codigoError) {
 1002 │             console.error('Erro ao inserir na tabela de códigos:', codigoError);
 1003 │ 
 1004 │             // Tentar upsert como fallback
 1005 │             const { error: upsertError } = await supabase
 1006 │               .from('codigos_grupos_estudo')
 1007 │               .upsert({
 1008 │                 codigo: data.codigo,
 1009 │                 grupo_id: data.id,
 1010 │                 nome: data.nome,
 1011 │                 descricao: data.descricao || '',
 1012 │                 user_id: data.user_id,
 1013 │                 privado: data.privado || false,
 1014 │                 membros: data.membros || 1,
 1015 │                 visibilidade: data.visibilidade || 'todos',
 1016 │                 disciplina: data.disciplina || '',
 1017 │                 cor: data.cor || '#FF6B00',
 1018 │                 membros_ids: data.membros_ids || [],
 1019 │                 data_criacao: new Date().toISOString(),
 1020 │                 ultima_atualizacao: new Date().toISOString()
 1021 │               }, { onConflict: 'codigo' });
 1022 │ 
 1023 │             if (upsertError) {
 1024 │               console.error('Erro ao fazer upsert na tabela de códigos:', upsertError);
 1025 │             } else {
 1026 │               console.log(`Código ${data.codigo} salvo com sucesso via upsert na tabela central`);
 1027 │             }
 1028 │           } else {
 1029 │             console.log(`Código ${data.codigo} inserido com sucesso na tabela central de códigos`);
 1030 │           }
 1031 │         } catch (codigoError) {
 1032 │           console.error('Erro ao processar salvamento do código:', codigoError);
 1033 │         }
 1034 │ 
 1035 │         // Salvar também no storage local para acesso rápido
 1036 │         salvarGrupoLocal(data);
 1037 │         return data;
 1038 │       }
 1039 │     } catch (supabaseError) {
 1040 │       console.error('Erro ao criar grupo no Supabase:', supabaseError);
 1041 │     }
 1042 │ 
 1043 │     // Se chegou aqui, não conseguiu salvar no Supabase
 1044 │     if (!grupoSalvoRemotamente) {
 1045 │       console.log('Salvando grupo apenas localmente devido a falha no Supabase');
 1046 │ 
 1047 │       // Gerar ID localmente
 1048 │       const id = `local_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
 1049 │ 
 1050 │       // Gerar um código único para o grupo
 1051 │       const codigo = await gerarCodigoUnico();
 1052 │ 
 1053 │       // Criar grupo para armazenamento local
 1054 │       const grupoLocal: GrupoEstudo = {
 1055 │         ...dados,
 1056 │         id,
 1057 │         codigo: codigo.toUpperCase()
 1058 │       };
 1059 │ 
 1060 │       // Salvar localmente (apenas uma vez)
 1061 │       salvarGrupoLocal(grupoLocal);
 1062 │       resultado = grupoLocal;
 1063 │ 
 1064 │       // IMPORTANTE: Mesmo para grupos locais, garantir inserção na tabela central de códigos
 1065 │       try {
 1066 │         // Tentar inserção direta primeiro
 1067 │         const { error: insertError } = await supabase
 1068 │           .from('codigos_grupos_estudo')
 1069 │           .insert({
 1070 │             codigo: codigo.toUpperCase(),
 1071 │             grupo_id: id,
 1072 │             nome: dados.nome,
 1073 │             descricao: dados.descricao || '',
 1074 │             user_id: dados.user_id,
 1075 │             privado: dados.privado || false,
 1076 │             membros: dados.membros || 1,
 1077 │             visibilidade: dados.visibilidade || 'todos',
 1078 │             disciplina: dados.disciplina || '',
 1079 │             cor: dados.cor || '#FF6B00',
 1080 │             membros_ids: dados.membros_ids || [],
 1081 │             data_criacao: new Date().toISOString()
 1082 │           });
 1083 │ 
 1084 │         if (insertError) {
 1085 │           console.error('Erro ao inserir código na tabela central:', insertError);
 1086 │ 
 1087 │           // Tentar upsert como fallback
 1088 │           const { error: upsertError } = await supabase
 1089 │             .from('codigos_grupos_estudo')
 1090 │             .upsert({
 1091 │               codigo: codigo.toUpperCase(),
 1092 │               grupo_id: id,
 1093 │               nome: dados.nome,
 1094 │               descricao: dados.descricao || '',
 1095 │               user_id: dados.user_id,
 1096 │               privado: dados.privado || false,
 1097 │               membros: dados.membros || 1,
 1098 │               visibilidade: dados.visibilidade || 'todos',
 1099 │               disciplina: dados.disciplina || '',
 1100 │               cor: dados.cor || '#FF6B00',
 1101 │               membros_ids: dados.membros_ids || [],
 1102 │               data_criacao: new Date().toISOString(),
 1103 │               ultima_atualizacao: new Date().toISOString()
 1104 │             }, { onConflict: 'codigo' });
 1105 │ 
 1106 │           if (upsertError) {
 1107 │             console.error('Erro ao fazer upsert na tabela central:', upsertError);
 1108 │           } else {
 1109 │             console.log(`Código ${codigo} de grupo local salvo com sucesso na tabela central via upsert`);
 1110 │           }
 1111 │         } else {
 1112 │           console.log(`Código ${codigo} de grupo local inserido com sucesso na tabela central`);
 1113 │         }
 1114 │       } catch (codigoError) {
 1115 │         console.error('Erro ao processar salvamento do código local:', codigoError);
 1116 │       }
 1117 │ 
 1118 │       // Mostrar notificação sobre o armazenamento local
 1119 │       const element = document.createElement('div');
 1120 │       element.style.position = 'fixed';
 1121 │       element.style.top = '20px';
 1122 │       element.style.left = '50%';
 1123 │       element.style.transform = 'translateX(-50%)';
 1124 │       element.style.padding = '10px 20px';
 1125 │       element.style.background = '#FFA500';
 1126 │       element.style.color = 'white';
 1127 │       element.style.borderRadius = '4px';
 1128 │       element.style.zIndex = '9999';
 1129 │       element.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
 1130 │       element.textContent = 'Grupo salvo localmente. Será sincronizado quando o banco de dados estiver disponível.';
 1131 │       document.body.appendChild(element);
 1132 │ 
 1133 │       // Remover após 5 segundos
 1134 │       setTimeout(() => {
 1135 │         element.style.opacity = '0';
 1136 │         element.style.transition = 'opacity 0.5s';
 1137 │         setTimeout(() => {
 1138 │           document.body.removeChild(element);
 1139 │         }, 500);
 1140 │       }, 5000);
 1141 │     }
 1142 │ 
 1143 │     return resultado;
 1144 │   } catch (error) {
 1145 │     console.error('Erro crítico ao criar grupo:', error);
 1146 │     // Falha total, retornar nulo
 1147 │     return null;
 1148 │   }
 1149 │ };
 1150 │ 
 1151 │ const STORAGE_KEY = 'epictus_grupos_estudo';
 1152 │ 
 1153 │ // Função para salvar um grupo localmente
 1154 │ const salvarGrupoLocal = (grupo: GrupoEstudo): void => {
 1155 │   try {
 1156 │     // Obter grupos existentes
 1157 │     const gruposExistentes = obterGruposLocal();
 1158 │ 
 1159 │     // Verificar se o grupo já existe (para evitar duplicações)
 1160 │     const grupoIndex = gruposExistentes.findIndex(g => g.id === grupo.id);
 1161 │ 
 1162 │     if (grupoIndex >= 0) {
 1163 │       // Grupo já existe, atualizar
 1164 │       gruposExistentes[grupoIndex] = grupo;
 1165 │     } else {
 1166 │       // Grupo não existe, adicionar
 1167 │       gruposExistentes.push(grupo);
 1168 │     }
 1169 │ 
 1170 │     // Salvar no localStorage
 1171 │     localStorage.setItem(STORAGE_KEY, JSON.stringify(gruposExistentes));
 1172 │ 
 1173 │     // Backup na sessão (útil em navegações)
 1174 │     sessionStorage.setItem(`${STORAGE_KEY}_session`, JSON.stringify(gruposExistentes));
 1175 │ 
 1176 │     // Backup emergencial (para casos extremos)
 1177 │     const chaveEmergencia = `${STORAGE_KEY}_emergency_${Date.now()}`;
 1178 │     localStorage.setItem(chaveEmergencia, JSON.stringify([grupo]));
 1179 │ 
 1180 │     // Limitar backups emergenciais (manter apenas os 5 mais recentes)
 1181 │     const todasChaves = Object.keys(localStorage);
 1182 │     const chavesEmergencia = todasChaves
 1183 │       .filter(chave => chave.startsWith(`${STORAGE_KEY}_emergency_`))
 1184 │       .sort()
 1185 │       .slice(0, -5);
 1186 │ 
 1187 │     chavesEmergencia.forEach(chave => localStorage.removeItem(chave));
 1188 │ 
 1189 │     console.log('Grupo salvo localmente:', grupo);
 1190 │   } catch (error) {
 1191 │     console.error('Erro ao salvar grupo localmente:', error);
 1192 │   }
 1193 │ };
 1194 │ 
 1195 │ // Função para obter todos os grupos locais
 1196 │ const obterGruposLocal = (): GrupoEstudo[] => {
 1197 │   try {
 1198 │     const gruposStr = localStorage.getItem(STORAGE_KEY) || '[]';
 1199 │     return JSON.parse(gruposStr);
 1200 │   } catch (error) {
 1201 │     console.error('Erro ao obter grupos locais:', error);
 1202 │     return [];
 1203 │   }
 1204 │ };
 1205 │ 
 1206 │ export const obterTodosGrupos = async (userId: string): Promise<GrupoEstudo[]> => {
 1207 │   try {
 1208 │     // Obter a lista de grupos removidos
 1209 │     const gruposRemovidosKey = 'grupos_removidos';
 1210 │     const gruposRemovidosStr = localStorage.getItem(gruposRemovidosKey) || '[]';
 1211 │     const gruposRemovidos = JSON.parse(gruposRemovidosStr);
 1212 │ 
 1213 │     // Primeiro, garantir que temos os grupos locais (failsafe), excluindo os removidos
 1214 │     let gruposLocais = obterGruposLocal()
 1215 │       .filter(grupo => 
 1216 │         grupo.user_id === userId && 
 1217 │         !gruposRemovidos.includes(grupo.id)
 1218 │       );
 1219 │ 
 1220 │     // Criar um Map para rastreamento fácil de IDs
 1221 │     const gruposMap = new Map<string, GrupoEstudo>();
 1222 │ 
 1223 │     // Adicionar grupos locais ao Map
 1224 │     gruposLocais.forEach(grupo => {
 1225 │       gruposMap.set(grupo.id, grupo);
 1226 │     });
 1227 │ 
 1228 │     // Tentar obter backup da sessão
 1229 │     try {
 1230 │       const backupSessao = sessionStorage.getItem(`${STORAGE_KEY}_session`);
 1231 │       if (backupSessao) {
 1232 │         const gruposSessao = JSON.parse(backupSessao);
 1233 │         console.log('Backup de sessão encontrado com', gruposSessao.length, 'grupos');
 1234 │ 
 1235 │         // Adicionar apenas grupos que não estão no Map e não foram removidos
 1236 │         gruposSessao
 1237 │           .filter((g: GrupoEstudo) => 
 1238 │             g.user_id === userId && 
 1239 │             !gruposMap.has(g.id) && 
 1240 │             !gruposRemovidos.includes(g.id)
 1241 │           )
 1242 │           .forEach((g: GrupoEstudo) => {
 1243 │             gruposMap.set(g.id, g);
 1244 │           });
 1245 │ 
 1246 │         // Atualizar localStorage com os dados combinados
 1247 │         localStorage.setItem(STORAGE_KEY, JSON.stringify(Array.from(gruposMap.values())));
 1248 │       }
 1249 │     } catch (sessionError) {
 1250 │       console.error('Erro ao recuperar backup de sessão:', sessionError);
 1251 │     }
 1252 │ 
 1253 │     // Agora tentar obter do Supabase
 1254 │     try {
 1255 │       const { data: gruposSupabase, error } = await supabase
 1256 │         .from('grupos_estudo')
 1257 │         .select('*')
 1258 │         .eq('user_id', userId)
 1259 │         .order('data_criacao', { ascending: false });
 1260 │ 
 1261 │       if (error) {
 1262 │         console.error('Erro ao buscar grupos do banco de dados:', error);
 1263 │         // Se falhar o Supabase, retornar apenas grupos locais
 1264 │         return Array.from(gruposMap.values());
 1265 │       }
 1266 │ 
 1267 │       // Adicionar grupos do Supabase que não estão no Map e não foram removidos
 1268 │       gruposSupabase
 1269 │         .filter(grupo => !gruposRemovidos.includes(grupo.id))
 1270 │         .forEach(grupo => {
 1271 │           // Se já existe um grupo local com esse ID, o do Supabase tem prioridade
 1272 │           gruposMap.set(grupo.id, grupo);
 1273 │         });
 1274 │ 
 1275 │       // Salvar apenas os grupos locais (que começam com 'local_')
 1276 │       const apenasGruposLocais = Array.from(gruposMap.values())
 1277 │         .filter(g => g.id.startsWith('local_'))
 1278 │         .filter(g => !gruposRemovidos.includes(g.id));
 1279 │ 
 1280 │       // Se houver alguma diferença, atualizar armazenamento local
 1281 │       if (apenasGruposLocais.length > 0) {
 1282 │         localStorage.setItem(STORAGE_KEY, JSON.stringify(apenasGruposLocais));
 1283 │       }
 1284 │ 
 1285 │       return Array.from(gruposMap.values());
 1286 │     } catch (supabaseError) {
 1287 │       console.error('Erro ao acessar Supabase:', supabaseError);
 1288 │       return Array.from(gruposMap.values());
 1289 │     }
 1290 │   } catch (error) {
 1291 │     console.error('Erro ao obter todos os grupos:', error);
 1292 │ 
 1293 │     // Obter a lista de grupos removidos para filtrar recuperações de emergência
 1294 │     const gruposRemovidosKey = 'grupos_removidos';
 1295 │     const gruposRemovidosStr = localStorage.getItem(gruposRemovidosKey) || '[]';
 1296 │     const gruposRemovidos = JSON.parse(gruposRemovidosStr);
 1297 │ 
 1298 │     // Tentar recuperar grupos de qualquer fonte possível
 1299 │     try {
 1300 │       // Verificar backup no localStorage
 1301 │       const backup = localStorage.getItem(`${STORAGE_KEY}_backup`);
 1302 │       if (backup) {
 1303 │         const gruposBackup = JSON.parse(backup);
 1304 │         return gruposBackup
 1305 │           .filter((g: GrupoEstudo) => g.user_id === userId)
 1306 │           .filter((g: GrupoEstudo) => !gruposRemovidos.includes(g.id));
 1307 │       }
 1308 │ 
 1309 │       // Verificar backups de emergência
 1310 │       const todasChaves = Object.keys(localStorage);
 1311 │       const chavesEmergencia = todasChaves.filter(chave => chave.startsWith(`${STORAGE_KEY}_emergency_`));
 1312 │ 
 1313 │       if (chavesEmergencia.length > 0) {
 1314 │         // Usar Map para evitar duplicações
 1315 │         const gruposEmergenciaMap = new Map<string, GrupoEstudo>();
 1316 │ 
 1317 │         for (const chave of chavesEmergencia) {
 1318 │           try {
 1319 │             const gruposChave = JSON.parse(localStorage.getItem(chave) || '[]');
 1320 │             gruposChave.forEach((g: GrupoEstudo) => {
 1321 │               if (g.user_id === userId && !gruposRemovidos.includes(g.id)) {
 1322 │                 gruposEmergenciaMap.set(g.id, g);
 1323 │               }
 1324 │             });
 1325 │           } catch (e) {
 1326 │             console.error('Erro ao recuperar backup de emergência:', e);
 1327 │           }
 1328 │         }
 1329 │ 
 1330 │         return Array.from(gruposEmergenciaMap.values());
 1331 │       }
 1332 │     } catch (recoveryError) {
 1333 │       console.error('Erro na recuperação de emergência:', recoveryError);
 1334 │     }
 1335 │ 
 1336 │     // Último recurso: retornar array vazio
 1337 │     return [];
 1338 │   }
 1339 │ };
 1340 │ 
 1341 │ import { supabase } from "@/lib/supabase";
      ·          ────┬───
      ·              ╰── `supabase` redefined here
 1342 │ 
 1343 │ // Função para verificar se um código de grupo existe
 1344 │ export const verificarSeCodigoExiste = async (codigo: string) => {
      ╰────

  × the name `verificarSeCodigoExiste` is defined multiple times
      ╭─[/home/runner/workspace/src/lib/grupoCodigoUtils.ts:515:1]
  515 │ };
  516 │ 
  517 │ // Verifica se um código de grupo existe no banco de dados e o sincroniza se necessário
  518 │ export const verificarSeCodigoExiste = async (codigo: string): Promise<boolean> => {
      ·              ───────────┬───────────
      ·                         ╰── previous definition of `verificarSeCodigoExiste` here
  519 │   try {
  520 │     if (!codigo || codigo.trim() === '') {
  521 │       console.log('Código vazio, retornando false');
  522 │       return false;
  523 │     }
  524 │ 
  525 │     const codigoNormalizado = codigo.trim().toUpperCase();
  526 │     console.log(`Verificando se o código ${codigoNormalizado} existe...`);
  527 │ 
  528 │     // Primeiro, verificar na tabela de códigos (a principal fonte de verdade)
  529 │     try {
  530 │       const { data: dataCodigos, error: errorCodigos } = await supabase
  531 │         .from('codigos_grupos_estudo')
  532 │         .select('codigo')
  533 │         .eq('codigo', codigoNormalizado)
  534 │         .maybeSingle();
  535 │ 
  536 │       if (!errorCodigos && dataCodigos) {
  537 │         console.log(`Código ${codigoNormalizado} encontrado na tabela de códigos!`);
  538 │         return true;
  539 │       }
  540 │ 
  541 │       if (errorCodigos && errorCodigos.code !== 'PGRST116') {
  542 │         console.error("Erro ao verificar código na tabela de códigos:", errorCodigos);
  543 │       }
  544 │     } catch (e) {
  545 │       console.error("Exceção ao verificar código na tabela de códigos:", e);
  546 │     }
  547 │ 
  548 │     // Se não encontrou na tabela de códigos, verificar na tabela de grupos
  549 │     try {
  550 │       const { data: dataGrupos, error: errorGrupos } = await supabase
  551 │         .from('grupos_estudo')
  552 │         .select('*')  // Alterado para selecionar todos os campos para sincronização
  553 │         .eq('codigo', codigoNormalizado)
  554 │         .maybeSingle();
  555 │ 
  556 │       if (!errorGrupos && dataGrupos) {
  557 │         console.log(`Código ${codigoNormalizado} encontrado na tabela de grupos!`);
  558 │ 
  559 │         // Sincronizar automaticamente com a tabela de códigos
  560 │         try {
  561 │           const { error: syncError } = await supabase
  562 │             .from('codigos_grupos_estudo')
  563 │             .upsert({
  564 │               codigo: codigoNormalizado,
  565 │               grupo_id: dataGrupos.id,
  566 │               nome: dataGrupos.nome || 'Grupo sem nome',
  567 │               descricao: dataGrupos.descricao || '',
  568 │               user_id: dataGrupos.user_id,
  569 │               privado: dataGrupos.privado || false,
  570 │               membros: dataGrupos.membros || 1,
  571 │               visibilidade: dataGrupos.visibilidade || 'todos',
  572 │               disciplina: dataGrupos.disciplina || '',
  573 │               cor: dataGrupos.cor || '#FF6B00',
  574 │               membros_ids: dataGrupos.membros_ids || [],
  575 │               data_criacao: dataGrupos.data_criacao || new Date().toISOString(),
  576 │               ultima_atualizacao: new Date().toISOString()
  577 │             }, { onConflict: 'codigo' });
  578 │ 
  579 │           if (syncError) {
  580 │             console.error('Erro ao sincronizar código com tabela de códigos:', syncError);
  581 │           } else {
  582 │             console.log('Código sincronizado com a tabela central');
  583 │           }
  584 │         } catch (syncError) {
  585 │           console.error('Erro ao sincronizar código:', syncError);
  586 │         }
  587 │ 
  588 │         return true;
  589 │       }
  590 │ 
  591 │       if (errorGrupos && errorGrupos.code !== 'PGRST116') {
  592 │         console.error("Erro ao verificar código na tabela de grupos:", errorGrupos);
  593 │       }
  594 │     } catch (e) {
  595 │       console.error("Exceção ao verificar código na tabela de grupos:", e);
  596 │     }
  597 │ 
  598 │     // Verificar nos armazenamentos locais como último recurso e sincronizar se encontrado
  599 │     try {
  600 │       const grupos = JSON.parse(localStorage.getItem('epictus_grupos_estudo') || '[]');
  601 │       const grupo = grupos.find((g: any) => g.codigo && g.codigo.toUpperCase() === codigoNormalizado);
  602 │ 
  603 │       if (grupo) {
  604 │         console.log(`Código ${codigoNormalizado} encontrado no storage de grupos`);
  605 │ 
  606 │         // Sincronizar com a tabela de códigos
  607 │         try {
  608 │           const { error: syncError } = await supabase
  609 │             .from('codigos_grupos_estudo')
  610 │             .upsert({
  611 │               codigo: codigoNormalizado,
  612 │               grupo_id: grupo.id,
  613 │               nome: grupo.nome || 'Grupo sem nome',
  614 │               descricao: grupo.descricao || '',
  615 │               user_id: grupo.user_id || grupo.criador,
  616 │               privado: grupo.privado || false,
  617 │               membros: grupo.membros || 1,
  618 │               visibilidade: grupo.visibilidade || 'todos',
  619 │               disciplina: grupo.disciplina || '',
  620 │               cor: grupo.cor || '#FF6B00',
  621 │               membros_ids: grupo.membros_ids || [],
  622 │               data_criacao: grupo.dataCriacao || grupo.data_criacao || new Date().toISOString(),
  623 │               ultima_atualizacao: new Date().toISOString()
  624 │             }, { onConflict: 'codigo' });
  625 │ 
  626 │           if (syncError) {
  627 │             console.error('Erro ao sincronizar grupo do localStorage:', syncError);
  628 │           } else {
  629 │             console.log('Grupo do localStorage sincronizado com a tabela de códigos');
  630 │           }
  631 │         } catch (syncError) {
  632 │           console.error('Exceção ao sincronizar grupo do localStorage:', syncError);
  633 │         }
  634 │ 
  635 │         return true;
  636 │       }
  637 │ 
  638 │       // Verificar separadamente no storage de códigos
  639 │       const codigosGrupos = JSON.parse(localStorage.getItem('epictus_codigos_grupo') || '{}');
  640 │       const grupoIdComCodigo = Object.entries(codigosGrupos).find(
  641 │         ([_, codigo]) => typeof codigo === 'string' && (codigo as string).toUpperCase() === codigoNormalizado
  642 │       );
  643 │ 
  644 │       if (grupoIdComCodigo) {
  645 │         const [grupoId, _] = grupoIdComCodigo;
  646 │         console.log(`Código ${codigoNormalizado} encontrado no storage de códigos para o grupo ${grupoId}`);
  647 │ 
  648 │         // Tentar buscar informações do grupo para sincronização
  649 │         const grupoLocal = grupos.find((g: any) => g.id === grupoId);
  650 │         if (grupoLocal) {
  651 │           try {
  652 │             const { error: syncError } = await supabase
  653 │               .from('codigos_grupos_estudo')
  654 │               .upsert({
  655 │                 codigo: codigoNormalizado,
  656 │                 grupo_id: grupoId,
  657 │                 nome: grupoLocal.nome || 'Grupo sem nome',
  658 │                 descricao: grupoLocal.descricao || '',
  659 │                 user_id: grupoLocal.user_id || grupoLocal.criador,
  660 │                 privado: grupoLocal.privado || false,
  661 │                 membros: grupoLocal.membros || 1,
  662 │                 visibilidade: grupoLocal.visibilidade || 'todos',
  663 │                 disciplina: grupoLocal.disciplina || '',
  664 │                 cor: grupoLocal.cor || '#FF6B00',
  665 │                 membros_ids: grupoLocal.membros_ids || [],
  666 │                 data_criacao: grupoLocal.dataCriacao || grupoLocal.data_criacao || new Date().toISOString(),
  667 │                 ultima_atualizacao: new Date().toISOString()
  668 │               }, { onConflict: 'codigo' });
  669 │ 
  670 │             if (syncError) {
  671 │               console.error('Erro ao sincronizar código do localStorage:', syncError);
  672 │             } else {
  673 │               console.log('Código do localStorage sincronizado com a tabela central');
  674 │             }
  675 │           } catch (syncError) {
  676 │             console.error('Exceção ao sincronizar código do localStorage:', syncError);
  677 │           }
  678 │         }
  679 │ 
  680 │         return true;
  681 │       }
  682 │     } catch (e) {
  683 │       console.error("Erro ao verificar códigos no localStorage:", e);
  684 │     }
  685 │ 
  686 │     console.log(`Código ${codigoNormalizado} não encontrado em nenhuma fonte`);
  687 │     return false;
  688 │   } catch (error) {
  689 │     console.error("Erro ao verificar código:", error);
  690 │     return false;
  691 │   }
  692 │ };
  693 │ 
  694 │ /**
  695 │  * Verifica se um código pertence a um grupo criado pelo usuário ou do qual ele já é membro
  696 │  * @param codigo - O código do grupo a verificar
  697 │  * @param userId - ID do usuário atual
  698 │  * @returns Objeto contendo o resultado da verificação e detalhes do grupo, se aplicável
  699 │  */
  700 │ export const verificarRelacaoUsuarioComGrupo = async (
  701 │   codigo: string, 
  702 │   userId: string
  703 │ ): Promise<{ 
  704 │   pertenceAoUsuario: boolean, 
  705 │   jaEMembro: boolean, 
  706 │   nomeGrupo: string,
  707 │   grupoId: string | null
  708 │ }> => {
  709 │   try {
  710 │     if (!codigo || !userId) {
  711 │       console.log('Verificação abortada: código ou userId não fornecidos');
  712 │       return { pertenceAoUsuario: false, jaEMembro: false, nomeGrupo: '', grupoId: null };
  713 │     }
  714 │ 
  715 │     const codigoNormalizado = codigo.trim().toUpperCase();
  716 │     console.log(`Verificando relação para o código: ${codigoNormalizado} e usuário: ${userId}`);
  717 │ 
  718 │     // Primeiro verificar na tabela de códigos (principal fonte)
  719 │     let grupoInfo = null;
  720 │ 
  721 │     // Buscar na tabela de códigos com manejo de erro melhorado
  722 │     try {
  723 │       const { data: dataCodigos, error: errorCodigos } = await supabase
  724 │         .from('codigos_grupos_estudo')
  725 │         .select('*')
  726 │         .eq('codigo', codigoNormalizado)
  727 │         .maybeSingle();
  728 │ 
  729 │       if (errorCodigos) {
  730 │         console.error('Erro ao buscar na tabela de códigos:', errorCodigos);
  731 │       } else if (dataCodigos) {
  732 │         console.log('Grupo encontrado na tabela de códigos:', dataCodigos);
  733 │         grupoInfo = dataCodigos;
  734 │       } else {
  735 │         console.log('Nenhum grupo encontrado na tabela de códigos');
  736 │       }
  737 │     } catch (e) {
  738 │       console.error('Exceção ao buscar na tabela de códigos:', e);
  739 │     }
  740 │ 
  741 │     // Se não encontrou na tabela de códigos, buscar na tabela de grupos
  742 │     if (!grupoInfo) {
  743 │       try {
  744 │         const { data: dataGrupos, error: errorGrupos } = await supabase
  745 │           .from('grupos_estudo')
  746 │           .select('*')
  747 │           .eq('codigo', codigoNormalizado)
  748 │           .maybeSingle();
  749 │ 
  750 │         if (errorGrupos) {
  751 │           console.error('Erro ao buscar na tabela de grupos:', errorGrupos);
  752 │         } else if (dataGrupos) {
  753 │           console.log('Grupo encontrado na tabela de grupos:', dataGrupos);
  754 │           grupoInfo = dataGrupos;
  755 │ 
  756 │           // Se encontrou na tabela de grupos, tentar sincronizar com a tabela de códigos
  757 │           try {
  758 │             const { error: syncError } = await supabase
  759 │               .from('codigos_grupos_estudo')
  760 │               .upsert({
  761 │                 codigo: codigoNormalizado,
  762 │                 grupo_id: dataGrupos.id,
  763 │                 nome: dataGrupos.nome || 'Grupo sem nome',
  764 │                 descricao: dataGrupos.descricao || '',
  765 │                 user_id: dataGrupos.user_id,
  766 │                 privado: dataGrupos.privado || false,
  767 │                 membros: dataGrupos.membros || 1,
  768 │                 visibilidade: dataGrupos.visibilidade || 'todos',
  769 │                 disciplina: dataGrupos.disciplina || '',
  770 │                 cor: dataGrupos.cor || '#FF6B00',
  771 │                 membros_ids: dataGrupos.membros_ids || [],
  772 │                 data_criacao: dataGrupos.data_criacao || new Date().toISOString(),
  773 │                 ultima_atualizacao: new Date().toISOString()
  774 │               }, { onConflict: 'codigo' });
  775 │ 
  776 │             if (syncError) {
  777 │               console.error('Erro ao sincronizar com tabela de códigos:', syncError);
  778 │             } else {
  779 │               console.log('Grupo sincronizado com a tabela de códigos');
  780 │             }
  781 │           } catch (syncError) {
  782 │             console.error('Exceção ao sincronizar com tabela de códigos:', syncError);
  783 │           }
  784 │         } else {
  785 │           console.log('Nenhum grupo encontrado na tabela de grupos');
  786 │         }
  787 │       } catch (e) {
  788 │         console.error('Exceção ao buscar na tabela de grupos:', e);
  789 │       }
  790 │     }
  791 │ 
  792 │     // Verificar no localStorage como último recurso
  793 │     if (!grupoInfo) {
  794 │       try {
  795 │         const gruposStorage = localStorage.getItem('epictus_grupos_estudo');
  796 │         if (gruposStorage) {
  797 │           const grupos = JSON.parse(gruposStorage);
  798 │           const grupoLocalStorage = grupos.find((g: any) => g.codigo === codigoNormalizado);
  799 │ 
  800 │           if (grupoLocalStorage) {
  801 │             console.log('Grupo encontrado no localStorage:', grupoLocalStorage);
  802 │             grupoInfo = grupoLocalStorage;
  803 │ 
  804 │             // Tentar sincronizar este grupo com a tabela de códigos
  805 │             try {
  806 │               const { error: syncError } = await supabase
  807 │                 .from('codigos_grupos_estudo')
  808 │                 .upsert({
  809 │                   codigo: codigoNormalizado,
  810 │                   grupo_id: grupoLocalStorage.id,
  811 │                   nome: grupoLocalStorage.nome || 'Grupo sem nome',
  812 │                   descricao: grupoLocalStorage.descricao || '',
  813 │                   user_id: grupoLocalStorage.user_id || userId,
  814 │                   privado: grupoLocalStorage.privado || false,
  815 │                   membros: grupoLocalStorage.membros || 1,
  816 │                   visibilidade: grupoLocalStorage.visibilidade || 'todos',
  817 │                   disciplina: grupoLocalStorage.disciplina || '',
  818 │                   cor: grupoLocalStorage.cor || '#FF6B00',
  819 │                   membros_ids: grupoLocalStorage.membros_ids || [],
  820 │                   data_criacao: grupoLocalStorage.dataCriacao || new Date().toISOString(),
  821 │                   ultima_atualizacao: new Date().toISOString()
  822 │                 }, { onConflict: 'codigo' });
  823 │ 
  824 │               if (syncError) {
  825 │                 console.error('Erro ao sincronizar grupo do localStorage:', syncError);
  826 │               } else {
  827 │                 console.log('Grupo do localStorage sincronizado com a tabela de códigos');
  828 │               }
  829 │             } catch (syncError) {
  830 │               console.error('Exceção ao sincronizar grupo do localStorage:', syncError);
  831 │             }
  832 │           } else {
  833 │             console.log('Nenhum grupo com este código encontrado no localStorage');
  834 │           }
  835 │         }
  836 │       } catch (e) {
  837 │         console.error('Exceção ao verificar grupos no localStorage:', e);
  838 │       }
  839 │     }
  840 │ 
  841 │     // Se não encontrou o grupo em nenhuma das fontes
  842 │     if (!grupoInfo) {
  843 │       console.log('Não foi possível encontrar o grupo em nenhuma fonte');
  844 │       return { pertenceAoUsuario: false, jaEMembro: false, nomeGrupo: '', grupoId: null };
  845 │     }
  846 │ 
  847 │     // Verificar se o usuário é o criador do grupo
  848 │     const pertenceAoUsuario = grupoInfo.user_id === userId;
  849 │     console.log(`É o criador? ${pertenceAoUsuario} (user_id: ${grupoInfo.user_id}, userId: ${userId})`);
  850 │ 
  851 │     // Verificar se o usuário já é membro
  852 │     let membrosIds = [];
  853 │     try {
  854 │       membrosIds = Array.isArray(grupoInfo.membros_ids) 
  855 │         ? grupoInfo.membros_ids 
  856 │         : (typeof grupoInfo.membros_ids === 'string' 
  857 │             ? JSON.parse(grupoInfo.membros_ids) 
  858 │             : []);
  859 │     } catch (e) {
  860 │       console.error('Erro ao processar membros_ids:', e);
  861 │       membrosIds = [];
  862 │     }
  863 │ 
  864 │     const jaEMembro = membrosIds.includes(userId);
  865 │     console.log(`É membro? ${jaEMembro} (membros: ${JSON.stringify(membrosIds)})`);
  866 │ 
  867 │     // Verificar também no localStorage
  868 │     let membroLocalStorage = false;
  869 │     try {
  870 │       const gruposStorage = localStorage.getItem('epictus_grupos_estudo');
  871 │       if (gruposStorage) {
  872 │         const grupos = JSON.parse(gruposStorage);
  873 │         const grupoLocalStorage = grupos.find((g: any) => 
  874 │           g.id === (grupoInfo.id || grupoInfo.grupo_id)
  875 │         );
  876 │         membroLocalStorage = !!grupoLocalStorage;
  877 │         console.log(`Está no localStorage? ${membroLocalStorage}`);
  878 │       }
  879 │     } catch (e) {
  880 │       console.error("Erro ao verificar grupos no localStorage:", e);
  881 │     }
  882 │ 
  883 │     return { 
  884 │       pertenceAoUsuario, 
  885 │       jaEMembro: jaEMembro || membroLocalStorage || pertenceAoUsuario, 
  886 │       nomeGrupo: grupoInfo.nome || 'Grupo sem nome',
  887 │       grupoId: grupoInfo.id || grupoInfo.grupo_id
  888 │     };
  889 │   } catch (error) {
  890 │     console.error("Erro ao verificar relação do usuário com o grupo:", error);
  891 │     return { pertenceAoUsuario: false, jaEMembro: false, nomeGrupo: '', grupoId: null };
  892 │   }
  893 │ };
  894 │ 
  895 │ // Gera um código único para um grupo
  896 │ export const gerarCodigoGrupo = (): string => {
  897 │   const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  898 │   let codigo = '';
  899 │ 
  900 │   // Primeiro segmento (4 caracteres)
  901 │   for (let i = 0; i < 4; i++) {
  902 │     codigo += caracteres.charAt(Math.floor(Math.random() * caracteres.length));
  903 │   }
  904 │ 
  905 │   codigo += '-';
  906 │ 
  907 │   // Segundo segmento (4 caracteres)
  908 │   for (let i = 0; i < 4; i++) {
  909 │     codigo += caracteres.charAt(Math.floor(Math.random() * caracteres.length));
  910 │   }
  911 │ 
  912 │   codigo += '-';
  913 │ 
  914 │   // Terceiro segmento (4 caracteres)
  915 │   for (let i = 0; i < 4; i++) {
  916 │     codigo += caracteres.charAt(Math.floor(Math.random() * caracteres.length));
  917 │   }
  918 │ 
  919 │   return codigo;
  920 │ };
  921 │ 
  922 │ // Registra um novo código de grupo no banco de dados
  923 │ export const registrarCodigoGrupo = async (grupoId: string): Promise<string | null> => {
  924 │   try {
  925 │     const codigo = gerarCodigoGrupo();
  926 │ 
  927 │     // Aqui seria feito o registro real no banco de dados
  928 │     // Exemplo de implementação real:
  929 │     /*
  930 │     const { data, error } = await supabase
  931 │       .from('codigos_grupos')
  932 │       .insert({
  933 │         codigo,
  934 │         grupo_id: grupoId,
  935 │         ativo: true,
  936 │         data_criacao: new Date(),
  937 │         data_expiracao: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 dias
  938 │       });
  939 │ 
  940 │     if (error) {
  941 │       console.error("Erro ao registrar código:", error);
  942 │       return null;
  943 │     }
  944 │     */
  945 │ 
  946 │     return codigo;
  947 │   } catch (error) {
  948 │     console.error("Erro ao registrar código:", error);
  949 │     return null;
  950 │   }
  951 │ };
  952 │ 
  953 │ export const criarGrupo = async (dados: Omit<GrupoEstudo, 'id'>): Promise<GrupoEstudo | null> => {
  954 │   try {
  955 │     // Verificar se estamos online e tem conexão com Supabase
  956 │     let grupoSalvoRemotamente = false;
  957 │     let resultado: GrupoEstudo | null = null;
  958 │ 
  959 │     try {
  960 │       // Gerar um código único para o grupo antes da inserção
  961 │       const codigo = await gerarCodigoUnico();
  962 │ 
  963 │       // Adicionar o código ao objeto de dados
  964 │       const dadosComCodigo = {
  965 │         ...dados,
  966 │         codigo: codigo.toUpperCase()
  967 │       };
  968 │ 
  969 │       // Tentar inserir no Supabase
  970 │       const { data, error } = await supabase
  971 │         .from('grupos_estudo')
  972 │         .insert(dadosComCodigo)
  973 │         .select('*')
  974 │         .single();
  975 │ 
  976 │       if (!error && data) {
  977 │         console.log('Grupo criado com sucesso no Supabase:', data);
  978 │         grupoSalvoRemotamente = true;
  979 │         resultado = data;
  980 │ 
  981 │         // IMPORTANTE: Forçar inserção na tabela de códigos independente do trigger
  982 │         try {
  983 │           // Inserir diretamente na tabela de códigos para garantir que os dados estejam lá
  984 │           const { error: codigoError } = await supabase
  985 │             .from('codigos_grupos_estudo')
  986 │             .insert({
  987 │               codigo: data.codigo,
  988 │               grupo_id: data.id,
  989 │               nome: data.nome,
  990 │               descricao: data.descricao || '',
  991 │               user_id: data.user_id,
  992 │               privado: data.privado || false,
  993 │               membros: data.membros || 1,
  994 │               visibilidade: data.visibilidade || 'todos',
  995 │               disciplina: data.disciplina || '',
  996 │               cor: data.cor || '#FF6B00',
  997 │               membros_ids: data.membros_ids || [],
  998 │               data_criacao: new Date().toISOString()
  999 │             });
 1000 │ 
 1001 │           if (codigoError) {
 1002 │             console.error('Erro ao inserir na tabela de códigos:', codigoError);
 1003 │ 
 1004 │             // Tentar upsert como fallback
 1005 │             const { error: upsertError } = await supabase
 1006 │               .from('codigos_grupos_estudo')
 1007 │               .upsert({
 1008 │                 codigo: data.codigo,
 1009 │                 grupo_id: data.id,
 1010 │                 nome: data.nome,
 1011 │                 descricao: data.descricao || '',
 1012 │                 user_id: data.user_id,
 1013 │                 privado: data.privado || false,
 1014 │                 membros: data.membros || 1,
 1015 │                 visibilidade: data.visibilidade || 'todos',
 1016 │                 disciplina: data.disciplina || '',
 1017 │                 cor: data.cor || '#FF6B00',
 1018 │                 membros_ids: data.membros_ids || [],
 1019 │                 data_criacao: new Date().toISOString(),
 1020 │                 ultima_atualizacao: new Date().toISOString()
 1021 │               }, { onConflict: 'codigo' });
 1022 │ 
 1023 │             if (upsertError) {
 1024 │               console.error('Erro ao fazer upsert na tabela de códigos:', upsertError);
 1025 │             } else {
 1026 │               console.log(`Código ${data.codigo} salvo com sucesso via upsert na tabela central`);
 1027 │             }
 1028 │           } else {
 1029 │             console.log(`Código ${data.codigo} inserido com sucesso na tabela central de códigos`);
 1030 │           }
 1031 │         } catch (codigoError) {
 1032 │           console.error('Erro ao processar salvamento do código:', codigoError);
 1033 │         }
 1034 │ 
 1035 │         // Salvar também no storage local para acesso rápido
 1036 │         salvarGrupoLocal(data);
 1037 │         return data;
 1038 │       }
 1039 │     } catch (supabaseError) {
 1040 │       console.error('Erro ao criar grupo no Supabase:', supabaseError);
 1041 │     }
 1042 │ 
 1043 │     // Se chegou aqui, não conseguiu salvar no Supabase
 1044 │     if (!grupoSalvoRemotamente) {
 1045 │       console.log('Salvando grupo apenas localmente devido a falha no Supabase');
 1046 │ 
 1047 │       // Gerar ID localmente
 1048 │       const id = `local_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
 1049 │ 
 1050 │       // Gerar um código único para o grupo
 1051 │       const codigo = await gerarCodigoUnico();
 1052 │ 
 1053 │       // Criar grupo para armazenamento local
 1054 │       const grupoLocal: GrupoEstudo = {
 1055 │         ...dados,
 1056 │         id,
 1057 │         codigo: codigo.toUpperCase()
 1058 │       };
 1059 │ 
 1060 │       // Salvar localmente (apenas uma vez)
 1061 │       salvarGrupoLocal(grupoLocal);
 1062 │       resultado = grupoLocal;
 1063 │ 
 1064 │       // IMPORTANTE: Mesmo para grupos locais, garantir inserção na tabela central de códigos
 1065 │       try {
 1066 │         // Tentar inserção direta primeiro
 1067 │         const { error: insertError } = await supabase
 1068 │           .from('codigos_grupos_estudo')
 1069 │           .insert({
 1070 │             codigo: codigo.toUpperCase(),
 1071 │             grupo_id: id,
 1072 │             nome: dados.nome,
 1073 │             descricao: dados.descricao || '',
 1074 │             user_id: dados.user_id,
 1075 │             privado: dados.privado || false,
 1076 │             membros: dados.membros || 1,
 1077 │             visibilidade: dados.visibilidade || 'todos',
 1078 │             disciplina: dados.disciplina || '',
 1079 │             cor: dados.cor || '#FF6B00',
 1080 │             membros_ids: dados.membros_ids || [],
 1081 │             data_criacao: new Date().toISOString()
 1082 │           });
 1083 │ 
 1084 │         if (insertError) {
 1085 │           console.error('Erro ao inserir código na tabela central:', insertError);
 1086 │ 
 1087 │           // Tentar upsert como fallback
 1088 │           const { error: upsertError } = await supabase
 1089 │             .from('codigos_grupos_estudo')
 1090 │             .upsert({
 1091 │               codigo: codigo.toUpperCase(),
 1092 │               grupo_id: id,
 1093 │               nome: dados.nome,
 1094 │               descricao: dados.descricao || '',
 1095 │               user_id: dados.user_id,
 1096 │               privado: dados.privado || false,
 1097 │               membros: dados.membros || 1,
 1098 │               visibilidade: dados.visibilidade || 'todos',
 1099 │               disciplina: dados.disciplina || '',
 1100 │               cor: dados.cor || '#FF6B00',
 1101 │               membros_ids: dados.membros_ids || [],
 1102 │               data_criacao: new Date().toISOString(),
 1103 │               ultima_atualizacao: new Date().toISOString()
 1104 │             }, { onConflict: 'codigo' });
 1105 │ 
 1106 │           if (upsertError) {
 1107 │             console.error('Erro ao fazer upsert na tabela central:', upsertError);
 1108 │           } else {
 1109 │             console.log(`Código ${codigo} de grupo local salvo com sucesso na tabela central via upsert`);
 1110 │           }
 1111 │         } else {
 1112 │           console.log(`Código ${codigo} de grupo local inserido com sucesso na tabela central`);
 1113 │         }
 1114 │       } catch (codigoError) {
 1115 │         console.error('Erro ao processar salvamento do código local:', codigoError);
 1116 │       }
 1117 │ 
 1118 │       // Mostrar notificação sobre o armazenamento local
 1119 │       const element = document.createElement('div');
 1120 │       element.style.position = 'fixed';
 1121 │       element.style.top = '20px';
 1122 │       element.style.left = '50%';
 1123 │       element.style.transform = 'translateX(-50%)';
 1124 │       element.style.padding = '10px 20px';
 1125 │       element.style.background = '#FFA500';
 1126 │       element.style.color = 'white';
 1127 │       element.style.borderRadius = '4px';
 1128 │       element.style.zIndex = '9999';
 1129 │       element.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
 1130 │       element.textContent = 'Grupo salvo localmente. Será sincronizado quando o banco de dados estiver disponível.';
 1131 │       document.body.appendChild(element);
 1132 │ 
 1133 │       // Remover após 5 segundos
 1134 │       setTimeout(() => {
 1135 │         element.style.opacity = '0';
 1136 │         element.style.transition = 'opacity 0.5s';
 1137 │         setTimeout(() => {
 1138 │           document.body.removeChild(element);
 1139 │         }, 500);
 1140 │       }, 5000);
 1141 │     }
 1142 │ 
 1143 │     return resultado;
 1144 │   } catch (error) {
 1145 │     console.error('Erro crítico ao criar grupo:', error);
 1146 │     // Falha total, retornar nulo
 1147 │     return null;
 1148 │   }
 1149 │ };
 1150 │ 
 1151 │ const STORAGE_KEY = 'epictus_grupos_estudo';
 1152 │ 
 1153 │ // Função para salvar um grupo localmente
 1154 │ const salvarGrupoLocal = (grupo: GrupoEstudo): void => {
 1155 │   try {
 1156 │     // Obter grupos existentes
 1157 │     const gruposExistentes = obterGruposLocal();
 1158 │ 
 1159 │     // Verificar se o grupo já existe (para evitar duplicações)
 1160 │     const grupoIndex = gruposExistentes.findIndex(g => g.id === grupo.id);
 1161 │ 
 1162 │     if (grupoIndex >= 0) {
 1163 │       // Grupo já existe, atualizar
 1164 │       gruposExistentes[grupoIndex] = grupo;
 1165 │     } else {
 1166 │       // Grupo não existe, adicionar
 1167 │       gruposExistentes.push(grupo);
 1168 │     }
 1169 │ 
 1170 │     // Salvar no localStorage
 1171 │     localStorage.setItem(STORAGE_KEY, JSON.stringify(gruposExistentes));
 1172 │ 
 1173 │     // Backup na sessão (útil em navegações)
 1174 │     sessionStorage.setItem(`${STORAGE_KEY}_session`, JSON.stringify(gruposExistentes));
 1175 │ 
 1176 │     // Backup emergencial (para casos extremos)
 1177 │     const chaveEmergencia = `${STORAGE_KEY}_emergency_${Date.now()}`;
 1178 │     localStorage.setItem(chaveEmergencia, JSON.stringify([grupo]));
 1179 │ 
 1180 │     // Limitar backups emergenciais (manter apenas os 5 mais recentes)
 1181 │     const todasChaves = Object.keys(localStorage);
 1182 │     const chavesEmergencia = todasChaves
 1183 │       .filter(chave => chave.startsWith(`${STORAGE_KEY}_emergency_`))
 1184 │       .sort()
 1185 │       .slice(0, -5);
 1186 │ 
 1187 │     chavesEmergencia.forEach(chave => localStorage.removeItem(chave));
 1188 │ 
 1189 │     console.log('Grupo salvo localmente:', grupo);
 1190 │   } catch (error) {
 1191 │     console.error('Erro ao salvar grupo localmente:', error);
 1192 │   }
 1193 │ };
 1194 │ 
 1195 │ // Função para obter todos os grupos locais
 1196 │ const obterGruposLocal = (): GrupoEstudo[] => {
 1197 │   try {
 1198 │     const gruposStr = localStorage.getItem(STORAGE_KEY) || '[]';
 1199 │     return JSON.parse(gruposStr);
 1200 │   } catch (error) {
 1201 │     console.error('Erro ao obter grupos locais:', error);
 1202 │     return [];
 1203 │   }
 1204 │ };
 1205 │ 
 1206 │ export const obterTodosGrupos = async (userId: string): Promise<GrupoEstudo[]> => {
 1207 │   try {
 1208 │     // Obter a lista de grupos removidos
 1209 │     const gruposRemovidosKey = 'grupos_removidos';
 1210 │     const gruposRemovidosStr = localStorage.getItem(gruposRemovidosKey) || '[]';
 1211 │     const gruposRemovidos = JSON.parse(gruposRemovidosStr);
 1212 │ 
 1213 │     // Primeiro, garantir que temos os grupos locais (failsafe), excluindo os removidos
 1214 │     let gruposLocais = obterGruposLocal()
 1215 │       .filter(grupo => 
 1216 │         grupo.user_id === userId && 
 1217 │         !gruposRemovidos.includes(grupo.id)
 1218 │       );
 1219 │ 
 1220 │     // Criar um Map para rastreamento fácil de IDs
 1221 │     const gruposMap = new Map<string, GrupoEstudo>();
 1222 │ 
 1223 │     // Adicionar grupos locais ao Map
 1224 │     gruposLocais.forEach(grupo => {
 1225 │       gruposMap.set(grupo.id, grupo);
 1226 │     });
 1227 │ 
 1228 │     // Tentar obter backup da sessão
 1229 │     try {
 1230 │       const backupSessao = sessionStorage.getItem(`${STORAGE_KEY}_session`);
 1231 │       if (backupSessao) {
 1232 │         const gruposSessao = JSON.parse(backupSessao);
 1233 │         console.log('Backup de sessão encontrado com', gruposSessao.length, 'grupos');
 1234 │ 
 1235 │         // Adicionar apenas grupos que não estão no Map e não foram removidos
 1236 │         gruposSessao
 1237 │           .filter((g: GrupoEstudo) => 
 1238 │             g.user_id === userId && 
 1239 │             !gruposMap.has(g.id) && 
 1240 │             !gruposRemovidos.includes(g.id)
 1241 │           )
 1242 │           .forEach((g: GrupoEstudo) => {
 1243 │             gruposMap.set(g.id, g);
 1244 │           });
 1245 │ 
 1246 │         // Atualizar localStorage com os dados combinados
 1247 │         localStorage.setItem(STORAGE_KEY, JSON.stringify(Array.from(gruposMap.values())));
 1248 │       }
 1249 │     } catch (sessionError) {
 1250 │       console.error('Erro ao recuperar backup de sessão:', sessionError);
 1251 │     }
 1252 │ 
 1253 │     // Agora tentar obter do Supabase
 1254 │     try {
 1255 │       const { data: gruposSupabase, error } = await supabase
 1256 │         .from('grupos_estudo')
 1257 │         .select('*')
 1258 │         .eq('user_id', userId)
 1259 │         .order('data_criacao', { ascending: false });
 1260 │ 
 1261 │       if (error) {
 1262 │         console.error('Erro ao buscar grupos do banco de dados:', error);
 1263 │         // Se falhar o Supabase, retornar apenas grupos locais
 1264 │         return Array.from(gruposMap.values());
 1265 │       }
 1266 │ 
 1267 │       // Adicionar grupos do Supabase que não estão no Map e não foram removidos
 1268 │       gruposSupabase
 1269 │         .filter(grupo => !gruposRemovidos.includes(grupo.id))
 1270 │         .forEach(grupo => {
 1271 │           // Se já existe um grupo local com esse ID, o do Supabase tem prioridade
 1272 │           gruposMap.set(grupo.id, grupo);
 1273 │         });
 1274 │ 
 1275 │       // Salvar apenas os grupos locais (que começam com 'local_')
 1276 │       const apenasGruposLocais = Array.from(gruposMap.values())
 1277 │         .filter(g => g.id.startsWith('local_'))
 1278 │         .filter(g => !gruposRemovidos.includes(g.id));
 1279 │ 
 1280 │       // Se houver alguma diferença, atualizar armazenamento local
 1281 │       if (apenasGruposLocais.length > 0) {
 1282 │         localStorage.setItem(STORAGE_KEY, JSON.stringify(apenasGruposLocais));
 1283 │       }
 1284 │ 
 1285 │       return Array.from(gruposMap.values());
 1286 │     } catch (supabaseError) {
 1287 │       console.error('Erro ao acessar Supabase:', supabaseError);
 1288 │       return Array.from(gruposMap.values());
 1289 │     }
 1290 │   } catch (error) {
 1291 │     console.error('Erro ao obter todos os grupos:', error);
 1292 │ 
 1293 │     // Obter a lista de grupos removidos para filtrar recuperações de emergência
 1294 │     const gruposRemovidosKey = 'grupos_removidos';
 1295 │     const gruposRemovidosStr = localStorage.getItem(gruposRemovidosKey) || '[]';
 1296 │     const gruposRemovidos = JSON.parse(gruposRemovidosStr);
 1297 │ 
 1298 │     // Tentar recuperar grupos de qualquer fonte possível
 1299 │     try {
 1300 │       // Verificar backup no localStorage
 1301 │       const backup = localStorage.getItem(`${STORAGE_KEY}_backup`);
 1302 │       if (backup) {
 1303 │         const gruposBackup = JSON.parse(backup);
 1304 │         return gruposBackup
 1305 │           .filter((g: GrupoEstudo) => g.user_id === userId)
 1306 │           .filter((g: GrupoEstudo) => !gruposRemovidos.includes(g.id));
 1307 │       }
 1308 │ 
 1309 │       // Verificar backups de emergência
 1310 │       const todasChaves = Object.keys(localStorage);
 1311 │       const chavesEmergencia = todasChaves.filter(chave => chave.startsWith(`${STORAGE_KEY}_emergency_`));
 1312 │ 
 1313 │       if (chavesEmergencia.length > 0) {
 1314 │         // Usar Map para evitar duplicações
 1315 │         const gruposEmergenciaMap = new Map<string, GrupoEstudo>();
 1316 │ 
 1317 │         for (const chave of chavesEmergencia) {
 1318 │           try {
 1319 │             const gruposChave = JSON.parse(localStorage.getItem(chave) || '[]');
 1320 │             gruposChave.forEach((g: GrupoEstudo) => {
 1321 │               if (g.user_id === userId && !gruposRemovidos.includes(g.id)) {
 1322 │                 gruposEmergenciaMap.set(g.id, g);
 1323 │               }
 1324 │             });
 1325 │           } catch (e) {
 1326 │             console.error('Erro ao recuperar backup de emergência:', e);
 1327 │           }
 1328 │         }
 1329 │ 
 1330 │         return Array.from(gruposEmergenciaMap.values());
 1331 │       }
 1332 │     } catch (recoveryError) {
 1333 │       console.error('Erro na recuperação de emergência:', recoveryError);
 1334 │     }
 1335 │ 
 1336 │     // Último recurso: retornar array vazio
 1337 │     return [];
 1338 │   }
 1339 │ };
 1340 │ 
 1341 │ import { supabase } from "@/lib/supabase";
 1342 │ 
 1343 │ // Função para verificar se um código de grupo existe
 1344 │ export const verificarSeCodigoExiste = async (codigo: string) => {
      ·              ───────────┬───────────
      ·                         ╰── `verificarSeCodigoExiste` redefined here
 1345 │   if (!codigo) return { existe: false, mensagem: "Código não fornecido" };
 1346 │ 
 1347 │   try {
      ╰────

  × the name `gerarCodigoGrupo` is defined multiple times
      ╭─[/home/runner/workspace/src/lib/grupoCodigoUtils.ts:893:1]
  893 │ };
  894 │ 
  895 │ // Gera um código único para um grupo
  896 │ export const gerarCodigoGrupo = (): string => {
      ·              ────────┬───────
      ·                      ╰── previous definition of `gerarCodigoGrupo` here
  897 │   const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  898 │   let codigo = '';
  899 │ 
  900 │   // Primeiro segmento (4 caracteres)
  901 │   for (let i = 0; i < 4; i++) {
  902 │     codigo += caracteres.charAt(Math.floor(Math.random() * caracteres.length));
  903 │   }
  904 │ 
  905 │   codigo += '-';
  906 │ 
  907 │   // Segundo segmento (4 caracteres)
  908 │   for (let i = 0; i < 4; i++) {
  909 │     codigo += caracteres.charAt(Math.floor(Math.random() * caracteres.length));
  910 │   }
  911 │ 
  912 │   codigo += '-';
  913 │ 
  914 │   // Terceiro segmento (4 caracteres)
  915 │   for (let i = 0; i < 4; i++) {
  916 │     codigo += caracteres.charAt(Math.floor(Math.random() * caracteres.length));
  917 │   }
  918 │ 
  919 │   return codigo;
  920 │ };
  921 │ 
  922 │ // Registra um novo código de grupo no banco de dados
  923 │ export const registrarCodigoGrupo = async (grupoId: string): Promise<string | null> => {
  924 │   try {
  925 │     const codigo = gerarCodigoGrupo();
  926 │ 
  927 │     // Aqui seria feito o registro real no banco de dados
  928 │     // Exemplo de implementação real:
  929 │     /*
  930 │     const { data, error } = await supabase
  931 │       .from('codigos_grupos')
  932 │       .insert({
  933 │         codigo,
  934 │         grupo_id: grupoId,
  935 │         ativo: true,
  936 │         data_criacao: new Date(),
  937 │         data_expiracao: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 dias
  938 │       });
  939 │ 
  940 │     if (error) {
  941 │       console.error("Erro ao registrar código:", error);
  942 │       return null;
  943 │     }
  944 │     */
  945 │ 
  946 │     return codigo;
  947 │   } catch (error) {
  948 │     console.error("Erro ao registrar código:", error);
  949 │     return null;
  950 │   }
  951 │ };
  952 │ 
  953 │ export const criarGrupo = async (dados: Omit<GrupoEstudo, 'id'>): Promise<GrupoEstudo | null> => {
  954 │   try {
  955 │     // Verificar se estamos online e tem conexão com Supabase
  956 │     let grupoSalvoRemotamente = false;
  957 │     let resultado: GrupoEstudo | null = null;
  958 │ 
  959 │     try {
  960 │       // Gerar um código único para o grupo antes da inserção
  961 │       const codigo = await gerarCodigoUnico();
  962 │ 
  963 │       // Adicionar o código ao objeto de dados
  964 │       const dadosComCodigo = {
  965 │         ...dados,
  966 │         codigo: codigo.toUpperCase()
  967 │       };
  968 │ 
  969 │       // Tentar inserir no Supabase
  970 │       const { data, error } = await supabase
  971 │         .from('grupos_estudo')
  972 │         .insert(dadosComCodigo)
  973 │         .select('*')
  974 │         .single();
  975 │ 
  976 │       if (!error && data) {
  977 │         console.log('Grupo criado com sucesso no Supabase:', data);
  978 │         grupoSalvoRemotamente = true;
  979 │         resultado = data;
  980 │ 
  981 │         // IMPORTANTE: Forçar inserção na tabela de códigos independente do trigger
  982 │         try {
  983 │           // Inserir diretamente na tabela de códigos para garantir que os dados estejam lá
  984 │           const { error: codigoError } = await supabase
  985 │             .from('codigos_grupos_estudo')
  986 │             .insert({
  987 │               codigo: data.codigo,
  988 │               grupo_id: data.id,
  989 │               nome: data.nome,
  990 │               descricao: data.descricao || '',
  991 │               user_id: data.user_id,
  992 │               privado: data.privado || false,
  993 │               membros: data.membros || 1,
  994 │               visibilidade: data.visibilidade || 'todos',
  995 │               disciplina: data.disciplina || '',
  996 │               cor: data.cor || '#FF6B00',
  997 │               membros_ids: data.membros_ids || [],
  998 │               data_criacao: new Date().toISOString()
  999 │             });
 1000 │ 
 1001 │           if (codigoError) {
 1002 │             console.error('Erro ao inserir na tabela de códigos:', codigoError);
 1003 │ 
 1004 │             // Tentar upsert como fallback
 1005 │             const { error: upsertError } = await supabase
 1006 │               .from('codigos_grupos_estudo')
 1007 │               .upsert({
 1008 │                 codigo: data.codigo,
 1009 │                 grupo_id: data.id,
 1010 │                 nome: data.nome,
 1011 │                 descricao: data.descricao || '',
 1012 │                 user_id: data.user_id,
 1013 │                 privado: data.privado || false,
 1014 │                 membros: data.membros || 1,
 1015 │                 visibilidade: data.visibilidade || 'todos',
 1016 │                 disciplina: data.disciplina || '',
 1017 │                 cor: data.cor || '#FF6B00',
 1018 │                 membros_ids: data.membros_ids || [],
 1019 │                 data_criacao: new Date().toISOString(),
 1020 │                 ultima_atualizacao: new Date().toISOString()
 1021 │               }, { onConflict: 'codigo' });
 1022 │ 
 1023 │             if (upsertError) {
 1024 │               console.error('Erro ao fazer upsert na tabela de códigos:', upsertError);
 1025 │             } else {
 1026 │               console.log(`Código ${data.codigo} salvo com sucesso via upsert na tabela central`);
 1027 │             }
 1028 │           } else {
 1029 │             console.log(`Código ${data.codigo} inserido com sucesso na tabela central de códigos`);
 1030 │           }
 1031 │         } catch (codigoError) {
 1032 │           console.error('Erro ao processar salvamento do código:', codigoError);
 1033 │         }
 1034 │ 
 1035 │         // Salvar também no storage local para acesso rápido
 1036 │         salvarGrupoLocal(data);
 1037 │         return data;
 1038 │       }
 1039 │     } catch (supabaseError) {
 1040 │       console.error('Erro ao criar grupo no Supabase:', supabaseError);
 1041 │     }
 1042 │ 
 1043 │     // Se chegou aqui, não conseguiu salvar no Supabase
 1044 │     if (!grupoSalvoRemotamente) {
 1045 │       console.log('Salvando grupo apenas localmente devido a falha no Supabase');
 1046 │ 
 1047 │       // Gerar ID localmente
 1048 │       const id = `local_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
 1049 │ 
 1050 │       // Gerar um código único para o grupo
 1051 │       const codigo = await gerarCodigoUnico();
 1052 │ 
 1053 │       // Criar grupo para armazenamento local
 1054 │       const grupoLocal: GrupoEstudo = {
 1055 │         ...dados,
 1056 │         id,
 1057 │         codigo: codigo.toUpperCase()
 1058 │       };
 1059 │ 
 1060 │       // Salvar localmente (apenas uma vez)
 1061 │       salvarGrupoLocal(grupoLocal);
 1062 │       resultado = grupoLocal;
 1063 │ 
 1064 │       // IMPORTANTE: Mesmo para grupos locais, garantir inserção na tabela central de códigos
 1065 │       try {
 1066 │         // Tentar inserção direta primeiro
 1067 │         const { error: insertError } = await supabase
 1068 │           .from('codigos_grupos_estudo')
 1069 │           .insert({
 1070 │             codigo: codigo.toUpperCase(),
 1071 │             grupo_id: id,
 1072 │             nome: dados.nome,
 1073 │             descricao: dados.descricao || '',
 1074 │             user_id: dados.user_id,
 1075 │             privado: dados.privado || false,
 1076 │             membros: dados.membros || 1,
 1077 │             visibilidade: dados.visibilidade || 'todos',
 1078 │             disciplina: dados.disciplina || '',
 1079 │             cor: dados.cor || '#FF6B00',
 1080 │             membros_ids: dados.membros_ids || [],
 1081 │             data_criacao: new Date().toISOString()
 1082 │           });
 1083 │ 
 1084 │         if (insertError) {
 1085 │           console.error('Erro ao inserir código na tabela central:', insertError);
 1086 │ 
 1087 │           // Tentar upsert como fallback
 1088 │           const { error: upsertError } = await supabase
 1089 │             .from('codigos_grupos_estudo')
 1090 │             .upsert({
 1091 │               codigo: codigo.toUpperCase(),
 1092 │               grupo_id: id,
 1093 │               nome: dados.nome,
 1094 │               descricao: dados.descricao || '',
 1095 │               user_id: dados.user_id,
 1096 │               privado: dados.privado || false,
 1097 │               membros: dados.membros || 1,
 1098 │               visibilidade: dados.visibilidade || 'todos',
 1099 │               disciplina: dados.disciplina || '',
 1100 │               cor: dados.cor || '#FF6B00',
 1101 │               membros_ids: dados.membros_ids || [],
 1102 │               data_criacao: new Date().toISOString(),
 1103 │               ultima_atualizacao: new Date().toISOString()
 1104 │             }, { onConflict: 'codigo' });
 1105 │ 
 1106 │           if (upsertError) {
 1107 │             console.error('Erro ao fazer upsert na tabela central:', upsertError);
 1108 │           } else {
 1109 │             console.log(`Código ${codigo} de grupo local salvo com sucesso na tabela central via upsert`);
 1110 │           }
 1111 │         } else {
 1112 │           console.log(`Código ${codigo} de grupo local inserido com sucesso na tabela central`);
 1113 │         }
 1114 │       } catch (codigoError) {
 1115 │         console.error('Erro ao processar salvamento do código local:', codigoError);
 1116 │       }
 1117 │ 
 1118 │       // Mostrar notificação sobre o armazenamento local
 1119 │       const element = document.createElement('div');
 1120 │       element.style.position = 'fixed';
 1121 │       element.style.top = '20px';
 1122 │       element.style.left = '50%';
 1123 │       element.style.transform = 'translateX(-50%)';
 1124 │       element.style.padding = '10px 20px';
 1125 │       element.style.background = '#FFA500';
 1126 │       element.style.color = 'white';
 1127 │       element.style.borderRadius = '4px';
 1128 │       element.style.zIndex = '9999';
 1129 │       element.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
 1130 │       element.textContent = 'Grupo salvo localmente. Será sincronizado quando o banco de dados estiver disponível.';
 1131 │       document.body.appendChild(element);
 1132 │ 
 1133 │       // Remover após 5 segundos
 1134 │       setTimeout(() => {
 1135 │         element.style.opacity = '0';
 1136 │         element.style.transition = 'opacity 0.5s';
 1137 │         setTimeout(() => {
 1138 │           document.body.removeChild(element);
 1139 │         }, 500);
 1140 │       }, 5000);
 1141 │     }
 1142 │ 
 1143 │     return resultado;
 1144 │   } catch (error) {
 1145 │     console.error('Erro crítico ao criar grupo:', error);
 1146 │     // Falha total, retornar nulo
 1147 │     return null;
 1148 │   }
 1149 │ };
 1150 │ 
 1151 │ const STORAGE_KEY = 'epictus_grupos_estudo';
 1152 │ 
 1153 │ // Função para salvar um grupo localmente
 1154 │ const salvarGrupoLocal = (grupo: GrupoEstudo): void => {
 1155 │   try {
 1156 │     // Obter grupos existentes
 1157 │     const gruposExistentes = obterGruposLocal();
 1158 │ 
 1159 │     // Verificar se o grupo já existe (para evitar duplicações)
 1160 │     const grupoIndex = gruposExistentes.findIndex(g => g.id === grupo.id);
 1161 │ 
 1162 │     if (grupoIndex >= 0) {
 1163 │       // Grupo já existe, atualizar
 1164 │       gruposExistentes[grupoIndex] = grupo;
 1165 │     } else {
 1166 │       // Grupo não existe, adicionar
 1167 │       gruposExistentes.push(grupo);
 1168 │     }
 1169 │ 
 1170 │     // Salvar no localStorage
 1171 │     localStorage.setItem(STORAGE_KEY, JSON.stringify(gruposExistentes));
 1172 │ 
 1173 │     // Backup na sessão (útil em navegações)
 1174 │     sessionStorage.setItem(`${STORAGE_KEY}_session`, JSON.stringify(gruposExistentes));
 1175 │ 
 1176 │     // Backup emergencial (para casos extremos)
 1177 │     const chaveEmergencia = `${STORAGE_KEY}_emergency_${Date.now()}`;
 1178 │     localStorage.setItem(chaveEmergencia, JSON.stringify([grupo]));
 1179 │ 
 1180 │     // Limitar backups emergenciais (manter apenas os 5 mais recentes)
 1181 │     const todasChaves = Object.keys(localStorage);
 1182 │     const chavesEmergencia = todasChaves
 1183 │       .filter(chave => chave.startsWith(`${STORAGE_KEY}_emergency_`))
 1184 │       .sort()
 1185 │       .slice(0, -5);
 1186 │ 
 1187 │     chavesEmergencia.forEach(chave => localStorage.removeItem(chave));
 1188 │ 
 1189 │     console.log('Grupo salvo localmente:', grupo);
 1190 │   } catch (error) {
 1191 │     console.error('Erro ao salvar grupo localmente:', error);
 1192 │   }
 1193 │ };
 1194 │ 
 1195 │ // Função para obter todos os grupos locais
 1196 │ const obterGruposLocal = (): GrupoEstudo[] => {
 1197 │   try {
 1198 │     const gruposStr = localStorage.getItem(STORAGE_KEY) || '[]';
 1199 │     return JSON.parse(gruposStr);
 1200 │   } catch (error) {
 1201 │     console.error('Erro ao obter grupos locais:', error);
 1202 │     return [];
 1203 │   }
 1204 │ };
 1205 │ 
 1206 │ export const obterTodosGrupos = async (userId: string): Promise<GrupoEstudo[]> => {
 1207 │   try {
 1208 │     // Obter a lista de grupos removidos
 1209 │     const gruposRemovidosKey = 'grupos_removidos';
 1210 │     const gruposRemovidosStr = localStorage.getItem(gruposRemovidosKey) || '[]';
 1211 │     const gruposRemovidos = JSON.parse(gruposRemovidosStr);
 1212 │ 
 1213 │     // Primeiro, garantir que temos os grupos locais (failsafe), excluindo os removidos
 1214 │     let gruposLocais = obterGruposLocal()
 1215 │       .filter(grupo => 
 1216 │         grupo.user_id === userId && 
 1217 │         !gruposRemovidos.includes(grupo.id)
 1218 │       );
 1219 │ 
 1220 │     // Criar um Map para rastreamento fácil de IDs
 1221 │     const gruposMap = new Map<string, GrupoEstudo>();
 1222 │ 
 1223 │     // Adicionar grupos locais ao Map
 1224 │     gruposLocais.forEach(grupo => {
 1225 │       gruposMap.set(grupo.id, grupo);
 1226 │     });
 1227 │ 
 1228 │     // Tentar obter backup da sessão
 1229 │     try {
 1230 │       const backupSessao = sessionStorage.getItem(`${STORAGE_KEY}_session`);
 1231 │       if (backupSessao) {
 1232 │         const gruposSessao = JSON.parse(backupSessao);
 1233 │         console.log('Backup de sessão encontrado com', gruposSessao.length, 'grupos');
 1234 │ 
 1235 │         // Adicionar apenas grupos que não estão no Map e não foram removidos
 1236 │         gruposSessao
 1237 │           .filter((g: GrupoEstudo) => 
 1238 │             g.user_id === userId && 
 1239 │             !gruposMap.has(g.id) && 
 1240 │             !gruposRemovidos.includes(g.id)
 1241 │           )
 1242 │           .forEach((g: GrupoEstudo) => {
 1243 │             gruposMap.set(g.id, g);
 1244 │           });
 1245 │ 
 1246 │         // Atualizar localStorage com os dados combinados
 1247 │         localStorage.setItem(STORAGE_KEY, JSON.stringify(Array.from(gruposMap.values())));
 1248 │       }
 1249 │     } catch (sessionError) {
 1250 │       console.error('Erro ao recuperar backup de sessão:', sessionError);
 1251 │     }
 1252 │ 
 1253 │     // Agora tentar obter do Supabase
 1254 │     try {
 1255 │       const { data: gruposSupabase, error } = await supabase
 1256 │         .from('grupos_estudo')
 1257 │         .select('*')
 1258 │         .eq('user_id', userId)
 1259 │         .order('data_criacao', { ascending: false });
 1260 │ 
 1261 │       if (error) {
 1262 │         console.error('Erro ao buscar grupos do banco de dados:', error);
 1263 │         // Se falhar o Supabase, retornar apenas grupos locais
 1264 │         return Array.from(gruposMap.values());
 1265 │       }
 1266 │ 
 1267 │       // Adicionar grupos do Supabase que não estão no Map e não foram removidos
 1268 │       gruposSupabase
 1269 │         .filter(grupo => !gruposRemovidos.includes(grupo.id))
 1270 │         .forEach(grupo => {
 1271 │           // Se já existe um grupo local com esse ID, o do Supabase tem prioridade
 1272 │           gruposMap.set(grupo.id, grupo);
 1273 │         });
 1274 │ 
 1275 │       // Salvar apenas os grupos locais (que começam com 'local_')
 1276 │       const apenasGruposLocais = Array.from(gruposMap.values())
 1277 │         .filter(g => g.id.startsWith('local_'))
 1278 │         .filter(g => !gruposRemovidos.includes(g.id));
 1279 │ 
 1280 │       // Se houver alguma diferença, atualizar armazenamento local
 1281 │       if (apenasGruposLocais.length > 0) {
 1282 │         localStorage.setItem(STORAGE_KEY, JSON.stringify(apenasGruposLocais));
 1283 │       }
 1284 │ 
 1285 │       return Array.from(gruposMap.values());
 1286 │     } catch (supabaseError) {
 1287 │       console.error('Erro ao acessar Supabase:', supabaseError);
 1288 │       return Array.from(gruposMap.values());
 1289 │     }
 1290 │   } catch (error) {
 1291 │     console.error('Erro ao obter todos os grupos:', error);
 1292 │ 
 1293 │     // Obter a lista de grupos removidos para filtrar recuperações de emergência
 1294 │     const gruposRemovidosKey = 'grupos_removidos';
 1295 │     const gruposRemovidosStr = localStorage.getItem(gruposRemovidosKey) || '[]';
 1296 │     const gruposRemovidos = JSON.parse(gruposRemovidosStr);
 1297 │ 
 1298 │     // Tentar recuperar grupos de qualquer fonte possível
 1299 │     try {
 1300 │       // Verificar backup no localStorage
 1301 │       const backup = localStorage.getItem(`${STORAGE_KEY}_backup`);
 1302 │       if (backup) {
 1303 │         const gruposBackup = JSON.parse(backup);
 1304 │         return gruposBackup
 1305 │           .filter((g: GrupoEstudo) => g.user_id === userId)
 1306 │           .filter((g: GrupoEstudo) => !gruposRemovidos.includes(g.id));
 1307 │       }
 1308 │ 
 1309 │       // Verificar backups de emergência
 1310 │       const todasChaves = Object.keys(localStorage);
 1311 │       const chavesEmergencia = todasChaves.filter(chave => chave.startsWith(`${STORAGE_KEY}_emergency_`));
 1312 │ 
 1313 │       if (chavesEmergencia.length > 0) {
 1314 │         // Usar Map para evitar duplicações
 1315 │         const gruposEmergenciaMap = new Map<string, GrupoEstudo>();
 1316 │ 
 1317 │         for (const chave of chavesEmergencia) {
 1318 │           try {
 1319 │             const gruposChave = JSON.parse(localStorage.getItem(chave) || '[]');
 1320 │             gruposChave.forEach((g: GrupoEstudo) => {
 1321 │               if (g.user_id === userId && !gruposRemovidos.includes(g.id)) {
 1322 │                 gruposEmergenciaMap.set(g.id, g);
 1323 │               }
 1324 │             });
 1325 │           } catch (e) {
 1326 │             console.error('Erro ao recuperar backup de emergência:', e);
 1327 │           }
 1328 │         }
 1329 │ 
 1330 │         return Array.from(gruposEmergenciaMap.values());
 1331 │       }
 1332 │     } catch (recoveryError) {
 1333 │       console.error('Erro na recuperação de emergência:', recoveryError);
 1334 │     }
 1335 │ 
 1336 │     // Último recurso: retornar array vazio
 1337 │     return [];
 1338 │   }
 1339 │ };
 1340 │ 
 1341 │ import { supabase } from "@/lib/supabase";
 1342 │ 
 1343 │ // Função para verificar se um código de grupo existe
 1344 │ export const verificarSeCodigoExiste = async (codigo: string) => {
 1345 │   if (!codigo) return { existe: false, mensagem: "Código não fornecido" };
 1346 │ 
 1347 │   try {
 1348 │     // Normalizar o código (remover espaços, etc.)
 1349 │     const codigoNormalizado = codigo.trim().toUpperCase();
 1350 │ 
 1351 │     // Primeiro, verificar se a tabela codigos_grupos_estudo existe
 1352 │     try {
 1353 │       const { count, error: countError } = await supabase
 1354 │         .from('codigos_grupos_estudo')
 1355 │         .select('*', { count: 'exact', head: true });
 1356 │ 
 1357 │       if (countError && countError.code === '42P01') {
 1358 │         // A tabela não existe, vamos criá-la
 1359 │         console.log("Tabela codigos_grupos_estudo não existe, criando...");
 1360 │         const criada = await criarTabelaCodigosGrupos();
 1361 │ 
 1362 │         if (!criada) {
 1363 │           return { 
 1364 │             existe: false, 
 1365 │             mensagem: "Erro ao criar tabela de códigos. Por favor, tente novamente mais tarde." 
 1366 │           };
 1367 │         }
 1368 │ 
 1369 │         // Tabela criada, mas como acabou de ser criada, não contém o código
 1370 │         return { 
 1371 │           existe: false, 
 1372 │           mensagem: "Sistema de códigos inicializado. O código informado não foi encontrado." 
 1373 │         };
 1374 │       }
 1375 │     } catch (tableCheckError) {
 1376 │       console.error("Erro ao verificar se tabela existe:", tableCheckError);
 1377 │     }
 1378 │ 
 1379 │     // Verificar se o código existe na tabela específica
 1380 │     const { data, error } = await supabase
 1381 │       .from('codigos_grupos_estudo')
 1382 │       .select('*')
 1383 │       .eq('codigo', codigoNormalizado)
 1384 │       .maybeSingle();
 1385 │ 
 1386 │     if (error) {
 1387 │       // Se o erro for de "não encontrado", o código não existe
 1388 │       if (error.code === 'PGRST116') {
 1389 │         return { existe: false, mensagem: "Código não encontrado" };
 1390 │       }
 1391 │ 
 1392 │       // Se for um erro de tabela inexistente, tentar criar
 1393 │       if (error.code === '42P01') {
 1394 │         console.error("Tabela codigos_grupos_estudo não existe:", error);
 1395 │         // Tentar criar a tabela
 1396 │         const criada = await criarTabelaCodigosGrupos();
 1397 │ 
 1398 │         if (!criada) {
 1399 │           return { 
 1400 │             existe: false, 
 1401 │             mensagem: "Erro ao criar tabela de códigos. Por favor, tente novamente após sincronizar os dados." 
 1402 │           };
 1403 │         }
 1404 │ 
 1405 │         return { 
 1406 │           existe: false, 
 1407 │           mensagem: "Sistema de códigos está sendo inicializado. Tente novamente em alguns momentos." 
 1408 │         };
 1409 │       }
 1410 │ 
 1411 │       // Para outros erros
 1412 │       console.error("Erro ao verificar código:", error);
 1413 │       return { 
 1414 │         existe: false, 
 1415 │         mensagem: `Erro ao verificar código: ${error.message}` 
 1416 │       };
 1417 │     }
 1418 │ 
 1419 │     if (!data) {
 1420 │       // Código não encontrado na tabela de códigos
 1421 │       // Vamos verificar se ele existe na tabela de grupos
 1422 │       try {
 1423 │         const { data: grupoData, error: grupoError } = await supabase
 1424 │           .from('grupos_estudo')
 1425 │           .select('*')
 1426 │           .eq('codigo', codigoNormalizado)
 1427 │           .maybeSingle();
 1428 │ 
 1429 │         if (grupoError) {
 1430 │           if (grupoError.code === '42P01') {
 1431 │             // Tabela grupos_estudo não existe
 1432 │             return { 
 1433 │               existe: false, 
 1434 │               mensagem: "Sistema de grupos não está inicializado. Por favor, sincronize os dados." 
 1435 │             };
 1436 │           }
 1437 │ 
 1438 │           console.error("Erro ao verificar código na tabela grupos:", grupoError);
 1439 │           return { 
 1440 │             existe: false, 
 1441 │             mensagem: "Código não encontrado" 
 1442 │           };
 1443 │         }
 1444 │ 
 1445 │         if (grupoData) {
 1446 │           // Encontrou o grupo, agora vamos sincronizar com a tabela de códigos
 1447 │           try {
 1448 │             await supabase.from('codigos_grupos_estudo').insert({
 1449 │               codigo: codigoNormalizado,
 1450 │               grupo_id: grupoData.id,
 1451 │               nome: grupoData.nome || 'Grupo sem nome',
 1452 │               descricao: grupoData.descricao || '',
 1453 │               user_id: grupoData.user_id,
 1454 │               privado: grupoData.privado || false,
 1455 │               membros: grupoData.membros || 1,
 1456 │               visibilidade: grupoData.visibilidade || 'todos',
 1457 │               disciplina: grupoData.disciplina || '',
 1458 │               cor: grupoData.cor || '#FF6B00',
 1459 │               membros_ids: grupoData.membros_ids || [],
 1460 │               data_criacao: grupoData.data_criacao || new Date().toISOString(),
 1461 │               ultima_atualizacao: new Date().toISOString()
 1462 │             });
 1463 │ 
 1464 │             // Grupo sincronizado na tabela de códigos
 1465 │             return { 
 1466 │               existe: true, 
 1467 │               grupo: grupoData, 
 1468 │               mensagem: "Código válido encontrado" 
 1469 │             };
 1470 │           } catch (syncError) {
 1471 │             console.error("Erro ao sincronizar código com tabela de códigos:", syncError);
 1472 │             // Mas ainda retornamos o grupo encontrado
 1473 │             return { 
 1474 │               existe: true, 
 1475 │               grupo: grupoData, 
 1476 │               mensagem: "Código válido encontrado" 
 1477 │             };
 1478 │           }
 1479 │         }
 1480 │ 
 1481 │         return { existe: false, mensagem: "Código não encontrado" };
 1482 │       } catch (grupoCheckError) {
 1483 │         console.error("Erro ao verificar código na tabela de grupos:", grupoCheckError);
 1484 │         return { existe: false, mensagem: "Código não encontrado" };
 1485 │       }
 1486 │     }
 1487 │ 
 1488 │     // Se chegou aqui, encontrou o código na tabela de códigos
 1489 │     return { 
 1490 │       existe: true, 
 1491 │       grupo: data, 
 1492 │       mensagem: "Código válido encontrado" 
 1493 │     };
 1494 │ 
 1495 │   } catch (error) {
 1496 │     console.error("Exceção ao verificar código:", error);
 1497 │     return { 
 1498 │       existe: false, 
 1499 │       mensagem: "Erro interno ao verificar código. Por favor, tente novamente." 
 1500 │     };
 1501 │   }
 1502 │ };
 1503 │ 
 1504 │ // Função para criar a tabela de códigos de grupo
 1505 │ const criarTabelaCodigosGrupos = async () => {
 1506 │   try {
 1507 │     console.log("Iniciando criação da tabela codigos_grupos_estudo...");
 1508 │ 
 1509 │     // Primeiro, verificar se a extensão uuid-ossp está disponível
 1510 │     try {
 1511 │       await supabase.query(`CREATE EXTENSION IF NOT EXISTS "uuid-ossp";`);
 1512 │       console.log("Extensão uuid-ossp verificada/criada");
 1513 │     } catch (extError) {
 1514 │       console.log("Nota: Não foi possível criar extensão uuid-ossp, mas isso pode não ser um problema:", extError);
 1515 │     }
 1516 │ 
 1517 │     // Executar SQL para criar a tabela
 1518 │     const { error } = await supabase.query(`
 1519 │       CREATE TABLE IF NOT EXISTS public.codigos_grupos_estudo (
 1520 │         codigo VARCHAR(15) PRIMARY KEY,
 1521 │         grupo_id UUID NOT NULL,
 1522 │         nome VARCHAR NOT NULL,
 1523 │         descricao TEXT,
 1524 │         data_criacao TIMESTAMP WITH TIME ZONE DEFAULT now(),
 1525 │         user_id UUID,
 1526 │         privado BOOLEAN DEFAULT false,
 1527 │         membros INTEGER DEFAULT 1,
 1528 │         visibilidade VARCHAR,
 1529 │         disciplina VARCHAR,
 1530 │         cor VARCHAR DEFAULT '#FF6B00',
 1531 │         membros_ids JSONB DEFAULT '[]'::jsonb,
 1532 │         ultima_atualizacao TIMESTAMP WITH TIME ZONE DEFAULT now()
 1533 │       );
 1534 │     `);
 1535 │ 
 1536 │     if (error) {
 1537 │       console.error("Erro ao criar tabela de códigos:", error);
 1538 │       return false;
 1539 │     }
 1540 │ 
 1541 │     // Criar índices e políticas de segurança
 1542 │     try {
 1543 │       await supabase.query(`
 1544 │         CREATE INDEX IF NOT EXISTS idx_codigos_grupos_estudo_grupo_id ON public.codigos_grupos_estudo(grupo_id);
 1545 │         CREATE INDEX IF NOT EXISTS idx_codigos_grupos_estudo_user_id ON public.codigos_grupos_estudo(user_id);
 1546 │       `);
 1547 │ 
 1548 │       await supabase.query(`
 1549 │         ALTER TABLE public.codigos_grupos_estudo ENABLE ROW LEVEL SECURITY;
 1550 │       `);
 1551 │ 
 1552 │       await supabase.query(`
 1553 │         DROP POLICY IF EXISTS "Todos podem visualizar códigos" ON public.codigos_grupos_estudo;
 1554 │         CREATE POLICY "Todos podem visualizar códigos"
 1555 │           ON public.codigos_grupos_estudo FOR SELECT
 1556 │           USING (true);
 1557 │       `);
 1558 │ 
 1559 │       await supabase.query(`
 1560 │         DROP POLICY IF EXISTS "Todos podem inserir códigos" ON public.codigos_grupos_estudo;
 1561 │         CREATE POLICY "Todos podem inserir códigos"
 1562 │           ON public.codigos_grupos_estudo FOR INSERT
 1563 │           WITH CHECK (true);
 1564 │       `);
 1565 │ 
 1566 │       await supabase.query(`
 1567 │         DROP POLICY IF EXISTS "Todos podem atualizar códigos" ON public.codigos_grupos_estudo;
 1568 │         CREATE POLICY "Todos podem atualizar códigos"
 1569 │           ON public.codigos_grupos_estudo FOR UPDATE
 1570 │           USING (true);
 1571 │       `);
 1572 │     } catch (policiesError) {
 1573 │       console.warn("Aviso: Não foi possível criar todos os índices/políticas:", policiesError);
 1574 │       // Continuamos mesmo se falhar a criação de políticas
 1575 │     }
 1576 │ 
 1577 │     console.log("Tabela de códigos de grupos criada com sucesso!");
 1578 │     return true;
 1579 │   } catch (error) {
 1580 │     console.error("Exceção ao criar tabela de códigos:", error);
 1581 │     return false;
 1582 │   }
 1583 │ };
 1584 │ 
 1585 │ // Função para gerar um código único de grupo
 1586 │ export const gerarCodigoGrupo = () => {
      ·              ────────┬───────
      ·                      ╰── `gerarCodigoGrupo` redefined here
 1587 │   // Caracteres permitidos (removido caracteres ambíguos como 0/O, 1/I, etc.)
 1588 │   const chars = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789";
      ╰────

  × the name `salvarCodigoGrupo` is defined multiple times
      ╭─[/home/runner/workspace/src/lib/grupoCodigoUtils.ts:111:1]
  111 │  * @param grupoId - ID do grupo
  112 │  * @param codigo - Código a ser salvo
  113 │  */
  114 │ export const salvarCodigoGrupo = async (grupoId: string, codigo: string): Promise<void> => {
      ·              ────────┬────────
      ·                      ╰── previous definition of `salvarCodigoGrupo` here
  115 │   if (!grupoId || !codigo) return;
  116 │ 
  117 │   const codigoNormalizado = codigo.toUpperCase();
  118 │ 
  119 │   try {
  120 │     // 1. Salvar no banco de dados central
  121 │     try {
  122 │       // Primeiro buscar os dados do grupo
  123 │       const { data: grupoData, error: grupoError } = await supabase
  124 │         .from('grupos_estudo')
  125 │         .select('*')
  126 │         .eq('id', grupoId)
  127 │         .single();
  128 │ 
  129 │       if (!grupoError && grupoData) {
  130 │         // Atualizar o código no grupo
  131 │         const { error: updateError } = await supabase
  132 │           .from('grupos_estudo')
  133 │           .update({ codigo: codigoNormalizado })
  134 │           .eq('id', grupoId);
  135 │ 
  136 │         if (updateError) {
  137 │           console.error('Erro ao atualizar código no grupo:', updateError);
  138 │         } else {
  139 │           console.log(`Código ${codigoNormalizado} atualizado com sucesso no grupo ${grupoId}`);
  140 │         }
  141 │ 
  142 │         // Garantir que o código está na tabela central de códigos (independente do trigger)
  143 │         const { error: codigoError } = await supabase
  144 │           .from('codigos_grupos_estudo')
  145 │           .upsert({
  146 │             codigo: codigoNormalizado,
  147 │             grupo_id: grupoId,
  148 │             nome: grupoData.nome,
  149 │             descricao: grupoData.descricao || '',
  150 │             user_id: grupoData.user_id,
  151 │             privado: grupoData.privado || false,
  152 │             membros: grupoData.membros || 1,
  153 │             visibilidade: grupoData.visibilidade || 'todos',
  154 │             disciplina: grupoData.disciplina || '',
  155 │             cor: grupoData.cor || '#FF6B00',
  156 │             membros_ids: grupoData.membros_ids || [],
  157 │             ultima_atualizacao: new Date().toISOString()
  158 │           }, { onConflict: 'codigo' });
  159 │ 
  160 │         if (codigoError) {
  161 │           console.error('Erro ao salvar na tabela central de códigos:', codigoError);
  162 │         } else {
  163 │           console.log(`Código ${codigoNormalizado} salvo com sucesso na tabela central`);
  164 │         }
  165 │       } else {
  166 │         // Se não encontrar o grupo, tentar salvar o código com dados mínimos
  167 │         console.warn(`Grupo ${grupoId} não encontrado. Tentando salvar código com dados mínimos.`);
  168 │ 
  169 │         // Buscar informações básicas no localStorage
  170 │         const grupos = JSON.parse(localStorage.getItem('epictus_grupos_estudo') || '[]');
  171 │         const grupoLocal = grupos.find((g: any) => g.id === grupoId);
  172 │ 
  173 │         if (grupoLocal) {
  174 │           const { error: codigoMinError } = await supabase
  175 │             .from('codigos_grupos_estudo')
  176 │             .upsert({
  177 │               codigo: codigoNormalizado,
  178 │               grupo_id: grupoId,
  179 │               nome: grupoLocal.nome || 'Grupo de Estudo',
  180 │               descricao: grupoLocal.descricao || '',
  181 │               user_id: grupoLocal.user_id,
  182 │               privado: grupoLocal.privado || false,
  183 │               membros: grupoLocal.membros || 1,
  184 │               visibilidade: grupoLocal.visibilidade || 'todos',
  185 │               disciplina: grupoLocal.disciplina || '',
  186 │               cor: grupoLocal.cor || '#FF6B00',
  187 │               membros_ids: grupoLocal.membros_ids || []
  188 │             }, { onConflict: 'codigo' });
  189 │ 
  190 │           if (codigoMinError) {
  191 │             console.error('Erro ao salvar código mínimo na tabela central:', codigoMinError);
  192 │           } else {
  193 │             console.log(`Código ${codigoNormalizado} salvo com dados mínimos na tabela central`);
  194 │           }
  195 │         } else {
  196 │           console.error(`Não foi possível encontrar informações para o grupo ${grupoId}`);
  197 │         }
  198 │       }
  199 │     } catch (dbError) {
  200 │       console.error('Erro ao salvar código no banco de dados:', dbError);
  201 │     }
  202 │ 
  203 │     // 2. Salvar em armazenamentos locais como backup
  204 │     salvarCodigoEmStoragesLocais(grupoId, codigoNormalizado);
  205 │ 
  206 │     console.log(`Código ${codigoNormalizado} salvo com sucesso para o grupo ${grupoId}`);
  207 │   } catch (error) {
  208 │     console.error('Erro ao salvar código de grupo:', error);
  209 │   }
  210 │ };
  211 │ 
  212 │ /**
  213 │  * Função auxiliar para salvar o código em armazenamentos locais
  214 │  * @param grupoId - ID do grupo
  215 │  * @param codigo - Código a ser salvo
  216 │  */
  217 │ const salvarCodigoEmStoragesLocais = (grupoId: string, codigo: string): void => {
  218 │   try {
  219 │     // Salvar no armazenamento dedicado para códigos
  220 │     const CODIGOS_STORAGE_KEY = 'epictus_codigos_grupo';
  221 │     const codigosGrupos = JSON.parse(localStorage.getItem(CODIGOS_STORAGE_KEY) || '{}');
  222 │     codigosGrupos[grupoId] = codigo.toUpperCase();
  223 │     localStorage.setItem(CODIGOS_STORAGE_KEY, JSON.stringify(codigosGrupos));
  224 │ 
  225 │     // Salvar no localStorage de grupos
  226 │     const GRUPOS_STORAGE_KEY = 'epictus_grupos_estudo';
  227 │     const grupos = JSON.parse(localStorage.getItem(GRUPOS_STORAGE_KEY) || '[]');
  228 │     const grupoIndex = grupos.findIndex((g: any) => g.id === grupoId);
  229 │ 
  230 │     if (grupoIndex >= 0) {
  231 │       grupos[grupoIndex].codigo = codigo.toUpperCase();
  232 │       localStorage.setItem(GRUPOS_STORAGE_KEY, JSON.stringify(grupos));
  233 │     }
  234 │ 
  235 │     // Salvar na sessionStorage para recuperação rápida
  236 │     sessionStorage.setItem(`grupo_codigo_${grupoId}`, codigo.toUpperCase());
  237 │   } catch (error) {
  238 │     console.error('Erro ao salvar código em armazenamentos locais:', error);
  239 │   }
  240 │ };
  241 │ 
  242 │ /**
  243 │  * Gerar um código único para um grupo e salvar em todos os armazenamentos
  244 │  * @param grupoId - ID do grupo para o qual gerar código
  245 │  * @returns O código gerado
  246 │  */
  247 │ export const gerarESalvarCodigoUnico = async (grupoId: string): Promise<string> => {
  248 │   try {
  249 │     // Primeiro verificar se já existe um código
  250 │     const codigoExistente = await obterCodigoGrupoExistente(grupoId);
  251 │     if (codigoExistente) {
  252 │       console.log(`Grupo ${grupoId} já possui o código ${codigoExistente}`);
  253 │       return codigoExistente;
  254 │     }
  255 │ 
  256 │     console.log(`Gerando novo código para o grupo ${grupoId}...`);
  257 │ 
  258 │     // Gerar um novo código único
  259 │     const novoCodigo = await gerarCodigoUnico();
  260 │ 
  261 │     // Salvar o código em todos os lugares
  262 │     await salvarCodigoGrupo(grupoId, novoCodigo);
  263 │ 
  264 │     console.log(`Novo código ${novoCodigo} gerado e salvo para o grupo ${grupoId}`);
  265 │     return novoCodigo;
  266 │   } catch (error) {
  267 │     console.error('Erro ao gerar e salvar código único:', error);
  268 │ 
  269 │     // Fallback para garantir que sempre retornamos algo
  270 │     const fallbackCodigo = Array(7)
  271 │       .fill(0)
  272 │       .map(() => "ABCDEFGHJKLMNPQRSTUVWXYZ23456789".charAt(Math.floor(Math.random() * 32)))
  273 │       .join('');
  274 │ 
  275 │     try {
  276 │       await salvarCodigoGrupo(grupoId, fallbackCodigo);
  277 │     } catch (fallbackError) {
  278 │       console.error('Erro ao salvar código fallback:', fallbackError);
  279 │     }
  280 │ 
  281 │     return fallbackCodigo;
  282 │   }
  283 │ };
  284 │ 
  285 │ /**
  286 │  * Verifica se um código existe em qualquer grupo
  287 │  * @param codigo - Código a ser verificado
  288 │  * @returns true se o código existir em algum grupo
  289 │  */
  290 │ export const verificarCodigoExiste = async (codigo: string): Promise<boolean> => {
  291 │   if (!codigo) return false;
  292 │ 
  293 │   try {
  294 │     // Normalizar o código para comparação
  295 │     const codigoNormalizado = codigo.trim().toUpperCase();
  296 │ 
  297 │     // Verificar no banco de dados central (principal)
  298 │     try {
  299 │       const { data, error } = await supabase
  300 │         .from('codigos_grupos_estudo')
  301 │         .select('codigo')
  302 │         .eq('codigo', codigoNormalizado)
  303 │         .single();
  304 │ 
  305 │       if (!error && data) {
  306 │         console.log(`Código ${codigoNormalizado} encontrado no banco de dados central`);
  307 │         return true;
  308 │       }
  309 │     } catch (dbError) {
  310 │       console.error('Erro ao verificar código no banco de dados:', dbError);
  311 │     }
  312 │ 
  313 │     // Verificar no armazenamento dedicado como fallback
  314 │     const CODIGOS_STORAGE_KEY = 'epictus_codigos_grupo';
  315 │     const codigosGrupos = JSON.parse(localStorage.getItem(CODIGOS_STORAGE_KEY) || '{}');
  316 │ 
  317 │     // Verificar se o código existe como valor em qualquer entrada
  318 │     if (Object.values(codigosGrupos).some((c: any) => 
  319 │       c.toUpperCase() === codigoNormalizado)) {
  320 │       console.log(`Código ${codigoNormalizado} encontrado no storage local dedicado`);
  321 │       return true;
  322 │     }
  323 │ 
  324 │     // Verificar também no localStorage de grupos
  325 │     const GRUPOS_STORAGE_KEY = 'epictus_grupos_estudo';
  326 │     const grupos = JSON.parse(localStorage.getItem(GRUPOS_STORAGE_KEY) || '[]');
  327 │ 
  328 │     if (grupos.some((g: any) => 
  329 │       g.codigo && g.codigo.toUpperCase() === codigoNormalizado)) {
  330 │       console.log(`Código ${codigoNormalizado} encontrado no storage local de grupos`);
  331 │       return true;
  332 │     }
  333 │ 
  334 │     return false;
  335 │   } catch (error) {
  336 │     console.error('Erro ao verificar existência de código:', error);
  337 │     return false;
  338 │   }
  339 │ };
  340 │ 
  341 │ /**
  342 │  * Busca um grupo pelo seu código
  343 │  * @param codigo - Código do grupo a ser buscado
  344 │  * @returns O grupo encontrado ou null
  345 │  */
  346 │ export const buscarGrupoComCodigo = async (codigo: string): Promise<any | null> => {
  347 │   if (!codigo) {
  348 │     console.log('Código vazio, retornando null');
  349 │     return null;
  350 │   }
  351 │ 
  352 │   try {
  353 │     // Normalizar o código
  354 │     const codigoNormalizado = codigo.trim().toUpperCase();
  355 │     console.log(`Buscando grupo com código: ${codigoNormalizado}`);
  356 │ 
  357 │     // ETAPA 1: Buscar diretamente na tabela de códigos
  358 │     let grupoEncontrado = null;
  359 │ 
  360 │     try {
  361 │       const { data: dataCodigos, error: codigosError } = await supabase
  362 │         .from('codigos_grupos_estudo')
  363 │         .select('*')
  364 │         .eq('codigo', codigoNormalizado)
  365 │         .maybeSingle();
  366 │ 
  367 │       if (codigosError) {
  368 │         console.error('Erro ao buscar na tabela de códigos:', codigosError);
  369 │       } else if (dataCodigos) {
  370 │         console.log('Grupo encontrado na tabela de códigos:', dataCodigos);
  371 │         grupoEncontrado = dataCodigos;
  372 │ 
  373 │         // Tentar complementar dados da tabela principal
  374 │         try {
  375 │           const { data: grupoCompleto, error: grupoError } = await supabase
  376 │             .from('grupos_estudo')
  377 │             .select('*')
  378 │             .eq('id', dataCodigos.grupo_id)
  379 │             .single();
  380 │ 
  381 │           if (!grupoError && grupoCompleto) {
  382 │             console.log('Dados complementares encontrados na tabela de grupos:', grupoCompleto);
  383 │ 
  384 │             // Mesclamos os dados para ter informações completas
  385 │             grupoEncontrado = {
  386 │               ...grupoCompleto,
  387 │               ...dataCodigos,
  388 │               codigo: codigoNormalizado
  389 │             };
  390 │           }
  391 │         } catch (complementError) {
  392 │           console.error('Erro ao buscar dados complementares:', complementError);
  393 │         }
  394 │       } else {
  395 │         console.log('Nenhum grupo encontrado na tabela de códigos');
  396 │       }
  397 │     } catch (error) {
  398 │       console.error('Exceção ao buscar na tabela de códigos:', error);
  399 │     }
  400 │ 
  401 │     // ETAPA 2: Se não encontrou na tabela de códigos, buscar diretamente na tabela de grupos
  402 │     if (!grupoEncontrado) {
  403 │       try {
  404 │         const { data: dataGrupos, error: gruposError } = await supabase
  405 │           .from('grupos_estudo')
  406 │           .select('*')
  407 │           .eq('codigo', codigoNormalizado)
  408 │           .maybeSingle();
  409 │ 
  410 │         if (gruposError) {
  411 │           console.error('Erro ao buscar na tabela de grupos:', gruposError);
  412 │         } else if (dataGrupos) {
  413 │           console.log('Grupo encontrado na tabela de grupos:', dataGrupos);
  414 │           grupoEncontrado = {
  415 │             ...dataGrupos,
  416 │             codigo: codigoNormalizado
  417 │           };
  418 │ 
  419 │           // Sincronizar com a tabela de códigos para manter consistência
  420 │           try {
  421 │             const { error: syncError } = await supabase
  422 │               .from('codigos_grupos_estudo')
  423 │               .upsert({
  424 │                 codigo: codigoNormalizado,
  425 │                 grupo_id: dataGrupos.id,
  426 │                 nome: dataGrupos.nome || 'Grupo sem nome',
  427 │                 descricao: dataGrupos.descricao || '',
  428 │                 user_id: dataGrupos.user_id,
  429 │                 privado: dataGrupos.privado || false,
  430 │                 membros: dataGrupos.membros || 1,
  431 │                 visibilidade: dataGrupos.visibilidade || 'todos',
  432 │                 disciplina: dataGrupos.disciplina || '',
  433 │                 cor: dataGrupos.cor || '#FF6B00',
  434 │                 membros_ids: dataGrupos.membros_ids || [],
  435 │                 data_criacao: dataGrupos.data_criacao || new Date().toISOString(),
  436 │                 ultima_atualizacao: new Date().toISOString()
  437 │               }, { onConflict: 'codigo' });
  438 │ 
  439 │             if (syncError) {
  440 │               console.error('Erro ao sincronizar com tabela de códigos:', syncError);
  441 │             } else {
  442 │               console.log('Grupo sincronizado com a tabela de códigos');
  443 │             }
  444 │           } catch (syncError) {
  445 │             console.error('Exceção ao sincronizar com tabela de códigos:', syncError);
  446 │           }
  447 │         } else {
  448 │           console.log('Nenhum grupo encontrado na tabela de grupos');
  449 │         }
  450 │       } catch (error) {
  451 │         console.error('Exceção ao buscar na tabela de grupos:', error);
  452 │       }
  453 │     }
  454 │ 
  455 │     // ETAPA 3: Se ainda não encontrou, buscar no localStorage
  456 │     if (!grupoEncontrado) {
  457 │       try {
  458 │         const GRUPOS_STORAGE_KEY = 'epictus_grupos_estudo';
  459 │         const grupos = JSON.parse(localStorage.getItem(GRUPOS_STORAGE_KEY) || '[]');
  460 │ 
  461 │         const grupoLocal = grupos.find((g: any) => 
  462 │           g.codigo && g.codigo.toUpperCase() === codigoNormalizado);
  463 │ 
  464 │         if (grupoLocal) {
  465 │           console.log('Grupo encontrado no localStorage:', grupoLocal);
  466 │           grupoEncontrado = grupoLocal;
  467 │ 
  468 │           // Sincronizar com a tabela de códigos para futuros acessos
  469 │           try {
  470 │             const { error: syncError } = await supabase
  471 │               .from('codigos_grupos_estudo')
  472 │               .upsert({
  473 │                 codigo: codigoNormalizado,
  474 │                 grupo_id: grupoLocal.id,
  475 │                 nome: grupoLocal.nome || 'Grupo sem nome',
  476 │                 descricao: grupoLocal.descricao || '',
  477 │                 user_id: grupoLocal.user_id || grupoLocal.criador,
  478 │                 privado: grupoLocal.privado || false,
  479 │                 membros: grupoLocal.membros || 1,
  480 │                 visibilidade: grupoLocal.visibilidade || 'todos',
  481 │                 disciplina: grupoLocal.disciplina || '',
  482 │                 cor: grupoLocal.cor || '#FF6B00',
  483 │                 membros_ids: grupoLocal.membros_ids || [],
  484 │                 data_criacao: grupoLocal.dataCriacao || new Date().toISOString(),
  485 │                 ultima_atualizacao: new Date().toISOString()
  486 │               }, { onConflict: 'codigo' });
  487 │ 
  488 │             if (syncError) {
  489 │               console.error('Erro ao sincronizar grupo do localStorage:', syncError);
  490 │             } else {
  491 │               console.log('Grupo do localStorage sincronizado com a tabela de códigos');
  492 │             }
  493 │           } catch (syncError) {
  494 │             console.error('Exceção ao sincronizar grupo do localStorage:', syncError);
  495 │           }
  496 │         } else {
  497 │           console.log('Nenhum grupo encontrado no localStorage');
  498 │         }
  499 │       } catch (storageError) {
  500 │         console.error('Erro ao buscar no localStorage:', storageError);
  501 │       }
  502 │     }
  503 │ 
  504 │     // Se não encontramos o grupo em nenhum lugar
  505 │     if (!grupoEncontrado) {
  506 │       console.log(`Nenhum grupo encontrado para o código ${codigoNormalizado} em nenhuma fonte`);
  507 │       return null;
  508 │     }
  509 │ 
  510 │     return grupoEncontrado;
  511 │   } catch (error) {
  512 │     console.error('Erro ao buscar grupo por código:', error);
  513 │     return null;
  514 │   }
  515 │ };
  516 │ 
  517 │ // Verifica se um código de grupo existe no banco de dados e o sincroniza se necessário
  518 │ export const verificarSeCodigoExiste = async (codigo: string): Promise<boolean> => {
  519 │   try {
  520 │     if (!codigo || codigo.trim() === '') {
  521 │       console.log('Código vazio, retornando false');
  522 │       return false;
  523 │     }
  524 │ 
  525 │     const codigoNormalizado = codigo.trim().toUpperCase();
  526 │     console.log(`Verificando se o código ${codigoNormalizado} existe...`);
  527 │ 
  528 │     // Primeiro, verificar na tabela de códigos (a principal fonte de verdade)
  529 │     try {
  530 │       const { data: dataCodigos, error: errorCodigos } = await supabase
  531 │         .from('codigos_grupos_estudo')
  532 │         .select('codigo')
  533 │         .eq('codigo', codigoNormalizado)
  534 │         .maybeSingle();
  535 │ 
  536 │       if (!errorCodigos && dataCodigos) {
  537 │         console.log(`Código ${codigoNormalizado} encontrado na tabela de códigos!`);
  538 │         return true;
  539 │       }
  540 │ 
  541 │       if (errorCodigos && errorCodigos.code !== 'PGRST116') {
  542 │         console.error("Erro ao verificar código na tabela de códigos:", errorCodigos);
  543 │       }
  544 │     } catch (e) {
  545 │       console.error("Exceção ao verificar código na tabela de códigos:", e);
  546 │     }
  547 │ 
  548 │     // Se não encontrou na tabela de códigos, verificar na tabela de grupos
  549 │     try {
  550 │       const { data: dataGrupos, error: errorGrupos } = await supabase
  551 │         .from('grupos_estudo')
  552 │         .select('*')  // Alterado para selecionar todos os campos para sincronização
  553 │         .eq('codigo', codigoNormalizado)
  554 │         .maybeSingle();
  555 │ 
  556 │       if (!errorGrupos && dataGrupos) {
  557 │         console.log(`Código ${codigoNormalizado} encontrado na tabela de grupos!`);
  558 │ 
  559 │         // Sincronizar automaticamente com a tabela de códigos
  560 │         try {
  561 │           const { error: syncError } = await supabase
  562 │             .from('codigos_grupos_estudo')
  563 │             .upsert({
  564 │               codigo: codigoNormalizado,
  565 │               grupo_id: dataGrupos.id,
  566 │               nome: dataGrupos.nome || 'Grupo sem nome',
  567 │               descricao: dataGrupos.descricao || '',
  568 │               user_id: dataGrupos.user_id,
  569 │               privado: dataGrupos.privado || false,
  570 │               membros: dataGrupos.membros || 1,
  571 │               visibilidade: dataGrupos.visibilidade || 'todos',
  572 │               disciplina: dataGrupos.disciplina || '',
  573 │               cor: dataGrupos.cor || '#FF6B00',
  574 │               membros_ids: dataGrupos.membros_ids || [],
  575 │               data_criacao: dataGrupos.data_criacao || new Date().toISOString(),
  576 │               ultima_atualizacao: new Date().toISOString()
  577 │             }, { onConflict: 'codigo' });
  578 │ 
  579 │           if (syncError) {
  580 │             console.error('Erro ao sincronizar código com tabela de códigos:', syncError);
  581 │           } else {
  582 │             console.log('Código sincronizado com a tabela central');
  583 │           }
  584 │         } catch (syncError) {
  585 │           console.error('Erro ao sincronizar código:', syncError);
  586 │         }
  587 │ 
  588 │         return true;
  589 │       }
  590 │ 
  591 │       if (errorGrupos && errorGrupos.code !== 'PGRST116') {
  592 │         console.error("Erro ao verificar código na tabela de grupos:", errorGrupos);
  593 │       }
  594 │     } catch (e) {
  595 │       console.error("Exceção ao verificar código na tabela de grupos:", e);
  596 │     }
  597 │ 
  598 │     // Verificar nos armazenamentos locais como último recurso e sincronizar se encontrado
  599 │     try {
  600 │       const grupos = JSON.parse(localStorage.getItem('epictus_grupos_estudo') || '[]');
  601 │       const grupo = grupos.find((g: any) => g.codigo && g.codigo.toUpperCase() === codigoNormalizado);
  602 │ 
  603 │       if (grupo) {
  604 │         console.log(`Código ${codigoNormalizado} encontrado no storage de grupos`);
  605 │ 
  606 │         // Sincronizar com a tabela de códigos
  607 │         try {
  608 │           const { error: syncError } = await supabase
  609 │             .from('codigos_grupos_estudo')
  610 │             .upsert({
  611 │               codigo: codigoNormalizado,
  612 │               grupo_id: grupo.id,
  613 │               nome: grupo.nome || 'Grupo sem nome',
  614 │               descricao: grupo.descricao || '',
  615 │               user_id: grupo.user_id || grupo.criador,
  616 │               privado: grupo.privado || false,
  617 │               membros: grupo.membros || 1,
  618 │               visibilidade: grupo.visibilidade || 'todos',
  619 │               disciplina: grupo.disciplina || '',
  620 │               cor: grupo.cor || '#FF6B00',
  621 │               membros_ids: grupo.membros_ids || [],
  622 │               data_criacao: grupo.dataCriacao || grupo.data_criacao || new Date().toISOString(),
  623 │               ultima_atualizacao: new Date().toISOString()
  624 │             }, { onConflict: 'codigo' });
  625 │ 
  626 │           if (syncError) {
  627 │             console.error('Erro ao sincronizar grupo do localStorage:', syncError);
  628 │           } else {
  629 │             console.log('Grupo do localStorage sincronizado com a tabela de códigos');
  630 │           }
  631 │         } catch (syncError) {
  632 │           console.error('Exceção ao sincronizar grupo do localStorage:', syncError);
  633 │         }
  634 │ 
  635 │         return true;
  636 │       }
  637 │ 
  638 │       // Verificar separadamente no storage de códigos
  639 │       const codigosGrupos = JSON.parse(localStorage.getItem('epictus_codigos_grupo') || '{}');
  640 │       const grupoIdComCodigo = Object.entries(codigosGrupos).find(
  641 │         ([_, codigo]) => typeof codigo === 'string' && (codigo as string).toUpperCase() === codigoNormalizado
  642 │       );
  643 │ 
  644 │       if (grupoIdComCodigo) {
  645 │         const [grupoId, _] = grupoIdComCodigo;
  646 │         console.log(`Código ${codigoNormalizado} encontrado no storage de códigos para o grupo ${grupoId}`);
  647 │ 
  648 │         // Tentar buscar informações do grupo para sincronização
  649 │         const grupoLocal = grupos.find((g: any) => g.id === grupoId);
  650 │         if (grupoLocal) {
  651 │           try {
  652 │             const { error: syncError } = await supabase
  653 │               .from('codigos_grupos_estudo')
  654 │               .upsert({
  655 │                 codigo: codigoNormalizado,
  656 │                 grupo_id: grupoId,
  657 │                 nome: grupoLocal.nome || 'Grupo sem nome',
  658 │                 descricao: grupoLocal.descricao || '',
  659 │                 user_id: grupoLocal.user_id || grupoLocal.criador,
  660 │                 privado: grupoLocal.privado || false,
  661 │                 membros: grupoLocal.membros || 1,
  662 │                 visibilidade: grupoLocal.visibilidade || 'todos',
  663 │                 disciplina: grupoLocal.disciplina || '',
  664 │                 cor: grupoLocal.cor || '#FF6B00',
  665 │                 membros_ids: grupoLocal.membros_ids || [],
  666 │                 data_criacao: grupoLocal.dataCriacao || grupoLocal.data_criacao || new Date().toISOString(),
  667 │                 ultima_atualizacao: new Date().toISOString()
  668 │               }, { onConflict: 'codigo' });
  669 │ 
  670 │             if (syncError) {
  671 │               console.error('Erro ao sincronizar código do localStorage:', syncError);
  672 │             } else {
  673 │               console.log('Código do localStorage sincronizado com a tabela central');
  674 │             }
  675 │           } catch (syncError) {
  676 │             console.error('Exceção ao sincronizar código do localStorage:', syncError);
  677 │           }
  678 │         }
  679 │ 
  680 │         return true;
  681 │       }
  682 │     } catch (e) {
  683 │       console.error("Erro ao verificar códigos no localStorage:", e);
  684 │     }
  685 │ 
  686 │     console.log(`Código ${codigoNormalizado} não encontrado em nenhuma fonte`);
  687 │     return false;
  688 │   } catch (error) {
  689 │     console.error("Erro ao verificar código:", error);
  690 │     return false;
  691 │   }
  692 │ };
  693 │ 
  694 │ /**
  695 │  * Verifica se um código pertence a um grupo criado pelo usuário ou do qual ele já é membro
  696 │  * @param codigo - O código do grupo a verificar
  697 │  * @param userId - ID do usuário atual
  698 │  * @returns Objeto contendo o resultado da verificação e detalhes do grupo, se aplicável
  699 │  */
  700 │ export const verificarRelacaoUsuarioComGrupo = async (
  701 │   codigo: string, 
  702 │   userId: string
  703 │ ): Promise<{ 
  704 │   pertenceAoUsuario: boolean, 
  705 │   jaEMembro: boolean, 
  706 │   nomeGrupo: string,
  707 │   grupoId: string | null
  708 │ }> => {
  709 │   try {
  710 │     if (!codigo || !userId) {
  711 │       console.log('Verificação abortada: código ou userId não fornecidos');
  712 │       return { pertenceAoUsuario: false, jaEMembro: false, nomeGrupo: '', grupoId: null };
  713 │     }
  714 │ 
  715 │     const codigoNormalizado = codigo.trim().toUpperCase();
  716 │     console.log(`Verificando relação para o código: ${codigoNormalizado} e usuário: ${userId}`);
  717 │ 
  718 │     // Primeiro verificar na tabela de códigos (principal fonte)
  719 │     let grupoInfo = null;
  720 │ 
  721 │     // Buscar na tabela de códigos com manejo de erro melhorado
  722 │     try {
  723 │       const { data: dataCodigos, error: errorCodigos } = await supabase
  724 │         .from('codigos_grupos_estudo')
  725 │         .select('*')
  726 │         .eq('codigo', codigoNormalizado)
  727 │         .maybeSingle();
  728 │ 
  729 │       if (errorCodigos) {
  730 │         console.error('Erro ao buscar na tabela de códigos:', errorCodigos);
  731 │       } else if (dataCodigos) {
  732 │         console.log('Grupo encontrado na tabela de códigos:', dataCodigos);
  733 │         grupoInfo = dataCodigos;
  734 │       } else {
  735 │         console.log('Nenhum grupo encontrado na tabela de códigos');
  736 │       }
  737 │     } catch (e) {
  738 │       console.error('Exceção ao buscar na tabela de códigos:', e);
  739 │     }
  740 │ 
  741 │     // Se não encontrou na tabela de códigos, buscar na tabela de grupos
  742 │     if (!grupoInfo) {
  743 │       try {
  744 │         const { data: dataGrupos, error: errorGrupos } = await supabase
  745 │           .from('grupos_estudo')
  746 │           .select('*')
  747 │           .eq('codigo', codigoNormalizado)
  748 │           .maybeSingle();
  749 │ 
  750 │         if (errorGrupos) {
  751 │           console.error('Erro ao buscar na tabela de grupos:', errorGrupos);
  752 │         } else if (dataGrupos) {
  753 │           console.log('Grupo encontrado na tabela de grupos:', dataGrupos);
  754 │           grupoInfo = dataGrupos;
  755 │ 
  756 │           // Se encontrou na tabela de grupos, tentar sincronizar com a tabela de códigos
  757 │           try {
  758 │             const { error: syncError } = await supabase
  759 │               .from('codigos_grupos_estudo')
  760 │               .upsert({
  761 │                 codigo: codigoNormalizado,
  762 │                 grupo_id: dataGrupos.id,
  763 │                 nome: dataGrupos.nome || 'Grupo sem nome',
  764 │                 descricao: dataGrupos.descricao || '',
  765 │                 user_id: dataGrupos.user_id,
  766 │                 privado: dataGrupos.privado || false,
  767 │                 membros: dataGrupos.membros || 1,
  768 │                 visibilidade: dataGrupos.visibilidade || 'todos',
  769 │                 disciplina: dataGrupos.disciplina || '',
  770 │                 cor: dataGrupos.cor || '#FF6B00',
  771 │                 membros_ids: dataGrupos.membros_ids || [],
  772 │                 data_criacao: dataGrupos.data_criacao || new Date().toISOString(),
  773 │                 ultima_atualizacao: new Date().toISOString()
  774 │               }, { onConflict: 'codigo' });
  775 │ 
  776 │             if (syncError) {
  777 │               console.error('Erro ao sincronizar com tabela de códigos:', syncError);
  778 │             } else {
  779 │               console.log('Grupo sincronizado com a tabela de códigos');
  780 │             }
  781 │           } catch (syncError) {
  782 │             console.error('Exceção ao sincronizar com tabela de códigos:', syncError);
  783 │           }
  784 │         } else {
  785 │           console.log('Nenhum grupo encontrado na tabela de grupos');
  786 │         }
  787 │       } catch (e) {
  788 │         console.error('Exceção ao buscar na tabela de grupos:', e);
  789 │       }
  790 │     }
  791 │ 
  792 │     // Verificar no localStorage como último recurso
  793 │     if (!grupoInfo) {
  794 │       try {
  795 │         const gruposStorage = localStorage.getItem('epictus_grupos_estudo');
  796 │         if (gruposStorage) {
  797 │           const grupos = JSON.parse(gruposStorage);
  798 │           const grupoLocalStorage = grupos.find((g: any) => g.codigo === codigoNormalizado);
  799 │ 
  800 │           if (grupoLocalStorage) {
  801 │             console.log('Grupo encontrado no localStorage:', grupoLocalStorage);
  802 │             grupoInfo = grupoLocalStorage;
  803 │ 
  804 │             // Tentar sincronizar este grupo com a tabela de códigos
  805 │             try {
  806 │               const { error: syncError } = await supabase
  807 │                 .from('codigos_grupos_estudo')
  808 │                 .upsert({
  809 │                   codigo: codigoNormalizado,
  810 │                   grupo_id: grupoLocalStorage.id,
  811 │                   nome: grupoLocalStorage.nome || 'Grupo sem nome',
  812 │                   descricao: grupoLocalStorage.descricao || '',
  813 │                   user_id: grupoLocalStorage.user_id || userId,
  814 │                   privado: grupoLocalStorage.privado || false,
  815 │                   membros: grupoLocalStorage.membros || 1,
  816 │                   visibilidade: grupoLocalStorage.visibilidade || 'todos',
  817 │                   disciplina: grupoLocalStorage.disciplina || '',
  818 │                   cor: grupoLocalStorage.cor || '#FF6B00',
  819 │                   membros_ids: grupoLocalStorage.membros_ids || [],
  820 │                   data_criacao: grupoLocalStorage.dataCriacao || new Date().toISOString(),
  821 │                   ultima_atualizacao: new Date().toISOString()
  822 │                 }, { onConflict: 'codigo' });
  823 │ 
  824 │               if (syncError) {
  825 │                 console.error('Erro ao sincronizar grupo do localStorage:', syncError);
  826 │               } else {
  827 │                 console.log('Grupo do localStorage sincronizado com a tabela de códigos');
  828 │               }
  829 │             } catch (syncError) {
  830 │               console.error('Exceção ao sincronizar grupo do localStorage:', syncError);
  831 │             }
  832 │           } else {
  833 │             console.log('Nenhum grupo com este código encontrado no localStorage');
  834 │           }
  835 │         }
  836 │       } catch (e) {
  837 │         console.error('Exceção ao verificar grupos no localStorage:', e);
  838 │       }
  839 │     }
  840 │ 
  841 │     // Se não encontrou o grupo em nenhuma das fontes
  842 │     if (!grupoInfo) {
  843 │       console.log('Não foi possível encontrar o grupo em nenhuma fonte');
  844 │       return { pertenceAoUsuario: false, jaEMembro: false, nomeGrupo: '', grupoId: null };
  845 │     }
  846 │ 
  847 │     // Verificar se o usuário é o criador do grupo
  848 │     const pertenceAoUsuario = grupoInfo.user_id === userId;
  849 │     console.log(`É o criador? ${pertenceAoUsuario} (user_id: ${grupoInfo.user_id}, userId: ${userId})`);
  850 │ 
  851 │     // Verificar se o usuário já é membro
  852 │     let membrosIds = [];
  853 │     try {
  854 │       membrosIds = Array.isArray(grupoInfo.membros_ids) 
  855 │         ? grupoInfo.membros_ids 
  856 │         : (typeof grupoInfo.membros_ids === 'string' 
  857 │             ? JSON.parse(grupoInfo.membros_ids) 
  858 │             : []);
  859 │     } catch (e) {
  860 │       console.error('Erro ao processar membros_ids:', e);
  861 │       membrosIds = [];
  862 │     }
  863 │ 
  864 │     const jaEMembro = membrosIds.includes(userId);
  865 │     console.log(`É membro? ${jaEMembro} (membros: ${JSON.stringify(membrosIds)})`);
  866 │ 
  867 │     // Verificar também no localStorage
  868 │     let membroLocalStorage = false;
  869 │     try {
  870 │       const gruposStorage = localStorage.getItem('epictus_grupos_estudo');
  871 │       if (gruposStorage) {
  872 │         const grupos = JSON.parse(gruposStorage);
  873 │         const grupoLocalStorage = grupos.find((g: any) => 
  874 │           g.id === (grupoInfo.id || grupoInfo.grupo_id)
  875 │         );
  876 │         membroLocalStorage = !!grupoLocalStorage;
  877 │         console.log(`Está no localStorage? ${membroLocalStorage}`);
  878 │       }
  879 │     } catch (e) {
  880 │       console.error("Erro ao verificar grupos no localStorage:", e);
  881 │     }
  882 │ 
  883 │     return { 
  884 │       pertenceAoUsuario, 
  885 │       jaEMembro: jaEMembro || membroLocalStorage || pertenceAoUsuario, 
  886 │       nomeGrupo: grupoInfo.nome || 'Grupo sem nome',
  887 │       grupoId: grupoInfo.id || grupoInfo.grupo_id
  888 │     };
  889 │   } catch (error) {
  890 │     console.error("Erro ao verificar relação do usuário com o grupo:", error);
  891 │     return { pertenceAoUsuario: false, jaEMembro: false, nomeGrupo: '', grupoId: null };
  892 │   }
  893 │ };
  894 │ 
  895 │ // Gera um código único para um grupo
  896 │ export const gerarCodigoGrupo = (): string => {
  897 │   const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  898 │   let codigo = '';
  899 │ 
  900 │   // Primeiro segmento (4 caracteres)
  901 │   for (let i = 0; i < 4; i++) {
  902 │     codigo += caracteres.charAt(Math.floor(Math.random() * caracteres.length));
  903 │   }
  904 │ 
  905 │   codigo += '-';
  906 │ 
  907 │   // Segundo segmento (4 caracteres)
  908 │   for (let i = 0; i < 4; i++) {
  909 │     codigo += caracteres.charAt(Math.floor(Math.random() * caracteres.length));
  910 │   }
  911 │ 
  912 │   codigo += '-';
  913 │ 
  914 │   // Terceiro segmento (4 caracteres)
  915 │   for (let i = 0; i < 4; i++) {
  916 │     codigo += caracteres.charAt(Math.floor(Math.random() * caracteres.length));
  917 │   }
  918 │ 
  919 │   return codigo;
  920 │ };
  921 │ 
  922 │ // Registra um novo código de grupo no banco de dados
  923 │ export const registrarCodigoGrupo = async (grupoId: string): Promise<string | null> => {
  924 │   try {
  925 │     const codigo = gerarCodigoGrupo();
  926 │ 
  927 │     // Aqui seria feito o registro real no banco de dados
  928 │     // Exemplo de implementação real:
  929 │     /*
  930 │     const { data, error } = await supabase
  931 │       .from('codigos_grupos')
  932 │       .insert({
  933 │         codigo,
  934 │         grupo_id: grupoId,
  935 │         ativo: true,
  936 │         data_criacao: new Date(),
  937 │         data_expiracao: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 dias
  938 │       });
  939 │ 
  940 │     if (error) {
  941 │       console.error("Erro ao registrar código:", error);
  942 │       return null;
  943 │     }
  944 │     */
  945 │ 
  946 │     return codigo;
  947 │   } catch (error) {
  948 │     console.error("Erro ao registrar código:", error);
  949 │     return null;
  950 │   }
  951 │ };
  952 │ 
  953 │ export const criarGrupo = async (dados: Omit<GrupoEstudo, 'id'>): Promise<GrupoEstudo | null> => {
  954 │   try {
  955 │     // Verificar se estamos online e tem conexão com Supabase
  956 │     let grupoSalvoRemotamente = false;
  957 │     let resultado: GrupoEstudo | null = null;
  958 │ 
  959 │     try {
  960 │       // Gerar um código único para o grupo antes da inserção
  961 │       const codigo = await gerarCodigoUnico();
  962 │ 
  963 │       // Adicionar o código ao objeto de dados
  964 │       const dadosComCodigo = {
  965 │         ...dados,
  966 │         codigo: codigo.toUpperCase()
  967 │       };
  968 │ 
  969 │       // Tentar inserir no Supabase
  970 │       const { data, error } = await supabase
  971 │         .from('grupos_estudo')
  972 │         .insert(dadosComCodigo)
  973 │         .select('*')
  974 │         .single();
  975 │ 
  976 │       if (!error && data) {
  977 │         console.log('Grupo criado com sucesso no Supabase:', data);
  978 │         grupoSalvoRemotamente = true;
  979 │         resultado = data;
  980 │ 
  981 │         // IMPORTANTE: Forçar inserção na tabela de códigos independente do trigger
  982 │         try {
  983 │           // Inserir diretamente na tabela de códigos para garantir que os dados estejam lá
  984 │           const { error: codigoError } = await supabase
  985 │             .from('codigos_grupos_estudo')
  986 │             .insert({
  987 │               codigo: data.codigo,
  988 │               grupo_id: data.id,
  989 │               nome: data.nome,
  990 │               descricao: data.descricao || '',
  991 │               user_id: data.user_id,
  992 │               privado: data.privado || false,
  993 │               membros: data.membros || 1,
  994 │               visibilidade: data.visibilidade || 'todos',
  995 │               disciplina: data.disciplina || '',
  996 │               cor: data.cor || '#FF6B00',
  997 │               membros_ids: data.membros_ids || [],
  998 │               data_criacao: new Date().toISOString()
  999 │             });
 1000 │ 
 1001 │           if (codigoError) {
 1002 │             console.error('Erro ao inserir na tabela de códigos:', codigoError);
 1003 │ 
 1004 │             // Tentar upsert como fallback
 1005 │             const { error: upsertError } = await supabase
 1006 │               .from('codigos_grupos_estudo')
 1007 │               .upsert({
 1008 │                 codigo: data.codigo,
 1009 │                 grupo_id: data.id,
 1010 │                 nome: data.nome,
 1011 │                 descricao: data.descricao || '',
 1012 │                 user_id: data.user_id,
 1013 │                 privado: data.privado || false,
 1014 │                 membros: data.membros || 1,
 1015 │                 visibilidade: data.visibilidade || 'todos',
 1016 │                 disciplina: data.disciplina || '',
 1017 │                 cor: data.cor || '#FF6B00',
 1018 │                 membros_ids: data.membros_ids || [],
 1019 │                 data_criacao: new Date().toISOString(),
 1020 │                 ultima_atualizacao: new Date().toISOString()
 1021 │               }, { onConflict: 'codigo' });
 1022 │ 
 1023 │             if (upsertError) {
 1024 │               console.error('Erro ao fazer upsert na tabela de códigos:', upsertError);
 1025 │             } else {
 1026 │               console.log(`Código ${data.codigo} salvo com sucesso via upsert na tabela central`);
 1027 │             }
 1028 │           } else {
 1029 │             console.log(`Código ${data.codigo} inserido com sucesso na tabela central de códigos`);
 1030 │           }
 1031 │         } catch (codigoError) {
 1032 │           console.error('Erro ao processar salvamento do código:', codigoError);
 1033 │         }
 1034 │ 
 1035 │         // Salvar também no storage local para acesso rápido
 1036 │         salvarGrupoLocal(data);
 1037 │         return data;
 1038 │       }
 1039 │     } catch (supabaseError) {
 1040 │       console.error('Erro ao criar grupo no Supabase:', supabaseError);
 1041 │     }
 1042 │ 
 1043 │     // Se chegou aqui, não conseguiu salvar no Supabase
 1044 │     if (!grupoSalvoRemotamente) {
 1045 │       console.log('Salvando grupo apenas localmente devido a falha no Supabase');
 1046 │ 
 1047 │       // Gerar ID localmente
 1048 │       const id = `local_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
 1049 │ 
 1050 │       // Gerar um código único para o grupo
 1051 │       const codigo = await gerarCodigoUnico();
 1052 │ 
 1053 │       // Criar grupo para armazenamento local
 1054 │       const grupoLocal: GrupoEstudo = {
 1055 │         ...dados,
 1056 │         id,
 1057 │         codigo: codigo.toUpperCase()
 1058 │       };
 1059 │ 
 1060 │       // Salvar localmente (apenas uma vez)
 1061 │       salvarGrupoLocal(grupoLocal);
 1062 │       resultado = grupoLocal;
 1063 │ 
 1064 │       // IMPORTANTE: Mesmo para grupos locais, garantir inserção na tabela central de códigos
 1065 │       try {
 1066 │         // Tentar inserção direta primeiro
 1067 │         const { error: insertError } = await supabase
 1068 │           .from('codigos_grupos_estudo')
 1069 │           .insert({
 1070 │             codigo: codigo.toUpperCase(),
 1071 │             grupo_id: id,
 1072 │             nome: dados.nome,
 1073 │             descricao: dados.descricao || '',
 1074 │             user_id: dados.user_id,
 1075 │             privado: dados.privado || false,
 1076 │             membros: dados.membros || 1,
 1077 │             visibilidade: dados.visibilidade || 'todos',
 1078 │             disciplina: dados.disciplina || '',
 1079 │             cor: dados.cor || '#FF6B00',
 1080 │             membros_ids: dados.membros_ids || [],
 1081 │             data_criacao: new Date().toISOString()
 1082 │           });
 1083 │ 
 1084 │         if (insertError) {
 1085 │           console.error('Erro ao inserir código na tabela central:', insertError);
 1086 │ 
 1087 │           // Tentar upsert como fallback
 1088 │           const { error: upsertError } = await supabase
 1089 │             .from('codigos_grupos_estudo')
 1090 │             .upsert({
 1091 │               codigo: codigo.toUpperCase(),
 1092 │               grupo_id: id,
 1093 │               nome: dados.nome,
 1094 │               descricao: dados.descricao || '',
 1095 │               user_id: dados.user_id,
 1096 │               privado: dados.privado || false,
 1097 │               membros: dados.membros || 1,
 1098 │               visibilidade: dados.visibilidade || 'todos',
 1099 │               disciplina: dados.disciplina || '',
 1100 │               cor: dados.cor || '#FF6B00',
 1101 │               membros_ids: dados.membros_ids || [],
 1102 │               data_criacao: new Date().toISOString(),
 1103 │               ultima_atualizacao: new Date().toISOString()
 1104 │             }, { onConflict: 'codigo' });
 1105 │ 
 1106 │           if (upsertError) {
 1107 │             console.error('Erro ao fazer upsert na tabela central:', upsertError);
 1108 │           } else {
 1109 │             console.log(`Código ${codigo} de grupo local salvo com sucesso na tabela central via upsert`);
 1110 │           }
 1111 │         } else {
 1112 │           console.log(`Código ${codigo} de grupo local inserido com sucesso na tabela central`);
 1113 │         }
 1114 │       } catch (codigoError) {
 1115 │         console.error('Erro ao processar salvamento do código local:', codigoError);
 1116 │       }
 1117 │ 
 1118 │       // Mostrar notificação sobre o armazenamento local
 1119 │       const element = document.createElement('div');
 1120 │       element.style.position = 'fixed';
 1121 │       element.style.top = '20px';
 1122 │       element.style.left = '50%';
 1123 │       element.style.transform = 'translateX(-50%)';
 1124 │       element.style.padding = '10px 20px';
 1125 │       element.style.background = '#FFA500';
 1126 │       element.style.color = 'white';
 1127 │       element.style.borderRadius = '4px';
 1128 │       element.style.zIndex = '9999';
 1129 │       element.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
 1130 │       element.textContent = 'Grupo salvo localmente. Será sincronizado quando o banco de dados estiver disponível.';
 1131 │       document.body.appendChild(element);
 1132 │ 
 1133 │       // Remover após 5 segundos
 1134 │       setTimeout(() => {
 1135 │         element.style.opacity = '0';
 1136 │         element.style.transition = 'opacity 0.5s';
 1137 │         setTimeout(() => {
 1138 │           document.body.removeChild(element);
 1139 │         }, 500);
 1140 │       }, 5000);
 1141 │     }
 1142 │ 
 1143 │     return resultado;
 1144 │   } catch (error) {
 1145 │     console.error('Erro crítico ao criar grupo:', error);
 1146 │     // Falha total, retornar nulo
 1147 │     return null;
 1148 │   }
 1149 │ };
 1150 │ 
 1151 │ const STORAGE_KEY = 'epictus_grupos_estudo';
 1152 │ 
 1153 │ // Função para salvar um grupo localmente
 1154 │ const salvarGrupoLocal = (grupo: GrupoEstudo): void => {
 1155 │   try {
 1156 │     // Obter grupos existentes
 1157 │     const gruposExistentes = obterGruposLocal();
 1158 │ 
 1159 │     // Verificar se o grupo já existe (para evitar duplicações)
 1160 │     const grupoIndex = gruposExistentes.findIndex(g => g.id === grupo.id);
 1161 │ 
 1162 │     if (grupoIndex >= 0) {
 1163 │       // Grupo já existe, atualizar
 1164 │       gruposExistentes[grupoIndex] = grupo;
 1165 │     } else {
 1166 │       // Grupo não existe, adicionar
 1167 │       gruposExistentes.push(grupo);
 1168 │     }
 1169 │ 
 1170 │     // Salvar no localStorage
 1171 │     localStorage.setItem(STORAGE_KEY, JSON.stringify(gruposExistentes));
 1172 │ 
 1173 │     // Backup na sessão (útil em navegações)
 1174 │     sessionStorage.setItem(`${STORAGE_KEY}_session`, JSON.stringify(gruposExistentes));
 1175 │ 
 1176 │     // Backup emergencial (para casos extremos)
 1177 │     const chaveEmergencia = `${STORAGE_KEY}_emergency_${Date.now()}`;
 1178 │     localStorage.setItem(chaveEmergencia, JSON.stringify([grupo]));
 1179 │ 
 1180 │     // Limitar backups emergenciais (manter apenas os 5 mais recentes)
 1181 │     const todasChaves = Object.keys(localStorage);
 1182 │     const chavesEmergencia = todasChaves
 1183 │       .filter(chave => chave.startsWith(`${STORAGE_KEY}_emergency_`))
 1184 │       .sort()
 1185 │       .slice(0, -5);
 1186 │ 
 1187 │     chavesEmergencia.forEach(chave => localStorage.removeItem(chave));
 1188 │ 
 1189 │     console.log('Grupo salvo localmente:', grupo);
 1190 │   } catch (error) {
 1191 │     console.error('Erro ao salvar grupo localmente:', error);
 1192 │   }
 1193 │ };
 1194 │ 
 1195 │ // Função para obter todos os grupos locais
 1196 │ const obterGruposLocal = (): GrupoEstudo[] => {
 1197 │   try {
 1198 │     const gruposStr = localStorage.getItem(STORAGE_KEY) || '[]';
 1199 │     return JSON.parse(gruposStr);
 1200 │   } catch (error) {
 1201 │     console.error('Erro ao obter grupos locais:', error);
 1202 │     return [];
 1203 │   }
 1204 │ };
 1205 │ 
 1206 │ export const obterTodosGrupos = async (userId: string): Promise<GrupoEstudo[]> => {
 1207 │   try {
 1208 │     // Obter a lista de grupos removidos
 1209 │     const gruposRemovidosKey = 'grupos_removidos';
 1210 │     const gruposRemovidosStr = localStorage.getItem(gruposRemovidosKey) || '[]';
 1211 │     const gruposRemovidos = JSON.parse(gruposRemovidosStr);
 1212 │ 
 1213 │     // Primeiro, garantir que temos os grupos locais (failsafe), excluindo os removidos
 1214 │     let gruposLocais = obterGruposLocal()
 1215 │       .filter(grupo => 
 1216 │         grupo.user_id === userId && 
 1217 │         !gruposRemovidos.includes(grupo.id)
 1218 │       );
 1219 │ 
 1220 │     // Criar um Map para rastreamento fácil de IDs
 1221 │     const gruposMap = new Map<string, GrupoEstudo>();
 1222 │ 
 1223 │     // Adicionar grupos locais ao Map
 1224 │     gruposLocais.forEach(grupo => {
 1225 │       gruposMap.set(grupo.id, grupo);
 1226 │     });
 1227 │ 
 1228 │     // Tentar obter backup da sessão
 1229 │     try {
 1230 │       const backupSessao = sessionStorage.getItem(`${STORAGE_KEY}_session`);
 1231 │       if (backupSessao) {
 1232 │         const gruposSessao = JSON.parse(backupSessao);
 1233 │         console.log('Backup de sessão encontrado com', gruposSessao.length, 'grupos');
 1234 │ 
 1235 │         // Adicionar apenas grupos que não estão no Map e não foram removidos
 1236 │         gruposSessao
 1237 │           .filter((g: GrupoEstudo) => 
 1238 │             g.user_id === userId && 
 1239 │             !gruposMap.has(g.id) && 
 1240 │             !gruposRemovidos.includes(g.id)
 1241 │           )
 1242 │           .forEach((g: GrupoEstudo) => {
 1243 │             gruposMap.set(g.id, g);
 1244 │           });
 1245 │ 
 1246 │         // Atualizar localStorage com os dados combinados
 1247 │         localStorage.setItem(STORAGE_KEY, JSON.stringify(Array.from(gruposMap.values())));
 1248 │       }
 1249 │     } catch (sessionError) {
 1250 │       console.error('Erro ao recuperar backup de sessão:', sessionError);
 1251 │     }
 1252 │ 
 1253 │     // Agora tentar obter do Supabase
 1254 │     try {
 1255 │       const { data: gruposSupabase, error } = await supabase
 1256 │         .from('grupos_estudo')
 1257 │         .select('*')
 1258 │         .eq('user_id', userId)
 1259 │         .order('data_criacao', { ascending: false });
 1260 │ 
 1261 │       if (error) {
 1262 │         console.error('Erro ao buscar grupos do banco de dados:', error);
 1263 │         // Se falhar o Supabase, retornar apenas grupos locais
 1264 │         return Array.from(gruposMap.values());
 1265 │       }
 1266 │ 
 1267 │       // Adicionar grupos do Supabase que não estão no Map e não foram removidos
 1268 │       gruposSupabase
 1269 │         .filter(grupo => !gruposRemovidos.includes(grupo.id))
 1270 │         .forEach(grupo => {
 1271 │           // Se já existe um grupo local com esse ID, o do Supabase tem prioridade
 1272 │           gruposMap.set(grupo.id, grupo);
 1273 │         });
 1274 │ 
 1275 │       // Salvar apenas os grupos locais (que começam com 'local_')
 1276 │       const apenasGruposLocais = Array.from(gruposMap.values())
 1277 │         .filter(g => g.id.startsWith('local_'))
 1278 │         .filter(g => !gruposRemovidos.includes(g.id));
 1279 │ 
 1280 │       // Se houver alguma diferença, atualizar armazenamento local
 1281 │       if (apenasGruposLocais.length > 0) {
 1282 │         localStorage.setItem(STORAGE_KEY, JSON.stringify(apenasGruposLocais));
 1283 │       }
 1284 │ 
 1285 │       return Array.from(gruposMap.values());
 1286 │     } catch (supabaseError) {
 1287 │       console.error('Erro ao acessar Supabase:', supabaseError);
 1288 │       return Array.from(gruposMap.values());
 1289 │     }
 1290 │   } catch (error) {
 1291 │     console.error('Erro ao obter todos os grupos:', error);
 1292 │ 
 1293 │     // Obter a lista de grupos removidos para filtrar recuperações de emergência
 1294 │     const gruposRemovidosKey = 'grupos_removidos';
 1295 │     const gruposRemovidosStr = localStorage.getItem(gruposRemovidosKey) || '[]';
 1296 │     const gruposRemovidos = JSON.parse(gruposRemovidosStr);
 1297 │ 
 1298 │     // Tentar recuperar grupos de qualquer fonte possível
 1299 │     try {
 1300 │       // Verificar backup no localStorage
 1301 │       const backup = localStorage.getItem(`${STORAGE_KEY}_backup`);
 1302 │       if (backup) {
 1303 │         const gruposBackup = JSON.parse(backup);
 1304 │         return gruposBackup
 1305 │           .filter((g: GrupoEstudo) => g.user_id === userId)
 1306 │           .filter((g: GrupoEstudo) => !gruposRemovidos.includes(g.id));
 1307 │       }
 1308 │ 
 1309 │       // Verificar backups de emergência
 1310 │       const todasChaves = Object.keys(localStorage);
 1311 │       const chavesEmergencia = todasChaves.filter(chave => chave.startsWith(`${STORAGE_KEY}_emergency_`));
 1312 │ 
 1313 │       if (chavesEmergencia.length > 0) {
 1314 │         // Usar Map para evitar duplicações
 1315 │         const gruposEmergenciaMap = new Map<string, GrupoEstudo>();
 1316 │ 
 1317 │         for (const chave of chavesEmergencia) {
 1318 │           try {
 1319 │             const gruposChave = JSON.parse(localStorage.getItem(chave) || '[]');
 1320 │             gruposChave.forEach((g: GrupoEstudo) => {
 1321 │               if (g.user_id === userId && !gruposRemovidos.includes(g.id)) {
 1322 │                 gruposEmergenciaMap.set(g.id, g);
 1323 │               }
 1324 │             });
 1325 │           } catch (e) {
 1326 │             console.error('Erro ao recuperar backup de emergência:', e);
 1327 │           }
 1328 │         }
 1329 │ 
 1330 │         return Array.from(gruposEmergenciaMap.values());
 1331 │       }
 1332 │     } catch (recoveryError) {
 1333 │       console.error('Erro na recuperação de emergência:', recoveryError);
 1334 │     }
 1335 │ 
 1336 │     // Último recurso: retornar array vazio
 1337 │     return [];
 1338 │   }
 1339 │ };
 1340 │ 
 1341 │ import { supabase } from "@/lib/supabase";
 1342 │ 
 1343 │ // Função para verificar se um código de grupo existe
 1344 │ export const verificarSeCodigoExiste = async (codigo: string) => {
 1345 │   if (!codigo) return { existe: false, mensagem: "Código não fornecido" };
 1346 │ 
 1347 │   try {
 1348 │     // Normalizar o código (remover espaços, etc.)
 1349 │     const codigoNormalizado = codigo.trim().toUpperCase();
 1350 │ 
 1351 │     // Primeiro, verificar se a tabela codigos_grupos_estudo existe
 1352 │     try {
 1353 │       const { count, error: countError } = await supabase
 1354 │         .from('codigos_grupos_estudo')
 1355 │         .select('*', { count: 'exact', head: true });
 1356 │ 
 1357 │       if (countError && countError.code === '42P01') {
 1358 │         // A tabela não existe, vamos criá-la
 1359 │         console.log("Tabela codigos_grupos_estudo não existe, criando...");
 1360 │         const criada = await criarTabelaCodigosGrupos();
 1361 │ 
 1362 │         if (!criada) {
 1363 │           return { 
 1364 │             existe: false, 
 1365 │             mensagem: "Erro ao criar tabela de códigos. Por favor, tente novamente mais tarde." 
 1366 │           };
 1367 │         }
 1368 │ 
 1369 │         // Tabela criada, mas como acabou de ser criada, não contém o código
 1370 │         return { 
 1371 │           existe: false, 
 1372 │           mensagem: "Sistema de códigos inicializado. O código informado não foi encontrado." 
 1373 │         };
 1374 │       }
 1375 │     } catch (tableCheckError) {
 1376 │       console.error("Erro ao verificar se tabela existe:", tableCheckError);
 1377 │     }
 1378 │ 
 1379 │     // Verificar se o código existe na tabela específica
 1380 │     const { data, error } = await supabase
 1381 │       .from('codigos_grupos_estudo')
 1382 │       .select('*')
 1383 │       .eq('codigo', codigoNormalizado)
 1384 │       .maybeSingle();
 1385 │ 
 1386 │     if (error) {
 1387 │       // Se o erro for de "não encontrado", o código não existe
 1388 │       if (error.code === 'PGRST116') {
 1389 │         return { existe: false, mensagem: "Código não encontrado" };
 1390 │       }
 1391 │ 
 1392 │       // Se for um erro de tabela inexistente, tentar criar
 1393 │       if (error.code === '42P01') {
 1394 │         console.error("Tabela codigos_grupos_estudo não existe:", error);
 1395 │         // Tentar criar a tabela
 1396 │         const criada = await criarTabelaCodigosGrupos();
 1397 │ 
 1398 │         if (!criada) {
 1399 │           return { 
 1400 │             existe: false, 
 1401 │             mensagem: "Erro ao criar tabela de códigos. Por favor, tente novamente após sincronizar os dados." 
 1402 │           };
 1403 │         }
 1404 │ 
 1405 │         return { 
 1406 │           existe: false, 
 1407 │           mensagem: "Sistema de códigos está sendo inicializado. Tente novamente em alguns momentos." 
 1408 │         };
 1409 │       }
 1410 │ 
 1411 │       // Para outros erros
 1412 │       console.error("Erro ao verificar código:", error);
 1413 │       return { 
 1414 │         existe: false, 
 1415 │         mensagem: `Erro ao verificar código: ${error.message}` 
 1416 │       };
 1417 │     }
 1418 │ 
 1419 │     if (!data) {
 1420 │       // Código não encontrado na tabela de códigos
 1421 │       // Vamos verificar se ele existe na tabela de grupos
 1422 │       try {
 1423 │         const { data: grupoData, error: grupoError } = await supabase
 1424 │           .from('grupos_estudo')
 1425 │           .select('*')
 1426 │           .eq('codigo', codigoNormalizado)
 1427 │           .maybeSingle();
 1428 │ 
 1429 │         if (grupoError) {
 1430 │           if (grupoError.code === '42P01') {
 1431 │             // Tabela grupos_estudo não existe
 1432 │             return { 
 1433 │               existe: false, 
 1434 │               mensagem: "Sistema de grupos não está inicializado. Por favor, sincronize os dados." 
 1435 │             };
 1436 │           }
 1437 │ 
 1438 │           console.error("Erro ao verificar código na tabela grupos:", grupoError);
 1439 │           return { 
 1440 │             existe: false, 
 1441 │             mensagem: "Código não encontrado" 
 1442 │           };
 1443 │         }
 1444 │ 
 1445 │         if (grupoData) {
 1446 │           // Encontrou o grupo, agora vamos sincronizar com a tabela de códigos
 1447 │           try {
 1448 │             await supabase.from('codigos_grupos_estudo').insert({
 1449 │               codigo: codigoNormalizado,
 1450 │               grupo_id: grupoData.id,
 1451 │               nome: grupoData.nome || 'Grupo sem nome',
 1452 │               descricao: grupoData.descricao || '',
 1453 │               user_id: grupoData.user_id,
 1454 │               privado: grupoData.privado || false,
 1455 │               membros: grupoData.membros || 1,
 1456 │               visibilidade: grupoData.visibilidade || 'todos',
 1457 │               disciplina: grupoData.disciplina || '',
 1458 │               cor: grupoData.cor || '#FF6B00',
 1459 │               membros_ids: grupoData.membros_ids || [],
 1460 │               data_criacao: grupoData.data_criacao || new Date().toISOString(),
 1461 │               ultima_atualizacao: new Date().toISOString()
 1462 │             });
 1463 │ 
 1464 │             // Grupo sincronizado na tabela de códigos
 1465 │             return { 
 1466 │               existe: true, 
 1467 │               grupo: grupoData, 
 1468 │               mensagem: "Código válido encontrado" 
 1469 │             };
 1470 │           } catch (syncError) {
 1471 │             console.error("Erro ao sincronizar código com tabela de códigos:", syncError);
 1472 │             // Mas ainda retornamos o grupo encontrado
 1473 │             return { 
 1474 │               existe: true, 
 1475 │               grupo: grupoData, 
 1476 │               mensagem: "Código válido encontrado" 
 1477 │             };
 1478 │           }
 1479 │         }
 1480 │ 
 1481 │         return { existe: false, mensagem: "Código não encontrado" };
 1482 │       } catch (grupoCheckError) {
 1483 │         console.error("Erro ao verificar código na tabela de grupos:", grupoCheckError);
 1484 │         return { existe: false, mensagem: "Código não encontrado" };
 1485 │       }
 1486 │     }
 1487 │ 
 1488 │     // Se chegou aqui, encontrou o código na tabela de códigos
 1489 │     return { 
 1490 │       existe: true, 
 1491 │       grupo: data, 
 1492 │       mensagem: "Código válido encontrado" 
 1493 │     };
 1494 │ 
 1495 │   } catch (error) {
 1496 │     console.error("Exceção ao verificar código:", error);
 1497 │     return { 
 1498 │       existe: false, 
 1499 │       mensagem: "Erro interno ao verificar código. Por favor, tente novamente." 
 1500 │     };
 1501 │   }
 1502 │ };
 1503 │ 
 1504 │ // Função para criar a tabela de códigos de grupo
 1505 │ const criarTabelaCodigosGrupos = async () => {
 1506 │   try {
 1507 │     console.log("Iniciando criação da tabela codigos_grupos_estudo...");
 1508 │ 
 1509 │     // Primeiro, verificar se a extensão uuid-ossp está disponível
 1510 │     try {
 1511 │       await supabase.query(`CREATE EXTENSION IF NOT EXISTS "uuid-ossp";`);
 1512 │       console.log("Extensão uuid-ossp verificada/criada");
 1513 │     } catch (extError) {
 1514 │       console.log("Nota: Não foi possível criar extensão uuid-ossp, mas isso pode não ser um problema:", extError);
 1515 │     }
 1516 │ 
 1517 │     // Executar SQL para criar a tabela
 1518 │     const { error } = await supabase.query(`
 1519 │       CREATE TABLE IF NOT EXISTS public.codigos_grupos_estudo (
 1520 │         codigo VARCHAR(15) PRIMARY KEY,
 1521 │         grupo_id UUID NOT NULL,
 1522 │         nome VARCHAR NOT NULL,
 1523 │         descricao TEXT,
 1524 │         data_criacao TIMESTAMP WITH TIME ZONE DEFAULT now(),
 1525 │         user_id UUID,
 1526 │         privado BOOLEAN DEFAULT false,
 1527 │         membros INTEGER DEFAULT 1,
 1528 │         visibilidade VARCHAR,
 1529 │         disciplina VARCHAR,
 1530 │         cor VARCHAR DEFAULT '#FF6B00',
 1531 │         membros_ids JSONB DEFAULT '[]'::jsonb,
 1532 │         ultima_atualizacao TIMESTAMP WITH TIME ZONE DEFAULT now()
 1533 │       );
 1534 │     `);
 1535 │ 
 1536 │     if (error) {
 1537 │       console.error("Erro ao criar tabela de códigos:", error);
 1538 │       return false;
 1539 │     }
 1540 │ 
 1541 │     // Criar índices e políticas de segurança
 1542 │     try {
 1543 │       await supabase.query(`
 1544 │         CREATE INDEX IF NOT EXISTS idx_codigos_grupos_estudo_grupo_id ON public.codigos_grupos_estudo(grupo_id);
 1545 │         CREATE INDEX IF NOT EXISTS idx_codigos_grupos_estudo_user_id ON public.codigos_grupos_estudo(user_id);
 1546 │       `);
 1547 │ 
 1548 │       await supabase.query(`
 1549 │         ALTER TABLE public.codigos_grupos_estudo ENABLE ROW LEVEL SECURITY;
 1550 │       `);
 1551 │ 
 1552 │       await supabase.query(`
 1553 │         DROP POLICY IF EXISTS "Todos podem visualizar códigos" ON public.codigos_grupos_estudo;
 1554 │         CREATE POLICY "Todos podem visualizar códigos"
 1555 │           ON public.codigos_grupos_estudo FOR SELECT
 1556 │           USING (true);
 1557 │       `);
 1558 │ 
 1559 │       await supabase.query(`
 1560 │         DROP POLICY IF EXISTS "Todos podem inserir códigos" ON public.codigos_grupos_estudo;
 1561 │         CREATE POLICY "Todos podem inserir códigos"
 1562 │           ON public.codigos_grupos_estudo FOR INSERT
 1563 │           WITH CHECK (true);
 1564 │       `);
 1565 │ 
 1566 │       await supabase.query(`
 1567 │         DROP POLICY IF EXISTS "Todos podem atualizar códigos" ON public.codigos_grupos_estudo;
 1568 │         CREATE POLICY "Todos podem atualizar códigos"
 1569 │           ON public.codigos_grupos_estudo FOR UPDATE
 1570 │           USING (true);
 1571 │       `);
 1572 │     } catch (policiesError) {
 1573 │       console.warn("Aviso: Não foi possível criar todos os índices/políticas:", policiesError);
 1574 │       // Continuamos mesmo se falhar a criação de políticas
 1575 │     }
 1576 │ 
 1577 │     console.log("Tabela de códigos de grupos criada com sucesso!");
 1578 │     return true;
 1579 │   } catch (error) {
 1580 │     console.error("Exceção ao criar tabela de códigos:", error);
 1581 │     return false;
 1582 │   }
 1583 │ };
 1584 │ 
 1585 │ // Função para gerar um código único de grupo
 1586 │ export const gerarCodigoGrupo = () => {
 1587 │   // Caracteres permitidos (removido caracteres ambíguos como 0/O, 1/I, etc.)
 1588 │   const chars = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789";
 1589 │ 
 1590 │   // Gerar 4 letras e 4 números
 1591 │   let codigo = '';
 1592 │ 
 1593 │   // Primeira parte: 4 letras
 1594 │   for (let i = 0; i < 4; i++) {
 1595 │     const randomIndex = Math.floor(Math.random() * 23); // Índice para pegar apenas letras
 1596 │     codigo += chars[randomIndex];
 1597 │   }
 1598 │ 
 1599 │   codigo += '-'; // Separador
 1600 │ 
 1601 │   // Segunda parte: 4 caracteres alfanuméricos
 1602 │   for (let i = 0; i < 4; i++) {
 1603 │     const randomIndex = Math.floor(Math.random() * chars.length);
 1604 │     codigo += chars[randomIndex];
 1605 │   }
 1606 │ 
 1607 │   return codigo;
 1608 │ };
 1609 │ 
 1610 │ // Função para salvar um código na tabela
 1611 │ export const salvarCodigoGrupo = async (codigoData: any) => {
      ·              ────────┬────────
      ·                      ╰── `salvarCodigoGrupo` redefined here
 1612 │   try {
 1613 │     // Verificar se a tabela existe e criar se necessário
 1614 │     try {
      ╰────
/home/runner/workspace/src/lib/grupoCodigoUtils.ts:2:1
1  |  /**
2  |   * Utilitários para gerenciar códigos dos grupos de estudo
   |                                       ^
3  |   * Este arquivo centraliza operações comuns relacionadas aos códigos dos grupos
4  |   */