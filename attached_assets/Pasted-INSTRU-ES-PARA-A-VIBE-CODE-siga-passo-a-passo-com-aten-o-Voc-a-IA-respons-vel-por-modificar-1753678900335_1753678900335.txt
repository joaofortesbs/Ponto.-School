INSTRU√á√ïES PARA A VIBE CODE (siga passo a passo com aten√ß√£o):

Voc√™ √© a IA respons√°vel por modificar e aplicar corretamente a l√≥gica do sistema de preenchimento autom√°tico de atividades no School Power. Seu objetivo √© fazer com que, ao gerar uma sugest√£o de atividade na interface de Plano de A√ß√£o, o sistema:

‚úÖ Preencha todos os campos da sugest√£o automaticamente (incluindo t√≠tulo, descri√ß√£o e todos os campos personalizados);
‚úÖ Preencha esses dados diretamente no mini-card da atividade, j√° dentro do card de constru√ß√£o;
‚úÖ Utilize corretamente a estrutura de campos por tipo de atividade, com base no ID da atividade;
‚úÖ Mantenha compatibilidade com o funcionamento do modal Editar Materiais, que j√° aceita esses campos.

O QUE J√Å EXISTE:

Um sistema de sugest√£o de atividades geradas por IA (Gemini), ativado pelo arquivo generatePersonalizedPlan.ts;

O sistema j√° gera t√≠tulo e descri√ß√£o corretamente;

Existe um arquivo com as defini√ß√µes de todas as 82 atividades e seus IDs: schoolPowerActivities.json;

Agora, ser√° criado um novo arquivo com os campos obrigat√≥rios por tipo de atividade (ex: lista-exercicios requer: tema, disciplina, quantidadeQuestoes etc);

O modal Editar Materiais j√° est√° preparado para receber todos os campos como texto.

OBJETIVO:

Voc√™ deve modificar o sistema para que o Gemini gere, al√©m de t√≠tulo e descri√ß√£o, os campos personalizados de cada atividade, com base em seu ID, e coloque essas informa√ß√µes no campo miniCardData do card gerado.

Isso permitir√° que:

O mini-card exiba todos os campos j√° preenchidos;

O bot√£o ‚ÄúEditar Materiais‚Äù abra o modal j√° com os dados completos;

O sistema funcione com qualquer uma das 82 atividades, adaptando o preenchimento conforme os campos esperados para aquele ID.

ESTRAT√âGIA PARA IMPLEMENTA√á√ÉO:

üß© 1. Criar o mapeamento dos campos por ID de atividade:

Crie (ou carregue) um arquivo chamado activityCustomFields.ts com a estrutura:

export const activityCustomFields = {
"lista-exercicios": [
"tema",
"disciplina",
"anoEscolaridade",
"quantidadeQuestoes",
"modeloQuestoes",
"fontes"
],
"podcast": [
"tema",
"roteiro",
"dura√ß√£o",
"recursosTecnologicos",
"pap√©isDosAlunos",
"formaDeEntrega"
],
...
};

Esse arquivo define quais campos devem ser preenchidos no campo customFields do JSON retornado pela IA Gemini, com base no ID da atividade.

üì§ 2. Modificar o prompt do Gemini:

No arquivo generatePersonalizedPlan.ts, atualize o prompt da IA com a vers√£o abaixo:

const prompt = `
Voc√™ √© uma IA especializada em criar planos de a√ß√£o educacionais. Com base nas informa√ß√µes do professor, seu objetivo √© sugerir de 10 a 35 atividades com t√≠tulo, descri√ß√£o e campos personalizados preenchidos automaticamente.

Voc√™ s√≥ pode usar os IDs de atividade listados a seguir: ${activitiesIds.join(', ')}

Para cada atividade sugerida, voc√™ deve seguir a estrutura JSON abaixo, incluindo os campos customFields com base no ID da atividade.

EXEMPLO DE RESPOSTA:

[
{
"id": "lista-exercicios",
"title": "Lista sobre Substantivos",
"description": "Atividade para fixar conceitos de substantivos concretos e abstratos.",
"duration": "30 minutos",
"difficulty": "F√°cil",
"category": "L√≠ngua Portuguesa",
"type": "atividade",
"customFields": {
"tema": "Substantivos",
"disciplina": "Portugu√™s",
"anoEscolaridade": "6¬∫ ano",
"quantidadeQuestoes": "10",
"modeloQuestoes": "M√∫ltipla escolha e discursivas",
"fontes": "Livro did√°tico + plataforma Reda√ß√£oNotaMil"
}
}
]

Regras importantes:

Use apenas os IDs permitidos;

Para cada ID, preencha corretamente todos os campos definidos no arquivo de mapeamento;

N√£o invente campos fora do padr√£o;

N√£o adicione coment√°rios nem texto fora do JSON;

Se o professor pedir uma atividade espec√≠fica (ex: podcast, roteiro de aula), ela deve obrigatoriamente estar inclu√≠da na sugest√£o;

Capriche nos valores de cada campo. Eles ser√£o exibidos no mini-card da interface. Seja claro, direto e objetivo.
`;

üíæ 3. Processar os dados no front-end (actionPlanService.ts ou componente de UI):

Garanta que, ap√≥s a resposta da IA, o sistema:

Interprete corretamente o campo customFields;

Insira todos os campos recebidos dentro do mini-card da sugest√£o (em miniCardData);

Quando o usu√°rio clicar em ‚ÄúEditar Materiais‚Äù, os dados sejam passados para o modal e preencham todos os campos automaticamente.

EXEMPLO DE USO NO MINI-CARD:

O mini-card da atividade no front-end deve ser preenchido com:

{
id: "lista-exercicios",
title: "Lista sobre Substantivos",
description: "Atividade para fixar conceitos de substantivos concretos e abstratos.",
duration: "30 minutos",
difficulty: "F√°cil",
category: "L√≠ngua Portuguesa",
type: "atividade",
customFields: {
tema: "Substantivos",
disciplina: "Portugu√™s",
anoEscolaridade: "6¬∫ ano",
quantidadeQuestoes: "10",
modeloQuestoes: "M√∫ltipla escolha e discursivas",
fontes: "Livro did√°tico + plataforma Reda√ß√£oNotaMil"
}
}

‚úÖ O campo customFields deve ser mapeado dinamicamente de acordo com o ID.

EXTRA: se quiser, use este campo para exibir os dados no mini-card com √≠cones ou agrupamento visual!

üìå CONSIDERA√á√ïES FINAIS:

Esse sistema ser√° expandido futuramente para funcionar tamb√©m dentro do modal de Edi√ß√£o de Materiais, ent√£o a estrutura precisa ser s√≥lida;

Mantenha retrocompatibilidade: se o campo customFields estiver ausente, o sistema ainda deve funcionar com apenas t√≠tulo e descri√ß√£o;

As sugest√µes geradas devem continuar sendo exibidas como antes, mas agora com os campos extras inclu√≠dos e vis√≠veis no mini-card;

Ap√≥s implementar isso, testaremos com a atividade de ID "lista-exercicios". Certifique-se de que ela funcione 100%.