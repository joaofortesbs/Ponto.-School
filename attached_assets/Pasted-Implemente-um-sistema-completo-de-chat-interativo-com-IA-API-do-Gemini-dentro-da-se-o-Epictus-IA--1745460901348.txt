Implemente um sistema completo de chat interativo com IA (API do Gemini) dentro da seção Epictus IA, substituindo a mensagem de boas-vindas assim que o usuário envia a primeira mensagem ou áudio.

🎯 Requisitos principais:

Substituição dinâmica da mensagem inicial ("Como a IA mais inteligente do mundo...") por uma interface de chat com rolagem, onde serão exibidas todas as mensagens enviadas e recebidas.

O sistema deve permitir:

Envio de mensagens de texto.

Gravação e envio de mensagens de voz.

Recebimento de respostas da IA (API do Gemini).

O histórico de mensagens (texto ou áudio) deve ser exibido em blocos no topo da caixa de envio.

As mensagens devem ter estilo de balão de chat, separando claramente usuário e IA, com timestamp.

🧠 Memória de contexto:

Toda conversa deve manter um array de contexto com as mensagens anteriores, para enviar junto nas requisições à API do Gemini.

A IA deve ser capaz de continuar uma conversa com base em tudo que foi dito anteriormente no mesmo chat.

Esse histórico deve ser salvo localmente (ou em estado React/global store como Zustand ou Context) durante a sessão.

🔄 Funcionalidade de Envio:

O botão de microfone já existente deve acionar a gravação de áudio (usar Web Speech API ou biblioteca como react-speech-recognition, mediaRecorder, etc).

O botão de envio (ícone de lâmpada ou similar) deve enviar o texto digitado.

Após o envio, o input deve ser limpo e a resposta da IA exibida.

💬 Fluxo visual do chat:

Inicial: Exibe mensagem de boas-vindas.

Após 1ª mensagem: Apaga a mensagem inicial e substitui por uma área de chat rolável.

Mensagens recentes aparecem no final da rolagem.

🛠 Extras técnicos (opcional):

Suporte a markdown básico nas mensagens da IA (negrito, itálico, listas).

Animação de “IA está digitando...” entre o envio do usuário e a resposta da IA.

Compatibilidade com scroll automático para a última mensagem.

🧩 Arquitetura sugerida (ajuste conforme estrutura do projeto):

ChatContainer: componente principal com a área de mensagens.

MessageBubble: componente para cada mensagem (usuário ou IA).

useChatHistory: hook customizado para controlar contexto e estado.

Integração com API Gemini (via Axios ou fetch) passando messages[] no body.

⚠️ Atenção:

Certifique-se de que a caixa de mensagens e o botão de microfone permaneçam visíveis fixamente na parte inferior durante o scroll do chat.

Testar responsividade (desktop e mobile).