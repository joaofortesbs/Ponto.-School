üõ†Ô∏è Objetivo:

Reescrever generatePersonalizedPlan.ts e validateGeminiPlan.ts para que:

‚úÖ Os dados do usu√°rio (mensagem inicial + quiz de contextualiza√ß√£o) sejam realmente utilizados para gerar um plano de a√ß√£o totalmente personalizado via API Gemini.

‚úÖ As atividades retornadas pela Gemini sejam filtradas e validadas estritamente usando o JSON das 137 atividades poss√≠veis.

‚úÖ O plano de a√ß√£o exibido ao usu√°rio seja 100% real, personalizado, funcional, sem dados superficiais ou duplicados.

üîπ Contexto:
‚úèÔ∏è Fluxo atual:
Usu√°rio envia mensagem na caixa de mensagens do School Power.

Usu√°rio preenche Quiz de Contextualiza√ß√£o.

Dados s√£o salvos no LocalStorage e/ou Supabase:

initialMessage

contextualizationData

API Gemini √© chamada, por√©m atualmente:

Est√° utilizando prompts superficiais e gen√©ricos.

Est√° ignorando os dados coletados.

Retorna atividades padronizadas ou duplicadas.

Renderiza no ActionPlanCard atividades n√£o personalizadas.

üîπ O que deve ser feito:
‚úÖ 1Ô∏è‚É£ Reescrever generatePersonalizedPlan.ts:
Buscar os dados completos salvos (via Supabase ou LocalStorage):

initialMessage

contextualizationData

Montar o prompt de forma estruturada:

Incluindo initialMessage, contextualizationData e o JSON completo das 137 atividades permitidas.

Informar explicitamente √† Gemini para usar apenas as atividades permitidas e gerar entre 3 a 5 atividades personalizadas.

Solicitar t√≠tulos claros e personalizados (Ex: ‚ÄúProva Interativa - Verbos ENEM 2025‚Äù), descri√ß√µes ricas e o id v√°lido da atividade correspondente no JSON.

Exemplo de estrutura de prompt:

json
Copiar
Editar
{
  "system": "Voc√™ √© a IA do School Power, gerando planos de a√ß√£o educacionais personalizados.",
  "initialMessage": "Mensagem inicial do usu√°rio",
  "contextualizationData": { "subjects": "...", "audience": "...", ... },
  "allowedActivities": [ JSON das 137 atividades ],
  "instruction": "Com base em todas as informa√ß√µes acima, gere de 3 a 5 atividades personalizadas utilizando apenas os ids e nomes das atividades dispon√≠veis. Retorne em JSON estruturado no seguinte formato: [{ id, title, description }]"
}
Chamar a API Gemini de forma ass√≠ncrona e limpa, armazenando o retorno em flowData.actionPlan de forma clara para renderiza√ß√£o.

‚úÖ 2Ô∏è‚É£ Reescrever validateGeminiPlan.ts:
Validar se cada atividade retornada pela Gemini possui um id existente no JSON das 137 atividades.

Se houver atividades n√£o permitidas, remov√™-las ou retornar erro claro.

Retornar um array limpo e consistente para o ActionPlanCard.

‚úÖ 3Ô∏è‚É£ Implementa√ß√µes Adicionais:
Adicionar logs claros em cada etapa:

Prompt gerado.

Dados enviados para Gemini.

Resposta recebida.

Resultado validado e filtrado.

Garantir que n√£o existam duplica√ß√µes nas atividades retornadas.

Sincroniza√ß√£o completa com Supabase para rastrear planos gerados por usu√°rio.

Garantir que os mini-cards no ActionPlanCard exibam as atividades personalizadas corretamente.

üöÄ JSON DAS 137 ATIVIDADES PARA USO NA GEMINI:
Segue o arquivo schoolPowerActivities.json pronto para uso direto, para colocar na raiz de /src/data ou onde preferir:

json
Copiar
Editar
[
  {
    "id": "resumo-inteligente",
    "name": "Resumo Inteligente",
    "description": "Criar resumos otimizados dos conte√∫dos principais"
  },
  {
    "id": "prova-interativa",
    "name": "Prova Interativa",
    "description": "Gerar avalia√ß√µes autom√°ticas com corre√ß√£o instant√¢nea"
  },
  {
    "id": "plano-estudo",
    "name": "Plano de Estudo",
    "description": "Montar cronogramas personalizados para o aluno"
  },
  {
    "id": "exercicios-praticos",
    "name": "Exerc√≠cios Pr√°ticos",
    "description": "Listas de exerc√≠cios focados nos temas estudados"
  },
  {
    "id": "material-apoio",
    "name": "Material de Apoio",
    "description": "Gerar materiais complementares para refor√ßo de aprendizado"
  },
  ...
  // Inclua todas as 137 atividades reais que sua equipe estruturou
]
ü™ê Se quiser, me envie agora o arquivo CSV ou Notion com as 137 atividades para gerar automaticamente o JSON pronto para importa√ß√£o.

‚úÖ Resumo final:
‚úÖ Utilizar Supabase ou LocalStorage somente para armazenamento e rastreabilidade, mas garantir a montagem e envio do prompt completo para Gemini.
‚úÖ Garantir que o fluxo utilize esses dados ao inv√©s de atividades gen√©ricas.
‚úÖ Validar e renderizar somente atividades permitidas, personalizadas e consistentes.
‚úÖ Gerar atividades com t√≠tulos e descri√ß√µes personalizadas.
‚úÖ Garantir consist√™ncia, rastreabilidade e usabilidade real.