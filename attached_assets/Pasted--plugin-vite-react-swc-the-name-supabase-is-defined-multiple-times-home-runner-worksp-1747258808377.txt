[plugin:vite:react-swc] × the name `supabase` is defined multiple times
     ╭─[/home/runner/workspace/src/lib/grupoCodigoUtils.ts:3:1]
   3 │  * Utilitários para gerenciar códigos dos grupos de estudo
   4 │  * Este arquivo centraliza operações comuns relacionadas aos códigos dos grupos
   5 │  */
   6 │ import { supabase } from '@/lib/supabase';
     ·          ────┬───
     ·              ╰── previous definition of `supabase` here
   7 │ import { gerarCodigoUnico, salvarCodigoNoBanco, buscarGrupoPorCodigo } from './codigosGruposService';
   8 │ 
   9 │ /**
  10 │  * Obtém um código de grupo existente de várias fontes
  11 │  * @param grupoId - ID do grupo para buscar o código
  12 │  * @returns O código encontrado ou null se não existir
  13 │  */
  14 │ export const obterCodigoGrupoExistente = async (grupoId: string): Promise<string | null> => {
  15 │   if (!grupoId) return null;
  16 │   
  17 │   try {
  18 │     // 1. Verificar primeiro no banco de dados central (principal)
  19 │     try {
  20 │       const { data, error } = await supabase
  21 │         .from('grupos_estudo')
  22 │         .select('codigo')
  23 │         .eq('id', grupoId)
  24 │         .single();
  25 │         
  26 │       if (!error && data?.codigo) {
  27 │         console.log(`Código recuperado do banco de dados: ${data.codigo}`);
  28 │         
  29 │         // Salvar em storages locais como backup
  30 │         salvarCodigoEmStoragesLocais(grupoId, data.codigo);
  31 │         
  32 │         return data.codigo;
  33 │       }
  34 │     } catch (dbError) {
  35 │       console.error('Erro ao buscar código no banco de dados:', dbError);
  36 │     }
  37 │     
  38 │     // 2. Verificar no armazenamento dedicado para códigos (local)
  39 │     const CODIGOS_STORAGE_KEY = 'epictus_codigos_grupo';
  40 │     const codigosGrupos = JSON.parse(localStorage.getItem(CODIGOS_STORAGE_KEY) || '{}');
  41 │     
  42 │     if (codigosGrupos[grupoId]) {
  43 │       console.log(`Código recuperado do storage dedicado: ${codigosGrupos[grupoId]}`);
  44 │       
  45 │       // Tentar sincronizar com o banco de dados
  46 │       try {
  47 │         await supabase
  48 │           .from('grupos_estudo')
  49 │           .update({ codigo: codigosGrupos[grupoId] })
  50 │           .eq('id', grupoId);
  51 │       } catch (syncError) {
  52 │         console.error('Erro ao sincronizar código com banco de dados:', syncError);
  53 │       }
  54 │       
  55 │       return codigosGrupos[grupoId];
  56 │     }
  57 │     
  58 │     // 3. Verificar no localStorage de grupos
  59 │     const GRUPOS_STORAGE_KEY = 'epictus_grupos_estudo';
  60 │     const grupos = JSON.parse(localStorage.getItem(GRUPOS_STORAGE_KEY) || '[]');
  61 │     const grupo = grupos.find((g: any) => g.id === grupoId);
  62 │     
  63 │     if (grupo?.codigo) {
  64 │       console.log(`Código recuperado do localStorage: ${grupo.codigo}`);
  65 │       
  66 │       // Aproveitar para salvar no storage dedicado
  67 │       codigosGrupos[grupoId] = grupo.codigo;
  68 │       localStorage.setItem(CODIGOS_STORAGE_KEY, JSON.stringify(codigosGrupos));
  69 │       
  70 │       // Tentar sincronizar com o banco de dados
  71 │       try {
  72 │         await supabase
  73 │           .from('grupos_estudo')
  74 │           .update({ codigo: grupo.codigo })
  75 │           .eq('id', grupoId);
  76 │       } catch (syncError) {
  77 │         console.error('Erro ao sincronizar código com banco de dados:', syncError);
  78 │       }
  79 │       
  80 │       return grupo.codigo;
  81 │     }
  82 │     
  83 │     // 4. Verificar na sessionStorage (mecanismo de recuperação)
  84 │     const sessionCodigo = sessionStorage.getItem(`grupo_codigo_${grupoId}`);
  85 │     if (sessionCodigo) {
  86 │       console.log(`Código recuperado da sessionStorage: ${sessionCodigo}`);
  87 │       
  88 │       // Sincronizar com outros armazenamentos
  89 │       salvarCodigoEmStoragesLocais(grupoId, sessionCodigo);
  90 │       
  91 │       // Tentar sincronizar com o banco de dados
  92 │       try {
  93 │         await supabase
  94 │           .from('grupos_estudo')
  95 │           .update({ codigo: sessionCodigo })
  96 │           .eq('id', grupoId);
  97 │       } catch (syncError) {
  98 │         console.error('Erro ao sincronizar código com banco de dados:', syncError);
  99 │       }
 100 │       
 101 │       return sessionCodigo;
 102 │     }
 103 │   } catch (error) {
 104 │     console.error('Erro ao buscar código de grupo:', error);
 105 │   }
 106 │   
 107 │   return null;
 108 │ };
 109 │ 
 110 │ /**
 111 │  * Salva um código de grupo em múltiplas camadas de armazenamento
 112 │  * @param grupoId - ID do grupo
 113 │  * @param codigo - Código a ser salvo
 114 │  */
 115 │ export const salvarCodigoGrupo = async (grupoId: string, codigo: string): Promise<void> => {
 116 │   if (!grupoId || !codigo) return;
 117 │   
 118 │   const codigoNormalizado = codigo.toUpperCase();
 119 │   
 120 │   try {
 121 │     // 1. Salvar no banco de dados central
 122 │     try {
 123 │       const { data: grupoData, error: grupoError } = await supabase
 124 │         .from('grupos_estudo')
 125 │         .select('*')
 126 │         .eq('id', grupoId)
 127 │         .single();
 128 │         
 129 │       if (!grupoError && grupoData) {
 130 │         // Atualizar o código no grupo
 131 │         await supabase
 132 │           .from('grupos_estudo')
 133 │           .update({ codigo: codigoNormalizado })
 134 │           .eq('id', grupoId);
 135 │           
 136 │         // Atualizar ou inserir na tabela de códigos
 137 │         // O trigger deve fazer isso automaticamente, mas fazemos aqui como garantia
 138 │         await salvarCodigoNoBanco(codigoNormalizado, {
 139 │           ...grupoData,
 140 │           codigo: codigoNormalizado
 141 │         });
 142 │       }
 143 │     } catch (dbError) {
 144 │       console.error('Erro ao salvar código no banco de dados:', dbError);
 145 │     }
 146 │     
 147 │     // 2. Salvar em armazenamentos locais como backup
 148 │     salvarCodigoEmStoragesLocais(grupoId, codigoNormalizado);
 149 │     
 150 │     console.log(`Código ${codigoNormalizado} salvo com sucesso para o grupo ${grupoId}`);
 151 │   } catch (error) {
 152 │     console.error('Erro ao salvar código de grupo:', error);
 153 │   }
 154 │ };
 155 │ 
 156 │ /**
 157 │  * Função auxiliar para salvar o código em armazenamentos locais
 158 │  * @param grupoId - ID do grupo
 159 │  * @param codigo - Código a ser salvo
 160 │  */
 161 │ const salvarCodigoEmStoragesLocais = (grupoId: string, codigo: string): void => {
 162 │   try {
 163 │     // Salvar no armazenamento dedicado para códigos
 164 │     const CODIGOS_STORAGE_KEY = 'epictus_codigos_grupo';
 165 │     const codigosGrupos = JSON.parse(localStorage.getItem(CODIGOS_STORAGE_KEY) || '{}');
 166 │     codigosGrupos[grupoId] = codigo.toUpperCase();
 167 │     localStorage.setItem(CODIGOS_STORAGE_KEY, JSON.stringify(codigosGrupos));
 168 │     
 169 │     // Salvar no localStorage de grupos
 170 │     const GRUPOS_STORAGE_KEY = 'epictus_grupos_estudo';
 171 │     const grupos = JSON.parse(localStorage.getItem(GRUPOS_STORAGE_KEY) || '[]');
 172 │     const grupoIndex = grupos.findIndex((g: any) => g.id === grupoId);
 173 │     
 174 │     if (grupoIndex >= 0) {
 175 │       grupos[grupoIndex].codigo = codigo.toUpperCase();
 176 │       localStorage.setItem(GRUPOS_STORAGE_KEY, JSON.stringify(grupos));
 177 │     }
 178 │     
 179 │     // Salvar na sessionStorage para recuperação rápida
 180 │     sessionStorage.setItem(`grupo_codigo_${grupoId}`, codigo.toUpperCase());
 181 │   } catch (error) {
 182 │     console.error('Erro ao salvar código em armazenamentos locais:', error);
 183 │   }
 184 │ };
 185 │ 
 186 │ /**
 187 │  * Gerar um código único para um grupo e salvar em todos os armazenamentos
 188 │  * @param grupoId - ID do grupo para o qual gerar código
 189 │  * @returns O código gerado
 190 │  */
 191 │ export const gerarESalvarCodigoUnico = async (grupoId: string): Promise<string> => {
 192 │   try {
 193 │     // Primeiro verificar se já existe um código
 194 │     const codigoExistente = await obterCodigoGrupoExistente(grupoId);
 195 │     if (codigoExistente) {
 196 │       console.log(`Grupo ${grupoId} já possui o código ${codigoExistente}`);
 197 │       return codigoExistente;
 198 │     }
 199 │     
 200 │     console.log(`Gerando novo código para o grupo ${grupoId}...`);
 201 │     
 202 │     // Gerar um novo código único
 203 │     const novoCodigo = await gerarCodigoUnico();
 204 │     
 205 │     // Salvar o código em todos os lugares
 206 │     await salvarCodigoGrupo(grupoId, novoCodigo);
 207 │     
 208 │     console.log(`Novo código ${novoCodigo} gerado e salvo para o grupo ${grupoId}`);
 209 │     return novoCodigo;
 210 │   } catch (error) {
 211 │     console.error('Erro ao gerar e salvar código único:', error);
 212 │     
 213 │     // Fallback para garantir que sempre retornamos algo
 214 │     const fallbackCodigo = Array(7)
 215 │       .fill(0)
 216 │       .map(() => "ABCDEFGHJKLMNPQRSTUVWXYZ23456789".charAt(Math.floor(Math.random() * 32)))
 217 │       .join('');
 218 │       
 219 │     try {
 220 │       await salvarCodigoGrupo(grupoId, fallbackCodigo);
 221 │     } catch (fallbackError) {
 222 │       console.error('Erro ao salvar código fallback:', fallbackError);
 223 │     }
 224 │     
 225 │     return fallbackCodigo;
 226 │   }
 227 │ };
 228 │ 
 229 │ /**
 230 │  * Verifica se um código existe em qualquer grupo
 231 │  * @param codigo - Código a ser verificado
 232 │  * @returns true se o código existir em algum grupo
 233 │  */
 234 │ export const verificarCodigoExiste = async (codigo: string): Promise<boolean> => {
 235 │   if (!codigo) return false;
 236 │   
 237 │   try {
 238 │     // Normalizar o código para comparação
 239 │     const codigoNormalizado = codigo.trim().toUpperCase();
 240 │     
 241 │     // Verificar no banco de dados central (principal)
 242 │     try {
 243 │       const { data, error } = await supabase
 244 │         .from('codigos_grupos_estudo')
 245 │         .select('codigo')
 246 │         .eq('codigo', codigoNormalizado)
 247 │         .single();
 248 │         
 249 │       if (!error && data) {
 250 │         console.log(`Código ${codigoNormalizado} encontrado no banco de dados central`);
 251 │         return true;
 252 │       }
 253 │     } catch (dbError) {
 254 │       console.error('Erro ao verificar código no banco de dados:', dbError);
 255 │     }
 256 │     
 257 │     // Verificar no armazenamento dedicado como fallback
 258 │     const CODIGOS_STORAGE_KEY = 'epictus_codigos_grupo';
 259 │     const codigosGrupos = JSON.parse(localStorage.getItem(CODIGOS_STORAGE_KEY) || '{}');
 260 │     
 261 │     // Verificar se o código existe como valor em qualquer entrada
 262 │     if (Object.values(codigosGrupos).some((c: any) => 
 263 │       c.toUpperCase() === codigoNormalizado)) {
 264 │       console.log(`Código ${codigoNormalizado} encontrado no storage local dedicado`);
 265 │       return true;
 266 │     }
 267 │     
 268 │     // Verificar também no localStorage de grupos
 269 │     const GRUPOS_STORAGE_KEY = 'epictus_grupos_estudo';
 270 │     const grupos = JSON.parse(localStorage.getItem(GRUPOS_STORAGE_KEY) || '[]');
 271 │     
 272 │     if (grupos.some((g: any) => 
 273 │       g.codigo && g.codigo.toUpperCase() === codigoNormalizado)) {
 274 │       console.log(`Código ${codigoNormalizado} encontrado no storage local de grupos`);
 275 │       return true;
 276 │     }
 277 │     
 278 │     return false;
 279 │   } catch (error) {
 280 │     console.error('Erro ao verificar existência de código:', error);
 281 │     return false;
 282 │   }
 283 │ };
 284 │ 
 285 │ /**
 286 │  * Busca um grupo pelo seu código
 287 │  * @param codigo - Código do grupo a ser buscado
 288 │  * @returns O grupo encontrado ou null
 289 │  */
 290 │ export const buscarGrupoComCodigo = async (codigo: string): Promise<any | null> => {
 291 │   if (!codigo) return null;
 292 │   
 293 │   try {
 294 │     // Normalizar o código
 295 │     const codigoNormalizado = codigo.trim().toUpperCase();
 296 │     
 297 │     // Buscar no banco de dados central
 298 │     const resultado = await buscarGrupoPorCodigo(codigoNormalizado);
 299 │     
 300 │     if (resultado.success && resultado.data) {
 301 │       return resultado.data;
 302 │     }
 303 │     
 304 │     // Fallback: buscar nos armazenamentos locais
 305 │     const GRUPOS_STORAGE_KEY = 'epictus_grupos_estudo';
 306 │     const grupos = JSON.parse(localStorage.getItem(GRUPOS_STORAGE_KEY) || '[]');
 307 │     
 308 │     const grupoEncontrado = grupos.find((g: any) => 
 309 │       g.codigo && g.codigo.toUpperCase() === codigoNormalizado);
 310 │       
 311 │     if (grupoEncontrado) {
 312 │       return grupoEncontrado;
 313 │     }
 314 │     
 315 │     return null;
 316 │   } catch (error) {
 317 │     console.error('Erro ao buscar grupo por código:', error);
 318 │     return null;
 319 │   }
 320 │ };
 321 │ import { supabase } from "./supabase";
     ·          ────┬───
     ·              ╰── `supabase` redefined here
 322 │ 
 323 │ // Verifica se um código de grupo existe no banco de dados
 324 │ export const verificarSeCodigoExiste = async (codigo: string): Promise<boolean> => {
     ╰────
/home/runner/workspace/src/lib/grupoCodigoUtils.ts:3:1
1  |  
2  |  /**
3  |   * Utilitários para gerenciar códigos dos grupos de estudo
   |                                                ^
4  |   * Este arquivo centraliza operações comuns relacionadas aos códigos dos grupos
5  |   */