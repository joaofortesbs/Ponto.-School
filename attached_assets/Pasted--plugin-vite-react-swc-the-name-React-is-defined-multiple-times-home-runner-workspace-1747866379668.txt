[plugin:vite:react-swc] × the name `React` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:1:1]
   1 │ 
   2 │ import React, { useState } from "react";
     ·        ──┬──
     ·          ╰── previous definition of `React` here
   3 │ import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy } from "lucide-react";
   4 │ import { useTheme } from "@/components/ThemeProvider";
   5 │ import { motion } from "framer-motion";
   6 │ import { Progress } from "@/components/ui/progress";
   7 │ 
   8 │ export default function FocoDoDiaCard() {
   9 │   const { theme } = useTheme();
  10 │   const isLightMode = theme === "light";
  11 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  12 │ 
  13 │   // Atividades de exemplo - Isso viria de uma API ou do contexto da aplicação
  14 │   const atividades = [
  15 │     {
  16 │       id: 1,
  17 │       titulo: "Assistir Aula 5: Teorema de Pitágoras",
  18 │       tipo: "video",
  19 │       tempo: "30 min",
  20 │       prazo: "Hoje, 18:00",
  21 │       urgente: true,
  22 │       concluido: false,
  23 │       progresso: 0
  24 │     },
  25 │     {
  26 │       id: 2,
  27 │       titulo: "Resolver Lista de Exercícios 2",
  28 │       tipo: "exercicio",
  29 │       tempo: "45 min",
  30 │       prazo: "Hoje",
  31 │       urgente: false,
  32 │       concluido: false,
  33 │       progresso: 0
  34 │     },
  35 │     {
  36 │       id: 3,
  37 │       titulo: "Revisar conteúdo da prova de amanhã",
  38 │       tipo: "revisao",
  39 │       tempo: "60 min",
  40 │       prazo: "Hoje, 22:00",
  41 │       urgente: true,
  42 │       concluido: false,
  43 │       progresso: 0
  44 │     }
  45 │   ];
  46 │ 
  47 │   // Toggle de conclusão de atividade
  48 │   const toggleAtividade = (id) => {
  49 │     // Aqui seria implementada a lógica para marcar/desmarcar atividades como concluídas
  50 │     console.log(`Atividade ${id} alterada`);
  51 │   };
  52 │ 
  53 │   // Calcular progresso total das atividades
  54 │   const totalAtividades = atividades.length;
  55 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
  56 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
  57 │ 
  58 │   return (
  59 │     <motion.div 
  60 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'}`}
  61 │       initial={{ opacity: 0, y: 20 }}
  62 │       animate={{ opacity: 1, y: 0 }}
  63 │       transition={{ duration: 0.5, ease: "easeOut" }}
  64 │     >
  65 │       {/* Header elegante com gradiente */}
  66 │       <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
  67 │         <div className="flex items-center justify-between">
  68 │           <div className="flex items-center gap-3">
  69 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
  70 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
  71 │             </div>
  72 │             <div>
  73 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
  74 │                 Seu Foco Hoje
  75 │               </h3>
  76 │               <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
  77 │                 <span className="font-bold text-[#FF6B00]">Revisão de Trigonometria</span>
  78 │               </p>
  79 │             </div>
  80 │           </div>
  81 │ 
  82 │           {/* Indicador de progresso circular */}
  83 │           <div className="hidden md:flex items-center">
  84 │             <div className="relative h-12 w-12 flex items-center justify-center">
  85 │               <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
  86 │                 <circle 
  87 │                   cx="22" cy="22" r="20" 
  88 │                   fill="none" 
  89 │                   stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
  90 │                   strokeWidth="4"
  91 │                 />
  92 │                 <circle 
  93 │                   cx="22" cy="22" r="20" 
  94 │                   fill="none" 
  95 │                   stroke="#FF6B00" 
  96 │                   strokeWidth="4"
  97 │                   strokeDasharray={126}
  98 │                   strokeDashoffset={126 - (progressoTotal / 100) * 126}
  99 │                   transform="rotate(-90 22 22)"
 100 │                   strokeLinecap="round"
 101 │                 />
 102 │               </svg>
 103 │               <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 104 │                 {Math.round(progressoTotal)}%
 105 │               </span>
 106 │             </div>
 107 │           </div>
 108 │         </div>
 109 │       </div>
 110 │ 
 111 │       {/* Conteúdo principal */}
 112 │       <div className="p-5">
 113 │         {/* Mensagem do mentor IA */}
 114 │         <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 115 │           <div className="flex gap-2 items-start">
 116 │             <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 117 │               <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 118 │             </div>
 119 │             <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 120 │               <span className="font-medium">Mentor IA:</span> Concentre-se nos exercícios práticos hoje. Seu desempenho em trigonometria tem mostrado melhorias!
 121 │             </p>
 122 │           </div>
 123 │         </div>
 124 │ 
 125 │         {/* Lista de atividades */}
 126 │         <div className="space-y-2.5">
 127 │           {atividades.map((atividade, index) => (
 128 │             <motion.div 
 129 │               key={atividade.id} 
 130 │               className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 131 │               whileHover={{ y: -2 }}
 132 │               onMouseEnter={() => setHoverIndex(index)}
 133 │               onMouseLeave={() => setHoverIndex(null)}
 134 │             >
 135 │               {/* Indicador de prioridade para tarefas urgentes */}
 136 │               {atividade.urgente && (
 137 │                 <div className="absolute top-0 right-0">
 138 │                   <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 139 │                 </div>
 140 │               )}
 141 │               
 142 │               <div 
 143 │                 className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 144 │                   atividade.concluido 
 145 │                     ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 146 │                     : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 147 │                 }`}
 148 │                 onClick={(e) => {
 149 │                   e.stopPropagation();
 150 │                   toggleAtividade(atividade.id);
 151 │                 }}
 152 │               >
 153 │                 {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 154 │               </div>
 155 │ 
 156 │               <div className="flex-1">
 157 │                 <div className="flex items-start gap-1.5">
 158 │                   <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 159 │                     {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 160 │                     {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 161 │                     {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 162 │                   </div>
 163 │                   <div>
 164 │                     <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 165 │                       {atividade.titulo}
 166 │                     </p>
 167 │                     <div className="flex items-center mt-1.5 gap-3">
 168 │                       <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 169 │                         <Clock className="h-3 w-3" /> {atividade.tempo}
 170 │                       </span>
 171 │                       <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 172 │                         {atividade.prazo}
 173 │                       </span>
 174 │                     </div>
 175 │                   </div>
 176 │                 </div>
 177 │ 
 178 │                 {/* Progress bar for individual activities */}
 179 │                 <div className="mt-2">
 180 │                   <Progress value={atividade.progresso} 
 181 │                     className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 182 │                 </div>
 183 │               </div>
 184 │             </motion.div>
 185 │           ))}
 186 │         </div>
 187 │ 
 188 │         {/* Footer com botão de ação e métricas */}
 189 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center">
 190 │           <div className="flex items-center gap-3">
 191 │             <div className={`p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 192 │               <Trophy className="h-3.5 w-3.5 text-[#FF6B00]" />
 193 │             </div>
 194 │             <div>
 195 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 196 │                 {atividadesConcluidas} de {totalAtividades} atividades
 197 │               </p>
 198 │             </div>
 199 │           </div>
 200 │           
 201 │           <motion.button 
 202 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 203 │             whileHover={{ scale: 1.05 }}
 204 │             whileTap={{ scale: 0.98 }}
 205 │           >
 206 │             Iniciar Foco
 207 │             <ChevronRight className="h-3 w-3" />
 208 │           </motion.button>
 209 │         </div>
 210 │       </div>
 211 │     </motion.div>
 212 │   );
 213 │ }
 214 │ import React, { useState } from "react";
     ·        ──┬──
     ·          ╰── `React` redefined here
 215 │ import { Clock, BookOpen, CheckCircle, ChevronRight, Target, Play } from "lucide-react";
 216 │ import { useTheme } from "@/components/ThemeProvider";
 217 │ import { motion } from "framer-motion";
     ╰────

  × the name `useState` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:1:1]
   1 │ 
   2 │ import React, { useState } from "react";
     ·                 ────┬───
     ·                     ╰── previous definition of `useState` here
   3 │ import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy } from "lucide-react";
   4 │ import { useTheme } from "@/components/ThemeProvider";
   5 │ import { motion } from "framer-motion";
   6 │ import { Progress } from "@/components/ui/progress";
   7 │ 
   8 │ export default function FocoDoDiaCard() {
   9 │   const { theme } = useTheme();
  10 │   const isLightMode = theme === "light";
  11 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  12 │ 
  13 │   // Atividades de exemplo - Isso viria de uma API ou do contexto da aplicação
  14 │   const atividades = [
  15 │     {
  16 │       id: 1,
  17 │       titulo: "Assistir Aula 5: Teorema de Pitágoras",
  18 │       tipo: "video",
  19 │       tempo: "30 min",
  20 │       prazo: "Hoje, 18:00",
  21 │       urgente: true,
  22 │       concluido: false,
  23 │       progresso: 0
  24 │     },
  25 │     {
  26 │       id: 2,
  27 │       titulo: "Resolver Lista de Exercícios 2",
  28 │       tipo: "exercicio",
  29 │       tempo: "45 min",
  30 │       prazo: "Hoje",
  31 │       urgente: false,
  32 │       concluido: false,
  33 │       progresso: 0
  34 │     },
  35 │     {
  36 │       id: 3,
  37 │       titulo: "Revisar conteúdo da prova de amanhã",
  38 │       tipo: "revisao",
  39 │       tempo: "60 min",
  40 │       prazo: "Hoje, 22:00",
  41 │       urgente: true,
  42 │       concluido: false,
  43 │       progresso: 0
  44 │     }
  45 │   ];
  46 │ 
  47 │   // Toggle de conclusão de atividade
  48 │   const toggleAtividade = (id) => {
  49 │     // Aqui seria implementada a lógica para marcar/desmarcar atividades como concluídas
  50 │     console.log(`Atividade ${id} alterada`);
  51 │   };
  52 │ 
  53 │   // Calcular progresso total das atividades
  54 │   const totalAtividades = atividades.length;
  55 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
  56 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
  57 │ 
  58 │   return (
  59 │     <motion.div 
  60 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'}`}
  61 │       initial={{ opacity: 0, y: 20 }}
  62 │       animate={{ opacity: 1, y: 0 }}
  63 │       transition={{ duration: 0.5, ease: "easeOut" }}
  64 │     >
  65 │       {/* Header elegante com gradiente */}
  66 │       <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
  67 │         <div className="flex items-center justify-between">
  68 │           <div className="flex items-center gap-3">
  69 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
  70 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
  71 │             </div>
  72 │             <div>
  73 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
  74 │                 Seu Foco Hoje
  75 │               </h3>
  76 │               <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
  77 │                 <span className="font-bold text-[#FF6B00]">Revisão de Trigonometria</span>
  78 │               </p>
  79 │             </div>
  80 │           </div>
  81 │ 
  82 │           {/* Indicador de progresso circular */}
  83 │           <div className="hidden md:flex items-center">
  84 │             <div className="relative h-12 w-12 flex items-center justify-center">
  85 │               <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
  86 │                 <circle 
  87 │                   cx="22" cy="22" r="20" 
  88 │                   fill="none" 
  89 │                   stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
  90 │                   strokeWidth="4"
  91 │                 />
  92 │                 <circle 
  93 │                   cx="22" cy="22" r="20" 
  94 │                   fill="none" 
  95 │                   stroke="#FF6B00" 
  96 │                   strokeWidth="4"
  97 │                   strokeDasharray={126}
  98 │                   strokeDashoffset={126 - (progressoTotal / 100) * 126}
  99 │                   transform="rotate(-90 22 22)"
 100 │                   strokeLinecap="round"
 101 │                 />
 102 │               </svg>
 103 │               <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 104 │                 {Math.round(progressoTotal)}%
 105 │               </span>
 106 │             </div>
 107 │           </div>
 108 │         </div>
 109 │       </div>
 110 │ 
 111 │       {/* Conteúdo principal */}
 112 │       <div className="p-5">
 113 │         {/* Mensagem do mentor IA */}
 114 │         <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 115 │           <div className="flex gap-2 items-start">
 116 │             <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 117 │               <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 118 │             </div>
 119 │             <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 120 │               <span className="font-medium">Mentor IA:</span> Concentre-se nos exercícios práticos hoje. Seu desempenho em trigonometria tem mostrado melhorias!
 121 │             </p>
 122 │           </div>
 123 │         </div>
 124 │ 
 125 │         {/* Lista de atividades */}
 126 │         <div className="space-y-2.5">
 127 │           {atividades.map((atividade, index) => (
 128 │             <motion.div 
 129 │               key={atividade.id} 
 130 │               className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 131 │               whileHover={{ y: -2 }}
 132 │               onMouseEnter={() => setHoverIndex(index)}
 133 │               onMouseLeave={() => setHoverIndex(null)}
 134 │             >
 135 │               {/* Indicador de prioridade para tarefas urgentes */}
 136 │               {atividade.urgente && (
 137 │                 <div className="absolute top-0 right-0">
 138 │                   <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 139 │                 </div>
 140 │               )}
 141 │               
 142 │               <div 
 143 │                 className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 144 │                   atividade.concluido 
 145 │                     ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 146 │                     : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 147 │                 }`}
 148 │                 onClick={(e) => {
 149 │                   e.stopPropagation();
 150 │                   toggleAtividade(atividade.id);
 151 │                 }}
 152 │               >
 153 │                 {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 154 │               </div>
 155 │ 
 156 │               <div className="flex-1">
 157 │                 <div className="flex items-start gap-1.5">
 158 │                   <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 159 │                     {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 160 │                     {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 161 │                     {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 162 │                   </div>
 163 │                   <div>
 164 │                     <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 165 │                       {atividade.titulo}
 166 │                     </p>
 167 │                     <div className="flex items-center mt-1.5 gap-3">
 168 │                       <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 169 │                         <Clock className="h-3 w-3" /> {atividade.tempo}
 170 │                       </span>
 171 │                       <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 172 │                         {atividade.prazo}
 173 │                       </span>
 174 │                     </div>
 175 │                   </div>
 176 │                 </div>
 177 │ 
 178 │                 {/* Progress bar for individual activities */}
 179 │                 <div className="mt-2">
 180 │                   <Progress value={atividade.progresso} 
 181 │                     className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 182 │                 </div>
 183 │               </div>
 184 │             </motion.div>
 185 │           ))}
 186 │         </div>
 187 │ 
 188 │         {/* Footer com botão de ação e métricas */}
 189 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center">
 190 │           <div className="flex items-center gap-3">
 191 │             <div className={`p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 192 │               <Trophy className="h-3.5 w-3.5 text-[#FF6B00]" />
 193 │             </div>
 194 │             <div>
 195 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 196 │                 {atividadesConcluidas} de {totalAtividades} atividades
 197 │               </p>
 198 │             </div>
 199 │           </div>
 200 │           
 201 │           <motion.button 
 202 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 203 │             whileHover={{ scale: 1.05 }}
 204 │             whileTap={{ scale: 0.98 }}
 205 │           >
 206 │             Iniciar Foco
 207 │             <ChevronRight className="h-3 w-3" />
 208 │           </motion.button>
 209 │         </div>
 210 │       </div>
 211 │     </motion.div>
 212 │   );
 213 │ }
 214 │ import React, { useState } from "react";
     ·                 ────┬───
     ·                     ╰── `useState` redefined here
 215 │ import { Clock, BookOpen, CheckCircle, ChevronRight, Target, Play } from "lucide-react";
 216 │ import { useTheme } from "@/components/ThemeProvider";
 217 │ import { motion } from "framer-motion";
     ╰────

  × the name `Clock` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:1:1]
   1 │ 
   2 │ import React, { useState } from "react";
   3 │ import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy } from "lucide-react";
     ·                  ──┬──
     ·                    ╰── previous definition of `Clock` here
   4 │ import { useTheme } from "@/components/ThemeProvider";
   5 │ import { motion } from "framer-motion";
   6 │ import { Progress } from "@/components/ui/progress";
   7 │ 
   8 │ export default function FocoDoDiaCard() {
   9 │   const { theme } = useTheme();
  10 │   const isLightMode = theme === "light";
  11 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  12 │ 
  13 │   // Atividades de exemplo - Isso viria de uma API ou do contexto da aplicação
  14 │   const atividades = [
  15 │     {
  16 │       id: 1,
  17 │       titulo: "Assistir Aula 5: Teorema de Pitágoras",
  18 │       tipo: "video",
  19 │       tempo: "30 min",
  20 │       prazo: "Hoje, 18:00",
  21 │       urgente: true,
  22 │       concluido: false,
  23 │       progresso: 0
  24 │     },
  25 │     {
  26 │       id: 2,
  27 │       titulo: "Resolver Lista de Exercícios 2",
  28 │       tipo: "exercicio",
  29 │       tempo: "45 min",
  30 │       prazo: "Hoje",
  31 │       urgente: false,
  32 │       concluido: false,
  33 │       progresso: 0
  34 │     },
  35 │     {
  36 │       id: 3,
  37 │       titulo: "Revisar conteúdo da prova de amanhã",
  38 │       tipo: "revisao",
  39 │       tempo: "60 min",
  40 │       prazo: "Hoje, 22:00",
  41 │       urgente: true,
  42 │       concluido: false,
  43 │       progresso: 0
  44 │     }
  45 │   ];
  46 │ 
  47 │   // Toggle de conclusão de atividade
  48 │   const toggleAtividade = (id) => {
  49 │     // Aqui seria implementada a lógica para marcar/desmarcar atividades como concluídas
  50 │     console.log(`Atividade ${id} alterada`);
  51 │   };
  52 │ 
  53 │   // Calcular progresso total das atividades
  54 │   const totalAtividades = atividades.length;
  55 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
  56 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
  57 │ 
  58 │   return (
  59 │     <motion.div 
  60 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'}`}
  61 │       initial={{ opacity: 0, y: 20 }}
  62 │       animate={{ opacity: 1, y: 0 }}
  63 │       transition={{ duration: 0.5, ease: "easeOut" }}
  64 │     >
  65 │       {/* Header elegante com gradiente */}
  66 │       <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
  67 │         <div className="flex items-center justify-between">
  68 │           <div className="flex items-center gap-3">
  69 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
  70 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
  71 │             </div>
  72 │             <div>
  73 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
  74 │                 Seu Foco Hoje
  75 │               </h3>
  76 │               <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
  77 │                 <span className="font-bold text-[#FF6B00]">Revisão de Trigonometria</span>
  78 │               </p>
  79 │             </div>
  80 │           </div>
  81 │ 
  82 │           {/* Indicador de progresso circular */}
  83 │           <div className="hidden md:flex items-center">
  84 │             <div className="relative h-12 w-12 flex items-center justify-center">
  85 │               <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
  86 │                 <circle 
  87 │                   cx="22" cy="22" r="20" 
  88 │                   fill="none" 
  89 │                   stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
  90 │                   strokeWidth="4"
  91 │                 />
  92 │                 <circle 
  93 │                   cx="22" cy="22" r="20" 
  94 │                   fill="none" 
  95 │                   stroke="#FF6B00" 
  96 │                   strokeWidth="4"
  97 │                   strokeDasharray={126}
  98 │                   strokeDashoffset={126 - (progressoTotal / 100) * 126}
  99 │                   transform="rotate(-90 22 22)"
 100 │                   strokeLinecap="round"
 101 │                 />
 102 │               </svg>
 103 │               <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 104 │                 {Math.round(progressoTotal)}%
 105 │               </span>
 106 │             </div>
 107 │           </div>
 108 │         </div>
 109 │       </div>
 110 │ 
 111 │       {/* Conteúdo principal */}
 112 │       <div className="p-5">
 113 │         {/* Mensagem do mentor IA */}
 114 │         <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 115 │           <div className="flex gap-2 items-start">
 116 │             <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 117 │               <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 118 │             </div>
 119 │             <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 120 │               <span className="font-medium">Mentor IA:</span> Concentre-se nos exercícios práticos hoje. Seu desempenho em trigonometria tem mostrado melhorias!
 121 │             </p>
 122 │           </div>
 123 │         </div>
 124 │ 
 125 │         {/* Lista de atividades */}
 126 │         <div className="space-y-2.5">
 127 │           {atividades.map((atividade, index) => (
 128 │             <motion.div 
 129 │               key={atividade.id} 
 130 │               className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 131 │               whileHover={{ y: -2 }}
 132 │               onMouseEnter={() => setHoverIndex(index)}
 133 │               onMouseLeave={() => setHoverIndex(null)}
 134 │             >
 135 │               {/* Indicador de prioridade para tarefas urgentes */}
 136 │               {atividade.urgente && (
 137 │                 <div className="absolute top-0 right-0">
 138 │                   <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 139 │                 </div>
 140 │               )}
 141 │               
 142 │               <div 
 143 │                 className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 144 │                   atividade.concluido 
 145 │                     ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 146 │                     : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 147 │                 }`}
 148 │                 onClick={(e) => {
 149 │                   e.stopPropagation();
 150 │                   toggleAtividade(atividade.id);
 151 │                 }}
 152 │               >
 153 │                 {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 154 │               </div>
 155 │ 
 156 │               <div className="flex-1">
 157 │                 <div className="flex items-start gap-1.5">
 158 │                   <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 159 │                     {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 160 │                     {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 161 │                     {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 162 │                   </div>
 163 │                   <div>
 164 │                     <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 165 │                       {atividade.titulo}
 166 │                     </p>
 167 │                     <div className="flex items-center mt-1.5 gap-3">
 168 │                       <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 169 │                         <Clock className="h-3 w-3" /> {atividade.tempo}
 170 │                       </span>
 171 │                       <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 172 │                         {atividade.prazo}
 173 │                       </span>
 174 │                     </div>
 175 │                   </div>
 176 │                 </div>
 177 │ 
 178 │                 {/* Progress bar for individual activities */}
 179 │                 <div className="mt-2">
 180 │                   <Progress value={atividade.progresso} 
 181 │                     className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 182 │                 </div>
 183 │               </div>
 184 │             </motion.div>
 185 │           ))}
 186 │         </div>
 187 │ 
 188 │         {/* Footer com botão de ação e métricas */}
 189 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center">
 190 │           <div className="flex items-center gap-3">
 191 │             <div className={`p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 192 │               <Trophy className="h-3.5 w-3.5 text-[#FF6B00]" />
 193 │             </div>
 194 │             <div>
 195 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 196 │                 {atividadesConcluidas} de {totalAtividades} atividades
 197 │               </p>
 198 │             </div>
 199 │           </div>
 200 │           
 201 │           <motion.button 
 202 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 203 │             whileHover={{ scale: 1.05 }}
 204 │             whileTap={{ scale: 0.98 }}
 205 │           >
 206 │             Iniciar Foco
 207 │             <ChevronRight className="h-3 w-3" />
 208 │           </motion.button>
 209 │         </div>
 210 │       </div>
 211 │     </motion.div>
 212 │   );
 213 │ }
 214 │ import React, { useState } from "react";
 215 │ import { Clock, BookOpen, CheckCircle, ChevronRight, Target, Play } from "lucide-react";
     ·          ──┬──
     ·            ╰── `Clock` redefined here
 216 │ import { useTheme } from "@/components/ThemeProvider";
 217 │ import { motion } from "framer-motion";
 218 │ import { Button } from "@/components/ui/button";
     ╰────

  × the name `BookOpen` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:1:1]
   1 │ 
   2 │ import React, { useState } from "react";
   3 │ import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy } from "lucide-react";
     ·                         ────┬───
     ·                             ╰── previous definition of `BookOpen` here
   4 │ import { useTheme } from "@/components/ThemeProvider";
   5 │ import { motion } from "framer-motion";
   6 │ import { Progress } from "@/components/ui/progress";
   7 │ 
   8 │ export default function FocoDoDiaCard() {
   9 │   const { theme } = useTheme();
  10 │   const isLightMode = theme === "light";
  11 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  12 │ 
  13 │   // Atividades de exemplo - Isso viria de uma API ou do contexto da aplicação
  14 │   const atividades = [
  15 │     {
  16 │       id: 1,
  17 │       titulo: "Assistir Aula 5: Teorema de Pitágoras",
  18 │       tipo: "video",
  19 │       tempo: "30 min",
  20 │       prazo: "Hoje, 18:00",
  21 │       urgente: true,
  22 │       concluido: false,
  23 │       progresso: 0
  24 │     },
  25 │     {
  26 │       id: 2,
  27 │       titulo: "Resolver Lista de Exercícios 2",
  28 │       tipo: "exercicio",
  29 │       tempo: "45 min",
  30 │       prazo: "Hoje",
  31 │       urgente: false,
  32 │       concluido: false,
  33 │       progresso: 0
  34 │     },
  35 │     {
  36 │       id: 3,
  37 │       titulo: "Revisar conteúdo da prova de amanhã",
  38 │       tipo: "revisao",
  39 │       tempo: "60 min",
  40 │       prazo: "Hoje, 22:00",
  41 │       urgente: true,
  42 │       concluido: false,
  43 │       progresso: 0
  44 │     }
  45 │   ];
  46 │ 
  47 │   // Toggle de conclusão de atividade
  48 │   const toggleAtividade = (id) => {
  49 │     // Aqui seria implementada a lógica para marcar/desmarcar atividades como concluídas
  50 │     console.log(`Atividade ${id} alterada`);
  51 │   };
  52 │ 
  53 │   // Calcular progresso total das atividades
  54 │   const totalAtividades = atividades.length;
  55 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
  56 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
  57 │ 
  58 │   return (
  59 │     <motion.div 
  60 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'}`}
  61 │       initial={{ opacity: 0, y: 20 }}
  62 │       animate={{ opacity: 1, y: 0 }}
  63 │       transition={{ duration: 0.5, ease: "easeOut" }}
  64 │     >
  65 │       {/* Header elegante com gradiente */}
  66 │       <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
  67 │         <div className="flex items-center justify-between">
  68 │           <div className="flex items-center gap-3">
  69 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
  70 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
  71 │             </div>
  72 │             <div>
  73 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
  74 │                 Seu Foco Hoje
  75 │               </h3>
  76 │               <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
  77 │                 <span className="font-bold text-[#FF6B00]">Revisão de Trigonometria</span>
  78 │               </p>
  79 │             </div>
  80 │           </div>
  81 │ 
  82 │           {/* Indicador de progresso circular */}
  83 │           <div className="hidden md:flex items-center">
  84 │             <div className="relative h-12 w-12 flex items-center justify-center">
  85 │               <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
  86 │                 <circle 
  87 │                   cx="22" cy="22" r="20" 
  88 │                   fill="none" 
  89 │                   stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
  90 │                   strokeWidth="4"
  91 │                 />
  92 │                 <circle 
  93 │                   cx="22" cy="22" r="20" 
  94 │                   fill="none" 
  95 │                   stroke="#FF6B00" 
  96 │                   strokeWidth="4"
  97 │                   strokeDasharray={126}
  98 │                   strokeDashoffset={126 - (progressoTotal / 100) * 126}
  99 │                   transform="rotate(-90 22 22)"
 100 │                   strokeLinecap="round"
 101 │                 />
 102 │               </svg>
 103 │               <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 104 │                 {Math.round(progressoTotal)}%
 105 │               </span>
 106 │             </div>
 107 │           </div>
 108 │         </div>
 109 │       </div>
 110 │ 
 111 │       {/* Conteúdo principal */}
 112 │       <div className="p-5">
 113 │         {/* Mensagem do mentor IA */}
 114 │         <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 115 │           <div className="flex gap-2 items-start">
 116 │             <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 117 │               <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 118 │             </div>
 119 │             <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 120 │               <span className="font-medium">Mentor IA:</span> Concentre-se nos exercícios práticos hoje. Seu desempenho em trigonometria tem mostrado melhorias!
 121 │             </p>
 122 │           </div>
 123 │         </div>
 124 │ 
 125 │         {/* Lista de atividades */}
 126 │         <div className="space-y-2.5">
 127 │           {atividades.map((atividade, index) => (
 128 │             <motion.div 
 129 │               key={atividade.id} 
 130 │               className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 131 │               whileHover={{ y: -2 }}
 132 │               onMouseEnter={() => setHoverIndex(index)}
 133 │               onMouseLeave={() => setHoverIndex(null)}
 134 │             >
 135 │               {/* Indicador de prioridade para tarefas urgentes */}
 136 │               {atividade.urgente && (
 137 │                 <div className="absolute top-0 right-0">
 138 │                   <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 139 │                 </div>
 140 │               )}
 141 │               
 142 │               <div 
 143 │                 className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 144 │                   atividade.concluido 
 145 │                     ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 146 │                     : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 147 │                 }`}
 148 │                 onClick={(e) => {
 149 │                   e.stopPropagation();
 150 │                   toggleAtividade(atividade.id);
 151 │                 }}
 152 │               >
 153 │                 {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 154 │               </div>
 155 │ 
 156 │               <div className="flex-1">
 157 │                 <div className="flex items-start gap-1.5">
 158 │                   <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 159 │                     {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 160 │                     {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 161 │                     {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 162 │                   </div>
 163 │                   <div>
 164 │                     <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 165 │                       {atividade.titulo}
 166 │                     </p>
 167 │                     <div className="flex items-center mt-1.5 gap-3">
 168 │                       <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 169 │                         <Clock className="h-3 w-3" /> {atividade.tempo}
 170 │                       </span>
 171 │                       <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 172 │                         {atividade.prazo}
 173 │                       </span>
 174 │                     </div>
 175 │                   </div>
 176 │                 </div>
 177 │ 
 178 │                 {/* Progress bar for individual activities */}
 179 │                 <div className="mt-2">
 180 │                   <Progress value={atividade.progresso} 
 181 │                     className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 182 │                 </div>
 183 │               </div>
 184 │             </motion.div>
 185 │           ))}
 186 │         </div>
 187 │ 
 188 │         {/* Footer com botão de ação e métricas */}
 189 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center">
 190 │           <div className="flex items-center gap-3">
 191 │             <div className={`p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 192 │               <Trophy className="h-3.5 w-3.5 text-[#FF6B00]" />
 193 │             </div>
 194 │             <div>
 195 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 196 │                 {atividadesConcluidas} de {totalAtividades} atividades
 197 │               </p>
 198 │             </div>
 199 │           </div>
 200 │           
 201 │           <motion.button 
 202 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 203 │             whileHover={{ scale: 1.05 }}
 204 │             whileTap={{ scale: 0.98 }}
 205 │           >
 206 │             Iniciar Foco
 207 │             <ChevronRight className="h-3 w-3" />
 208 │           </motion.button>
 209 │         </div>
 210 │       </div>
 211 │     </motion.div>
 212 │   );
 213 │ }
 214 │ import React, { useState } from "react";
 215 │ import { Clock, BookOpen, CheckCircle, ChevronRight, Target, Play } from "lucide-react";
     ·                 ────┬───
     ·                     ╰── `BookOpen` redefined here
 216 │ import { useTheme } from "@/components/ThemeProvider";
 217 │ import { motion } from "framer-motion";
 218 │ import { Button } from "@/components/ui/button";
     ╰────

  × the name `ChevronRight` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:1:1]
   1 │ 
   2 │ import React, { useState } from "react";
   3 │ import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy } from "lucide-react";
     ·                                                ──────┬─────
     ·                                                      ╰── previous definition of `ChevronRight` here
   4 │ import { useTheme } from "@/components/ThemeProvider";
   5 │ import { motion } from "framer-motion";
   6 │ import { Progress } from "@/components/ui/progress";
   7 │ 
   8 │ export default function FocoDoDiaCard() {
   9 │   const { theme } = useTheme();
  10 │   const isLightMode = theme === "light";
  11 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  12 │ 
  13 │   // Atividades de exemplo - Isso viria de uma API ou do contexto da aplicação
  14 │   const atividades = [
  15 │     {
  16 │       id: 1,
  17 │       titulo: "Assistir Aula 5: Teorema de Pitágoras",
  18 │       tipo: "video",
  19 │       tempo: "30 min",
  20 │       prazo: "Hoje, 18:00",
  21 │       urgente: true,
  22 │       concluido: false,
  23 │       progresso: 0
  24 │     },
  25 │     {
  26 │       id: 2,
  27 │       titulo: "Resolver Lista de Exercícios 2",
  28 │       tipo: "exercicio",
  29 │       tempo: "45 min",
  30 │       prazo: "Hoje",
  31 │       urgente: false,
  32 │       concluido: false,
  33 │       progresso: 0
  34 │     },
  35 │     {
  36 │       id: 3,
  37 │       titulo: "Revisar conteúdo da prova de amanhã",
  38 │       tipo: "revisao",
  39 │       tempo: "60 min",
  40 │       prazo: "Hoje, 22:00",
  41 │       urgente: true,
  42 │       concluido: false,
  43 │       progresso: 0
  44 │     }
  45 │   ];
  46 │ 
  47 │   // Toggle de conclusão de atividade
  48 │   const toggleAtividade = (id) => {
  49 │     // Aqui seria implementada a lógica para marcar/desmarcar atividades como concluídas
  50 │     console.log(`Atividade ${id} alterada`);
  51 │   };
  52 │ 
  53 │   // Calcular progresso total das atividades
  54 │   const totalAtividades = atividades.length;
  55 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
  56 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
  57 │ 
  58 │   return (
  59 │     <motion.div 
  60 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'}`}
  61 │       initial={{ opacity: 0, y: 20 }}
  62 │       animate={{ opacity: 1, y: 0 }}
  63 │       transition={{ duration: 0.5, ease: "easeOut" }}
  64 │     >
  65 │       {/* Header elegante com gradiente */}
  66 │       <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
  67 │         <div className="flex items-center justify-between">
  68 │           <div className="flex items-center gap-3">
  69 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
  70 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
  71 │             </div>
  72 │             <div>
  73 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
  74 │                 Seu Foco Hoje
  75 │               </h3>
  76 │               <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
  77 │                 <span className="font-bold text-[#FF6B00]">Revisão de Trigonometria</span>
  78 │               </p>
  79 │             </div>
  80 │           </div>
  81 │ 
  82 │           {/* Indicador de progresso circular */}
  83 │           <div className="hidden md:flex items-center">
  84 │             <div className="relative h-12 w-12 flex items-center justify-center">
  85 │               <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
  86 │                 <circle 
  87 │                   cx="22" cy="22" r="20" 
  88 │                   fill="none" 
  89 │                   stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
  90 │                   strokeWidth="4"
  91 │                 />
  92 │                 <circle 
  93 │                   cx="22" cy="22" r="20" 
  94 │                   fill="none" 
  95 │                   stroke="#FF6B00" 
  96 │                   strokeWidth="4"
  97 │                   strokeDasharray={126}
  98 │                   strokeDashoffset={126 - (progressoTotal / 100) * 126}
  99 │                   transform="rotate(-90 22 22)"
 100 │                   strokeLinecap="round"
 101 │                 />
 102 │               </svg>
 103 │               <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 104 │                 {Math.round(progressoTotal)}%
 105 │               </span>
 106 │             </div>
 107 │           </div>
 108 │         </div>
 109 │       </div>
 110 │ 
 111 │       {/* Conteúdo principal */}
 112 │       <div className="p-5">
 113 │         {/* Mensagem do mentor IA */}
 114 │         <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 115 │           <div className="flex gap-2 items-start">
 116 │             <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 117 │               <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 118 │             </div>
 119 │             <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 120 │               <span className="font-medium">Mentor IA:</span> Concentre-se nos exercícios práticos hoje. Seu desempenho em trigonometria tem mostrado melhorias!
 121 │             </p>
 122 │           </div>
 123 │         </div>
 124 │ 
 125 │         {/* Lista de atividades */}
 126 │         <div className="space-y-2.5">
 127 │           {atividades.map((atividade, index) => (
 128 │             <motion.div 
 129 │               key={atividade.id} 
 130 │               className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 131 │               whileHover={{ y: -2 }}
 132 │               onMouseEnter={() => setHoverIndex(index)}
 133 │               onMouseLeave={() => setHoverIndex(null)}
 134 │             >
 135 │               {/* Indicador de prioridade para tarefas urgentes */}
 136 │               {atividade.urgente && (
 137 │                 <div className="absolute top-0 right-0">
 138 │                   <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 139 │                 </div>
 140 │               )}
 141 │               
 142 │               <div 
 143 │                 className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 144 │                   atividade.concluido 
 145 │                     ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 146 │                     : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 147 │                 }`}
 148 │                 onClick={(e) => {
 149 │                   e.stopPropagation();
 150 │                   toggleAtividade(atividade.id);
 151 │                 }}
 152 │               >
 153 │                 {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 154 │               </div>
 155 │ 
 156 │               <div className="flex-1">
 157 │                 <div className="flex items-start gap-1.5">
 158 │                   <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 159 │                     {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 160 │                     {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 161 │                     {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 162 │                   </div>
 163 │                   <div>
 164 │                     <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 165 │                       {atividade.titulo}
 166 │                     </p>
 167 │                     <div className="flex items-center mt-1.5 gap-3">
 168 │                       <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 169 │                         <Clock className="h-3 w-3" /> {atividade.tempo}
 170 │                       </span>
 171 │                       <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 172 │                         {atividade.prazo}
 173 │                       </span>
 174 │                     </div>
 175 │                   </div>
 176 │                 </div>
 177 │ 
 178 │                 {/* Progress bar for individual activities */}
 179 │                 <div className="mt-2">
 180 │                   <Progress value={atividade.progresso} 
 181 │                     className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 182 │                 </div>
 183 │               </div>
 184 │             </motion.div>
 185 │           ))}
 186 │         </div>
 187 │ 
 188 │         {/* Footer com botão de ação e métricas */}
 189 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center">
 190 │           <div className="flex items-center gap-3">
 191 │             <div className={`p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 192 │               <Trophy className="h-3.5 w-3.5 text-[#FF6B00]" />
 193 │             </div>
 194 │             <div>
 195 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 196 │                 {atividadesConcluidas} de {totalAtividades} atividades
 197 │               </p>
 198 │             </div>
 199 │           </div>
 200 │           
 201 │           <motion.button 
 202 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 203 │             whileHover={{ scale: 1.05 }}
 204 │             whileTap={{ scale: 0.98 }}
 205 │           >
 206 │             Iniciar Foco
 207 │             <ChevronRight className="h-3 w-3" />
 208 │           </motion.button>
 209 │         </div>
 210 │       </div>
 211 │     </motion.div>
 212 │   );
 213 │ }
 214 │ import React, { useState } from "react";
 215 │ import { Clock, BookOpen, CheckCircle, ChevronRight, Target, Play } from "lucide-react";
     ·                                        ──────┬─────
     ·                                              ╰── `ChevronRight` redefined here
 216 │ import { useTheme } from "@/components/ThemeProvider";
 217 │ import { motion } from "framer-motion";
 218 │ import { Button } from "@/components/ui/button";
     ╰────

  × the name `Target` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:1:1]
   1 │ 
   2 │ import React, { useState } from "react";
   3 │ import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy } from "lucide-react";
     ·          ───┬──
     ·             ╰── previous definition of `Target` here
   4 │ import { useTheme } from "@/components/ThemeProvider";
   5 │ import { motion } from "framer-motion";
   6 │ import { Progress } from "@/components/ui/progress";
   7 │ 
   8 │ export default function FocoDoDiaCard() {
   9 │   const { theme } = useTheme();
  10 │   const isLightMode = theme === "light";
  11 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  12 │ 
  13 │   // Atividades de exemplo - Isso viria de uma API ou do contexto da aplicação
  14 │   const atividades = [
  15 │     {
  16 │       id: 1,
  17 │       titulo: "Assistir Aula 5: Teorema de Pitágoras",
  18 │       tipo: "video",
  19 │       tempo: "30 min",
  20 │       prazo: "Hoje, 18:00",
  21 │       urgente: true,
  22 │       concluido: false,
  23 │       progresso: 0
  24 │     },
  25 │     {
  26 │       id: 2,
  27 │       titulo: "Resolver Lista de Exercícios 2",
  28 │       tipo: "exercicio",
  29 │       tempo: "45 min",
  30 │       prazo: "Hoje",
  31 │       urgente: false,
  32 │       concluido: false,
  33 │       progresso: 0
  34 │     },
  35 │     {
  36 │       id: 3,
  37 │       titulo: "Revisar conteúdo da prova de amanhã",
  38 │       tipo: "revisao",
  39 │       tempo: "60 min",
  40 │       prazo: "Hoje, 22:00",
  41 │       urgente: true,
  42 │       concluido: false,
  43 │       progresso: 0
  44 │     }
  45 │   ];
  46 │ 
  47 │   // Toggle de conclusão de atividade
  48 │   const toggleAtividade = (id) => {
  49 │     // Aqui seria implementada a lógica para marcar/desmarcar atividades como concluídas
  50 │     console.log(`Atividade ${id} alterada`);
  51 │   };
  52 │ 
  53 │   // Calcular progresso total das atividades
  54 │   const totalAtividades = atividades.length;
  55 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
  56 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
  57 │ 
  58 │   return (
  59 │     <motion.div 
  60 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'}`}
  61 │       initial={{ opacity: 0, y: 20 }}
  62 │       animate={{ opacity: 1, y: 0 }}
  63 │       transition={{ duration: 0.5, ease: "easeOut" }}
  64 │     >
  65 │       {/* Header elegante com gradiente */}
  66 │       <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
  67 │         <div className="flex items-center justify-between">
  68 │           <div className="flex items-center gap-3">
  69 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
  70 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
  71 │             </div>
  72 │             <div>
  73 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
  74 │                 Seu Foco Hoje
  75 │               </h3>
  76 │               <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
  77 │                 <span className="font-bold text-[#FF6B00]">Revisão de Trigonometria</span>
  78 │               </p>
  79 │             </div>
  80 │           </div>
  81 │ 
  82 │           {/* Indicador de progresso circular */}
  83 │           <div className="hidden md:flex items-center">
  84 │             <div className="relative h-12 w-12 flex items-center justify-center">
  85 │               <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
  86 │                 <circle 
  87 │                   cx="22" cy="22" r="20" 
  88 │                   fill="none" 
  89 │                   stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
  90 │                   strokeWidth="4"
  91 │                 />
  92 │                 <circle 
  93 │                   cx="22" cy="22" r="20" 
  94 │                   fill="none" 
  95 │                   stroke="#FF6B00" 
  96 │                   strokeWidth="4"
  97 │                   strokeDasharray={126}
  98 │                   strokeDashoffset={126 - (progressoTotal / 100) * 126}
  99 │                   transform="rotate(-90 22 22)"
 100 │                   strokeLinecap="round"
 101 │                 />
 102 │               </svg>
 103 │               <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 104 │                 {Math.round(progressoTotal)}%
 105 │               </span>
 106 │             </div>
 107 │           </div>
 108 │         </div>
 109 │       </div>
 110 │ 
 111 │       {/* Conteúdo principal */}
 112 │       <div className="p-5">
 113 │         {/* Mensagem do mentor IA */}
 114 │         <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 115 │           <div className="flex gap-2 items-start">
 116 │             <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 117 │               <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 118 │             </div>
 119 │             <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 120 │               <span className="font-medium">Mentor IA:</span> Concentre-se nos exercícios práticos hoje. Seu desempenho em trigonometria tem mostrado melhorias!
 121 │             </p>
 122 │           </div>
 123 │         </div>
 124 │ 
 125 │         {/* Lista de atividades */}
 126 │         <div className="space-y-2.5">
 127 │           {atividades.map((atividade, index) => (
 128 │             <motion.div 
 129 │               key={atividade.id} 
 130 │               className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 131 │               whileHover={{ y: -2 }}
 132 │               onMouseEnter={() => setHoverIndex(index)}
 133 │               onMouseLeave={() => setHoverIndex(null)}
 134 │             >
 135 │               {/* Indicador de prioridade para tarefas urgentes */}
 136 │               {atividade.urgente && (
 137 │                 <div className="absolute top-0 right-0">
 138 │                   <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 139 │                 </div>
 140 │               )}
 141 │               
 142 │               <div 
 143 │                 className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 144 │                   atividade.concluido 
 145 │                     ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 146 │                     : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 147 │                 }`}
 148 │                 onClick={(e) => {
 149 │                   e.stopPropagation();
 150 │                   toggleAtividade(atividade.id);
 151 │                 }}
 152 │               >
 153 │                 {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 154 │               </div>
 155 │ 
 156 │               <div className="flex-1">
 157 │                 <div className="flex items-start gap-1.5">
 158 │                   <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 159 │                     {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 160 │                     {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 161 │                     {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 162 │                   </div>
 163 │                   <div>
 164 │                     <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 165 │                       {atividade.titulo}
 166 │                     </p>
 167 │                     <div className="flex items-center mt-1.5 gap-3">
 168 │                       <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 169 │                         <Clock className="h-3 w-3" /> {atividade.tempo}
 170 │                       </span>
 171 │                       <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 172 │                         {atividade.prazo}
 173 │                       </span>
 174 │                     </div>
 175 │                   </div>
 176 │                 </div>
 177 │ 
 178 │                 {/* Progress bar for individual activities */}
 179 │                 <div className="mt-2">
 180 │                   <Progress value={atividade.progresso} 
 181 │                     className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 182 │                 </div>
 183 │               </div>
 184 │             </motion.div>
 185 │           ))}
 186 │         </div>
 187 │ 
 188 │         {/* Footer com botão de ação e métricas */}
 189 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center">
 190 │           <div className="flex items-center gap-3">
 191 │             <div className={`p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 192 │               <Trophy className="h-3.5 w-3.5 text-[#FF6B00]" />
 193 │             </div>
 194 │             <div>
 195 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 196 │                 {atividadesConcluidas} de {totalAtividades} atividades
 197 │               </p>
 198 │             </div>
 199 │           </div>
 200 │           
 201 │           <motion.button 
 202 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 203 │             whileHover={{ scale: 1.05 }}
 204 │             whileTap={{ scale: 0.98 }}
 205 │           >
 206 │             Iniciar Foco
 207 │             <ChevronRight className="h-3 w-3" />
 208 │           </motion.button>
 209 │         </div>
 210 │       </div>
 211 │     </motion.div>
 212 │   );
 213 │ }
 214 │ import React, { useState } from "react";
 215 │ import { Clock, BookOpen, CheckCircle, ChevronRight, Target, Play } from "lucide-react";
     ·                                                      ───┬──
     ·                                                         ╰── `Target` redefined here
 216 │ import { useTheme } from "@/components/ThemeProvider";
 217 │ import { motion } from "framer-motion";
 218 │ import { Button } from "@/components/ui/button";
     ╰────

  × the name `Play` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:1:1]
   1 │ 
   2 │ import React, { useState } from "react";
   3 │ import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy } from "lucide-react";
     ·                                   ──┬─
     ·                                     ╰── previous definition of `Play` here
   4 │ import { useTheme } from "@/components/ThemeProvider";
   5 │ import { motion } from "framer-motion";
   6 │ import { Progress } from "@/components/ui/progress";
   7 │ 
   8 │ export default function FocoDoDiaCard() {
   9 │   const { theme } = useTheme();
  10 │   const isLightMode = theme === "light";
  11 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  12 │ 
  13 │   // Atividades de exemplo - Isso viria de uma API ou do contexto da aplicação
  14 │   const atividades = [
  15 │     {
  16 │       id: 1,
  17 │       titulo: "Assistir Aula 5: Teorema de Pitágoras",
  18 │       tipo: "video",
  19 │       tempo: "30 min",
  20 │       prazo: "Hoje, 18:00",
  21 │       urgente: true,
  22 │       concluido: false,
  23 │       progresso: 0
  24 │     },
  25 │     {
  26 │       id: 2,
  27 │       titulo: "Resolver Lista de Exercícios 2",
  28 │       tipo: "exercicio",
  29 │       tempo: "45 min",
  30 │       prazo: "Hoje",
  31 │       urgente: false,
  32 │       concluido: false,
  33 │       progresso: 0
  34 │     },
  35 │     {
  36 │       id: 3,
  37 │       titulo: "Revisar conteúdo da prova de amanhã",
  38 │       tipo: "revisao",
  39 │       tempo: "60 min",
  40 │       prazo: "Hoje, 22:00",
  41 │       urgente: true,
  42 │       concluido: false,
  43 │       progresso: 0
  44 │     }
  45 │   ];
  46 │ 
  47 │   // Toggle de conclusão de atividade
  48 │   const toggleAtividade = (id) => {
  49 │     // Aqui seria implementada a lógica para marcar/desmarcar atividades como concluídas
  50 │     console.log(`Atividade ${id} alterada`);
  51 │   };
  52 │ 
  53 │   // Calcular progresso total das atividades
  54 │   const totalAtividades = atividades.length;
  55 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
  56 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
  57 │ 
  58 │   return (
  59 │     <motion.div 
  60 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'}`}
  61 │       initial={{ opacity: 0, y: 20 }}
  62 │       animate={{ opacity: 1, y: 0 }}
  63 │       transition={{ duration: 0.5, ease: "easeOut" }}
  64 │     >
  65 │       {/* Header elegante com gradiente */}
  66 │       <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
  67 │         <div className="flex items-center justify-between">
  68 │           <div className="flex items-center gap-3">
  69 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
  70 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
  71 │             </div>
  72 │             <div>
  73 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
  74 │                 Seu Foco Hoje
  75 │               </h3>
  76 │               <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
  77 │                 <span className="font-bold text-[#FF6B00]">Revisão de Trigonometria</span>
  78 │               </p>
  79 │             </div>
  80 │           </div>
  81 │ 
  82 │           {/* Indicador de progresso circular */}
  83 │           <div className="hidden md:flex items-center">
  84 │             <div className="relative h-12 w-12 flex items-center justify-center">
  85 │               <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
  86 │                 <circle 
  87 │                   cx="22" cy="22" r="20" 
  88 │                   fill="none" 
  89 │                   stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
  90 │                   strokeWidth="4"
  91 │                 />
  92 │                 <circle 
  93 │                   cx="22" cy="22" r="20" 
  94 │                   fill="none" 
  95 │                   stroke="#FF6B00" 
  96 │                   strokeWidth="4"
  97 │                   strokeDasharray={126}
  98 │                   strokeDashoffset={126 - (progressoTotal / 100) * 126}
  99 │                   transform="rotate(-90 22 22)"
 100 │                   strokeLinecap="round"
 101 │                 />
 102 │               </svg>
 103 │               <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 104 │                 {Math.round(progressoTotal)}%
 105 │               </span>
 106 │             </div>
 107 │           </div>
 108 │         </div>
 109 │       </div>
 110 │ 
 111 │       {/* Conteúdo principal */}
 112 │       <div className="p-5">
 113 │         {/* Mensagem do mentor IA */}
 114 │         <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 115 │           <div className="flex gap-2 items-start">
 116 │             <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 117 │               <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 118 │             </div>
 119 │             <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 120 │               <span className="font-medium">Mentor IA:</span> Concentre-se nos exercícios práticos hoje. Seu desempenho em trigonometria tem mostrado melhorias!
 121 │             </p>
 122 │           </div>
 123 │         </div>
 124 │ 
 125 │         {/* Lista de atividades */}
 126 │         <div className="space-y-2.5">
 127 │           {atividades.map((atividade, index) => (
 128 │             <motion.div 
 129 │               key={atividade.id} 
 130 │               className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 131 │               whileHover={{ y: -2 }}
 132 │               onMouseEnter={() => setHoverIndex(index)}
 133 │               onMouseLeave={() => setHoverIndex(null)}
 134 │             >
 135 │               {/* Indicador de prioridade para tarefas urgentes */}
 136 │               {atividade.urgente && (
 137 │                 <div className="absolute top-0 right-0">
 138 │                   <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 139 │                 </div>
 140 │               )}
 141 │               
 142 │               <div 
 143 │                 className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 144 │                   atividade.concluido 
 145 │                     ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 146 │                     : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 147 │                 }`}
 148 │                 onClick={(e) => {
 149 │                   e.stopPropagation();
 150 │                   toggleAtividade(atividade.id);
 151 │                 }}
 152 │               >
 153 │                 {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 154 │               </div>
 155 │ 
 156 │               <div className="flex-1">
 157 │                 <div className="flex items-start gap-1.5">
 158 │                   <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 159 │                     {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 160 │                     {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 161 │                     {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 162 │                   </div>
 163 │                   <div>
 164 │                     <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 165 │                       {atividade.titulo}
 166 │                     </p>
 167 │                     <div className="flex items-center mt-1.5 gap-3">
 168 │                       <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 169 │                         <Clock className="h-3 w-3" /> {atividade.tempo}
 170 │                       </span>
 171 │                       <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 172 │                         {atividade.prazo}
 173 │                       </span>
 174 │                     </div>
 175 │                   </div>
 176 │                 </div>
 177 │ 
 178 │                 {/* Progress bar for individual activities */}
 179 │                 <div className="mt-2">
 180 │                   <Progress value={atividade.progresso} 
 181 │                     className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 182 │                 </div>
 183 │               </div>
 184 │             </motion.div>
 185 │           ))}
 186 │         </div>
 187 │ 
 188 │         {/* Footer com botão de ação e métricas */}
 189 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center">
 190 │           <div className="flex items-center gap-3">
 191 │             <div className={`p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 192 │               <Trophy className="h-3.5 w-3.5 text-[#FF6B00]" />
 193 │             </div>
 194 │             <div>
 195 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 196 │                 {atividadesConcluidas} de {totalAtividades} atividades
 197 │               </p>
 198 │             </div>
 199 │           </div>
 200 │           
 201 │           <motion.button 
 202 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 203 │             whileHover={{ scale: 1.05 }}
 204 │             whileTap={{ scale: 0.98 }}
 205 │           >
 206 │             Iniciar Foco
 207 │             <ChevronRight className="h-3 w-3" />
 208 │           </motion.button>
 209 │         </div>
 210 │       </div>
 211 │     </motion.div>
 212 │   );
 213 │ }
 214 │ import React, { useState } from "react";
 215 │ import { Clock, BookOpen, CheckCircle, ChevronRight, Target, Play } from "lucide-react";
     ·                                                              ──┬─
     ·                                                                ╰── `Play` redefined here
 216 │ import { useTheme } from "@/components/ThemeProvider";
 217 │ import { motion } from "framer-motion";
 218 │ import { Button } from "@/components/ui/button";
     ╰────

  × the name `useTheme` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:1:1]
   1 │ 
   2 │ import React, { useState } from "react";
   3 │ import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy } from "lucide-react";
   4 │ import { useTheme } from "@/components/ThemeProvider";
     ·          ────┬───
     ·              ╰── previous definition of `useTheme` here
   5 │ import { motion } from "framer-motion";
   6 │ import { Progress } from "@/components/ui/progress";
   7 │ 
   8 │ export default function FocoDoDiaCard() {
   9 │   const { theme } = useTheme();
  10 │   const isLightMode = theme === "light";
  11 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  12 │ 
  13 │   // Atividades de exemplo - Isso viria de uma API ou do contexto da aplicação
  14 │   const atividades = [
  15 │     {
  16 │       id: 1,
  17 │       titulo: "Assistir Aula 5: Teorema de Pitágoras",
  18 │       tipo: "video",
  19 │       tempo: "30 min",
  20 │       prazo: "Hoje, 18:00",
  21 │       urgente: true,
  22 │       concluido: false,
  23 │       progresso: 0
  24 │     },
  25 │     {
  26 │       id: 2,
  27 │       titulo: "Resolver Lista de Exercícios 2",
  28 │       tipo: "exercicio",
  29 │       tempo: "45 min",
  30 │       prazo: "Hoje",
  31 │       urgente: false,
  32 │       concluido: false,
  33 │       progresso: 0
  34 │     },
  35 │     {
  36 │       id: 3,
  37 │       titulo: "Revisar conteúdo da prova de amanhã",
  38 │       tipo: "revisao",
  39 │       tempo: "60 min",
  40 │       prazo: "Hoje, 22:00",
  41 │       urgente: true,
  42 │       concluido: false,
  43 │       progresso: 0
  44 │     }
  45 │   ];
  46 │ 
  47 │   // Toggle de conclusão de atividade
  48 │   const toggleAtividade = (id) => {
  49 │     // Aqui seria implementada a lógica para marcar/desmarcar atividades como concluídas
  50 │     console.log(`Atividade ${id} alterada`);
  51 │   };
  52 │ 
  53 │   // Calcular progresso total das atividades
  54 │   const totalAtividades = atividades.length;
  55 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
  56 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
  57 │ 
  58 │   return (
  59 │     <motion.div 
  60 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'}`}
  61 │       initial={{ opacity: 0, y: 20 }}
  62 │       animate={{ opacity: 1, y: 0 }}
  63 │       transition={{ duration: 0.5, ease: "easeOut" }}
  64 │     >
  65 │       {/* Header elegante com gradiente */}
  66 │       <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
  67 │         <div className="flex items-center justify-between">
  68 │           <div className="flex items-center gap-3">
  69 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
  70 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
  71 │             </div>
  72 │             <div>
  73 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
  74 │                 Seu Foco Hoje
  75 │               </h3>
  76 │               <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
  77 │                 <span className="font-bold text-[#FF6B00]">Revisão de Trigonometria</span>
  78 │               </p>
  79 │             </div>
  80 │           </div>
  81 │ 
  82 │           {/* Indicador de progresso circular */}
  83 │           <div className="hidden md:flex items-center">
  84 │             <div className="relative h-12 w-12 flex items-center justify-center">
  85 │               <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
  86 │                 <circle 
  87 │                   cx="22" cy="22" r="20" 
  88 │                   fill="none" 
  89 │                   stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
  90 │                   strokeWidth="4"
  91 │                 />
  92 │                 <circle 
  93 │                   cx="22" cy="22" r="20" 
  94 │                   fill="none" 
  95 │                   stroke="#FF6B00" 
  96 │                   strokeWidth="4"
  97 │                   strokeDasharray={126}
  98 │                   strokeDashoffset={126 - (progressoTotal / 100) * 126}
  99 │                   transform="rotate(-90 22 22)"
 100 │                   strokeLinecap="round"
 101 │                 />
 102 │               </svg>
 103 │               <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 104 │                 {Math.round(progressoTotal)}%
 105 │               </span>
 106 │             </div>
 107 │           </div>
 108 │         </div>
 109 │       </div>
 110 │ 
 111 │       {/* Conteúdo principal */}
 112 │       <div className="p-5">
 113 │         {/* Mensagem do mentor IA */}
 114 │         <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 115 │           <div className="flex gap-2 items-start">
 116 │             <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 117 │               <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 118 │             </div>
 119 │             <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 120 │               <span className="font-medium">Mentor IA:</span> Concentre-se nos exercícios práticos hoje. Seu desempenho em trigonometria tem mostrado melhorias!
 121 │             </p>
 122 │           </div>
 123 │         </div>
 124 │ 
 125 │         {/* Lista de atividades */}
 126 │         <div className="space-y-2.5">
 127 │           {atividades.map((atividade, index) => (
 128 │             <motion.div 
 129 │               key={atividade.id} 
 130 │               className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 131 │               whileHover={{ y: -2 }}
 132 │               onMouseEnter={() => setHoverIndex(index)}
 133 │               onMouseLeave={() => setHoverIndex(null)}
 134 │             >
 135 │               {/* Indicador de prioridade para tarefas urgentes */}
 136 │               {atividade.urgente && (
 137 │                 <div className="absolute top-0 right-0">
 138 │                   <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 139 │                 </div>
 140 │               )}
 141 │               
 142 │               <div 
 143 │                 className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 144 │                   atividade.concluido 
 145 │                     ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 146 │                     : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 147 │                 }`}
 148 │                 onClick={(e) => {
 149 │                   e.stopPropagation();
 150 │                   toggleAtividade(atividade.id);
 151 │                 }}
 152 │               >
 153 │                 {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 154 │               </div>
 155 │ 
 156 │               <div className="flex-1">
 157 │                 <div className="flex items-start gap-1.5">
 158 │                   <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 159 │                     {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 160 │                     {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 161 │                     {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 162 │                   </div>
 163 │                   <div>
 164 │                     <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 165 │                       {atividade.titulo}
 166 │                     </p>
 167 │                     <div className="flex items-center mt-1.5 gap-3">
 168 │                       <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 169 │                         <Clock className="h-3 w-3" /> {atividade.tempo}
 170 │                       </span>
 171 │                       <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 172 │                         {atividade.prazo}
 173 │                       </span>
 174 │                     </div>
 175 │                   </div>
 176 │                 </div>
 177 │ 
 178 │                 {/* Progress bar for individual activities */}
 179 │                 <div className="mt-2">
 180 │                   <Progress value={atividade.progresso} 
 181 │                     className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 182 │                 </div>
 183 │               </div>
 184 │             </motion.div>
 185 │           ))}
 186 │         </div>
 187 │ 
 188 │         {/* Footer com botão de ação e métricas */}
 189 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center">
 190 │           <div className="flex items-center gap-3">
 191 │             <div className={`p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 192 │               <Trophy className="h-3.5 w-3.5 text-[#FF6B00]" />
 193 │             </div>
 194 │             <div>
 195 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 196 │                 {atividadesConcluidas} de {totalAtividades} atividades
 197 │               </p>
 198 │             </div>
 199 │           </div>
 200 │           
 201 │           <motion.button 
 202 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 203 │             whileHover={{ scale: 1.05 }}
 204 │             whileTap={{ scale: 0.98 }}
 205 │           >
 206 │             Iniciar Foco
 207 │             <ChevronRight className="h-3 w-3" />
 208 │           </motion.button>
 209 │         </div>
 210 │       </div>
 211 │     </motion.div>
 212 │   );
 213 │ }
 214 │ import React, { useState } from "react";
 215 │ import { Clock, BookOpen, CheckCircle, ChevronRight, Target, Play } from "lucide-react";
 216 │ import { useTheme } from "@/components/ThemeProvider";
     ·          ────┬───
     ·              ╰── `useTheme` redefined here
 217 │ import { motion } from "framer-motion";
 218 │ import { Button } from "@/components/ui/button";
 219 │ import { Badge } from "@/components/ui/badge";
     ╰────

  × the name `motion` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:2:1]
   2 │ import React, { useState } from "react";
   3 │ import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy } from "lucide-react";
   4 │ import { useTheme } from "@/components/ThemeProvider";
   5 │ import { motion } from "framer-motion";
     ·          ───┬──
     ·             ╰── previous definition of `motion` here
   6 │ import { Progress } from "@/components/ui/progress";
   7 │ 
   8 │ export default function FocoDoDiaCard() {
   9 │   const { theme } = useTheme();
  10 │   const isLightMode = theme === "light";
  11 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  12 │ 
  13 │   // Atividades de exemplo - Isso viria de uma API ou do contexto da aplicação
  14 │   const atividades = [
  15 │     {
  16 │       id: 1,
  17 │       titulo: "Assistir Aula 5: Teorema de Pitágoras",
  18 │       tipo: "video",
  19 │       tempo: "30 min",
  20 │       prazo: "Hoje, 18:00",
  21 │       urgente: true,
  22 │       concluido: false,
  23 │       progresso: 0
  24 │     },
  25 │     {
  26 │       id: 2,
  27 │       titulo: "Resolver Lista de Exercícios 2",
  28 │       tipo: "exercicio",
  29 │       tempo: "45 min",
  30 │       prazo: "Hoje",
  31 │       urgente: false,
  32 │       concluido: false,
  33 │       progresso: 0
  34 │     },
  35 │     {
  36 │       id: 3,
  37 │       titulo: "Revisar conteúdo da prova de amanhã",
  38 │       tipo: "revisao",
  39 │       tempo: "60 min",
  40 │       prazo: "Hoje, 22:00",
  41 │       urgente: true,
  42 │       concluido: false,
  43 │       progresso: 0
  44 │     }
  45 │   ];
  46 │ 
  47 │   // Toggle de conclusão de atividade
  48 │   const toggleAtividade = (id) => {
  49 │     // Aqui seria implementada a lógica para marcar/desmarcar atividades como concluídas
  50 │     console.log(`Atividade ${id} alterada`);
  51 │   };
  52 │ 
  53 │   // Calcular progresso total das atividades
  54 │   const totalAtividades = atividades.length;
  55 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
  56 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
  57 │ 
  58 │   return (
  59 │     <motion.div 
  60 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'}`}
  61 │       initial={{ opacity: 0, y: 20 }}
  62 │       animate={{ opacity: 1, y: 0 }}
  63 │       transition={{ duration: 0.5, ease: "easeOut" }}
  64 │     >
  65 │       {/* Header elegante com gradiente */}
  66 │       <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
  67 │         <div className="flex items-center justify-between">
  68 │           <div className="flex items-center gap-3">
  69 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
  70 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
  71 │             </div>
  72 │             <div>
  73 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
  74 │                 Seu Foco Hoje
  75 │               </h3>
  76 │               <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
  77 │                 <span className="font-bold text-[#FF6B00]">Revisão de Trigonometria</span>
  78 │               </p>
  79 │             </div>
  80 │           </div>
  81 │ 
  82 │           {/* Indicador de progresso circular */}
  83 │           <div className="hidden md:flex items-center">
  84 │             <div className="relative h-12 w-12 flex items-center justify-center">
  85 │               <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
  86 │                 <circle 
  87 │                   cx="22" cy="22" r="20" 
  88 │                   fill="none" 
  89 │                   stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
  90 │                   strokeWidth="4"
  91 │                 />
  92 │                 <circle 
  93 │                   cx="22" cy="22" r="20" 
  94 │                   fill="none" 
  95 │                   stroke="#FF6B00" 
  96 │                   strokeWidth="4"
  97 │                   strokeDasharray={126}
  98 │                   strokeDashoffset={126 - (progressoTotal / 100) * 126}
  99 │                   transform="rotate(-90 22 22)"
 100 │                   strokeLinecap="round"
 101 │                 />
 102 │               </svg>
 103 │               <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 104 │                 {Math.round(progressoTotal)}%
 105 │               </span>
 106 │             </div>
 107 │           </div>
 108 │         </div>
 109 │       </div>
 110 │ 
 111 │       {/* Conteúdo principal */}
 112 │       <div className="p-5">
 113 │         {/* Mensagem do mentor IA */}
 114 │         <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 115 │           <div className="flex gap-2 items-start">
 116 │             <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 117 │               <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 118 │             </div>
 119 │             <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 120 │               <span className="font-medium">Mentor IA:</span> Concentre-se nos exercícios práticos hoje. Seu desempenho em trigonometria tem mostrado melhorias!
 121 │             </p>
 122 │           </div>
 123 │         </div>
 124 │ 
 125 │         {/* Lista de atividades */}
 126 │         <div className="space-y-2.5">
 127 │           {atividades.map((atividade, index) => (
 128 │             <motion.div 
 129 │               key={atividade.id} 
 130 │               className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 131 │               whileHover={{ y: -2 }}
 132 │               onMouseEnter={() => setHoverIndex(index)}
 133 │               onMouseLeave={() => setHoverIndex(null)}
 134 │             >
 135 │               {/* Indicador de prioridade para tarefas urgentes */}
 136 │               {atividade.urgente && (
 137 │                 <div className="absolute top-0 right-0">
 138 │                   <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 139 │                 </div>
 140 │               )}
 141 │               
 142 │               <div 
 143 │                 className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 144 │                   atividade.concluido 
 145 │                     ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 146 │                     : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 147 │                 }`}
 148 │                 onClick={(e) => {
 149 │                   e.stopPropagation();
 150 │                   toggleAtividade(atividade.id);
 151 │                 }}
 152 │               >
 153 │                 {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 154 │               </div>
 155 │ 
 156 │               <div className="flex-1">
 157 │                 <div className="flex items-start gap-1.5">
 158 │                   <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 159 │                     {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 160 │                     {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 161 │                     {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 162 │                   </div>
 163 │                   <div>
 164 │                     <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 165 │                       {atividade.titulo}
 166 │                     </p>
 167 │                     <div className="flex items-center mt-1.5 gap-3">
 168 │                       <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 169 │                         <Clock className="h-3 w-3" /> {atividade.tempo}
 170 │                       </span>
 171 │                       <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 172 │                         {atividade.prazo}
 173 │                       </span>
 174 │                     </div>
 175 │                   </div>
 176 │                 </div>
 177 │ 
 178 │                 {/* Progress bar for individual activities */}
 179 │                 <div className="mt-2">
 180 │                   <Progress value={atividade.progresso} 
 181 │                     className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 182 │                 </div>
 183 │               </div>
 184 │             </motion.div>
 185 │           ))}
 186 │         </div>
 187 │ 
 188 │         {/* Footer com botão de ação e métricas */}
 189 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center">
 190 │           <div className="flex items-center gap-3">
 191 │             <div className={`p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 192 │               <Trophy className="h-3.5 w-3.5 text-[#FF6B00]" />
 193 │             </div>
 194 │             <div>
 195 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 196 │                 {atividadesConcluidas} de {totalAtividades} atividades
 197 │               </p>
 198 │             </div>
 199 │           </div>
 200 │           
 201 │           <motion.button 
 202 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 203 │             whileHover={{ scale: 1.05 }}
 204 │             whileTap={{ scale: 0.98 }}
 205 │           >
 206 │             Iniciar Foco
 207 │             <ChevronRight className="h-3 w-3" />
 208 │           </motion.button>
 209 │         </div>
 210 │       </div>
 211 │     </motion.div>
 212 │   );
 213 │ }
 214 │ import React, { useState } from "react";
 215 │ import { Clock, BookOpen, CheckCircle, ChevronRight, Target, Play } from "lucide-react";
 216 │ import { useTheme } from "@/components/ThemeProvider";
 217 │ import { motion } from "framer-motion";
     ·          ───┬──
     ·             ╰── `motion` redefined here
 218 │ import { Button } from "@/components/ui/button";
 219 │ import { Badge } from "@/components/ui/badge";
     ╰────

  × the name `FocoDoDiaCard` is defined multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:5:1]
   5 │ import { motion } from "framer-motion";
   6 │ import { Progress } from "@/components/ui/progress";
   7 │ 
   8 │ export default function FocoDoDiaCard() {
     ·                         ──────┬──────
     ·                               ╰── previous definition of `FocoDoDiaCard` here
   9 │   const { theme } = useTheme();
  10 │   const isLightMode = theme === "light";
  11 │   const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  12 │ 
  13 │   // Atividades de exemplo - Isso viria de uma API ou do contexto da aplicação
  14 │   const atividades = [
  15 │     {
  16 │       id: 1,
  17 │       titulo: "Assistir Aula 5: Teorema de Pitágoras",
  18 │       tipo: "video",
  19 │       tempo: "30 min",
  20 │       prazo: "Hoje, 18:00",
  21 │       urgente: true,
  22 │       concluido: false,
  23 │       progresso: 0
  24 │     },
  25 │     {
  26 │       id: 2,
  27 │       titulo: "Resolver Lista de Exercícios 2",
  28 │       tipo: "exercicio",
  29 │       tempo: "45 min",
  30 │       prazo: "Hoje",
  31 │       urgente: false,
  32 │       concluido: false,
  33 │       progresso: 0
  34 │     },
  35 │     {
  36 │       id: 3,
  37 │       titulo: "Revisar conteúdo da prova de amanhã",
  38 │       tipo: "revisao",
  39 │       tempo: "60 min",
  40 │       prazo: "Hoje, 22:00",
  41 │       urgente: true,
  42 │       concluido: false,
  43 │       progresso: 0
  44 │     }
  45 │   ];
  46 │ 
  47 │   // Toggle de conclusão de atividade
  48 │   const toggleAtividade = (id) => {
  49 │     // Aqui seria implementada a lógica para marcar/desmarcar atividades como concluídas
  50 │     console.log(`Atividade ${id} alterada`);
  51 │   };
  52 │ 
  53 │   // Calcular progresso total das atividades
  54 │   const totalAtividades = atividades.length;
  55 │   const atividadesConcluidas = atividades.filter(a => a.concluido).length;
  56 │   const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
  57 │ 
  58 │   return (
  59 │     <motion.div 
  60 │       className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'}`}
  61 │       initial={{ opacity: 0, y: 20 }}
  62 │       animate={{ opacity: 1, y: 0 }}
  63 │       transition={{ duration: 0.5, ease: "easeOut" }}
  64 │     >
  65 │       {/* Header elegante com gradiente */}
  66 │       <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
  67 │         <div className="flex items-center justify-between">
  68 │           <div className="flex items-center gap-3">
  69 │             <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
  70 │               <Flame className={`h-5 w-5 text-[#FF6B00]`} />
  71 │             </div>
  72 │             <div>
  73 │               <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
  74 │                 Seu Foco Hoje
  75 │               </h3>
  76 │               <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
  77 │                 <span className="font-bold text-[#FF6B00]">Revisão de Trigonometria</span>
  78 │               </p>
  79 │             </div>
  80 │           </div>
  81 │ 
  82 │           {/* Indicador de progresso circular */}
  83 │           <div className="hidden md:flex items-center">
  84 │             <div className="relative h-12 w-12 flex items-center justify-center">
  85 │               <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
  86 │                 <circle 
  87 │                   cx="22" cy="22" r="20" 
  88 │                   fill="none" 
  89 │                   stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
  90 │                   strokeWidth="4"
  91 │                 />
  92 │                 <circle 
  93 │                   cx="22" cy="22" r="20" 
  94 │                   fill="none" 
  95 │                   stroke="#FF6B00" 
  96 │                   strokeWidth="4"
  97 │                   strokeDasharray={126}
  98 │                   strokeDashoffset={126 - (progressoTotal / 100) * 126}
  99 │                   transform="rotate(-90 22 22)"
 100 │                   strokeLinecap="round"
 101 │                 />
 102 │               </svg>
 103 │               <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 104 │                 {Math.round(progressoTotal)}%
 105 │               </span>
 106 │             </div>
 107 │           </div>
 108 │         </div>
 109 │       </div>
 110 │ 
 111 │       {/* Conteúdo principal */}
 112 │       <div className="p-5">
 113 │         {/* Mensagem do mentor IA */}
 114 │         <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 115 │           <div className="flex gap-2 items-start">
 116 │             <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 117 │               <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 118 │             </div>
 119 │             <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 120 │               <span className="font-medium">Mentor IA:</span> Concentre-se nos exercícios práticos hoje. Seu desempenho em trigonometria tem mostrado melhorias!
 121 │             </p>
 122 │           </div>
 123 │         </div>
 124 │ 
 125 │         {/* Lista de atividades */}
 126 │         <div className="space-y-2.5">
 127 │           {atividades.map((atividade, index) => (
 128 │             <motion.div 
 129 │               key={atividade.id} 
 130 │               className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 131 │               whileHover={{ y: -2 }}
 132 │               onMouseEnter={() => setHoverIndex(index)}
 133 │               onMouseLeave={() => setHoverIndex(null)}
 134 │             >
 135 │               {/* Indicador de prioridade para tarefas urgentes */}
 136 │               {atividade.urgente && (
 137 │                 <div className="absolute top-0 right-0">
 138 │                   <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 139 │                 </div>
 140 │               )}
 141 │               
 142 │               <div 
 143 │                 className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 144 │                   atividade.concluido 
 145 │                     ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 146 │                     : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 147 │                 }`}
 148 │                 onClick={(e) => {
 149 │                   e.stopPropagation();
 150 │                   toggleAtividade(atividade.id);
 151 │                 }}
 152 │               >
 153 │                 {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 154 │               </div>
 155 │ 
 156 │               <div className="flex-1">
 157 │                 <div className="flex items-start gap-1.5">
 158 │                   <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 159 │                     {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 160 │                     {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 161 │                     {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 162 │                   </div>
 163 │                   <div>
 164 │                     <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 165 │                       {atividade.titulo}
 166 │                     </p>
 167 │                     <div className="flex items-center mt-1.5 gap-3">
 168 │                       <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 169 │                         <Clock className="h-3 w-3" /> {atividade.tempo}
 170 │                       </span>
 171 │                       <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 172 │                         {atividade.prazo}
 173 │                       </span>
 174 │                     </div>
 175 │                   </div>
 176 │                 </div>
 177 │ 
 178 │                 {/* Progress bar for individual activities */}
 179 │                 <div className="mt-2">
 180 │                   <Progress value={atividade.progresso} 
 181 │                     className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 182 │                 </div>
 183 │               </div>
 184 │             </motion.div>
 185 │           ))}
 186 │         </div>
 187 │ 
 188 │         {/* Footer com botão de ação e métricas */}
 189 │         <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center">
 190 │           <div className="flex items-center gap-3">
 191 │             <div className={`p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 192 │               <Trophy className="h-3.5 w-3.5 text-[#FF6B00]" />
 193 │             </div>
 194 │             <div>
 195 │               <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 196 │                 {atividadesConcluidas} de {totalAtividades} atividades
 197 │               </p>
 198 │             </div>
 199 │           </div>
 200 │           
 201 │           <motion.button 
 202 │             className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 203 │             whileHover={{ scale: 1.05 }}
 204 │             whileTap={{ scale: 0.98 }}
 205 │           >
 206 │             Iniciar Foco
 207 │             <ChevronRight className="h-3 w-3" />
 208 │           </motion.button>
 209 │         </div>
 210 │       </div>
 211 │     </motion.div>
 212 │   );
 213 │ }
 214 │ import React, { useState } from "react";
 215 │ import { Clock, BookOpen, CheckCircle, ChevronRight, Target, Play } from "lucide-react";
 216 │ import { useTheme } from "@/components/ThemeProvider";
 217 │ import { motion } from "framer-motion";
 218 │ import { Button } from "@/components/ui/button";
 219 │ import { Badge } from "@/components/ui/badge";
 220 │ 
 221 │ export default function FocoDoDiaCard() {
     ·                         ──────┬──────
     ·                               ╰── `FocoDoDiaCard` redefined here
 222 │   const { theme } = useTheme();
 223 │   const isLightMode = theme === "light";
 224 │   
     ╰────

  × the name `default` is exported multiple times
     ╭─[/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:5:1]
   5 │     import { motion } from "framer-motion";
   6 │     import { Progress } from "@/components/ui/progress";
   7 │     
   8 │ ╭─▶ export default function FocoDoDiaCard() {
   9 │ │     const { theme } = useTheme();
  10 │ │     const isLightMode = theme === "light";
  11 │ │     const [hoverIndex, setHoverIndex] = useState<number | null>(null);
  12 │ │   
  13 │ │     // Atividades de exemplo - Isso viria de uma API ou do contexto da aplicação
  14 │ │     const atividades = [
  15 │ │       {
  16 │ │         id: 1,
  17 │ │         titulo: "Assistir Aula 5: Teorema de Pitágoras",
  18 │ │         tipo: "video",
  19 │ │         tempo: "30 min",
  20 │ │         prazo: "Hoje, 18:00",
  21 │ │         urgente: true,
  22 │ │         concluido: false,
  23 │ │         progresso: 0
  24 │ │       },
  25 │ │       {
  26 │ │         id: 2,
  27 │ │         titulo: "Resolver Lista de Exercícios 2",
  28 │ │         tipo: "exercicio",
  29 │ │         tempo: "45 min",
  30 │ │         prazo: "Hoje",
  31 │ │         urgente: false,
  32 │ │         concluido: false,
  33 │ │         progresso: 0
  34 │ │       },
  35 │ │       {
  36 │ │         id: 3,
  37 │ │         titulo: "Revisar conteúdo da prova de amanhã",
  38 │ │         tipo: "revisao",
  39 │ │         tempo: "60 min",
  40 │ │         prazo: "Hoje, 22:00",
  41 │ │         urgente: true,
  42 │ │         concluido: false,
  43 │ │         progresso: 0
  44 │ │       }
  45 │ │     ];
  46 │ │   
  47 │ │     // Toggle de conclusão de atividade
  48 │ │     const toggleAtividade = (id) => {
  49 │ │       // Aqui seria implementada a lógica para marcar/desmarcar atividades como concluídas
  50 │ │       console.log(`Atividade ${id} alterada`);
  51 │ │     };
  52 │ │   
  53 │ │     // Calcular progresso total das atividades
  54 │ │     const totalAtividades = atividades.length;
  55 │ │     const atividadesConcluidas = atividades.filter(a => a.concluido).length;
  56 │ │     const progressoTotal = totalAtividades > 0 ? (atividadesConcluidas / totalAtividades) * 100 : 0;
  57 │ │   
  58 │ │     return (
  59 │ │       <motion.div 
  60 │ │         className={`rounded-xl overflow-hidden ${isLightMode ? 'bg-white' : 'bg-gradient-to-br from-[#001e3a] to-[#00162b]'} shadow-lg ${isLightMode ? 'border border-gray-200' : 'border border-white/10'}`}
  61 │ │         initial={{ opacity: 0, y: 20 }}
  62 │ │         animate={{ opacity: 1, y: 0 }}
  63 │ │         transition={{ duration: 0.5, ease: "easeOut" }}
  64 │ │       >
  65 │ │         {/* Header elegante com gradiente */}
  66 │ │         <div className={`p-5 ${isLightMode ? 'bg-gradient-to-r from-orange-50 to-orange-100/50' : 'bg-gradient-to-r from-[#0A2540]/80 to-[#001427]'} border-b ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
  67 │ │           <div className="flex items-center justify-between">
  68 │ │             <div className="flex items-center gap-3">
  69 │ │               <div className={`p-2.5 rounded-lg flex items-center justify-center ${isLightMode ? 'bg-white shadow-sm border border-orange-200' : 'bg-[#FF6B00]/10 border border-[#FF6B00]/30'}`}>
  70 │ │                 <Flame className={`h-5 w-5 text-[#FF6B00]`} />
  71 │ │               </div>
  72 │ │               <div>
  73 │ │                 <h3 className={`font-semibold text-lg ${isLightMode ? 'text-gray-800' : 'text-white'}`}>
  74 │ │                   Seu Foco Hoje
  75 │ │                 </h3>
  76 │ │                 <p className={`text-sm ${isLightMode ? 'text-gray-500' : 'text-gray-300'}`}>
  77 │ │                   <span className="font-bold text-[#FF6B00]">Revisão de Trigonometria</span>
  78 │ │                 </p>
  79 │ │               </div>
  80 │ │             </div>
  81 │ │   
  82 │ │             {/* Indicador de progresso circular */}
  83 │ │             <div className="hidden md:flex items-center">
  84 │ │               <div className="relative h-12 w-12 flex items-center justify-center">
  85 │ │                 <svg className="absolute h-12 w-12" viewBox="0 0 44 44">
  86 │ │                   <circle 
  87 │ │                     cx="22" cy="22" r="20" 
  88 │ │                     fill="none" 
  89 │ │                     stroke={isLightMode ? "#f3f4f6" : "#1e293b"} 
  90 │ │                     strokeWidth="4"
  91 │ │                   />
  92 │ │                   <circle 
  93 │ │                     cx="22" cy="22" r="20" 
  94 │ │                     fill="none" 
  95 │ │                     stroke="#FF6B00" 
  96 │ │                     strokeWidth="4"
  97 │ │                     strokeDasharray={126}
  98 │ │                     strokeDashoffset={126 - (progressoTotal / 100) * 126}
  99 │ │                     transform="rotate(-90 22 22)"
 100 │ │                     strokeLinecap="round"
 101 │ │                   />
 102 │ │                 </svg>
 103 │ │                 <span className={`font-bold text-sm ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 104 │ │                   {Math.round(progressoTotal)}%
 105 │ │                 </span>
 106 │ │               </div>
 107 │ │             </div>
 108 │ │           </div>
 109 │ │         </div>
 110 │ │   
 111 │ │         {/* Conteúdo principal */}
 112 │ │         <div className="p-5">
 113 │ │           {/* Mensagem do mentor IA */}
 114 │ │           <div className={`mb-4 p-3 rounded-lg ${isLightMode ? 'bg-orange-50' : 'bg-[#FF6B00]/5'} border ${isLightMode ? 'border-orange-100' : 'border-[#FF6B00]/20'}`}>
 115 │ │             <div className="flex gap-2 items-start">
 116 │ │               <div className={`mt-0.5 p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 117 │ │                 <Target className="h-3.5 w-3.5 text-[#FF6B00]" />
 118 │ │               </div>
 119 │ │               <p className={`text-xs ${isLightMode ? 'text-gray-600' : 'text-gray-300'}`}>
 120 │ │                 <span className="font-medium">Mentor IA:</span> Concentre-se nos exercícios práticos hoje. Seu desempenho em trigonometria tem mostrado melhorias!
 121 │ │               </p>
 122 │ │             </div>
 123 │ │           </div>
 124 │ │   
 125 │ │           {/* Lista de atividades */}
 126 │ │           <div className="space-y-2.5">
 127 │ │             {atividades.map((atividade, index) => (
 128 │ │               <motion.div 
 129 │ │                 key={atividade.id} 
 130 │ │                 className={`relative group flex items-start p-3 rounded-lg border ${isLightMode ? 'border-gray-100 hover:border-orange-200' : 'border-gray-700/30 hover:border-[#FF6B00]/30'} ${isLightMode ? 'hover:bg-orange-50/50' : 'hover:bg-[#FF6B00]/5'} transition-all cursor-pointer`}
 131 │ │                 whileHover={{ y: -2 }}
 132 │ │                 onMouseEnter={() => setHoverIndex(index)}
 133 │ │                 onMouseLeave={() => setHoverIndex(null)}
 134 │ │               >
 135 │ │                 {/* Indicador de prioridade para tarefas urgentes */}
 136 │ │                 {atividade.urgente && (
 137 │ │                   <div className="absolute top-0 right-0">
 138 │ │                     <div className={`w-2 h-2 rounded-full ${isLightMode ? 'bg-red-500' : 'bg-red-400'} animate-pulse mr-1 mt-1`}></div>
 139 │ │                   </div>
 140 │ │                 )}
 141 │ │                 
 142 │ │                 <div 
 143 │ │                   className={`h-5 w-5 rounded-full flex items-center justify-center mr-3 border ${
 144 │ │                     atividade.concluido 
 145 │ │                       ? (isLightMode ? 'bg-[#FF6B00] border-[#FF6B00]' : 'bg-[#FF6B00] border-[#FF6B00]') 
 146 │ │                       : (isLightMode ? 'border-gray-300 bg-white' : 'border-gray-600 bg-transparent')
 147 │ │                   }`}
 148 │ │                   onClick={(e) => {
 149 │ │                     e.stopPropagation();
 150 │ │                     toggleAtividade(atividade.id);
 151 │ │                   }}
 152 │ │                 >
 153 │ │                   {atividade.concluido && <Check className="h-3 w-3 text-white" />}
 154 │ │                 </div>
 155 │ │   
 156 │ │                 <div className="flex-1">
 157 │ │                   <div className="flex items-start gap-1.5">
 158 │ │                     <div className={`p-1 rounded mt-0.5 ${isLightMode ? 'bg-gray-100' : 'bg-gray-700/30'}`}>
 159 │ │                       {atividade.tipo === 'video' && <Play className="h-3 w-3 text-blue-500" />}
 160 │ │                       {atividade.tipo === 'exercicio' && <BookOpen className="h-3 w-3 text-green-500" />}
 161 │ │                       {atividade.tipo === 'revisao' && <Clock className="h-3 w-3 text-[#FF6B00]" />}
 162 │ │                     </div>
 163 │ │                     <div>
 164 │ │                       <p className={`text-sm font-medium ${isLightMode ? 'text-gray-700' : 'text-gray-200'}`}>
 165 │ │                         {atividade.titulo}
 166 │ │                       </p>
 167 │ │                       <div className="flex items-center mt-1.5 gap-3">
 168 │ │                         <span className={`text-xs flex items-center gap-1 ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 169 │ │                           <Clock className="h-3 w-3" /> {atividade.tempo}
 170 │ │                         </span>
 171 │ │                         <span className={`text-xs ${atividade.urgente ? (isLightMode ? 'text-red-600 font-medium' : 'text-red-400 font-medium') : (isLightMode ? 'text-gray-500' : 'text-gray-400')}`}>
 172 │ │                           {atividade.prazo}
 173 │ │                         </span>
 174 │ │                       </div>
 175 │ │                     </div>
 176 │ │                   </div>
 177 │ │   
 178 │ │                   {/* Progress bar for individual activities */}
 179 │ │                   <div className="mt-2">
 180 │ │                     <Progress value={atividade.progresso} 
 181 │ │                       className={`h-1 ${atividade.progresso > 0 ? "opacity-100" : "opacity-0"} ${hoverIndex === index ? "opacity-100" : ""} transition-opacity`} />
 182 │ │                   </div>
 183 │ │                 </div>
 184 │ │               </motion.div>
 185 │ │             ))}
 186 │ │           </div>
 187 │ │   
 188 │ │           {/* Footer com botão de ação e métricas */}
 189 │ │           <div className="mt-5 pt-4 border-t border-gray-100 dark:border-gray-700/30 flex justify-between items-center">
 190 │ │             <div className="flex items-center gap-3">
 191 │ │               <div className={`p-1.5 rounded-md ${isLightMode ? 'bg-orange-100' : 'bg-[#FF6B00]/20'}`}>
 192 │ │                 <Trophy className="h-3.5 w-3.5 text-[#FF6B00]" />
 193 │ │               </div>
 194 │ │               <div>
 195 │ │                 <p className={`text-xs ${isLightMode ? 'text-gray-500' : 'text-gray-400'}`}>
 196 │ │                   {atividadesConcluidas} de {totalAtividades} atividades
 197 │ │                 </p>
 198 │ │               </div>
 199 │ │             </div>
 200 │ │             
 201 │ │             <motion.button 
 202 │ │               className={`rounded-lg px-4 py-2 text-xs font-medium bg-gradient-to-r from-[#FF6B00] to-[#FF8C40] text-white shadow-sm hover:shadow-md transition-all flex items-center gap-1.5 ${isLightMode ? '' : 'border border-[#FF6B00]/40'}`}
 203 │ │               whileHover={{ scale: 1.05 }}
 204 │ │               whileTap={{ scale: 0.98 }}
 205 │ │             >
 206 │ │               Iniciar Foco
 207 │ │               <ChevronRight className="h-3 w-3" />
 208 │ │             </motion.button>
 209 │ │           </div>
 210 │ │         </div>
 211 │ │       </motion.div>
 212 │ │     );
 213 │ ├─▶ }
     · ╰──── previous exported here
 214 │     import React, { useState } from "react";
 215 │     import { Clock, BookOpen, CheckCircle, ChevronRight, Target, Play } from "lucide-react";
 216 │     import { useTheme } from "@/components/ThemeProvider";
 217 │     import { motion } from "framer-motion";
 218 │     import { Button } from "@/components/ui/button";
 219 │     import { Badge } from "@/components/ui/badge";
 220 │     
 221 │ ╭─▶ export default function FocoDoDiaCard() {
 222 │ │     const { theme } = useTheme();
 223 │ │     const isLightMode = theme === "light";
 224 │ │     
 225 │ │     // Estado para armazenar atividades - inicialmente vazio para novos usuários
 226 │ │     const [atividades, setAtividades] = useState<Array<{
 227 │ │       id: number;
 228 │ │       titulo: string;
 229 │ │       tipo: "video" | "exercicio" | "revisao" | "outro";
 230 │ │       tempo: string;
 231 │ │       prazo?: string;
 232 │ │       horario?: string;
 233 │ │       urgente: boolean;
 234 │ │       concluido: boolean;
 235 │ │     }>>([]);
 236 │ │     
 237 │ │     // Estado para controlar o progresso
 238 │ │     const [progresso, setProgresso] = useState(0);
 239 │ │     
 240 │ │     // Toggle para marcar como concluído
 241 │ │     const toggleAtividade = (id: number) => {
 242 │ │       setAtividades(atividades.map(atividade => 
 243 │ │         atividade.id === id ? { ...atividade, concluido: !atividade.concluido } : atividade
 244 │ │       ));
 245 │ │       
 246 │ │       // Recalcular progresso
 247 │ │       const total = atividades.length;
 248 │ │       if (total === 0) return;
 249 │ │       
 250 │ │       const concluidas = atividades.filter(a => a.concluido).length + 
 251 │ │         (atividades.find(a => a.id === id)?.concluido ? -1 : 1);
 252 │ │       
 253 │ │       setProgresso(Math.round((concluidas / total) * 100));
 254 │ │     };
 255 │ │     
 256 │ │     // Estado para mensagem do mentor
 257 │ │     const [mentorMessage, setMentorMessage] = useState("");
 258 │ │     
 259 │ │     // Estado para o foco atual
 260 │ │     const [focoAtual, setFocoAtual] = useState("");
 261 │ │   
 262 │ │     // Renderizar o ícone adequado com base no tipo de atividade
 263 │ │     const renderIconByType = (tipo: string) => {
 264 │ │       switch (tipo) {
 265 │ │         case 'video':
 266 │ │           return <Play className="h-4 w-4 text-blue-400" />;
 267 │ │         case 'exercicio':
 268 │ │           return <BookOpen className="h-4 w-4 text-green-400" />;
 269 │ │         case 'revisao':
 270 │ │           return <Target className="h-4 w-4 text-[#FF6B00]" />;
 271 │ │         default:
 272 │ │           return <ChevronRight className="h-4 w-4 text-gray-400" />;
 273 │ │       }
 274 │ │     };
 275 │ │   
 276 │ │     return (
 277 │ │       <motion.div 
 278 │ │         whileHover={{ scale: 1.01 }}
 279 │ │         transition={{ duration: 0.2 }}
 280 │ │         className="h-full w-full rounded-xl overflow-hidden border border-[#0D2238]/30 dark:border-[#0D2238]/50 shadow-xl bg-white dark:bg-[#001427] relative flex flex-col"
 281 │ │       >
 282 │ │         {/* Header com o título do foco atual */}
 283 │ │         <div className="bg-gradient-to-r from-[#001427] to-[#002140] p-4 flex justify-between items-center shadow-md">
 284 │ │           <div className="flex items-center gap-3">
 285 │ │             <div className="p-2 rounded-lg flex items-center justify-center bg-[#FF6B00]/20 border border-[#FF6B00]/30">
 286 │ │               <Target className="h-5 w-5 text-[#FF6B00]" />
 287 │ │             </div>
 288 │ │             <div>
 289 │ │               <h3 className="text-white font-semibold text-lg flex items-center">
 290 │ │                 Seu Foco Hoje
 291 │ │               </h3>
 292 │ │               {focoAtual ? (
 293 │ │                 <p className="text-[#FF6B00] text-sm font-medium">{focoAtual}</p>
 294 │ │               ) : (
 295 │ │                 <p className="text-gray-300 text-sm italic">Ainda não definido</p>
 296 │ │               )}
 297 │ │             </div>
 298 │ │           </div>
 299 │ │           
 300 │ │           {/* Progresso do dia */}
 301 │ │           <Badge variant="outline" className="bg-[#001427]/80 text-white border-[#FF6B00]/30">
 302 │ │             {progresso}%
 303 │ │           </Badge>
 304 │ │         </div>
 305 │ │         
 306 │ │         {/* Mensagem do Mentor IA - só aparece quando houver mensagem */}
 307 │ │         {mentorMessage && (
 308 │ │           <div className="p-3 bg-gradient-to-r from-[#001F3D]/30 to-[#001F3D]/10 border-b border-[#0D2238]/30 dark:border-[#0D2238]/20">
 309 │ │             <div className="flex items-start gap-2">
 310 │ │               <div className="flex-shrink-0 mt-1">
 311 │ │                 <div className="w-6 h-6 rounded-full bg-[#FF6B00]/20 border border-[#FF6B00]/30 flex items-center justify-center">
 312 │ │                   <span className="text-[#FF6B00] text-xs font-medium">IA</span>
 313 │ │                 </div>
 314 │ │               </div>
 315 │ │               <p className="text-sm text-gray-600 dark:text-gray-300">
 316 │ │                 {mentorMessage}
 317 │ │               </p>
 318 │ │             </div>
 319 │ │           </div>
 320 │ │         )}
 321 │ │         
 322 │ │         {/* Lista de atividades */}
 323 │ │         <div className="flex-1 overflow-auto">
 324 │ │           {atividades.length > 0 ? (
 325 │ │             atividades.map((atividade) => (
 326 │ │               <div 
 327 │ │                 key={atividade.id}
 328 │ │                 className={`p-3 border-b border-gray-100 dark:border-[#0D2238]/20 flex items-center gap-3 ${
 329 │ │                   atividade.concluido 
 330 │ │                     ? 'bg-green-50/50 dark:bg-green-900/10' 
 331 │ │                     : atividade.urgente 
 332 │ │                       ? 'bg-red-50/30 dark:bg-red-900/5' 
 333 │ │                       : ''
 334 │ │                 }`}
 335 │ │               >
 336 │ │                 {/* Checkbox para marcar como concluído */}
 337 │ │                 <div 
 338 │ │                   onClick={() => toggleAtividade(atividade.id)}
 339 │ │                   className={`w-5 h-5 rounded-full flex-shrink-0 cursor-pointer flex items-center justify-center ${
 340 │ │                     atividade.concluido 
 341 │ │                       ? 'bg-green-500 text-white' 
 342 │ │                       : 'border-2 border-gray-300 dark:border-gray-600'
 343 │ │                   }`}
 344 │ │                 >
 345 │ │                   {atividade.concluido && <CheckCircle className="h-4 w-4" />}
 346 │ │                 </div>
 347 │ │                 
 348 │ │                 {/* Ícone do tipo de atividade */}
 349 │ │                 {renderIconByType(atividade.tipo)}
 350 │ │                 
 351 │ │                 {/* Informações da atividade */}
 352 │ │                 <div className="flex-1">
 353 │ │                   <h4 className={`text-sm font-medium ${
 354 │ │                     isLightMode ? 'text-gray-800' : 'text-white'
 355 │ │                   } ${atividade.concluido ? 'line-through opacity-70' : ''}`}>
 356 │ │                     {atividade.titulo}
 357 │ │                   </h4>
 358 │ │                   <div className="flex items-center gap-3 mt-1">
 359 │ │                     <span className="text-xs text-gray-500 dark:text-gray-400 flex items-center">
 360 │ │                       <Clock className="h-3 w-3 mr-1" /> {atividade.tempo}
 361 │ │                     </span>
 362 │ │                     
 363 │ │                     {atividade.prazo && atividade.horario && (
 364 │ │                       <span className={`text-xs ${
 365 │ │                         atividade.urgente 
 366 │ │                           ? 'text-red-500 dark:text-red-400 font-medium' 
 367 │ │                           : 'text-gray-500 dark:text-gray-400'
 368 │ │                       }`}>
 369 │ │                         {atividade.prazo}, {atividade.horario}
 370 │ │                       </span>
 371 │ │                     )}
 372 │ │                     
 373 │ │                     {atividade.prazo && !atividade.horario && (
 374 │ │                       <span className="text-xs text-gray-500 dark:text-gray-400">
 375 │ │                         {atividade.prazo}
 376 │ │                       </span>
 377 │ │                     )}
 378 │ │                   </div>
 379 │ │                 </div>
 380 │ │                 
 381 │ │                 {/* Indicador de urgência */}
 382 │ │                 {atividade.urgente && !atividade.concluido && (
 383 │ │                   <div className="w-2 h-2 rounded-full bg-red-500 flex-shrink-0"></div>
 384 │ │                 )}
 385 │ │               </div>
 386 │ │             ))
 387 │ │           ) : (
 388 │ │             // Estado vazio para novos usuários
 389 │ │             <div className="flex flex-col items-center justify-center h-full p-8 text-center">
 390 │ │               <div className="w-12 h-12 rounded-full bg-[#001F3D]/10 dark:bg-[#0D2238]/20 flex items-center justify-center mb-4">
 391 │ │                 <Target className="h-6 w-6 text-[#FF6B00]/70" />
 392 │ │               </div>
 393 │ │               <h4 className={`text-base font-medium mb-2 ${isLightMode ? 'text-gray-700' : 'text-white'}`}>
 394 │ │                 Ainda não há atividades
 395 │ │               </h4>
 396 │ │               <p className="text-sm text-gray-500 dark:text-gray-400 max-w-xs mb-4">
 397 │ │                 Suas atividades prioritárias aparecerão aqui à medida que você utiliza a plataforma.
 398 │ │               </p>
 399 │ │             </div>
 400 │ │           )}
 401 │ │         </div>
 402 │ │         
 403 │ │         {/* Footer com contador e botão de iniciar */}
 404 │ │         <div className="p-3 border-t border-gray-100 dark:border-[#0D2238]/30 flex items-center justify-between">
 405 │ │           <div className="flex items-center">
 406 │ │             <CheckCircle className="h-4 w-4 text-[#FF6B00] mr-1.5" />
 407 │ │             <span className="text-xs text-gray-600 dark:text-gray-300">
 408 │ │               {atividades.filter(a => a.concluido).length} de {atividades.length} atividades
 409 │ │             </span>
 410 │ │           </div>
 411 │ │           
 412 │ │           <Button 
 413 │ │             className="bg-[#FF6B00] hover:bg-[#FF8736] text-white rounded-lg px-4 py-1.5 text-xs font-medium flex items-center"
 414 │ │             onClick={() => {
 415 │ │               // Aqui entrará a lógica para definir ou iniciar o foco
 416 │ │             }}
 417 │ │           >
 418 │ │             Iniciar Foco <ChevronRight className="h-3.5 w-3.5 ml-1" />
 419 │ │           </Button>
 420 │ │         </div>
 421 │ │       </motion.div>
 422 │ │     );
 423 │ ├─▶ }
     · ╰──── exported more than once
     ╰────

Error: 
  ☞ Exported identifiers must be unique
/home/runner/workspace/src/components/dashboard/gradeinterfaceprincipal/FocoDoDiaCard.tsx:1:1
1  |  
2  |  import React, { useState } from "react";
   |  ^
3  |  import { Target, Clock, BookOpen, Play, Check, ChevronRight, Flame, Trophy } from "lucide-react";
4  |  import { useTheme } from "@/components/ThemeProvider";