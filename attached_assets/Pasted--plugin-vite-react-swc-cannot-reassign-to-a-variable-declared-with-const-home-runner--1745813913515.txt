[plugin:vite:react-swc] × cannot reassign to a variable declared with `const`
     ╭─[/home/runner/workspace/src/components/epictus-ia/notebook-simulation/ExportarParaApostilaModal.tsx:43:1]
  43 │ 
  44 │   // Estado para controlar os dados do formulário
  45 │   const [titulo, setTitulo] = useState(anotacaoTitulo || "");
  46 │   const [pastaId, setPastaId] = useState<string>("");
     ·          ───┬───
     ·             ╰── const variable was declared here
  47 │   const [novaPasta, setNovaPasta] = useState({ nome: "", cor: "#42C5F5" });
  48 │   const [criandoPasta, setCriandoPasta] = useState(false);
  49 │   const [tagInput, setTagInput] = useState("");
  50 │   const [tags, setTags] = useState<string[]>([]);
  51 │   const [isExporting, setIsExporting] = useState(false);
  52 │ 
  53 │   // Preencher os dados iniciais quando o modal abrir
  54 │   useEffect(() => {
  55 │     if (open) {
  56 │       setTitulo(anotacaoTitulo);
  57 │       // Se tiver tags na anotação original, adicioná-las aqui
  58 │     }
  59 │   }, [open, anotacaoTitulo]);
  60 │ 
  61 │   const handleAddTag = () => {
  62 │     if (tagInput.trim() && !tags.includes(tagInput.trim())) {
  63 │       setTags([...tags, tagInput.trim()]);
  64 │       setTagInput("");
  65 │     }
  66 │   };
  67 │ 
  68 │   const handleRemoveTag = (tag: string) => {
  69 │     setTags(tags.filter(t => t !== tag));
  70 │   };
  71 │ 
  72 │   const handleCriarPasta = () => {
  73 │     if (novaPasta.nome.trim()) {
  74 │       const novaPastaObj = {
  75 │         id: `p${pastas.length + 1}`,
  76 │         nome: novaPasta.nome,
  77 │         cor: novaPasta.cor
  78 │       };
  79 │ 
  80 │       setPastas([...pastas, novaPastaObj]);
  81 │       setPastaId(novaPastaObj.id);
  82 │       setCriandoPasta(false);
  83 │       setNovaPasta({ nome: "", cor: "#42C5F5" });
  84 │     }
  85 │   };
  86 │ 
  87 │   const handleExport = async () => {
  88 │     if (!titulo.trim()) {
  89 │       toast({
  90 │         title: "Atenção",
  91 │         description: "Por favor, adicione um título para sua anotação.",
  92 │         variant: "destructive"
  93 │       });
  94 │       return;
  95 │     }
  96 │ 
  97 │     if (!pastaId) {
  98 │       toast({
  99 │         title: "Atenção",
 100 │         description: "Por favor, selecione uma pasta para salvar sua anotação.",
 101 │         variant: "destructive"
 102 │       });
 103 │       return;
 104 │     }
 105 │ 
 106 │     try {
 107 │       setIsExporting(true);
 108 │ 
 109 │       // Criar elemento para animação de transferência
 110 │       const animationContainer = document.createElement('div');
 111 │       animationContainer.className = 'anotacao-transfer-animation';
 112 │       document.body.appendChild(animationContainer);
 113 │       
 114 │       // Posição inicial (dialog)
 115 │       const dialogRect = document.querySelector('.max-w-\\[600px\\]')?.getBoundingClientRect();
 116 │       if (dialogRect) {
 117 │         animationContainer.style.top = `${dialogRect.top + 100}px`;
 118 │         animationContainer.style.left = `${dialogRect.left + 100}px`;
 119 │         
 120 │         // Adicionar ícone de anotação
 121 │         const icon = document.createElement('div');
 122 │         icon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-text text-white"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><line x1="16" x2="8" y1="13" y2="13"/><line x1="16" x2="8" y1="17" y2="17"/><line x1="10" x2="8" y1="9" y2="9"/></svg>`;
 123 │         animationContainer.appendChild(icon);
 124 │         
 125 │         // Iniciar animação
 126 │         setTimeout(() => {
 127 │           animationContainer.classList.add('animate-transfer');
 128 │           
 129 │           // Remover elemento após animação
 130 │           setTimeout(() => {
 131 │             document.body.removeChild(animationContainer);
 132 │           }, 1000);
 133 │         }, 100);
 134 │       }
 135 │ 
 136 │       // Validar e garantir que os dados estejam no formato correto
 137 │       const conteudoValidado = typeof anotacaoContent === 'string' ? anotacaoContent : '';
 138 │       const tituloValidado = titulo.trim().substring(0, 255); // Limitar tamanho do título
 139 │       const tagsValidadas = Array.isArray(tags) ? tags : [];
 140 │       const modeloValidado = anotacaoModelo || 'Estudo Completo';
 141 │ 
 142 │       console.log("Iniciando exportação de anotação:", {
 143 │         titulo: tituloValidado,
 144 │         tamanhoConteudo: conteudoValidado.length,
 145 │         pastaId,
 146 │         tags: tagsValidadas,
 147 │         modelo: modeloValidado
 148 │       });
 149 │ 
 150 │       // Verificar se o usuário autenticado está disponível
 151 │       const { data: userData, error: userError } = await supabase.auth.getUser();
 152 │       if (userError || !userData?.user) {
 153 │         throw new Error("Usuário não autenticado. Por favor, faça login novamente.");
 154 │       }
 155 │       
 156 │       const userId = userData.user.id;
 157 │       
 158 │       // Verificar se a pasta existe antes de prosseguir
 159 │       const { data: pastaData, error: pastaError } = await supabase
 160 │         .from('apostila_pastas')
 161 │         .select('id, nome')
 162 │         .eq('id', pastaId)
 163 │         .single();
 164 │         
 165 │       if (pastaError) {
 166 │         // Se a pasta não existe, verificar se há problema com a tabela
 167 │         if (pastaError.message && pastaError.message.includes('does not exist')) {
 168 │           throw new Error("A estrutura do banco de dados precisa ser atualizada. Use a opção 'Corrigir Relação Apostila' no menu Workflows.");
 169 │         }
 170 │         
 171 │         console.error("Erro ao verificar pasta:", pastaError);
 172 │         
 173 │         // Tentar criar a pasta como fallback
 174 │         try {
 175 │           const { data: novaPasta, error: novaPastaError } = await supabase
 176 │             .from('apostila_pastas')
 177 │             .insert([
 178 │               { nome: 'Anotações Gerais', cor: '#42C5F5', user_id: userId }
 179 │             ])
 180 │             .select();
 181 │             
 182 │           if (novaPastaError) {
 183 │             throw new Error("Não foi possível criar uma pasta padrão: " + novaPastaError.message);
 184 │           }
 185 │           
 186 │           console.log("Pasta padrão criada:", novaPasta[0]);
 187 │           pastaId = novaPasta[0].id;
     ·           ───┬───
     ·              ╰── cannot reassign
 188 │         } catch (err) {
 189 │           throw new Error("Erro ao criar pasta padrão. Tente usar a opção 'Corrigir Relação Apostila' no menu Workflows.");
 190 │         }
     ╰────
/home/runner/workspace/src/components/epictus-ia/notebook-simulation/ExportarParaApostilaModal.tsx:43:1
387|                  value={tagInput}
388|                  onChange={(e) => setTagInput(e.target.value)}
389|                  className="bg-[#151515] border-gray-700 flex-1"
   |                                  ^
390|                  onKeyDown={(e) => {
391|                    if (e.key === 'Enter') {