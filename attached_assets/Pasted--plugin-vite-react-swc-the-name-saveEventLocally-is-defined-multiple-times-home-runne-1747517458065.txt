[plugin:vite:react-swc] × the name `saveEventLocally` is defined multiple times
     ╭─[/home/runner/workspace/src/services/calendarEventService.ts:349:1]
 349 │ };
 350 │ 
 351 │ // Salvar um evento localmente
 352 │ const saveEventLocally = (event: any) => {
     ·       ────────┬───────
     ·               ╰── previous definition of `saveEventLocally` here
 353 │   try {
 354 │     const allEvents = getAllLocalEvents();
 355 │ 
 356 │     const newEvent = {
 357 │       ...event,
 358 │       id: event.id || `local-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
 359 │       createdAt: event.createdAt || new Date().toISOString(),
 360 │     };
 361 │ 
 362 │     // Remover qualquer duplicata
 363 │     const filteredEvents = allEvents.filter(e => e.id !== newEvent.id);
 364 │ 
 365 │     saveEventsLocally([...filteredEvents, newEvent]);
 366 │ 
 367 │     console.log("Evento salvo localmente com ID:", newEvent.id);
 368 │     return newEvent;
 369 │   } catch (error) {
 370 │     console.error("Erro ao salvar evento localmente:", error);
 371 │     return null;
 372 │   }
 373 │ };
 374 │ 
 375 │ // Atualizar um evento localmente
 376 │ const updateEventLocally = (event: CalendarEvent) => {
 377 │   try {
 378 │     const allEvents = getAllLocalEvents();
 379 │     const updatedEvents = allEvents.map(e => 
 380 │       e.id === event.id ? { ...event, updatedAt: new Date().toISOString() } : e
 381 │     );
 382 │ 
 383 │     saveEventsLocally(updatedEvents);
 384 │     console.log("Evento atualizado localmente:", event.id);
 385 │     return event;
 386 │   } catch (error) {
 387 │     console.error("Erro ao atualizar evento localmente:", error);
 388 │     return null;
 389 │   }
 390 │ };
 391 │ 
 392 │ // Remover um evento localmente
 393 │ const deleteEventLocally = (eventId: string) => {
 394 │   try {
 395 │     const allEvents = getAllLocalEvents();
 396 │     const updatedEvents = allEvents.filter(e => e.id !== eventId);
 397 │ 
 398 │     saveEventsLocally(updatedEvents);
 399 │     console.log("Evento removido localmente:", eventId);
 400 │     return true;
 401 │   } catch (error) {
 402 │     console.error("Erro ao remover evento localmente:", error);
 403 │     return false;
 404 │   }
 405 │ };
 406 │ 
 407 │ // Sincronizar eventos locais com o banco de dados
 408 │ export const syncLocalEvents = async (userId: string): Promise<void> => {
 409 │   try {
 410 │     if (!userId) {
 411 │       console.error("UserId é necessário para sincronizar eventos");
 412 │       return;
 413 │     }
 414 │ 
 415 │     console.log("Iniciando sincronização de eventos locais para o usuário:", userId);
 416 │     const localEvents = getLocalEvents(userId);
 417 │     const localOnlyEvents = localEvents.filter(e => e.id.startsWith('local-'));
 418 │ 
 419 │     console.log(`${localOnlyEvents.length} eventos locais encontrados para sincronização`);
 420 │ 
 421 │     for (const event of localOnlyEvents) {
 422 │       const { id, ...eventData } = event;
 423 │       const result = await addEvent({ ...eventData, userId });
 424 │ 
 425 │       if (result) {
 426 │         console.log("Evento sincronizado com sucesso:", id, "->", result.id);
 427 │       }
 428 │     }
 429 │ 
 430 │     // Limpar eventos locais que foram sincronizados
 431 │     if (localOnlyEvents.length > 0) {
 432 │       const allEvents = getAllLocalEvents();
 433 │       const remainingEvents = allEvents.filter(e => !e.id.startsWith('local-') || e.userId !== userId);
 434 │       saveEventsLocally(remainingEvents);
 435 │       console.log("Eventos locais sincronizados foram removidos do armazenamento local");
 436 │     }
 437 │   } catch (error) {
 438 │     console.error("Erro ao sincronizar eventos locais:", error);
 439 │   }
 440 │ };
 441 │ 
 442 │ // Função para salvar evento
 443 │ export const saveEvent = async (event: any): Promise<boolean> => {
 444 │   try {
 445 │     if (!event.id) {
 446 │       event.id = `evt-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
 447 │     }
 448 │ 
 449 │     // Se não tiver timestamp, adicionar
 450 │     if (!event.createdAt) {
 451 │       event.createdAt = new Date().toISOString();
 452 │     }
 453 │ 
 454 │     // Sempre atualizar o timestamp de atualização
 455 │     event.updatedAt = new Date().toISOString();
 456 │ 
 457 │     // Tentar salvar no Supabase se conectado
 458 │     const isConnected = await checkSupabaseConnection();
 459 │ 
 460 │     if (isConnected) {
 461 │       try {
 462 │         const { data, error } = await supabase
 463 │           .from('calendar_events')
 464 │           .upsert(
 465 │             {
 466 │               id: event.id,
 467 │               user_id: event.userId,
 468 │               title: event.title,
 469 │               description: event.description || '',
 470 │               start_date: event.startDate,
 471 │               end_date: event.endDate || event.startDate,
 472 │               start_time: event.startTime || null,
 473 │               end_time: event.endTime || null,
 474 │               location: event.location || '',
 475 │               is_online: event.isOnline || false,
 476 │               meeting_link: event.meetingLink || '',
 477 │               type: event.type || 'evento',
 478 │               discipline: event.discipline || 'Geral',
 479 │               professor: event.professor || '',
 480 │               created_at: event.createdAt,
 481 │               updated_at: event.updatedAt
 482 │             },
 483 │             { onConflict: 'id' }
 484 │           );
 485 │ 
 486 │         if (error) {
 487 │           console.error("Erro ao salvar evento no Supabase:", error);
 488 │           console.log("Salvando apenas localmente devido a erro no Supabase");
 489 │           saveEventLocally(event);
 490 │ 
 491 │           // Notificar sobre a mudança
 492 │           dispatchEventChangeNotification('event-added', event);
 493 │ 
 494 │           return true;  // Consideramos sucesso se salvou localmente
 495 │         }
 496 │ 
 497 │         console.log("Evento salvo com sucesso no Supabase:", event.id);
 498 │ 
 499 │         // Também salvamos localmente para acesso offline
 500 │         saveEventLocally(event);
 501 │ 
 502 │         // Notificar sobre a mudança
 503 │         dispatchEventChangeNotification('event-added', event);
 504 │ 
 505 │         return true;
 506 │       } catch (error) {
 507 │         console.error("Erro ao salvar evento no Supabase:", error);
 508 │         saveEventLocally(event);
 509 │ 
 510 │         // Notificar sobre a mudança
 511 │         dispatchEventChangeNotification('event-added', event);
 512 │ 
 513 │         return true;  // Consideramos sucesso se salvou localmente
 514 │       }
 515 │     } else {
 516 │       // Se não estiver conectado, salvar apenas localmente
 517 │       console.log("Sem conexão com Supabase, salvando evento apenas localmente");
 518 │       saveEventLocally(event);
 519 │ 
 520 │       // Notificar sobre a mudança
 521 │       dispatchEventChangeNotification('event-added', event);
 522 │ 
 523 │       return true;
 524 │     }
 525 │   } catch (error) {
 526 │     console.error("Erro ao salvar evento:", error);
 527 │     return false;
 528 │   }
 529 │ };
 530 │ 
 531 │ // Função para disparar notificações de mudanças em eventos
 532 │ export const dispatchEventChangeNotification = (eventType: string, event: any) => {
 533 │   try {
 534 │     // Os tipos de evento possíveis são: 'event-added', 'event-edited', 'event-deleted'
 535 │     window.dispatchEvent(new CustomEvent(eventType, { 
 536 │       detail: { event }
 537 │     }));
 538 │ 
 539 │     // Também notificar sobre atualização geral de eventos
 540 │     const allEvents = getAllLocalEvents();
 541 │     const formattedEvents: Record<number, any[]> = {};
 542 │ 
 543 │     allEvents.forEach(evt => {
 544 │       try {
 545 │         const startDate = new Date(evt.startDate);
 546 │         const day = startDate.getDate();
 547 │ 
 548 │         if (!formattedEvents[day]) {
 549 │           formattedEvents[day] = [];
 550 │         }
 551 │ 
 552 │         formattedEvents[day].push({
 553 │           ...evt,
 554 │           start: startDate,
 555 │           end: evt.endDate ? new Date(evt.endDate) : startDate
 556 │         });
 557 │       } catch (err) {
 558 │         console.error("Erro ao formatar evento para notificação:", err);
 559 │       }
 560 │     });
 561 │ 
 562 │     window.agendaEventData = formattedEvents;
 563 │ 
 564 │     window.dispatchEvent(new CustomEvent('agenda-events-updated', { 
 565 │       detail: { events: formattedEvents }
 566 │     }));
 567 │ 
 568 │     console.log(`Notificação de evento disparada: ${eventType}`, event.id);
 569 │   } catch (err) {
 570 │     console.error("Erro ao disparar notificação de mudança em evento:", err);
 571 │   }
 572 │ };
 573 │ 
 574 │ // Função auxiliar para salvar evento localmente
 575 │ export const saveEventLocally = (event: any): void => {
     ·              ────────┬───────
     ·                      ╰── `saveEventLocally` redefined here
 576 │   try {
 577 │     // Certificar-se de que a chave de armazenamento existe
 578 │     initLocalStorage();
     ╰────

  × the name `deleteEvent` is defined multiple times
     ╭─[/home/runner/workspace/src/services/calendarEventService.ts:224:1]
 224 │ };
 225 │ 
 226 │ // Remover um evento
 227 │ export const deleteEvent = async (eventId: string): Promise<boolean> => {
     ·              ─────┬─────
     ·                   ╰── previous definition of `deleteEvent` here
 228 │   try {
 229 │     // Obter uma cópia do evento antes de excluí-lo para notificação
 230 │     const events = getAllLocalEvents();
 231 │     const eventToDelete = events.find(event => event.id === eventId);
 232 │ 
 233 │     // Tentar excluir do Supabase se conectado
 234 │     const isConnected = await checkSupabaseConnection();
 235 │ 
 236 │     if (isConnected) {
 237 │       try {
 238 │         const { error } = await supabase
 239 │           .from('calendar_events')
 240 │           .delete()
 241 │           .eq('id', eventId);
 242 │ 
 243 │         if (error) {
 244 │           console.error("Erro ao excluir evento do Supabase:", error);
 245 │           console.log("Excluindo apenas localmente devido a erro no Supabase");
 246 │           deleteEventLocally(eventId);
 247 │ 
 248 │           // Notificar sobre a exclusão
 249 │           if (eventToDelete) {
 250 │             dispatchEventChangeNotification('event-deleted', { id: eventId, ...eventToDelete });
 251 │           }
 252 │ 
 253 │           return true;  // Consideramos sucesso se excluiu localmente
 254 │         }
 255 │ 
 256 │         console.log("Evento excluído com sucesso do Supabase:", eventId);
 257 │ 
 258 │         // Também excluímos localmente para manter sincronizado
 259 │         deleteEventLocally(eventId);
 260 │ 
 261 │         // Notificar sobre a exclusão
 262 │         if (eventToDelete) {
 263 │           dispatchEventChangeNotification('event-deleted', { id: eventId, ...eventToDelete });
 264 │         }
 265 │ 
 266 │         return true;
 267 │       } catch (error) {
 268 │         console.error("Erro ao excluir evento do Supabase:", error);
 269 │         deleteEventLocally(eventId);
 270 │ 
 271 │         // Notificar sobre a exclusão
 272 │         if (eventToDelete) {
 273 │           dispatchEventChangeNotification('event-deleted', { id: eventId, ...eventToDelete });
 274 │         }
 275 │ 
 276 │         return true;  // Consideramos sucesso se excluiu localmente
 277 │       }
 278 │     } else {
 279 │       // Se não estiver conectado, excluir apenas localmente
 280 │       console.log("Sem conexão com Supabase, excluindo evento apenas localmente");
 281 │       deleteEventLocally(eventId);
 282 │ 
 283 │       // Notificar sobre a exclusão
 284 │       if (eventToDelete) {
 285 │         dispatchEventChangeNotification('event-deleted', { id: eventId, ...eventToDelete });
 286 │       }
 287 │ 
 288 │       return true;
 289 │     }
 290 │   } catch (error) {
 291 │     console.error("Erro ao excluir evento:", error);
 292 │     return false;
 293 │   }
 294 │ };
 295 │ 
 296 │ // Funções para armazenamento local como backup
 297 │ const EVENTS_STORAGE_KEY = "calendar_events";
 298 │ 
 299 │ // Salvar todos os eventos localmente
 300 │ const saveEventsLocally = (events: CalendarEvent[]) => {
 301 │   try {
 302 │     localStorage.setItem(EVENTS_STORAGE_KEY, JSON.stringify(events));
 303 │     console.log("Eventos salvos localmente com sucesso", events.length);
 304 │     return true;
 305 │   } catch (error) {
 306 │     console.error("Erro ao salvar eventos localmente:", error);
 307 │     return false;
 308 │   }
 309 │ };
 310 │ 
 311 │ // Inicializar o armazenamento local se não existir
 312 │ export const initLocalStorage = () => {
 313 │   if (!localStorage.getItem(EVENTS_STORAGE_KEY)) {
 314 │     saveEventsLocally([]);
 315 │     console.log("Armazenamento local de eventos inicializado");
 316 │   } else {
 317 │     console.log("Armazenamento local de eventos já existe");
 318 │   }
 319 │ };
 320 │ 
 321 │ // Obter todos os eventos armazenados localmente
 322 │ const getAllLocalEvents = (): CalendarEvent[] => {
 323 │   try {
 324 │     const eventsJson = localStorage.getItem(EVENTS_STORAGE_KEY);
 325 │     if (!eventsJson) return [];
 326 │ 
 327 │     const events: CalendarEvent[] = JSON.parse(eventsJson);
 328 │     return events;
 329 │   } catch (error) {
 330 │     console.error("Erro ao obter todos os eventos locais:", error);
 331 │     return [];
 332 │   }
 333 │ };
 334 │ 
 335 │ // Obter todos os eventos armazenados localmente para um usuário específico
 336 │ const getLocalEvents = (userId: string): CalendarEvent[] => {
 337 │   try {
 338 │     if (!userId) return [];
 339 │ 
 340 │     const eventsJson = localStorage.getItem(EVENTS_STORAGE_KEY);
 341 │     if (!eventsJson) return [];
 342 │ 
 343 │     const events: CalendarEvent[] = JSON.parse(eventsJson);
 344 │     return events.filter(event => event.userId === userId);
 345 │   } catch (error) {
 346 │     console.error("Erro ao obter eventos locais:", error);
 347 │     return [];
 348 │   }
 349 │ };
 350 │ 
 351 │ // Salvar um evento localmente
 352 │ const saveEventLocally = (event: any) => {
 353 │   try {
 354 │     const allEvents = getAllLocalEvents();
 355 │ 
 356 │     const newEvent = {
 357 │       ...event,
 358 │       id: event.id || `local-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
 359 │       createdAt: event.createdAt || new Date().toISOString(),
 360 │     };
 361 │ 
 362 │     // Remover qualquer duplicata
 363 │     const filteredEvents = allEvents.filter(e => e.id !== newEvent.id);
 364 │ 
 365 │     saveEventsLocally([...filteredEvents, newEvent]);
 366 │ 
 367 │     console.log("Evento salvo localmente com ID:", newEvent.id);
 368 │     return newEvent;
 369 │   } catch (error) {
 370 │     console.error("Erro ao salvar evento localmente:", error);
 371 │     return null;
 372 │   }
 373 │ };
 374 │ 
 375 │ // Atualizar um evento localmente
 376 │ const updateEventLocally = (event: CalendarEvent) => {
 377 │   try {
 378 │     const allEvents = getAllLocalEvents();
 379 │     const updatedEvents = allEvents.map(e => 
 380 │       e.id === event.id ? { ...event, updatedAt: new Date().toISOString() } : e
 381 │     );
 382 │ 
 383 │     saveEventsLocally(updatedEvents);
 384 │     console.log("Evento atualizado localmente:", event.id);
 385 │     return event;
 386 │   } catch (error) {
 387 │     console.error("Erro ao atualizar evento localmente:", error);
 388 │     return null;
 389 │   }
 390 │ };
 391 │ 
 392 │ // Remover um evento localmente
 393 │ const deleteEventLocally = (eventId: string) => {
 394 │   try {
 395 │     const allEvents = getAllLocalEvents();
 396 │     const updatedEvents = allEvents.filter(e => e.id !== eventId);
 397 │ 
 398 │     saveEventsLocally(updatedEvents);
 399 │     console.log("Evento removido localmente:", eventId);
 400 │     return true;
 401 │   } catch (error) {
 402 │     console.error("Erro ao remover evento localmente:", error);
 403 │     return false;
 404 │   }
 405 │ };
 406 │ 
 407 │ // Sincronizar eventos locais com o banco de dados
 408 │ export const syncLocalEvents = async (userId: string): Promise<void> => {
 409 │   try {
 410 │     if (!userId) {
 411 │       console.error("UserId é necessário para sincronizar eventos");
 412 │       return;
 413 │     }
 414 │ 
 415 │     console.log("Iniciando sincronização de eventos locais para o usuário:", userId);
 416 │     const localEvents = getLocalEvents(userId);
 417 │     const localOnlyEvents = localEvents.filter(e => e.id.startsWith('local-'));
 418 │ 
 419 │     console.log(`${localOnlyEvents.length} eventos locais encontrados para sincronização`);
 420 │ 
 421 │     for (const event of localOnlyEvents) {
 422 │       const { id, ...eventData } = event;
 423 │       const result = await addEvent({ ...eventData, userId });
 424 │ 
 425 │       if (result) {
 426 │         console.log("Evento sincronizado com sucesso:", id, "->", result.id);
 427 │       }
 428 │     }
 429 │ 
 430 │     // Limpar eventos locais que foram sincronizados
 431 │     if (localOnlyEvents.length > 0) {
 432 │       const allEvents = getAllLocalEvents();
 433 │       const remainingEvents = allEvents.filter(e => !e.id.startsWith('local-') || e.userId !== userId);
 434 │       saveEventsLocally(remainingEvents);
 435 │       console.log("Eventos locais sincronizados foram removidos do armazenamento local");
 436 │     }
 437 │   } catch (error) {
 438 │     console.error("Erro ao sincronizar eventos locais:", error);
 439 │   }
 440 │ };
 441 │ 
 442 │ // Função para salvar evento
 443 │ export const saveEvent = async (event: any): Promise<boolean> => {
 444 │   try {
 445 │     if (!event.id) {
 446 │       event.id = `evt-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
 447 │     }
 448 │ 
 449 │     // Se não tiver timestamp, adicionar
 450 │     if (!event.createdAt) {
 451 │       event.createdAt = new Date().toISOString();
 452 │     }
 453 │ 
 454 │     // Sempre atualizar o timestamp de atualização
 455 │     event.updatedAt = new Date().toISOString();
 456 │ 
 457 │     // Tentar salvar no Supabase se conectado
 458 │     const isConnected = await checkSupabaseConnection();
 459 │ 
 460 │     if (isConnected) {
 461 │       try {
 462 │         const { data, error } = await supabase
 463 │           .from('calendar_events')
 464 │           .upsert(
 465 │             {
 466 │               id: event.id,
 467 │               user_id: event.userId,
 468 │               title: event.title,
 469 │               description: event.description || '',
 470 │               start_date: event.startDate,
 471 │               end_date: event.endDate || event.startDate,
 472 │               start_time: event.startTime || null,
 473 │               end_time: event.endTime || null,
 474 │               location: event.location || '',
 475 │               is_online: event.isOnline || false,
 476 │               meeting_link: event.meetingLink || '',
 477 │               type: event.type || 'evento',
 478 │               discipline: event.discipline || 'Geral',
 479 │               professor: event.professor || '',
 480 │               created_at: event.createdAt,
 481 │               updated_at: event.updatedAt
 482 │             },
 483 │             { onConflict: 'id' }
 484 │           );
 485 │ 
 486 │         if (error) {
 487 │           console.error("Erro ao salvar evento no Supabase:", error);
 488 │           console.log("Salvando apenas localmente devido a erro no Supabase");
 489 │           saveEventLocally(event);
 490 │ 
 491 │           // Notificar sobre a mudança
 492 │           dispatchEventChangeNotification('event-added', event);
 493 │ 
 494 │           return true;  // Consideramos sucesso se salvou localmente
 495 │         }
 496 │ 
 497 │         console.log("Evento salvo com sucesso no Supabase:", event.id);
 498 │ 
 499 │         // Também salvamos localmente para acesso offline
 500 │         saveEventLocally(event);
 501 │ 
 502 │         // Notificar sobre a mudança
 503 │         dispatchEventChangeNotification('event-added', event);
 504 │ 
 505 │         return true;
 506 │       } catch (error) {
 507 │         console.error("Erro ao salvar evento no Supabase:", error);
 508 │         saveEventLocally(event);
 509 │ 
 510 │         // Notificar sobre a mudança
 511 │         dispatchEventChangeNotification('event-added', event);
 512 │ 
 513 │         return true;  // Consideramos sucesso se salvou localmente
 514 │       }
 515 │     } else {
 516 │       // Se não estiver conectado, salvar apenas localmente
 517 │       console.log("Sem conexão com Supabase, salvando evento apenas localmente");
 518 │       saveEventLocally(event);
 519 │ 
 520 │       // Notificar sobre a mudança
 521 │       dispatchEventChangeNotification('event-added', event);
 522 │ 
 523 │       return true;
 524 │     }
 525 │   } catch (error) {
 526 │     console.error("Erro ao salvar evento:", error);
 527 │     return false;
 528 │   }
 529 │ };
 530 │ 
 531 │ // Função para disparar notificações de mudanças em eventos
 532 │ export const dispatchEventChangeNotification = (eventType: string, event: any) => {
 533 │   try {
 534 │     // Os tipos de evento possíveis são: 'event-added', 'event-edited', 'event-deleted'
 535 │     window.dispatchEvent(new CustomEvent(eventType, { 
 536 │       detail: { event }
 537 │     }));
 538 │ 
 539 │     // Também notificar sobre atualização geral de eventos
 540 │     const allEvents = getAllLocalEvents();
 541 │     const formattedEvents: Record<number, any[]> = {};
 542 │ 
 543 │     allEvents.forEach(evt => {
 544 │       try {
 545 │         const startDate = new Date(evt.startDate);
 546 │         const day = startDate.getDate();
 547 │ 
 548 │         if (!formattedEvents[day]) {
 549 │           formattedEvents[day] = [];
 550 │         }
 551 │ 
 552 │         formattedEvents[day].push({
 553 │           ...evt,
 554 │           start: startDate,
 555 │           end: evt.endDate ? new Date(evt.endDate) : startDate
 556 │         });
 557 │       } catch (err) {
 558 │         console.error("Erro ao formatar evento para notificação:", err);
 559 │       }
 560 │     });
 561 │ 
 562 │     window.agendaEventData = formattedEvents;
 563 │ 
 564 │     window.dispatchEvent(new CustomEvent('agenda-events-updated', { 
 565 │       detail: { events: formattedEvents }
 566 │     }));
 567 │ 
 568 │     console.log(`Notificação de evento disparada: ${eventType}`, event.id);
 569 │   } catch (err) {
 570 │     console.error("Erro ao disparar notificação de mudança em evento:", err);
 571 │   }
 572 │ };
 573 │ 
 574 │ // Função auxiliar para salvar evento localmente
 575 │ export const saveEventLocally = (event: any): void => {
 576 │   try {
 577 │     // Certificar-se de que a chave de armazenamento existe
 578 │     initLocalStorage();
 579 │ 
 580 │     // Obter eventos existentes
 581 │     const eventsJson = localStorage.getItem(EVENTS_STORAGE_KEY);
 582 │     let events = [];
 583 │ 
 584 │     if (eventsJson) {
 585 │       events = JSON.parse(eventsJson);
 586 │     }
 587 │ 
 588 │     // Verificar se o evento já existe para atualizar
 589 │     const existingIndex = events.findIndex((e: any) => e.id === event.id);
 590 │     const isUpdate = existingIndex >= 0;
 591 │ 
 592 │     if (isUpdate) {
 593 │       // Atualizar evento existente
 594 │       events[existingIndex] = event;
 595 │     } else {
 596 │       // Adicionar novo evento
 597 │       events.push(event);
 598 │     }
 599 │ 
 600 │     // Salvar de volta ao localStorage
 601 │     localStorage.setItem(EVENTS_STORAGE_KEY, JSON.stringify(events));
 602 │     console.log(`Evento ${isUpdate ? 'atualizado' : 'adicionado'} localmente:`, event.id);
 603 │ 
 604 │     // Não disparamos o evento aqui, pois a função principal saveEvent já faz isso
 605 │     // Isso evita duplicidade de notificações
 606 │   } catch (error) {
 607 │     console.error("Erro ao salvar evento localmente:", error);
 608 │   }
 609 │ };
 610 │ 
 611 │ // Função para excluir evento
 612 │ export const deleteEvent = async (eventId: string): Promise<boolean> => {
     ·              ─────┬─────
     ·                   ╰── `deleteEvent` redefined here
 613 │   try {
 614 │     // Obter uma cópia do evento antes de excluí-lo para notificação
 615 │     const events = getAllLocalEvents();
     ╰────
/home/runner/workspace/src/services/calendarEventService.ts:349:1