[plugin:vite:react-swc] × the name `isNewAnotacao` is defined multiple times
     ╭─[/home/runner/workspace/src/components/epictus-ia/modoepictusiabeta/apostila-inteligente/ApostilaInteligenteModal.tsx:72:1]
  72 │ 
  73 │ 
  74 │   // Função para verificar se uma anotação é nova (menos de 24 horas)
  75 │   const isNewAnotacao = (dataExportacao) => {
     ·         ──────┬──────
     ·               ╰── previous definition of `isNewAnotacao` here
  76 │     if (!dataExportacao) return false;
  77 │     const now = new Date();
  78 │     const exportDate = new Date(dataExportacao);
  79 │     const diffHours = (now.getTime() - exportDate.getTime()) / (1000 * 60 * 60);
  80 │     return diffHours < 24;
  81 │   };
  82 │ 
  83 │   // Configurar Supabase Realtime para atualizações automáticas
  84 │   useEffect(() => {
  85 │     let subscription;
  86 │ 
  87 │     if (open) {
  88 │       // Carregar anotações ao abrir o modal
  89 │       carregarAnotacoes();
  90 │ 
  91 │       // Configurar escuta de mudanças em tempo real
  92 │       const channel = supabase
  93 │         .channel('apostila_changes')
  94 │         .on('postgres_changes', {
  95 │           event: 'INSERT',
  96 │           schema: 'public',
  97 │           table: 'apostila_anotacoes',
  98 │           filter: `user_id=eq.${supabase.auth.getUser()?.data?.user?.id}`
  99 │         }, (payload) => {
 100 │           console.log('Nova anotação detectada:', payload.new);
 101 │ 
 102 │           // Buscar informações da pasta se necessário
 103 │           const processarNovaAnotacao = async () => {
 104 │             try {
 105 │               if (payload.new.pasta_id) {
 106 │                 const { data: pastaData } = await supabase
 107 │                   .from('apostila_pastas')
 108 │                   .select('id, nome, cor')
 109 │                   .eq('id', payload.new.pasta_id)
 110 │                   .single();
 111 │ 
 112 │                 const novaAnotacao = {
 113 │                   ...payload.new,
 114 │                   pasta: pastaData,
 115 │                   apostila_pastas: pastaData // Mantendo compatibilidade
 116 │                 };
 117 │ 
 118 │                 // Adicionar à lista de anotações
 119 │                 setAnotacoes(prev => [novaAnotacao, ...prev]);
 120 │               } else {
 121 │                 // Adicionar anotação sem pasta
 122 │                 setAnotacoes(prev => [
 123 │                   {
 124 │                     ...payload.new,
 125 │                     pasta: null,
 126 │                     apostila_pastas: null
 127 │                   }, 
 128 │                   ...prev
 129 │                 ]);
 130 │               }
 131 │ 
 132 │               // Notificar o usuário
 133 │               toast({
 134 │                 title: "Nova anotação adicionada!",
 135 │                 description: `"${payload.new.titulo}" foi adicionada à sua Apostila.`,
 136 │                 duration: 3000,
 137 │               });
 138 │             } catch (error) {
 139 │               console.error('Erro ao processar nova anotação:', error);
 140 │             }
 141 │           };
 142 │ 
 143 │           processarNovaAnotacao();
 144 │         })
 145 │         .subscribe();
 146 │ 
 147 │       // Configurar escuta para evento personalizado (quando uma anotação é exportada)
 148 │       const handleAnotacaoAdicionada = (event) => {
 149 │         console.log('Evento de anotação adicionada detectado:', event.detail);
 150 │         // Recarregar anotações para garantir que tudo está atualizado
 151 │         carregarAnotacoes();
 152 │       };
 153 │ 
 154 │       window.addEventListener('apostila-anotacao-adicionada', handleAnotacaoAdicionada);
 155 │ 
 156 │       // Limpar subscrição
 157 │       return () => {
 158 │         supabase.removeChannel(channel);
 159 │         window.removeEventListener('apostila-anotacao-adicionada', handleAnotacaoAdicionada);
 160 │       };
 161 │     }
 162 │   }, [open]);
 163 │ 
 164 │   // Carregar anotações do usuário
 165 │   const carregarAnotacoes = async (retries = 3, delayMs = 500) => {
 166 │     let tentativaAtual = 0;
 167 │     let ultimoErro = null;
 168 │ 
 169 │     while (tentativaAtual < retries) {
 170 │       tentativaAtual++;
 171 │       try {
 172 │         setLoading(true);
 173 │         setError(null);
 174 │ 
 175 │         const { data: user } = await supabase.auth.getUser();
 176 │         const userId = user?.user?.id;
 177 │ 
 178 │         if (!userId) {
 179 │           throw new Error('Usuário não autenticado');
 180 │         }
 181 │ 
 182 │         // Carregar pastas primeiro
 183 │         const { data: pastasData, error: pastasError } = await supabase
 184 │           .from('apostila_pastas')
 185 │           .select('*')
 186 │           .eq('user_id', userId)
 187 │           .order('nome');
 188 │ 
 189 │         if (pastasError) {
 190 │           console.error('Erro ao carregar pastas:', pastasError);
 191 │           throw new Error(`Erro ao carregar pastas: ${pastasError.message}`);
 192 │         }
 193 │ 
 194 │         setPastas(pastasData || []);
 195 │         console.log("Pastas carregadas:", pastasData?.length || 0);
 196 │ 
 197 │         // Usar LEFT JOIN para carregar anotações
 198 │         // Isso resolve o problema do relacionamento
 199 │         const { data: anotacoesRaw, error: anotacoesError } = await supabase
 200 │           .from('apostila_anotacoes')
 201 │           .select('*, pasta:apostila_pastas(*)')
 202 │           .eq('user_id', userId)
 203 │           .order('data_exportacao', { ascending: false });
 204 │ 
 205 │         // Se o erro específico for sobre o relacionamento, tentar uma consulta alternativa
 206 │         if (anotacoesError && anotacoesError.message.includes('relationship between')) {
 207 │           console.warn('Erro de relacionamento, tentando consulta alternativa');
 208 │ 
 209 │           // Consulta alternativa sem junção
 210 │           const { data: anotacoesSemJoin, error: erroSemJoin } = await supabase
 211 │             .from('apostila_anotacoes')
 212 │             .select('*')
 213 │             .eq('user_id', userId)
 214 │             .order('data_exportacao', { ascending: false });
 215 │ 
 216 │           if (erroSemJoin) {
 217 │             console.error('Erro na consulta alternativa:', erroSemJoin);
 218 │             throw new Error(`Erro ao carregar anotações: ${erroSemJoin.message}`);
 219 │           }
 220 │ 
 221 │           // Para cada anotação com pasta_id, buscar dados da pasta separadamente
 222 │           const anotacoesProcessadas = await Promise.all(
 223 │             (anotacoesSemJoin || []).map(async (anotacao) => {
 224 │               if (anotacao.pasta_id) {
 225 │                 // Buscar pasta para esta anotação
 226 │                 const { data: pastaData } = await supabase
 227 │                   .from('apostila_pastas')
 228 │                   .select('id, nome, cor')
 229 │                   .eq('id', anotacao.pasta_id)
 230 │                   .eq('user_id', userId)
 231 │                   .single();
 232 │ 
 233 │                 return {
 234 │                   ...anotacao,
 235 │                   pasta: pastaData || null
 236 │                 };
 237 │               }
 238 │               return {
 239 │                 ...anotacao,
 240 │                 pasta: null
 241 │               };
 242 │             })
 243 │           );
 244 │ 
 245 │           console.log('Anotações carregadas (método alternativo):', anotacoesProcessadas?.length || 0);
 246 │           setAnotacoes(anotacoesProcessadas || []);
 247 │         } else if (anotacoesError) {
 248 │           console.error('Erro ao carregar anotações:', anotacoesError);
 249 │           throw new Error(`Erro ao carregar anotações: ${anotacoesError.message}`);
 250 │         } else {
 251 │           // Processar dados da consulta normal se não houve erro
 252 │           const anotacoesProcessadas = (anotacoesRaw || []).map(anotacao => ({
 253 │             ...anotacao,
 254 │             apostila_pastas: anotacao.pasta // Manter compatibilidade com o restante do código
 255 │           }));
 256 │ 
 257 │           console.log('Anotações carregadas:', anotacoesProcessadas?.length || 0);
 258 │           setAnotacoes(anotacoesProcessadas || []);
 259 │         }
 260 │ 
 261 │         // Selecionar todas as pastas inicialmente
 262 │         setFiltroAtual('todas');
 263 │ 
 264 │         // Se chegou aqui, operação foi bem-sucedida
 265 │         return;
 266 │       } catch (error) {
 267 │         console.error(`Erro ao carregar dados (tentativa ${tentativaAtual}/${retries}):`, error);
 268 │         ultimoErro = error;
 269 │ 
 270 │         // Se não for a última tentativa, esperar antes de tentar novamente
 271 │         if (tentativaAtual < retries) {
 272 │           await new Promise(resolve => setTimeout(resolve, delayMs));
 273 │         }
 274 │       } finally {
 275 │         if (tentativaAtual === retries) {
 276 │           setLoading(false);
 277 │         }
 278 │       }
 279 │     }
 280 │ 
 281 │     // Se chegou aqui, todas as tentativas falharam
 282 │     setError(ultimoErro?.message || 'Erro ao carregar anotações');
 283 │     setLoading(false);
 284 │ 
 285 │     // Se não há anotações, mostrar estado vazio em vez de erro
 286 │     if (!anotacoes.length) {
 287 │       setAnotacoes([]);
 288 │     }
 289 │   };
 290 │ 
 291 │   const carregarPastas = async () => {
 292 │     try {
 293 │       setIsLoading(true);
 294 │       // Tenta obter o ID do usuário de várias fontes
 295 │       let userId = localStorage.getItem('user_id');
 296 │ 
 297 │       // Se não encontrar, tenta outras possíveis fontes
 298 │       if (!userId) {
 299 │         // Tenta obter do sessionStorage como fallback
 300 │         userId = sessionStorage.getItem('user_id');
 301 │ 
 302 │         // Se ainda não encontrou, tenta buscar do localStorage com outros formatos comuns
 303 │         if (!userId) {
 304 │           // Verifica se existe alguma chave no localStorage que contenha 'user' e 'id'
 305 │           for (let i = 0; i < localStorage.length; i++) {
 306 │             const key = localStorage.key(i);
 307 │             if (key && (key.includes('user') || key.includes('userId') || key.includes('user_id'))) {
 308 │               const potentialId = localStorage.getItem(key);
 309 │               if (potentialId && potentialId.length > 5) {
 310 │                 console.log('Encontrado possível ID alternativo:', key, potentialId);
 311 │                 userId = potentialId;
 312 │                 // Salva no formato correto para futuras consultas
 313 │                 localStorage.setItem('user_id', userId);
 314 │                 break;
 315 │               }
 316 │             }
 317 │           }
 318 │         }
 319 │       }
 320 │ 
 321 │       // Se ainda não encontrou o ID do usuário
 322 │       if (!userId) {
 323 │         console.error('ID de usuário não encontrado em nenhum local de armazenamento');
 324 │         setError('ID de usuário não encontrado. Por favor, faça login novamente.');
 325 │         return;
 326 │       }
 327 │ 
 328 │       console.log('Carregando pastas com ID de usuário:', userId);
 329 │       let tentativas = 0;
 330 │       let dados = null;
 331 │       let ultimoErro = null;
 332 │ 
 333 │       while (tentativas < 3 && !dados) {
 334 │         try {
 335 │           const { data, error } = await supabase
 336 │             .from('apostila_pastas')
 337 │             .select('*')
 338 │             .eq('user_id', userId)
 339 │             .order('nome');
 340 │ 
 341 │           if (error) {
 342 │             throw error;
 343 │           }
 344 │ 
 345 │           dados = data;
 346 │         } catch (err: any) {
 347 │           tentativas++;
 348 │           ultimoErro = err;
 349 │           console.error(`Erro ao carregar pastas (tentativa ${tentativas}/3):`, err);
 350 │           // Aguardar antes da próxima tentativa
 351 │           await new Promise(r => setTimeout(r, 500));
 352 │         }
 353 │       }
 354 │ 
 355 │       if (!dados) {
 356 │         console.error('Falha após todas as tentativas de carregar pastas:', ultimoErro);
 357 │         setError('Não foi possível carregar suas pastas. Algumas funcionalidades podem estar limitadas.');
 358 │ 
 359 │         // Tentar criar uma pasta padrão se necessário
 360 │         try {
 361 │           const { data: novaPasta, error: novaPastaError } = await supabase
 362 │             .from('apostila_pastas')
 363 │             .insert([
 364 │               {
 365 │                 nome: "Minhas Anotações",
 366 │                 cor: "#4285F4",
 367 │                 user_id: userId
 368 │               }
 369 │             ])
 370 │             .select();
 371 │ 
 372 │           if (novaPastaError) {
 373 │             throw novaPastaError;
 374 │           }
 375 │ 
 376 │           if (novaPasta && novaPasta.length > 0) {
 377 │             setPastas(novaPasta);
 378 │             setPastaSelecionada(novaPasta[0].id);
 379 │             console.log('Pasta padrão criada com sucesso');
 380 │           }
 381 │         } catch (err) {
 382 │           console.error('Erro ao criar pasta padrão:', err);
 383 │         }
 384 │ 
 385 │         return;
 386 │       }
 387 │ 
 388 │       setPastas(dados);
 389 │ 
 390 │       // Se tiver pastas e nenhuma estiver selecionada, seleciona a primeira
 391 │       if (dados && dados.length > 0 && !pastaSelecionada) {
 392 │         setPastaSelecionada(dados[0].id);
 393 │       }
 394 │     } catch (err) {
 395 │       console.error('Erro ao carregar pastas:', err);
 396 │       setError('Ocorreu um erro ao carregar suas pastas.');
 397 │     } finally {
 398 │       setIsLoading(false);
 399 │     }
 400 │   };
 401 │ 
 402 │   // Função auxiliar para verificar se uma anotação é nova (menos de 24h)
 403 │   const isNewAnotacao = (dataExportacao: string) => {
     ·         ──────┬──────
     ·               ╰── `isNewAnotacao` redefined here
 404 │     const now = new Date();
 405 │     const exportDate = new Date(dataExportacao);
 406 │     const diffHours = (now.getTime() - exportDate.getTime()) / (1000 * 60 * 60);
     ╰────
/home/runner/workspace/src/components/epictus-ia/modoepictusiabeta/apostila-inteligente/ApostilaInteligenteModal.tsx:72:1
599|                ) : error ? (
600|                  <div className="flex flex-col justify-center items-center h-full text-center px-4 py-8">
601|                    <div className="bg-red-900/20 text-red-400 p-4 rounded-lg border border-red-800 mb-4 max-w-md">
   |                                                                                                           ^
602|                      <div className="flex items-center mb-2">
603|                        <AlertCircle className="h-5 w-5 mr-2 text-red-400" />