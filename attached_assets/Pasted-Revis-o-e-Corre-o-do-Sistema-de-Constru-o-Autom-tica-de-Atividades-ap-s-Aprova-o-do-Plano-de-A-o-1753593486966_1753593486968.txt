Revis√£o e Corre√ß√£o do Sistema de Constru√ß√£o Autom√°tica de Atividades ap√≥s Aprova√ß√£o do Plano de A√ß√£o

üö® CONTEXTO:

O sistema da plataforma School Power j√° possui:

Interface com mini-cards de atividades.

Modais de edi√ß√£o √∫nicos por tipo de atividade, com campos distintos.

Um bot√£o ‚ÄúConstruir Atividade‚Äù dentro de cada modal, que deve ser clicado para que a atividade seja gerada.

Um sistema de IA que gera as informa√ß√µes de cada atividade ao aprovar o Plano de A√ß√£o.

O sistema de constru√ß√£o autom√°tica deve:

‚úÖ Pegar os dados da IA para cada atividade.
‚úÖ Preencher os campos do modal de forma sincronizada, campo por campo, corretamente.
‚úÖ Acionar o bot√£o ‚ÄúConstruir Atividade‚Äù automaticamente, somente ap√≥s todos os campos estarem corretamente preenchidos.

üîç OBJETIVO DESTE PROMPT:

Verificar, corrigir e garantir que o sistema:

Colete corretamente os dados do Plano de A√ß√£o para cada atividade (por ID/tipo).

Estruture esses dados de maneira 100% compat√≠vel com os campos reais de cada modal.

Aguarde o carregamento e abertura completa do modal antes de preencher os campos.

Preencha corretamente cada campo vis√≠vel e invis√≠vel (inputs, selects, textos, etc).

Valide se os campos foram realmente preenchidos.

Acione o bot√£o de ‚ÄúConstruir Atividade‚Äù automaticamente apenas quando o preenchimento for 100% bem-sucedido.

üõ†Ô∏è TECNOLOGIA APLICADA (sugest√µes modernas para tornar o sistema robusto):

üîÑ Use MutationObserver para garantir que o modal foi carregado antes de tentar preencher campos.

‚è±Ô∏è Utilize waitForElement + verifica√ß√£o de DOM ReadyState para aguardar cada campo.

üß© Utilize uma camada de Field Mapper que mapeia: campo l√≥gico (ex: "objetivo_aprendizado") ‚ÜîÔ∏è seletor real (ex: "#input-objetivo").

üí° Se algum campo for "select" ou "multi-select", utilize um utilit√°rio de triggering de eventos (dispatchEvent).

üí¨ Use console.group para debug e logging em tempo real de cada passo: carregamento ‚Üí preenchimento ‚Üí valida√ß√£o ‚Üí clique.

‚úÖ Ap√≥s preenchimento, verifique valor do campo via DOM.value para garantir que foi aplicado corretamente.

üîê Fa√ßa o bot√£o ‚ÄúConstruir Atividade‚Äù ser clicado via click() apenas quando todos os campos estiverem preenchidos e v√°lidos.

üìã CHECKLIST PARA AN√ÅLISE COMPLETA:

 Cada tipo de atividade possui mapeamento correto de campos?

 Os dados da IA seguem o mesmo nome das chaves do mapeamento?

 Existe um validador que checa se todos os campos foram preenchidos antes de clicar no bot√£o de constru√ß√£o?

 O modal est√° sendo monitorado para saber quando est√° 100% pronto para ser manipulado?

 Os campos s√£o preenchidos com eventos corretos (ex: input.dispatchEvent(new Event('input')))?

 O clique autom√°tico do bot√£o ‚ÄúConstruir Atividade‚Äù est√° condicionado a sucesso de preenchimento?

üí° MELHORIA ADICIONAL: Use uma estrutura de fallback inteligente

Se por algum motivo um campo n√£o puder ser preenchido, exiba um aviso na interface em forma de tooltip ou console.log informando o campo que falhou e por qu√™.

üìÅ SUGEST√ÉO DE NOVO ARQUIVO PARA GERENCIAR A ORDEM E EXECU√á√ÉO:

/src/features/schoolpower/construction/automationController.ts

Fun√ß√£o principal:

const autoBuildActivity = async (activityId, type, iaData) => {
await waitModalLoad(activityId);
const fieldMap = getFieldMap(type);
const success = await fillFields(fieldMap, iaData, activityId);
if (success) {
clickBuildButton(activityId);
} else {
logError(Erro ao preencher todos os campos da atividade ${activityId});
}
}

‚úÖ RESULTADO ESPERADO DEPOIS DESTE PROMPT:

Atividades s√£o constru√≠das automaticamente ap√≥s o Plano de A√ß√£o ser aprovado.

Nenhuma interven√ß√£o do usu√°rio √© necess√°ria.

Campos s√£o todos corretamente preenchidos.

O bot√£o "Construir Atividade" √© acionado automaticamente.

Logs s√£o vis√≠veis no console para facilitar debugging.

Nenhum erro visual ou de l√≥gica.

