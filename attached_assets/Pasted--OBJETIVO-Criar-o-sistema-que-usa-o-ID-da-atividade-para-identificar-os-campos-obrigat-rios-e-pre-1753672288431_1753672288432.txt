🧠 OBJETIVO: Criar o sistema que usa o ID da atividade para identificar os campos obrigatórios e preencher todos os campos da atividade automaticamente no mini-card da interface de Plano de Ação, com base no tipo de atividade (Ex: Lista de Exercícios).

⚙️ A estrutura do sistema é baseada nos seguintes arquivos:

src/features/schoolpower/data/schoolPowerActivities.json → contém todas as 82 atividades, com ID e nome.

src/features/schoolpower/data/activityMaterialFieldsMap.ts → novo arquivo criado que define os campos obrigatórios para cada tipo de atividade.

src/features/schoolpower/services/generatePersonalizedPlan.ts → onde o prompt é enviado para a IA Gemini para gerar sugestões.

src/features/schoolpower/services/actionPlanService.ts → serviço que manipula a resposta da IA.

Modal e Mini-Card de sugestão na interface do School Power → onde os dados preenchidos devem aparecer.

🚨 AGORA, O PROMPT FINAL PARA A IA DA VIBE CODE:

──────────────────────────────────────────────

🧠 Prompt para a IA da Vibe Code configurar o sistema do School Power

⛓️ Contexto:

Estamos desenvolvendo o sistema School Power para gerar automaticamente sugestões personalizadas de atividades pedagógicas através da IA Gemini. A IA já consegue gerar sugestões com título e descrição, mas agora queremos que todos os campos da atividade sejam preenchidos automaticamente, com base no tipo da atividade.

💡 Objetivo do sistema:

Fazer com que, para cada sugestão gerada pela IA Gemini na interface de Plano de Ação, todos os campos visíveis da atividade (incluindo título, descrição, disciplina, dificuldade, formato de entrega, tempo estimado, objetivos, materiais necessários, etc.) sejam preenchidos automaticamente dentro do mini-card da sugestão, com base no ID da atividade.

📁 Estrutura de dados usada:

schoolPowerActivities.json: contém os 82 tipos de atividades com seus respectivos IDs.

activityMaterialFieldsMap.ts (novo): arquivo que define, para cada ID, quais campos precisam obrigatoriamente ser preenchidos.

generatePersonalizedPlan.ts e actionPlanService.ts: responsáveis por montar o prompt e enviar para a IA Gemini gerar as sugestões.

✅ Passos que a IA da Vibe Code deve implementar:

Criar o arquivo src/features/schoolpower/data/activityMaterialFieldsMap.ts com a seguinte estrutura:

ts
Copiar
Editar
// activityMaterialFieldsMap.ts

export const activityMaterialFieldsMap = {
  "lista-exercicios": {
    camposObrigatorios: [
      "disciplina",
      "dificuldade",
      "formatoEntrega",
      "tempoEstimado",
      "objetivos",
      "materiais"
    ]
  },
  "prova": {
    camposObrigatorios: [
      "disciplina",
      "quantidadeQuestoes",
      "tipoQuestao",
      "tempoEstimado",
      "materiais"
    ]
  },
  ...
  // repetir para os 82 IDs de schoolPowerActivities.json
}
Atualizar o prompt enviado para a IA Gemini (no arquivo generatePersonalizedPlan.ts), para que, para cada sugestão, a IA:

Identifique o ID da atividade.

Consulte automaticamente o arquivo activityMaterialFieldsMap.ts para saber quais campos são obrigatórios para esse ID.

Preencha os campos obrigatórios com dados realistas, criativos e compatíveis com a faixa etária e o objetivo educacional.

Retorne esses dados no formato correto, para que eles possam ser exibidos automaticamente dentro do mini-card da interface de Plano de Ação, no card de Construção.

Atualizar a função que processa a resposta da IA (em actionPlanService.ts) para transformar corretamente os dados retornados pela IA em objetos que contenham:

ts
Copiar
Editar
{
  id: "lista-exercicios",
  titulo: "Lista de Exercícios: Multiplicação",
  descricao: "Uma lista para reforçar multiplicação com números inteiros...",
  camposPreenchidos: {
    disciplina: "Matemática",
    dificuldade: "Intermediária",
    formatoEntrega: "PDF",
    tempoEstimado: "40 minutos",
    objetivos: ["Refinar o cálculo de multiplicação", "Resolver problemas aplicados"],
    materiais: ["Caderno", "Calculadora", "Folha impressa"]
  }
}
Exibir esses dados no mini-card da sugestão, abaixo do título e da descrição, como já previsto no design da interface do Plano de Ação.

Manter intacto o comportamento atual do sistema. Se o tipo de atividade não tiver campos obrigatórios definidos, continuar exibindo apenas título e descrição.

🔁 Extra:

Durante os testes, a IA deve priorizar a sugestão do tipo de atividade "lista-exercicios", para garantir que o sistema está funcionando corretamente.

🧪 Etapa de teste:

Assim que o sistema estiver implementado, sugerir manualmente uma atividade do tipo "lista-exercicios" e conferir se os campos adicionais aparecem automaticamente no mini-card.

Verificar se todos os campos esperados estão sendo preenchidos conforme o arquivo de mapeamento.

🛡️ Regras adicionais:

O arquivo de campos obrigatórios (activityMaterialFieldsMap.ts) deve permitir fácil edição e adição de novos campos.

O sistema precisa ser escalável para os 82 tipos de atividades.

A resposta da IA precisa ser validada para que não falte nenhum campo obrigatório.