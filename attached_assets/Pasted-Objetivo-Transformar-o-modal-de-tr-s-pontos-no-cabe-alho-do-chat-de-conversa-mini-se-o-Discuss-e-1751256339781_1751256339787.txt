Objetivo: Transformar o modal de três pontos no cabeçalho do chat de conversa (mini-seção "Discussões") em um modal funcional com as opções "Configurações", "Resumir conversa com IA" e "Selecionar mensagens". Ao clicar em "Configurações", exibir um modal moderno e personalizado no centro do card de conversa, exatamente como representado nas imagens enviadas, com as informações do grupo (nome, tipo, visibilidade, etc.) configuradas corretamente. Todas as funcionalidades existentes devem ser preservadas, e o design/layout da mini-seção "Grupos de Estudos" (incluindo modais de "Adicionar Grupo" e "Criar Novo Grupo") não deve ser alterado.



Instruções Gerais





Escopo Restrito: Foque exclusivamente na função accessGroup e adicione/modifique funções relacionadas ao modal (showOptionsModal, showSettingsModal) no frontend. Não modifique o design, layout ou qualquer elemento da mini-seção "Grupos de Estudos", incluindo os modais de "Adicionar Grupo" e "Criar Novo Grupo", nem outras partes do código (ex.: createGroup, joinGroupByCode, loadAllGroups).



Preservação: Mantenha intactas todas as funcionalidades existentes (criação via modal, adesão, saída/exclusão, chat, pesquisa, contagem de online), sem impacto no layout ou design atual.



Eficiência: Implemente as opções com validação e logs, e configure o modal de configurações com dados dinâmicos do grupo via Supabase.



Testes Completos: Após as alterações, teste o modal e envie os logs.



Análise de Cenários





Cenário 1: Clique em Três Pontos - O modal deve abrir com as três opções funcionais.



Cenário 2: Clique em "Configurações" - O modal de configurações deve aparecer com dados do grupo corretos.



Cenário 3: Clique em "Resumir conversa com IA" - Deve exibir um alerta placeholder (funcionalidade futura).



Cenário 4: Clique em "Selecionar mensagens" - Deve exibir um alerta placeholder (funcionalidade futura).



Cenário 5: Erro de Dados do Grupo - Implementar retry para carregar dados do Supabase.



Modificações no Frontend (JavaScript)

 // Atualizar accessGroup para incluir o modal de opções const accessGroup = async (groupId) => { try { console.log(`Acessando grupo ${groupId}...`); const userId = await validateUserAuth(); if (!userId) { console.error('Usuário não autenticado.'); alert('Usuário não autenticado.'); return; } 

// Cache para nomes e imagens de perfil
const userCache = new Map();
const { data: users } = await supabase
  .from('auth.users')
  .select('id, user_metadata')
  .in('id', (await supabase.from('membros_grupos').select('user_id').eq('grupo_id', groupId)).data.map(u => u.user_id));
users.forEach(user => {
  const metadata = user.user_metadata || {};
  userCache.set(user.id, {
    name: metadata.name || `Usuário ${user.id.slice(0, 5)}`,
    avatar_url: metadata.avatar_url || null
  });
});

// Contagem de membros online
let onlineCount = 0;
const updateOnlineCount = () => {
  const now = new Date();
  onlineCount = (supabase
    .from('user_sessions')
    .select('user_id', { count: 'exact' })
    .eq('grupo_id', groupId)
    .gte('last_active', new Date(now - 30 * 1000).toISOString())
  ).then(({ count }) => count || 0);
};
setInterval(updateOnlineCount, 15000);
updateOnlineCount();

const groupInterface = document.createElement('div');
groupInterface.id = 'group-interface';
groupInterface.style.cssText = 'margin-left: 250px; padding: 20px;';
groupInterface.innerHTML = `
  <div style="display: flex; justify-content: space-between; border-bottom: 1px solid #ccc; padding-bottom: 10px;">
    <div class="mini-sections">
      <button class="active" style="background: #3498db; color: white; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;">Discussões</button>
      <button disabled style="background: #ddd; color: #666; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;">Tarefas</button>
      <button disabled style="background: #ddd; color: #666; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;">Membros</button>
      <button disabled style="background: #ddd; color: #666; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;">Configurações</button>
      <button disabled style="background: #ddd; color: #666; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;">Notificações</button>
    </div>
    <div style="display: flex; align-items: center;">
      <span id="online-count" style="margin-right: 10px; color: #2ecc71;">Online: <span id="online-number">0</span></span>
      <button id="search-icon" style="background: none; border: none; cursor: pointer; margin-right: 10px;">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
      </button>
      <button id="menu-icon" style="background: none; border: none; cursor: pointer;">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="12" cy="12" r="1"></circle><circle cx="12" cy="5" r="1"></circle><circle cx="12" cy="19" r="1"></circle>
        </svg>
      </button>
    </div>
  </div>
  <div id="discussions-content" style="margin-top: 20px; height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
    <div id="chat-messages" style="display: flex; flex-direction: column-reverse;"></div>
  </div>
  <div style="margin-top: 10px; display: flex; align-items: center;">
    <input id="chat-input" type="text" placeholder="Digite sua mensagem..." style="flex-grow: 1; padding: 5px; border: 1px solid #ccc; border-radius: 5px; margin-right: 5px;">
    <button onclick="sendMessage('${groupId}')" style="background: #2ecc71; color: white; border: none; padding: 5px 10px; border-radius: 5px;">Enviar</button>
  </div>
  <div id="search-bar" style="display: none; margin-top: 10px;">
    <input id="search-input" type="text" placeholder="Pesquisar mensagens..." style="width: 200px; padding: 5px; border: 1px solid #ccc; border-radius: 5px;">
    <button onclick="hideSearchBar()" style="background: #e74c3c; color: white; border: none; padding: 5px 10px; border-radius: 5px; margin-left: 5px;">Fechar</button>
  </div>
`;
document.getElementById('main-content').innerHTML = '';
document.getElementById('main-content').appendChild(groupInterface);

// Atualizar contagem de online
setInterval(() => {
  updateOnlineCount().then(count => {
    document.getElementById('online-number').textContent = count;
  });
}, 15000);

// Configurar Realtime para chat e online
const channel = supabase
  .channel(`chat-${groupId}`)
  .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'mensagens', filter: `grupo_id=eq.${groupId}` }, (payload) => {
    addMessageToChat(payload.new, userCache);
  })
  .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'user_sessions', filter: `grupo_id=eq.${groupId}` }, () => {
    updateOnlineCount().then(count => document.getElementById('online-number').textContent = count);
  })
  .on('postgres_changes', { event: 'DELETE', schema: 'public', table: 'user_sessions', filter: `grupo_id=eq.${groupId}` }, () => {
    updateOnlineCount().then(count => document.getElementById('online-number').textContent = count);
  })
  .subscribe(async (status) => {
    if (status === 'SUBSCRIBED') {
      console.log(`Subscribed to chat and online channel for group ${groupId}`);
      const { data: messages } = await supabase
        .from('mensagens')
        .select('*')
        .eq('grupo_id', groupId)
        .order('enviado_em', { ascending: false });
      messages.forEach(message => addMessageToChat(message, userCache));
      updateOnlineCount().then(count => document.getElementById('online-number').textContent = count);
    }
  });

// Evento para ícone de pesquisa
document.getElementById('search-icon').addEventListener('click', () => {
  document.getElementById('search-bar').style.display = 'block';
  document.getElementById('search-input').focus();
  filterMessages(groupId);
});

// Evento para ícone de três pontos
document.getElementById('menu-icon').addEventListener('click', () => showOptionsModal(groupId));

console.log(`Interface do grupo ${groupId} carregada com chat configurado.`);

} catch (error) { console.error('Erro ao acessar grupo:', error.message, error.stack); alert('Erro ao acessar o grupo. Verifique o console.'); } };

// Função para atualizar contagem de membros online const updateOnlineCount = async () => { const now = new Date(); const { count } = await supabase .from('user_sessions') .select('user_id', { count: 'exact' }) .eq('grupo_id', groupId) .gte('last_active', new Date(now - 30 * 1000).toISOString()); return count || 0; };

// Função para filtrar mensagens const filterMessages = async (groupId) => { const searchInput = document.getElementById('search-input'); searchInput.addEventListener('input', async () => { const query = searchInput.value.trim(); const { data: messages } = await supabase .from('mensagens') .select('*') .eq('grupo_id', groupId) .ilike('conteudo', %${query}%) .order('enviado_em', { ascending: false }); const chatMessages = document.getElementById('chat-messages'); chatMessages.innerHTML = ''; messages.forEach(message => addMessageToChat(message, userCache)); }); };

// Função para esconder a barra de pesquisa const hideSearchBar = () => { document.getElementById('search-bar').style.display = 'none'; document.getElementById('search-input').value = ''; loadInitialMessages(groupId); // Recarregar mensagens originais };

// Função para carregar mensagens iniciais const loadInitialMessages = async (groupId) => { const { data: messages } = await supabase .from('mensagens') .select('*') .eq('grupo_id', groupId) .order('enviado_em', { ascending: false }); const chatMessages = document.getElementById('chat-messages'); chatMessages.innerHTML = ''; messages.forEach(message => addMessageToChat(message, userCache)); };

// Função para exibir o modal de opções const showOptionsModal = (groupId) => { const modal = document.createElement('div'); modal.style.cssText = 'position: absolute; top: 40px; right: 0; background: #fff; border: 1px solid #ccc; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); z-index: 1000; padding: 10px;'; modal.innerHTML = <ul style="list-style: none; padding: 0; margin: 0;"> <li style="padding: 5px 10px; cursor: pointer;" onclick="showSettingsModal('${groupId}')">Configurações</li> <li style="padding: 5px 10px; cursor: pointer;" onclick="alert('Funcionalidade "Resumir conversa com IA" em desenvolvimento.')">Resumir conversa com IA</li> <li style="padding: 5px 10px; cursor: pointer;" onclick="alert('Funcionalidade "Selecionar mensagens" em desenvolvimento.')">Selecionar mensagens</li> </ul> ; document.getElementById('group-interface').appendChild(modal);

// Fechar modal ao clicar fora const closeModal = (e) => { if (!modal.contains(e.target) && e.target.id !== 'menu-icon') { modal.remove(); document.removeEventListener('click', closeModal); } }; setTimeout(() => document.addEventListener('click', closeModal), 100); };

// Função para exibir o modal de configurações const showSettingsModal = async (groupId) => { try { const { data: groupData, error } = await supabase .from('grupos_estudo') .select('nome, tipo_grupo, is_private, is_visible_to_all, codigo_unico') .eq('id', groupId) .single(); if (error) throw error;

const modal = document.createElement('div');
modal.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: #fff; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.5); z-index: 2000; width: 400px; font-family: Arial, sans-serif; text-align: left;';
modal.innerHTML = `
  <h2 style="color: #333; margin-top: 0;">Configurações do Grupo</h2>
  <div style="margin-bottom: 15px;">
    <label style="font-weight: bold;">Nome do Grupo:</label>
    <p>${groupData.nome}</p>
  </div>
  <div style="margin-bottom: 15px;">
    <label style="font-weight: bold;">Tipo de Grupo:</label>
    <p>${groupData.tipo_grupo}</p>
  </div>
  <div style="margin-bottom: 15px;">
    <label style="font-weight: bold;">Visibilidade:</label>
    <p>${groupData.is_private ? 'Privado' : 'Público'}</p>
  </div>
  <div style="margin-bottom: 15px;">
    <label style="font-weight: bold;">Visível para Todos:</label>
    <p>${groupData.is_visible_to_all ? 'Sim' : 'Não'}</p>
  </div>
  <div style="margin-bottom: 15px;">
    <label style="font-weight: bold;">Código Único:</label>
    <p>${groupData.codigo_unico}</p>
  </div>
  <button onclick="this.parentElement.remove();" style="background: #e74c3c; color: white; border: none; padding: 5px 15px; border-radius: 5px; cursor: pointer;">Fechar</button>
`;
document.body.appendChild(modal);

} catch (error) { console.error('Erro ao carregar configurações:', error.message, error.stack); alert('Erro ao carregar configurações. Verifique o console.'); } };

// Função para adicionar mensagem ao chat const addMessageToChat = (message, userCache) => { const userId = validateUserAuth(); const userData = userCache.get(message.user_id) || { name: Usuário ${message.user_id.slice(0, 5)}, avatar_url: null }; const chatMessages = document.getElementById('chat-messages'); const messageDiv = document.createElement('div'); messageDiv.style.cssText = display: flex; align-items: flex-start; margin: 5px 0; ${message.user_id === userId ? 'flex-direction: row-reverse;' : 'flex-direction: row;'}; messageDiv.innerHTML = <div style="margin: ${message.user_id === userId ? '0 0 0 10px' : '0 10px 0 0'};"> <img src="${userData.avatar_url ||https://ui-avatars.com/api/?name=${encodeURIComponent(userData.name)}}" alt="${userData.name}" style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;"> </div> <div style="max-width: 70%; ${message.user_id === userId ? 'text-align: right;' : 'text-align: left;' }"> <strong>${userData.name}</strong><br> <div style="background: ${message.user_id === userId ? '#dcf8c6' : '#e9ecef'}; padding: 10px; border-radius: 10px; display: inline-block;"> ${message.conteudo} </div><br> <small>${new Date(message.enviado_em).toLocaleTimeString()}</small> </div> ; chatMessages.prepend(messageDiv); chatMessages.scrollTop = 0; };

// Função para enviar mensagem const sendMessage = async (groupId) => { try { const userId = await validateUserAuth(); if (!userId) { console.error('Usuário não autenticado.'); alert('Usuário não autenticado.'); return; } const input = document.getElementById('chat-input'); const content = input.value.trim(); if (!content) { alert('Digite uma mensagem.'); return; } const { error } = await supabase .from('mensagens') .insert({ grupo_id: groupId, user_id: userId, conteudo: content }); if (error) throw error; input.value = ''; console.log(Mensagem enviada para grupo ${groupId}.); } catch (error) { console.error('Erro ao enviar mensagem:', error.message, error.stack); alert('Erro ao enviar mensagem. Verifique o console.'); } };

// Chamar loadMyGroups manualmente para teste imediato loadMyGroups();

// Manter a inicialização existente document.addEventListener('DOMContentLoaded', () => { loadMyGroups(); });

// Manter outras funções existentes (ex.: createGroup, joinGroupByCode, loadAllGroups, showCelebrationModal, joinGroupDirectly, leaveGroup, deleteGroup, returnToGroups, showLeaveModal) sem alterações