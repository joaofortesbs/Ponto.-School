[plugin:vite:react-swc] × the name `gruposFiltrados` is defined multiple times
     ╭─[/home/runner/workspace/src/components/turmas/gradegruposdeestudo/GradeGruposEstudo.tsx:57:1]
  57 │   const [selectedGrupo, setSelectedGrupo] = useState<GrupoEstudo | null>(null);
  58 │   const { toast } = useToast();
  59 │   const [grupos, setGrupos] = useState<GrupoEstudo[]>([]);
  60 │   const [gruposFiltrados, setGruposFiltrados] = useState<GrupoEstudo[]>([]);
     ·          ───────┬───────
     ·                 ╰── previous definition of `gruposFiltrados` here
  61 │   const [searchTerm, setSearchTerm] = useState('');
  62 │   const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  63 │   const [configGrupoId, setConfigGrupoId] = useState<string | null>(null);
  64 │   const [grupoSelecionadoParaSair, setGrupoSelecionadoParaSair] = useState<string | null>(null);
  65 │   const [isLoading, setIsLoading] = useState(true);
  66 │   const [activeTab, setActiveTab] = useState('todos');
  67 │   const [userId] = useState(() => {
  68 │     // Simula um ID de usuário logado aleatório para fins de demonstração
  69 │     // Em uma aplicação real, viria do contexto de autenticação
  70 │     return localStorage.getItem('userId') || `user_${Math.floor(Math.random() * 1000000)}`;
  71 │   });
  72 │ 
  73 │   // Efeito para salvar o userId no localStorage
  74 │   useEffect(() => {
  75 │     if (userId) {
  76 │       localStorage.setItem('userId', userId);
  77 │     }
  78 │   }, [userId]);
  79 │ 
  80 │   // Carregar grupos do banco de dados e do armazenamento local
  81 │   useEffect(() => {
  82 │     const carregarGrupos = async () => {
  83 │       try {
  84 │         setLoading(true);
  85 │ 
  86 │         // Buscar os grupos do usuário atual do Supabase
  87 │         const { data: { session } } = await supabase.auth.getSession();
  88 │ 
  89 │         if (session) {
  90 │           // Obter a lista de grupos removidos do localStorage para filtragem
  91 │           const gruposRemovidosKey = 'grupos_removidos';
  92 │           const gruposRemovidosStr = localStorage.getItem(gruposRemovidosKey) || '[]';
  93 │           const gruposRemovidos = JSON.parse(gruposRemovidosStr);
  94 │ 
  95 │           // Primeiro carregamos os grupos locais para exibição rápida
  96 │           const gruposLocais = obterGruposLocal()
  97 │             .filter(grupo => grupo.user_id === session.user.id)
  98 │             // Filtrar grupos que foram removidos
  99 │             .filter(grupo => !gruposRemovidos.includes(grupo.id));
 100 │ 
 101 │           // Converter dados locais para o formato da interface
 102 │           if (gruposLocais.length > 0) {
 103 │             const gruposLocaisFormatados: GrupoEstudo[] = gruposLocais.map((grupo: any) => ({
 104 │               id: grupo.id,
 105 │               nome: grupo.nome,
 106 │               descricao: grupo.descricao,
 107 │               cor: grupo.cor,
 108 │               membros: grupo.membros || 1,
 109 │               topico: grupo.topico,
 110 │               disciplina: grupo.disciplina || "",
 111 │               icon: grupo.topico_icon,
 112 │               dataCriacao: grupo.data_criacao,
 113 │               tendencia: Math.random() > 0.7 ? "alta" : undefined, // Valor aleatório para demo
 114 │               novoConteudo: Math.random() > 0.7, // Valor aleatório para demo
 115 │               privado: grupo.privado,
 116 │               visibilidade: grupo.visibilidade,
 117 │               topico_nome: grupo.topico_nome,
 118 │               topico_icon: grupo.topico_icon,
 119 │               data_inicio: grupo.data_inicio,
 120 │               criador: grupo.criador || "você" // Garantir que o criador esteja definido
 121 │             }));
 122 │ 
 123 │             // Exibir primeiro os grupos locais enquanto carregamos do Supabase
 124 │             setGruposEstudo(gruposLocaisFormatados);
 125 │           }
 126 │ 
 127 │           // Tentar buscar do Supabase
 128 │           try {
 129 │             const { data, error } = await supabase
 130 │               .from('grupos_estudo')
 131 │               .select('*')
 132 │               .eq('user_id', session.user.id)
 133 │               .order('data_criacao', { ascending: false });
 134 │ 
 135 │             if (error) {
 136 │               console.error("Erro ao buscar grupos de estudo do Supabase:", error);
 137 │               // Continuar com os grupos locais já carregados
 138 │ 
 139 │               // Tentar sincronizar os grupos locais com o Supabase
 140 │               await sincronizarGruposLocais(session.user.id);
 141 │             } else {
 142 │               console.log("Grupos carregados do Supabase:", data);
 143 │ 
 144 │               // Filtrar grupos do Supabase que não estão na lista de removidos
 145 │               const gruposSupabaseFiltrados = data.filter((grupo: any) => 
 146 │                 !gruposRemovidos.includes(grupo.id)
 147 │               );
 148 │ 
 149 │               // Converter dados do banco para o formato da interface
 150 │               const gruposFormatados: GrupoEstudo[] = gruposSupabaseFiltrados.map((grupo: any) => ({
 151 │                 id: grupo.id,
 152 │                 nome: grupo.nome,
 153 │                 descricao: grupo.descricao,
 154 │                 cor: grupo.cor,
 155 │                 membros: grupo.membros || 1,
 156 │                 topico: grupo.topico,
 157 │                 disciplina: grupo.disciplina || "",
 158 │                 icon: grupo.topico_icon,
 159 │                 dataCriacao: grupo.data_criacao,
 160 │                 tendencia: Math.random() > 0.7 ? "alta" : undefined, // Valor aleatório para demo
 161 │                 novoConteudo: Math.random() > 0.7, // Valor aleatório para demo
 162 │                 privado: grupo.privado,
 163 │                 visibilidade: grupo.visibilidade,
 164 │                 topico_nome: grupo.topico_nome,
 165 │                 topico_icon: grupo.topico_icon,
 166 │                 data_inicio: grupo.data_inicio,
 167 │                 criador: grupo.criador || "você" // Garantir que o criador esteja definido
 168 │               }));
 169 │ 
 170 │               // Combinar grupos do Supabase com grupos locais que não estão no Supabase
 171 │               const gruposLocaisFiltrados = gruposLocais
 172 │                 .filter(grupoLocal => grupoLocal.id.startsWith('local_') && 
 173 │                   !gruposSupabaseFiltrados.some((grupoRemoto: any) => grupoRemoto.id === grupoLocal.id))
 174 │                 .map((grupo: any) => ({
 175 │                   id: grupo.id,
 176 │                   nome: grupo.nome,
 177 │                   descricao: grupo.descricao,
 178 │                   cor: grupo.cor,
 179 │                   membros: grupo.membros || 1,
 180 │                   topico: grupo.topico,
 181 │                   disciplina: grupo.disciplina || "",
 182 │                   icon: grupo.topico_icon,
 183 │                   dataCriacao: grupo.data_criacao,
 184 │                   tendencia: Math.random() > 0.7 ? "alta" : undefined,
 185 │                   novoConteudo: Math.random() > 0.7,
 186 │                   privado: grupo.privado,
 187 │                   visibilidade: grupo.visibilidade,
 188 │                   topico_nome: grupo.topico_nome,
 189 │                   topico_icon: grupo.topico_icon,
 190 │                   data_inicio: grupo.data_inicio,
 191 │                   criador: grupo.criador || "você" // Garantir que o criador esteja definido
 192 │                 }));
 193 │ 
 194 │               setGruposEstudo([...gruposFormatados, ...gruposLocaisFiltrados]);
 195 │             }
 196 │           } catch (supabaseError) {
 197 │             console.error("Falha ao usar Supabase:", supabaseError);
 198 │             // Já estamos usando os dados locais, então continuar com eles
 199 │           }
 200 │         }
 201 │       } catch (error) {
 202 │         console.error("Erro ao carregar grupos de estudo:", error);
 203 │       } finally {
 204 │         setLoading(false);
 205 │       }
 206 │     };
 207 │ 
 208 │     carregarGrupos();
 209 │ 
 210 │     // Definir um intervalo para re-sincronização a cada 5 minutos
 211 │     const intervaloSincronizacao = setInterval(async () => {
 212 │       try {
 213 │         const { data: { session } } = await supabase.auth.getSession();
 214 │         if (session) {
 215 │           await sincronizarGruposLocais(session.user.id);
 216 │         }
 217 │       } catch (error) {
 218 │         console.error("Erro na sincronização automática:", error);
 219 │       }
 220 │     }, 300000); // 5 minutos
 221 │ 
 222 │     // NÃO recarregar os grupos quando a página se torna visível novamente
 223 │     // pois isso estava causando o problema de recarregamento indevido
 224 │ 
 225 │     // Limpar listeners e intervalos quando o componente for desmontado
 226 │     return () => {
 227 │       clearInterval(intervaloSincronizacao);
 228 │     };
 229 │   }, []); // Remover dependências para evitar recarregamentos desnecessários
 230 │ 
 231 │     // Carrega os grupos de estudo
 232 │     useEffect(() => {
 233 │       const carregarGrupos = async () => {
 234 │         setIsLoading(true);
 235 │         try {
 236 │           const todosGrupos = await getGruposEstudo();
 237 │           setGrupos(todosGrupos);
 238 │           setGruposFiltrados(todosGrupos);
 239 │         } catch (error) {
 240 │           console.error('Erro ao carregar grupos de estudo:', error);
 241 │           toast({
 242 │             title: "Erro ao carregar grupos",
 243 │             description: "Não foi possível recuperar a lista de grupos de estudo.",
 244 │             variant: "destructive",
 245 │           });
 246 │         } finally {
 247 │           setIsLoading(false);
 248 │         }
 249 │       };
 250 │   
 251 │       carregarGrupos();
 252 │     }, []);
 253 │ 
 254 │   // Filtra os grupos baseado no tópico selecionado e busca
 255 │   const gruposFiltrados = gruposEstudo.filter(
     ·         ───────┬───────
     ·                ╰── `gruposFiltrados` redefined here
 256 │     (grupo) => {
 257 │       const matchesSearch = grupo.nome.toLowerCase().includes(searchQuery.toLowerCase()) || 
 258 │                            (grupo.disciplina?.toLowerCase().includes(searchQuery.toLowerCase()) || false);
     ╰────
/home/runner/workspace/src/components/turmas/gradegruposdeestudo/GradeGruposEstudo.tsx:57:1
611|                    };
612|                  }
613|                  return g;
   |             ^
614|                })
615|              );