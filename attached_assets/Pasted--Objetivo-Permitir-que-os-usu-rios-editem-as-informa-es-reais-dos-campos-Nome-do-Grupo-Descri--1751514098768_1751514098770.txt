

Objetivo: Permitir que os usuários editem as informações reais dos campos (Nome do Grupo, Descrição, Disciplina/Área, Tópico Específico, Tags do Grupo e Privacidade & Acesso) dentro da interface da mini-seção "Ajustes" na interface de cada grupo de estudos, na mini-seção de Grupos de Estudos. As alterações feitas pelos usuários devem ser salvas no banco de dados Supabase após clicar no botão "Salvar Alterações". É essencial que o design atual da mini-seção "Ajustes" não seja alterado de forma alguma; as modificações devem ser feitas por cima do layout e estilos existentes. Preservar todas as funcionalidades existentes e garantir compatibilidade com o restante da interface.



Instruções Gerais





Escopo Restrito: Foque exclusivamente na função accessGroup e na função switchSection no frontend para adicionar a funcionalidade de edição e salvamento dos campos na mini-seção "Ajustes". Não modifique o design (HTML, CSS, layout, estilos) das outras mini-seções ("Discussões", "Membros", "Sobre", "Notificações"), nem dos modals de "Adicionar Grupo" e "Criar Novo Grupo", nem outras partes do código (ex.: createGroup, joinGroupByCode, loadAllGroups).



Preservação do Design: Mantenha o layout, os estilos (cores, bordas, tamanhos) e a estrutura HTML da mini-seção "Ajustes" exatamente como estão, adicionando apenas a lógica de edição e o botão "Salvar Alterações" dentro dos campos existentes.



Edição e Salvamento:





Remover o atributo readonly dos campos editáveis (Nome do Grupo, Descrição, Disciplina/Área, Tópico Específico, Tags do Grupo) e o atributo disabled do campo Privacidade & Acesso.



Adicionar um botão "Salvar Alterações" que atualize os dados no Supabase (tabela grupos) com as novas informações.



Eficiência e Segurança: Utilize Supabase para buscar e atualizar os dados do grupo (colunas nome, descricao, disciplina, topico_especifico, tags, privacidade) com consultas assíncronas, implemente retries (máximo de 3 tentativas com intervalo de 2 segundos) em caso de falha, adicione validações rigorosas (ex.: campos obrigatórios, tamanhos máximos) e logs detalhados para monitoramento.



Testes Completos: Após as alterações, realize testes abrangentes e envie os logs.



Descrição da Interface da Mini-Seção "Ajustes" (Preservação do Design)





Campos Editáveis (sem alterar o design):





Nome do Grupo: Campo de texto existente (ex.: <input> com ID ou classe correspondente).



Descrição: Área de texto existente (ex.: <textarea> com ID ou classe correspondente).



Disciplina/Área: Campo de texto existente (ex.: <input> com ID ou classe correspondente).



Tópico Específico: Campo de texto existente (ex.: <input> com ID ou classe correspondente).



Tags do Grupo: Campo de texto existente (ex.: <input> com ID ou classe correspondente).



Privacidade & Acesso: Dropdown existente (ex.: <select> com ID ou classe correspondente).



Botão "Salvar Alterações": Adicionar dentro da seção "Ajustes" existente, mantendo o estilo atual (ex.: botão com fundo colorido e bordas arredondadas, alinhado ao layout).



Restrição: Não adicionar, remover ou modificar elementos HTML, estilos ou layout, exceto para habilitar edição e adicionar o botão.



Modificações no Frontend (JavaScript)

 // Atualizar accessGroup para permitir edição e salvamento na mini-seção "Ajustes" let currentGroupId = null; // Variável global para armazenar o groupId ativo

const accessGroup = async (groupId) => { try { console.log(Acessando grupo ${groupId}...); const userId = await validateUserAuth(); if (!userId) { console.error('Usuário não autenticado.'); alert('Usuário não autenticado.'); return; }

// Validar e armazenar o groupId
if (!groupId || typeof groupId !== 'string') {
  console.error('ID do grupo inválido:', groupId);
  alert('ID do grupo inválido. Verifique o console.');
  return;
}
currentGroupId = groupId;

// Ocultar o cabeçalho de Minhas Turmas
const header = document.querySelector('.groups-header');
if (header) header.style.display = 'none';

// Cache para nomes e imagens de perfil
const userCache = new Map();
const { data: users, error: usersError } = await supabase
  .from('auth.users')
  .select('id, user_metadata')
  .in('id', (await supabase.from('membros_grupos').select('user_id').eq('grupo_id', groupId)).data.map(u => u.user_id));
if (usersError) throw usersError;
if (!users) throw new Error('Nenhum usuário encontrado no grupo.');
users.forEach(user => {
  const metadata = user.user_metadata || {};
  userCache.set(user.id, {
    name: metadata.name || `Usuário ${user.id.slice(0, 5)}`,
    avatar_url: metadata.avatar_url || null
  });
});
console.log(`Cache de usuários populado com ${userCache.size} entradas.`);

// Buscar dados do grupo com retries
const fetchGroupData = async (groupId, retries = 3, delay = 2000) => {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const { data: groupData, error: groupError } = await supabase
        .from('grupos')
        .select('nome, descricao, disciplina, topico_especifico, codigo_unico, tags, privacidade')
        .eq('id', groupId)
        .single();
      if (groupError) throw groupError;
      if (!groupData) throw new Error(`Dados do grupo ${groupId} não encontrados.`);
      return groupData;
    } catch (error) {
      console.warn(`Tentativa ${attempt} de buscar dados do grupo ${groupId} falhou:`, error.message);
      if (attempt === retries) throw error;
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
};
const groupData = await fetchGroupData(groupId);

// Contagem de membros online
let onlineCount = 0;
const updateOnlineCount = () => {
  const now = new Date();
  return supabase
    .from('user_sessions')
    .select('user_id', { count: 'exact' })
    .eq('grupo_id', groupId)
    .gte('last_active', new Date(now - 30 * 1000).toISOString())
    .then(({ count }) => {
      onlineCount = count || 0;
      return onlineCount;
    })
    .catch(err => {
      console.error('Erro ao atualizar contagem de online:', err.message);
      return 0;
    });
};
setInterval(() => {
  updateOnlineCount().then(count => {
    const onlineNumber = document.getElementById('online-number');
    if (onlineNumber) onlineNumber.textContent = count;
  });
}, 15000);
updateOnlineCount().then(count => {
  const onlineNumber = document.getElementById('online-number');
  if (onlineNumber) onlineNumber.textContent = count;
});

// Preservar a interface existente e adicionar edição
const groupInterface = document.querySelector('#group-interface') || document.createElement('div');
if (!groupInterface.id) {
  groupInterface.id = 'group-interface';
  groupInterface.style.cssText = 'margin-left: 250px; padding: 20px;';
  document.getElementById('main-content').innerHTML = '';
  document.getElementById('main-content').appendChild(groupInterface);
}

// Preencher e habilitar edição dos campos
const fillAndEnableEditing = (groupData) => {
  try {
    const nameInput = document.querySelector('#group-name');
    const descriptionInput = document.querySelector('#group-description');
    const disciplineInput = document.querySelector('#group-discipline');
    const topicInput = document.querySelector('#group-topic');
    const tagsInput = document.querySelector('#group-tags');
    const privacySelect = document.querySelector('#group-privacy');

    if (!nameInput || !descriptionInput || !disciplineInput || !topicInput || !tagsInput || !privacySelect) {
      console.error(`Campos da mini-seção "Ajustes" não encontrados para o grupo ${groupId}. Verifique os seletores.`);
      return;
    }

    // Remover readonly e disabled para edição
    nameInput.removeAttribute('readonly');
    descriptionInput.removeAttribute('readonly');
    disciplineInput.removeAttribute('readonly');
    topicInput.removeAttribute('readonly');
    tagsInput.removeAttribute('readonly');
    privacySelect.removeAttribute('disabled');

    // Preencher com dados iniciais
    nameInput.value = groupData.nome || '';
    descriptionInput.value = groupData.descricao || '';
    disciplineInput.value = groupData.disciplina || '';
    topicInput.value = groupData.topico_especifico || '';
    tagsInput.value = Array.isArray(groupData.tags) ? groupData.tags.join(', ') : groupData.tags || '';
    privacySelect.value = groupData.privacidade || 'public';

    console.log(`Campos da mini-seção "Ajustes" habilitados para edição para o grupo ${groupId}.`);
  } catch (error) {
    console.error(`Erro ao habilitar edição dos campos para o grupo ${groupId}:`, error.message);
    alert('Erro ao carregar os dados dos ajustes. Verifique o console.');
  }
};

// Função para salvar alterações no Supabase
const saveChanges = async (groupId) => {
  try {
    const nameInput = document.querySelector('#group-name');
    const descriptionInput = document.querySelector('#group-description');
    const disciplineInput = document.querySelector('#group-discipline');
    const topicInput = document.querySelector('#group-topic');
    const tagsInput = document.querySelector('#group-tags');
    const privacySelect = document.querySelector('#group-privacy');

    if (!nameInput || !descriptionInput || !disciplineInput || !topicInput || !tagsInput || !privacySelect) {
      console.error(`Campos da mini-seção "Ajustes" não encontrados para salvar alterações no grupo ${groupId}.`);
      alert('Erro ao localizar campos para salvar. Verifique o console.');
      return;
    }

    // Validar campos obrigatórios
    if (!nameInput.value.trim()) {
      alert('O Nome do Grupo é obrigatório.');
      return;
    }

    // Preparar dados para atualização
    const updates = {
      nome: nameInput.value.trim(),
      descricao: descriptionInput.value.trim(),
      disciplina: disciplineInput.value.trim(),
      topico_especifico: topicInput.value.trim(),
      tags: tagsInput.value.split(',').map(tag => tag.trim()).filter(tag => tag),
      privacidade: privacySelect.value
    };

    const { error } = await supabase
      .from('grupos')
      .update(updates)
      .eq('id', groupId);

    if (error) throw error;

    console.log(`Alterações salvas com sucesso para o grupo ${groupId}.`);
    alert('Alterações salvas com sucesso!');
  } catch (error) {
    console.error(`Erro ao salvar alterações para o grupo ${groupId}:`, error.message);
    alert('Erro ao salvar as alterações. Verifique o console.');
  }
};

// Adicionar botão "Salvar Alterações" dentro da seção existente
const settingsContent = document.getElementById('settings-content');
if (settingsContent && !settingsContent.querySelector('#save-button')) {
  const saveButton = document.createElement('button');
  saveButton.id = 'save-button';
  saveButton.textContent = 'Salvar Alterações';
  saveButton.style.cssText = 'background: #2ecc71; color: white; border: none; padding: 5px 10px; border-radius: 5px; margin-top: 10px;';
  saveButton.onclick = () => saveChanges(groupId);
  settingsContent.appendChild(saveButton);
}

// Preencher e habilitar edição inicialmente
fillAndEnableEditing(groupData);

// Atualizar seção com preenchimento e edição
const switchSection = (section, groupId) => {
  const sections = ['discussions', 'members', 'settings'];
  sections.forEach(s => {
    const content = document.getElementById(`${s}-content`);
    if (content) content.style.display = s === section ? 'block' : 'none';
    const button = document.querySelector(`button[onclick*="switchSection('${s}'"]`);
    if (button) {
      button.style.background = s === section ? '#3498db' : '#ddd';
      button.style.color = s === section ? 'white' : '#666';
    }
  });
  if (section === 'settings' && currentGroupId) {
    fillAndEnableEditing(groupData); // Reaplicar edição ao ativar a seção
  }
  console.log(`Seção ${section} ativada para o grupo ${groupId}.`);
};

switchSection('discussions', groupId); // Iniciar com Discussões, mas habilitar edição em Ajustes

// Configurar Realtime para chat e online
const channel = supabase
  .channel(`chat-${groupId}`)
  .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'mensagens', filter: `grupo_id=eq.${groupId}` }, (payload) => {
    addMessageToChat(payload.new, userCache);
  })
  .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'user_sessions', filter: `grupo_id=eq.${groupId}` }, () => {
    updateOnlineCount().then(count => {
      const onlineNumber = document.getElementById('online-number');
      if (onlineNumber) onlineNumber.textContent = count;
    }).catch(err => console.error('Erro na atualização de online via Realtime:', err.message));
    loadMembers(groupId, userCache, userId, isAdminOrOwner);
  })
  .on('postgres_changes', { event: 'DELETE', schema: 'public', table: 'user_sessions', filter: `grupo_id=eq.${groupId}` }, () => {
    updateOnlineCount().then(count => {
      const onlineNumber = document.getElementById('online-number');
      if (onlineNumber) onlineNumber.textContent = count;
    }).catch(err => console.error('Erro na remoção de online via Realtime:', err.message));
    loadMembers(groupId, userCache, userId, isAdminOrOwner);
  })
  .subscribe(async (status) => {
    if (status === 'SUBSCRIBED') {
      console.log(`Subscribed to chat and online channel for group ${groupId}`);
      const { data: messages, error: messagesError } = await supabase
        .from('mensagens')
        .select('*')
        .eq('grupo_id', groupId)
        .order('enviado_em', { ascending: false });
      if (messagesError) throw messagesError;
      messages.forEach(message => addMessageToChat(message, userCache));
      updateOnlineCount().then(count => {
        const onlineNumber = document.getElementById('online-number');
        if (onlineNumber) onlineNumber.textContent = count;
      }).catch(err => console.error('Erro inicial na contagem de online:', err.message));
      loadMembers(groupId, userCache, userId, isAdminOrOwner);
    }
  })
  .catch(err => console.error('Erro ao subscrever ao canal Realtime:', err.message));

// Evento para ícone de pesquisa
const searchIcon = document.getElementById('search-icon');
if (searchIcon) {
  searchIcon.addEventListener('click', () => {
    const searchBar = document.getElementById('search-bar');
    if (searchBar) {
      searchBar.style.display = 'block';
      const searchInput = document.getElementById('search-input');
      if (searchInput) searchInput.focus();
      filterMessages(groupId);
    }
  });
}

// Evento para ícone de três pontos
const menuIcon = document.getElementById('menu-icon');
if (menuIcon && typeof showOptionsModal === 'function') {
  menuIcon.addEventListener('click', () => {
    try {
      console.log(`Abrindo modal de opções para o grupo ${groupId}...`);
      showOptionsModal(groupId);
    } catch (error) {
      console.error(`Erro ao abrir modal de opções para o grupo ${groupId}:`, error.message);
      alert('Erro ao abrir as opções. Verifique o console.');
    }
  });
} else if (menuIcon) {
  console.warn(`Função showOptionsModal não encontrada para o grupo ${groupId}. Ícone desativado.`);
  menuIcon.disabled = true;
}

console.log(`Interface do grupo ${groupId} carregada com edição habilitada em "Ajustes".`);

} catch (error) { console.error('Erro ao acessar grupo:', error.message, error.stack); alert('Erro ao acessar o grupo. Verifique o console.'); const header = document.querySelector('.groups-header'); if (header) header.style.display = 'flex'; } };

// Funções existentes mantidas sem alterações (loadMembers, returnToGroups, updateOnlineCount, filterMessages, hideSearchBar, loadInitialMessages, showSettingsModal, showOptionsModal, addMessageToChat, sendMessage, etc.)