

Objetivo: Habilitar a edição dos campos da mini-seção "Ajustes" (Nome do Grupo, Descrição, Disciplina/Área, Tópico Específico, Tags do Grupo e Privacidade & Acesso) dentro da interface de cada grupo de estudos, permitindo que os usuários modifiquem as informações. Adicionar um botão "Salvar Alterações" que salve as alterações no banco de dados Supabase (tabela grupos) quando clicado. Preservar o design atual da mini-seção "Ajustes" e manter todas as funcionalidades existentes, com validações rigorosas, tratamento de erros e logs detalhados.



Instruções Gerais





Escopo Restrito: Foque exclusivamente na função accessGroup e na função switchSection no frontend para adicionar a funcionalidade de edição e salvamento na mini-seção "Ajustes". Não modifique o design ou layout das outras mini-seções ("Discussões", "Membros", "Sobre", "Notificações"), nem dos modals de "Adicionar Grupo" e "Criar Novo Grupo", nem outras partes do código (ex.: createGroup, joinGroupByCode, loadAllGroups).



Edição dos Campos: Tornar os campos (Nome do Grupo, Descrição, Disciplina/Área, Tópico Específico, Tags do Grupo e Privacidade & Acesso) editáveis ao carregar a seção "Ajustes", removendo o atributo readonly ou disabled conforme aplicável.



Botão de Salvamento: Adicionar um botão "Salvar Alterações" na parte inferior da seção "Ajustes", estilizado para combinar com o design atual (ex.: fundo verde #2ecc71, texto branco, bordas arredondadas), que envie as alterações ao Supabase.



Salvamento no Banco: Atualizar a tabela grupos no Supabase com os novos valores dos campos ao clicar em "Salvar Alterações", incluindo validações para evitar dados inválidos (ex.: campos vazios).



Preservação do Design: Manter o layout e os estilos existentes da mini-seção "Ajustes", apenas ajustando os campos para edição e adicionando o botão.



Testes Completos: Após as alterações, realize testes abrangentes e envie os logs.



Descrição da Nova Interface da Mini-Seção "Ajustes"





Campos Editáveis:





Nome do Grupo: <input type="text"> sem readonly.



Descrição: <textarea> sem readonly.



Disciplina/Área: <input type="text"> sem readonly.



Tópico Específico: <input type="text"> sem readonly.



Tags do Grupo: <input type="text"> sem readonly, aceitando múltiplas tags separadas por vírgulas.



Privacidade & Acesso: <select> sem disabled, com opções "Público" e "Privado".



Botão "Salvar Alterações":





Posicionado na parte inferior da seção.



Estilo: background: #2ecc71; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;.



Ação: Salvar os valores editados no Supabase.



Modificações no Frontend (JavaScript)

 // Atualizar accessGroup para habilitar edição e salvamento na mini-seção "Ajustes" let currentGroupId = null; // Variável global para armazenar o groupId ativo

const accessGroup = async (groupId) => { try { console.log(Acessando grupo ${groupId}...); const userId = await validateUserAuth(); if (!userId) { console.error('Usuário não autenticado.'); alert('Usuário não autenticado.'); return; }

// Validar e armazenar o groupId
if (!groupId || typeof groupId !== 'string') {
  console.error('ID do grupo inválido:', groupId);
  alert('ID do grupo inválido. Verifique o console.');
  return;
}
currentGroupId = groupId;

// Ocultar o cabeçalho de Minhas Turmas
const header = document.querySelector('.groups-header');
if (header) header.style.display = 'none';

// Cache para nomes e imagens de perfil
const userCache = new Map();
const { data: users, error: usersError } = await supabase
  .from('auth.users')
  .select('id, user_metadata')
  .in('id', (await supabase.from('membros_grupos').select('user_id').eq('grupo_id', groupId)).data.map(u => u.user_id));
if (usersError) throw usersError;
if (!users) throw new Error('Nenhum usuário encontrado no grupo.');
users.forEach(user => {
  const metadata = user.user_metadata || {};
  userCache.set(user.id, {
    name: metadata.name || `Usuário ${user.id.slice(0, 5)}`,
    avatar_url: metadata.avatar_url || null
  });
});
console.log(`Cache de usuários populado com ${userCache.size} entradas.`);

// Buscar dados do grupo com retries
const fetchGroupData = async (groupId, retries = 3, delay = 2000) => {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const { data: groupData, error: groupError } = await supabase
        .from('grupos')
        .select('nome, descricao, disciplina, topico_especifico, codigo_unico, tags, privacidade')
        .eq('id', groupId)
        .single();
      if (groupError) throw groupError;
      if (!groupData) throw new Error(`Dados do grupo ${groupId} não encontrados.`);
      return groupData;
    } catch (error) {
      console.warn(`Tentativa ${attempt} de buscar dados do grupo ${groupId} falhou:`, error.message);
      if (attempt === retries) throw error;
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
};
const groupData = await fetchGroupData(groupId);

// Contagem de membros online
let onlineCount = 0;
const updateOnlineCount = () => {
  const now = new Date();
  return supabase
    .from('user_sessions')
    .select('user_id', { count: 'exact' })
    .eq('grupo_id', groupId)
    .gte('last_active', new Date(now - 30 * 1000).toISOString())
    .then(({ count }) => {
      onlineCount = count || 0;
      return onlineCount;
    })
    .catch(err => {
      console.error('Erro ao atualizar contagem de online:', err.message);
      return 0;
    });
};
setInterval(() => {
  updateOnlineCount().then(count => {
    const onlineNumber = document.getElementById('online-number');
    if (onlineNumber) onlineNumber.textContent = count;
  });
}, 15000);
updateOnlineCount().then(count => {
  const onlineNumber = document.getElementById('online-number');
  if (onlineNumber) onlineNumber.textContent = count;
});

// Criar interface com mini-seção "Ajustes" editável
const groupInterface = document.querySelector('#group-interface') || document.createElement('div');
if (!groupInterface.id) {
  groupInterface.id = 'group-interface';
  groupInterface.style.cssText = 'margin-left: 250px; padding: 20px;';
  document.getElementById('main-content').innerHTML = '';
  document.getElementById('main-content').appendChild(groupInterface);
}

groupInterface.innerHTML = `
  <div style="display: flex; justify-content: space-between; border-bottom: 1px solid #ccc; padding-bottom: 10px;">
    <div class="mini-sections">
      <button class="active" style="background: #3498db; color: white; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;" onclick="switchSection('discussions', '${groupId}')">Discussões</button>
      <button style="background: #ddd; color: #666; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;" onclick="switchSection('members', '${groupId}')">Membros</button>
      <button disabled style="background: #ddd; color: #666; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;">Tarefas</button>
      <button style="background: #ddd; color: #666; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;" id="settings-button-${groupId}" onclick="switchSection('settings', '${groupId}')">Ajustes</button>
      <button disabled style="background: #ddd; color: #666; border: none; padding: 5px 10px; margin-right: 5px; border-radius: 5px;">Notificações</button>
    </div>
    <div style="display: flex; align-items: center;">
      <span id="online-count" style="margin-right: 10px; color: #2ecc71;">Online: <span id="online-number">0</span></span>
      <button id="search-icon" style="background: none; border: none; cursor: pointer; margin-right: 10px;">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
      </button>
      <button id="menu-icon" style="background: none; border: none; cursor: pointer;">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="12" cy="12" r="1"></circle><circle cx="12" cy="5" r="1"></circle><circle cx="12" cy="19" r="1"></circle>
        </svg>
      </button>
    </div>
  </div>
  <div id="discussions-content" style="margin-top: 20px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; min-height: 200px; display: none;">
    <div id="chat-messages" style="display: flex; flex-direction: column-reverse;"></div>
  </div>
  <div id="members-content" style="margin-top: 20px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; min-height: 200px; display: none;">
    <div id="members-grid" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 15px;"></div>
  </div>
  <div id="settings-content" style="margin-top: 20px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; min-height: 200px; display: none;">
    <div>
      <label>Nome do Grupo:</label><br>
      <input type="text" id="group-name-${groupId}" style="width: 100%; padding: 5px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 5px;"><br>
      <label>Descrição:</label><br>
      <textarea id="group-description-${groupId}" style="width: 100%; padding: 5px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 5px; resize: vertical;"></textarea><br>
      <label>Disciplina/Área:</label><br>
      <input type="text" id="group-discipline-${groupId}" style="width: 100%; padding: 5px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 5px;"><br>
      <label>Tópico Específico:</label><br>
      <input type="text" id="group-topic-${groupId}" style="width: 100%; padding: 5px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 5px;"><br>
      <label>Código Único:</label><br>
      <input type="text" id="group-code-${groupId}" readonly style="width: 100%; padding: 5px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 5px;"><br>
      <label>Tags do Grupo:</label><br>
      <input type="text" id="group-tags-${groupId}" style="width: 100%; padding: 5px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 5px;"><br>
      <label>Privacidade & Acesso:</label><br>
      <select id="group-privacy-${groupId}" style="width: 100%; padding: 5px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 5px;">
        <option value="public">Público</option>
        <option value="private">Privado</option>
      </select>
      <button id="save-changes-${groupId}" style="background: #2ecc71; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin-top: 10px;">Salvar Alterações</button>
    </div>
  </div>
  <div style="margin-top: 10px; display: flex; align-items: center;">
    <input id="chat-input" type="text" placeholder="Digite sua mensagem..." style="flex-grow: 1; padding: 5px; border: 1px solid #ccc; border-radius: 5px; margin-right: 5px;">
    <button onclick="sendMessage('${groupId}')" style="background: #2ecc71; color: white; border: none; padding: 5px 10px; border-radius: 5px;">Enviar</button>
  </div>
  <div id="search-bar" style="display: none; margin-top: 10px;">
    <input id="search-input" type="text" placeholder="Pesquisar mensagens..." style="width: 200px; padding: 5px; border: 1px solid #ccc; border-radius: 5px;">
    <button onclick="hideSearchBar()" style="background: #e74c3c; color: white; border: none; padding: 5px 10px; border-radius: 5px; margin-left: 5px;">Fechar</button>
  </div>
`;
document.getElementById('main-content').innerHTML = '';
document.getElementById('main-content').appendChild(groupInterface);

// Preencher os campos da mini-seção "Ajustes" com os dados do grupo
const fillSettings = (groupId) => {
  try {
    const nameInput = document.getElementById(`group-name-${groupId}`);
    const descriptionInput = document.getElementById(`group-description-${groupId}`);
    const disciplineInput = document.getElementById(`group-discipline-${groupId}`);
    const topicInput = document.getElementById(`group-topic-${groupId}`);
    const codeInput = document.getElementById(`group-code-${groupId}`);
    const tagsInput = document.getElementById(`group-tags-${groupId}`);
    const privacySelect = document.getElementById(`group-privacy-${groupId}`);

    if (!nameInput || !descriptionInput || !disciplineInput || !topicInput || !codeInput || !tagsInput || !privacySelect) {
      console.error(`Campos da mini-seção "Ajustes" não encontrados para o grupo ${groupId}. Verifique os seletores.`);
      return;
    }

    fetchGroupData(groupId).then(groupData => {
      nameInput.value = groupData.nome || '';
      descriptionInput.value = groupData.descricao || '';
      disciplineInput.value = groupData.disciplina || '';
      topicInput.value = groupData.topico_especifico || '';
      codeInput.value = groupData.codigo_unico || '';
      tagsInput.value = Array.isArray(groupData.tags) ? groupData.tags.join(', ') : groupData.tags || '';
      privacySelect.value = groupData.privacidade || 'public';
      console.log(`Campos da mini-seção "Ajustes" preenchidos para o grupo ${groupId}.`);
    }).catch(error => {
      console.error(`Erro ao buscar dados para preencher campos do grupo ${groupId}:`, error.message);
      alert('Erro ao carregar os dados dos ajustes. Verifique o console.');
    });
  } catch (error) {
    console.error(`Erro ao preencher campos da mini-seção "Ajustes" para o grupo ${groupId}:`, error.message);
    alert('Erro ao carregar os dados dos ajustes. Verifique o console.');
  }
};

// Função para salvar alterações no Supabase
const saveChanges = async (groupId) => {
  try {
    const nameInput = document.getElementById(`group-name-${groupId}`);
    const descriptionInput = document.getElementById(`group-description-${groupId}`);
    const disciplineInput = document.getElementById(`group-discipline-${groupId}`);
    const topicInput = document.getElementById(`group-topic-${groupId}`);
    const tagsInput = document.getElementById(`group-tags-${groupId}`);
    const privacySelect = document.getElementById(`group-privacy-${groupId}`);

    if (!nameInput.value.trim()) {
      alert('O nome do grupo é obrigatório.');
      return;
    }

    const { error } = await supabase
      .from('grupos')
      .update({
        nome: nameInput.value.trim(),
        descricao: descriptionInput.value.trim(),
        disciplina: disciplineInput.value.trim(),
        topico_especifico: topicInput.value.trim(),
        tags: tagsInput.value.split(',').map(tag => tag.trim()).filter(tag => tag),
        privacidade: privacySelect.value
      })
      .eq('id', groupId);

    if (error) throw error;
    console.log(`Alterações salvas com sucesso para o grupo ${groupId}.`);
    alert('Alterações salvas com sucesso!');
  } catch (error) {
    console.error(`Erro ao salvar alterações para o grupo ${groupId}:`, error.message);
    alert('Erro ao salvar as alterações. Verifique o console.');
  }
};

// Atualizar seção com preenchimento automático
const switchSection = (section, groupId) => {
  const sections = ['discussions', 'members', 'settings'];
  sections.forEach(s => {
    const content = document.getElementById(`${s}-content`);
    if (content) content.style.display = s === section ? 'block' : 'none';
    const button = document.querySelector(`button[onclick*="switchSection('${s}'"]`);
    if (button) {
      button.style.background = s === section ? '#3498db' : '#ddd';
      button.style.color = s === section ? 'white' : '#666';
    }
  });
  if (section === 'settings' && currentGroupId) {
    fillSettings(currentGroupId); // Preencher campos ao ativar a seção "Ajustes"
  }
  console.log(`Seção ${section} ativada para o grupo ${groupId}.`);
};

// Adicionar evento ao botão "Salvar Alterações"
const saveButton = document.getElementById(`save-changes-${groupId}`);
if (saveButton) {
  saveButton.addEventListener('click', () => saveChanges(groupId));
}

// Preencher campos inicialmente ao carregar a interface
if (currentGroupId) {
  fillSettings(currentGroupId);
}
switchSection('discussions', groupId); // Iniciar com Discussões, mas garantir que Ajustes esteja pronto

// Configurar Realtime para chat e online
const channel = supabase
  .channel(`chat-${groupId}`)
  .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'mensagens', filter: `grupo_id=eq.${groupId}` }, (payload) => {
    addMessageToChat(payload.new, userCache);
  })
  .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'user_sessions', filter: `grupo_id=eq.${groupId}` }, () => {
    updateOnlineCount().then(count => {
      const onlineNumber = document.getElementById('online-number');
      if (onlineNumber) onlineNumber.textContent = count;
    }).catch(err => console.error('Erro na atualização de online via Realtime:', err.message));
    loadMembers(groupId, userCache, userId, isAdminOrOwner);
  })
  .on('postgres_changes', { event: 'DELETE', schema: 'public', table: 'user_sessions', filter: `grupo_id=eq.${groupId}` }, () => {
    updateOnlineCount().then(count => {
      const onlineNumber = document.getElementById('online-number');
      if (onlineNumber) onlineNumber.textContent = count;
    }).catch(err => console.error('Erro na remoção de online via Realtime:', err.message));
    loadMembers(groupId, userCache, userId, isAdminOrOwner);
  })
  .subscribe(async (status) => {
    if (status === 'SUBSCRIBED') {
      console.log(`Subscribed to chat and online channel for group ${groupId}`);
      const { data: messages, error: messagesError } = await supabase
        .from('mensagens')
        .select('*')
        .eq('grupo_id', groupId)
        .order('enviado_em', { ascending: false });
      if (messagesError) throw messagesError;
      messages.forEach(message => addMessageToChat(message, userCache));
      updateOnlineCount().then(count => {
        const onlineNumber = document.getElementById('online-number');
        if (onlineNumber) onlineNumber.textContent = count;
      }).catch(err => console.error('Erro inicial na contagem de online:', err.message));
      loadMembers(groupId, userCache, userId, isAdminOrOwner);
    }
  })
  .catch(err => console.error('Erro ao subscrever ao canal Realtime:', err.message));

// Evento para ícone de pesquisa
const searchIcon = document.getElementById('search-icon');
if (searchIcon) {
  searchIcon.addEventListener('click', () => {
    const searchBar = document.getElementById('search-bar');
    if (searchBar) {
      searchBar.style.display = 'block';
      const searchInput = document.getElementById('search-input');
      if (searchInput) searchInput.focus();
      filterMessages(groupId);
    }
  });
}

// Evento para ícone de três pontos
const menuIcon = document.getElementById('menu-icon');
if (menuIcon && typeof showOptionsModal === 'function') {
  menuIcon.addEventListener('click', () => {
    try {
      console.log(`Abrindo modal de opções para o grupo ${groupId}...`);
      showOptionsModal(groupId);
    } catch (error) {
      console.error(`Erro ao abrir modal de opções para o grupo ${groupId}:`, error.message);
      alert('Erro ao abrir as opções. Verifique o console.');
    }
  });
} else if (menuIcon) {
  console.warn(`Função showOptionsModal não encontrada para o grupo ${groupId}. Ícone desativado.`);
  menuIcon.disabled = true;
}

console.log(`Interface do grupo ${groupId} carregada com "Ajustes" editáveis.`);

} catch (error) { console.error('Erro ao acessar grupo:', error.message, error.stack); alert('Erro ao acessar o grupo. Verifique o console.'); const header = document.querySelector('.groups-header'); if (header) header.style.display = 'flex'; } };

// Funções existentes mantidas sem alterações (loadMembers, returnToGroups, updateOnlineCount, filterMessages, hideSearchBar, loadInitialMessages, showSettingsModal, showOptionsModal, addMessageToChat, sendMessage, etc.)