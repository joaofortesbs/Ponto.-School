Criar um sistema funcional para que a IA (Gemini) preencha, de forma autom√°tica e personalizada, todos os campos de cada mini-card de atividade sugerida, dentro da interface de Plano de A√ß√£o do School Power, respeitando os campos esperados para cada tipo de atividade (identificada via ID).

Isso inclui:

Modificar o prompt enviado ao Gemini para que ele gere, al√©m de t√≠tulo e descri√ß√£o, todos os campos relevantes por tipo de atividade.

Exibir corretamente todos esses campos dentro do mini-card de cada sugest√£o de atividade (ao lado do ID), como texto vis√≠vel e organizado.

Garantir que a IA utilize a estrutura correta de campos esperados conforme o ID da atividade (com base no schoolPowerActivities.json e estrutura auxiliar).

Permitir varia√ß√£o completa nos campos por tipo de atividade (ex: ‚Äúlista de exerc√≠cios‚Äù vai ter campos como ‚Äúquantidade de quest√µes‚Äù, ‚Äúmodelo de quest√µes‚Äù, etc.; j√° ‚Äújogo pedag√≥gico‚Äù ter√° campos como ‚Äúmaterial necess√°rio‚Äù, ‚Äún√∫mero de participantes‚Äù, etc.)

Manter todos os campos em formato de texto simples, para facilitar implementa√ß√£o e compatibilidade com o modal Editar Materiais.

üì¶ ARQUIVOS QUE DEVEM SER MODIFICADOS / CRIADOS:

generatePersonalizedPlan.ts

Injetar dinamicamente no prompt do Gemini os campos esperados por tipo de atividade (usando o ID)

Unificar o resultado em JSON com os campos personalizados

actionPlanService.ts

Processar a resposta do Gemini com os campos personalizados

Enviar para o frontend no formato esperado

mini-card de atividade sugerida (dentro da interface de Plano de A√ß√£o)

Exibir todos os campos personalizados no layout lateral do card

Manter t√≠tulo no topo, descri√ß√£o embaixo, ID e campos laterais (como mostrado nas imagens)

activitiesFieldSchema.json (novo arquivo se ainda n√£o existir)

Criar estrutura com os campos esperados por tipo de atividade (exemplo abaixo)

üìÅ Exemplo da estrutura do arquivo activitiesFieldSchema.json:

{
"lista-exercicios": {
"fields": [
{ "key": "tema", "label": "Tema" },
{ "key": "quantidadeQuestoes", "label": "Quantidade de Quest√µes" },
{ "key": "modeloQuestoes", "label": "Modelo de Quest√µes" },
{ "key": "disciplina", "label": "Disciplina" },
{ "key": "anoEscolaridade", "label": "Ano de Escolaridade" },
{ "key": "nivelDificuldade", "label": "N√≠vel de Dificuldade" },
{ "key": "fontes", "label": "Fontes" }
]
},
"jogo-pedagogico": {
"fields": [
{ "key": "materiais", "label": "Materiais Necess√°rios" },
{ "key": "numeroParticipantes", "label": "N√∫mero de Participantes" },
{ "key": "regras", "label": "Regras do Jogo" }
]
}
}

üéØ NOVO PROMPT PERSONALIZADO (para Gemini):

Voc√™ √© uma IA especialista em cria√ß√£o de planos de a√ß√£o educacionais completos, personalizados e funcionais. Sua tarefa agora √© gerar atividades educacionais sugeridas, com todos os campos personalizados preenchidos de acordo com o tipo de atividade (identificado por ID). Use as instru√ß√µes a seguir.

DADOS DO USU√ÅRIO:

Pedido: "${initialMessage}"

Mat√©rias e temas: ${contextualizationData.subjects || 'Geral'}

P√∫blico: ${contextualizationData.audience || 'Estudantes'}

Restri√ß√µes: "${contextualizationData.restrictions}"

Datas importantes: "${contextualizationData.dates}"

Observa√ß√µes: ${contextualizationData.notes || 'Nenhuma'}

ATIVIDADES DISPON√çVEIS: ${activitiesIds.join(', ')}

ESTRUTURA DOS CAMPOS POR ATIVIDADE (EXEMPLO):

Para o ID "lista-exercicios", gere tamb√©m: "tema", "quantidadeQuestoes", "modeloQuestoes", "disciplina", "anoEscolaridade", "nivelDificuldade", "fontes"

Para o ID "jogo-pedagogico", gere: "materiais", "numeroParticipantes", "regras"

[Os campos exatos ser√£o definidos dinamicamente pela plataforma conforme o ID da atividade]

INSTRU√á√ïES:

Analise cuidadosamente todos os dados fornecidos

Gere de 10 a 35 atividades, conforme a complexidade do pedido

Para cada atividade, retorne um objeto JSON no seguinte formato:

{
"id": "atividade-id",
"title": "T√≠tulo Personalizado",
"description": "Descri√ß√£o personalizada contextualizada",
"campos": {
"campo1": "valor gerado com base no contexto",
"campo2": "valor gerado com base no contexto",
...
}
}

Os campos devem ser coerentes com o ID da atividade (fornecidos pela plataforma dinamicamente)

Nunca invente IDs. Use apenas IDs v√°lidos da lista permitida.

Capriche na personaliza√ß√£o: pense como um professor planejando uma aula de verdade. Conecte tema, tipo de atividade e p√∫blico com consist√™ncia.

EXEMPLO DE SA√çDA:

{
"id": "lista-exercicios",
"title": "Lista: Substantivos e Verbos em A√ß√£o",
"description": "Uma sequ√™ncia de 12 quest√µes que trabalham substantivos comuns e verbos regulares, com base em textos jornal√≠sticos e publicit√°rios.",
"campos": {
"tema": "Substantivos e verbos",
"quantidadeQuestoes": "12 quest√µes",
"modeloQuestoes": "m√∫ltipla escolha + abertas",
"disciplina": "L√≠ngua Portuguesa",
"anoEscolaridade": "8¬∫ ano",
"nivelDificuldade": "M√©dio",
"fontes": "Livro did√°tico e textos jornal√≠sticos"
}
}

INTERFACE:

Esses campos ser√£o exibidos ao lado do ID dentro do mini-card da interface de Plano de A√ß√£o

N√£o repetir t√≠tulo ou descri√ß√£o nos campos ‚Äî seja direto e textual

OBSERVA√á√ïES:

Os campos ser√£o enviados como texto simples para facilitar integra√ß√£o com o modal "Editar Materiais"

Campos irrelevantes para o tipo de atividade devem ser omitidos (respeitar estrutura)

üõ†Ô∏è Observa√ß√µes Finais para Devs (IA Vibe Code):

Certifique-se que cada mini-card de atividade sugerida no Plano de A√ß√£o receba todos os dados e exiba no layout lateral direito, de forma clara e textual

Exiba label + valor para cada campo extra vindo da IA, mantendo responsividade da interface

Todos os dados devem estar acess√≠veis posteriormente dentro do modal de edi√ß√£o da atividade (Editar Materiais)