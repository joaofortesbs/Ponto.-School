üîß FUNCIONALIDADES QUE VAMOS PROGRAMAR
Interface com campo de busca de usu√°rios

Listagem de resultados com bot√£o "Adicionar"

Envio de solicita√ß√£o de amizade

Banco de dados: estrutura de amizades no Supabase

Verifica√ß√£o de status da amizade (j√° enviado, aceito, pendente)

Atualiza√ß√£o em tempo real (opcional)

Feedback visual no bot√£o (adicionado / pendente)

üóÇ ESTRUTURA NO SUPABASE (TABELAS)
üßë‚Äçü§ù‚Äçüßë friend_requests
Campo Tipo Descri√ß√£o
id UUID (PK) ID √∫nico da solicita√ß√£o
sender_id UUID ID do usu√°rio que enviou
receiver_id UUID ID do usu√°rio que recebeu
status text pending, accepted, rejected
created_at timestamp Data da solicita√ß√£o

Importante: Voc√™ j√° tem a tabela users, que usaremos para busca.

üñ•Ô∏è FRONT-END (REACT + SUPABASE)

Componente AddFriendModal.jsx
jsx
Copiar
Editar
import { useState, useEffect } from "react";
import { createClient } from '@supabase/supabase-js';

const supabase = createClient('https://YOUR_PROJECT.supabase.co', 'YOUR_ANON_KEY');

export default function AddFriendModal({ currentUserId, onClose }) {
const [searchTerm, setSearchTerm] = useState("");
const [results, setResults] = useState([]);
const [sentRequests, setSentRequests] = useState({});

// Busca usu√°rios com base no termo digitado
useEffect(() => {
const fetchUsers = async () => {
if (searchTerm.length < 3) return;

  const { data, error } = await supabase
    .from('users')
    .select('id, username, avatar_url') // ajuste conforme seu schema
    .ilike('username', `%${searchTerm}%`)
    .neq('id', currentUserId);
  if (!error) setResults(data);
};
const timeout = setTimeout(fetchUsers, 500); // debounce
return () => clearTimeout(timeout);
}, [searchTerm]);

const sendFriendRequest = async (receiverId) => {
const { data, error } = await supabase
.from('friend_requests')
.insert([{ sender_id: currentUserId, receiver_id: receiverId, status: 'pending' }]);

if (!error) {
  setSentRequests(prev => ({ ...prev, [receiverId]: 'pending' }));
}
};

const checkExistingRequests = async () => {
const { data, error } = await supabase
.from('friend_requests')
.select('receiver_id, status')
.eq('sender_id', currentUserId);

if (!error) {
  const statusMap = {};
  data.forEach(req => {
    statusMap[req.receiver_id] = req.status;
  });
  setSentRequests(statusMap);
}
};

useEffect(() => {
checkExistingRequests();
}, []);

return (
<div className="modal">
<h2>Adicionar amigo</h2>
<input
type="text"
placeholder="Buscar por nome de usu√°rio..."
value={searchTerm}
onChange={(e) => setSearchTerm(e.target.value)}
className="input"
/>

  <ul className="user-list">
    {results.map(user => (
      <li key={user.id} className="user-item">
        <img src={user.avatar_url} alt="Avatar" className="avatar" />
        <span>{user.username}</span>
        {sentRequests[user.id] === 'pending' ? (
          <button className="btn-pending" disabled>Solicitado</button>
        ) : (
          <button className="btn-add" onClick={() => sendFriendRequest(user.id)}>
            Adicionar
          </button>
        )}
      </li>
    ))}
  </ul>
  <button className="close-btn" onClick={onClose}>Fechar</button>
</div>
);
}

üé® ESTILO B√ÅSICO (Tailwind ou CSS simples)
css
Copiar
Editar
.modal {
background: white;
padding: 24px;
border-radius: 16px;
width: 100%;
max-width: 480px;
}

.input {
width: 100%;
padding: 8px;
border-radius: 8px;
margin-bottom: 16px;
}

.user-list {
list-style: none;
padding: 0;
}

.user-item {
display: flex;
align-items: center;
justify-content: space-between;
padding: 8px 0;
}

.avatar {
width: 32px;
height: 32px;
border-radius: 50%;
margin-right: 8px;
}

.btn-add {
background: #22c55e;
color: white;
padding: 4px 8px;
border-radius: 8px;
}

.btn-pending {
background: #facc15;
color: #000;
padding: 4px 8px;
border-radius: 8px;
}
üîí PROTE√á√ÉO E REGRAS NO SUPABASE
Na tabela friend_requests, aplique Row Level Security (RLS) com pol√≠ticas como:

Insert: s√≥ permite se auth.uid() = sender_id

Select: s√≥ permite visualizar se auth.uid() = sender_id OR auth.uid() = receiver_id