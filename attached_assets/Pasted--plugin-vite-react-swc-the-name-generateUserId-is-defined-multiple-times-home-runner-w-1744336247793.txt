[plugin:vite:react-swc] × the name `generateUserId` is defined multiple times
    ╭─[/home/runner/workspace/src/lib/generate-user-id.ts:7:1]
  7 │  * @param planType O tipo de plano (1 = Premium, 2 = Standard, etc)
  8 │  * @returns Uma string contendo o ID gerado no formato BRXXXXXXXXXXXX
  9 │  */
 10 │ export async function generateUserId(countryCode: string, planType: number): Promise<string> {
    ·                       ───────┬──────
    ·                              ╰── previous definition of `generateUserId` here
 11 │   try {
 12 │     // Tentar buscar a sequência atual
 13 │     const { data, error } = await supabase
 14 │       .from('user_id_control')
 15 │       .select('last_sequence')
 16 │       .eq('country_code', countryCode)
 17 │       .eq('plan_type', planType)
 18 │       .single();
 19 │ 
 20 │     if (error) {
 21 │       // Em caso de erro, retornar um ID baseado em timestamp
 22 │       return `${countryCode}${planType}${Date.now().toString().slice(-10)}`;
 23 │     }
 24 │ 
 25 │     // Incrementar o último número de sequência
 26 │     const currentSequence = data?.last_sequence || 0;
 27 │     const newSequence = currentSequence + 1;
 28 │ 
 29 │     // Atualizar o registro com o novo número de sequência
 30 │     await supabase
 31 │       .from('user_id_control')
 32 │       .update({ last_sequence: newSequence })
 33 │       .eq('country_code', countryCode)
 34 │       .eq('plan_type', planType);
 35 │ 
 36 │     // Formatar o ID: país (2) + tipo de plano (1) + sequência (10 dígitos com zeros à esquerda)
 37 │     const paddedSequence = newSequence.toString().padStart(10, '0');
 38 │     return `${countryCode}${planType}${paddedSequence}`;
 39 │   } catch (error) {
 40 │     // Em caso de erro, retornar um ID baseado em timestamp
 41 │     return `${countryCode}${planType}${Date.now().toString().slice(-10)}`;
 42 │   }
 43 │ }
 44 │ 
 45 │ /**
 46 │  * Versão simplificada que não depende do banco de dados para gerar um ID único
 47 │  * Útil quando houver problemas de conexão com o Supabase
 48 │  */
 49 │ export function generateSimpleUserId(countryCode: string, planType: number): string {
 50 │   const timestamp = Date.now();
 51 │   const random = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
 52 │   return `${countryCode}${planType}${timestamp.toString().slice(-6)}${random}`;
 53 │ }
 54 │ 
 55 │ /**
 56 │  * Gera um ID único para usuário no formato esperado pela plataforma.
 57 │  * O formato é: UID-XXXX-XXXX-XXXX onde X é um caractere alfanumérico
 58 │  */
 59 │ export function generateUserId(): string {
    ·                 ───────┬──────
    ·                        ╰── `generateUserId` redefined here
 60 │   const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
 61 │ 
 62 │   // Função para gerar um bloco de 4 caracteres aleatórios
    ╰────
/home/runner/workspace/src/lib/generate-user-id.ts:7:1
45 |  /**
46 |   * Versão simplificada que não depende do banco de dados para gerar um ID único
47 |   * Útil quando houver problemas de conexão com o Supabase
   |                           ^
48 |   */
49 |  export function generateSimpleUserId(countryCode: string, pl