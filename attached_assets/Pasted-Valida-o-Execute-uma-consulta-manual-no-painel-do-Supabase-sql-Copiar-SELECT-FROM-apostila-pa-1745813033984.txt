Validação:

Execute uma consulta manual no painel do Supabase:
sql

Copiar
SELECT * FROM apostila_pastas LIMIT 1;
Confirme que a consulta retorna dados sem erros.
3. Implementar a Funcionalidade "Corrigir Relação Apostila" no Menu Workflow
Uma mensagem de erro sugere usar a opção "Corrigir Relação Apostila" no menu Workflow. Vamos implementar essa funcionalidade para automatizar a correção da estrutura do banco de dados.

Passo 1: Crie uma função para concordar com a relação:
JavaScript

Copiar
async function corrigirRelacaoApostila() {
  try {
    // 1. Criar tabela apostila_pastas se não existir
    await supabase.rpc('execute_sql', {
      sql_statement: `
        CREATE TABLE IF NOT EXISTS public.apostila_pastas (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          user_id UUID NOT NULL,
          nome TEXT NOT NULL,
          descricao TEXT,
          data_criacao TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
          CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE
        );

        ALTER TABLE apostila_pastas ENABLE ROW LEVEL SECURITY;

        CREATE POLICY "Usuários só podem ver suas pastas" ON apostila_pastas
        FOR SELECT
        USING (auth.uid() = user_id);

        CREATE POLICY "Usuários podem inserir suas pastas" ON apostila_pastas
        FOR INSERT
        WITH CHECK (auth.uid() = user_id);

        CREATE POLICY "Usuários podem atualizar suas pastas" ON apostila_pastas
        FOR UPDATE
        USING (auth.uid() = user_id);
      `,
    });

    // 2. Criar tabela apostila_anotacoes se não existir
    await supabase.rpc('execute_sql', {
      sql_statement: `
        CREATE TABLE IF NOT EXISTS public.apostila_anotacoes (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          user_id UUID NOT NULL,
          pasta_id UUID,
          titulo TEXT NOT NULL,
          conteudo TEXT NOT NULL,
          modelo_anotacao TEXT,
          tags TEXT[],
          data_criacao TIMESTAMP WITH TIME ZONE NOT NULL,
          data_exportacao TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
          origem TEXT NOT NULL,
          CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE,
          CONSTRAINT fk_pasta_id FOREIGN KEY (pasta_id) REFERENCES apostila_pastas(id) ON DELETE SET NULL
        );

        ALTER TABLE apostila_anotacoes ENABLE ROW LEVEL SECURITY;

        CREATE POLICY "Usuários só podem ver suas anotações" ON apostila_anotacoes
        FOR SELECT
        USING (auth.uid() = user_id);

        CREATE POLICY "Usuários podem inserir suas anotações" ON apostila_anotacoes
        FOR INSERT
        WITH CHECK (auth.uid() = user_id);

        CREATE POLICY "Usuários podem atualizar suas anotações" ON apostila_anotacoes
        FOR UPDATE
        USING (auth.uid() = user_id);
      `,
    });

    // 3. Notificar o usuário sobre o sucesso
    showNotification('Relação Apostila corrigida com sucesso! Tente carregar as anotações novamente.', { type: 'success' });

  } catch (err) {
    console.error('Erro ao corrigir relação Apostila:', err.message);
    showError('Erro ao corrigir a relação Apostila. Contate o suporte.');
  }
}
Passo 2: Adicione a funcionalidade ao menu Workflow:
Nenhum componente que renderiza o menu Workflow (provavelmente um painel de administração ou configurações), adicione um botão para executar a função:
jsx

Copiar
<button onClick={corrigirRelacaoApostila}>Corrigir Relação Apostila</button>
Validação:

Acesse o menu Workflow na aplicação e confirme que o botão "Corrigir Relação Apostila" está visível.
Clique no botão e verifique se uma notificação de sucesso aparece.
Confirme no Table Editor do Supabase que as tabelas apostila_pastas e apostila_anotacoes foram criadas ou ajustadas.
4. Ajustar a Consulta para Carregar Anotações no Modal da Apostila
Atualize a função que carrega as anotações para lidar com a estrutura corrigida do banco de dados e tratar possíveis erros.

Função Atualizada:
Substitui a função carregarAnotacoesApostila pela seguinte:
JavaScript

Copiar
async function carregarAnotacoesApostila() {
  try {
    // 1. Buscar anotações da Apostila com um LEFT JOIN implícito
    const { data: anotacoes, error } = await supabase
      .from('apostila_anotacoes')
      .select(`
        id,
        user_id,
        pasta_id,
        titulo,
        conteudo,
        modelo_anotacao,
        tags,
        data_criacao,
        data_exportacao,
        origem,
        apostila_pastas!left (
          id,
          nome
        )
      `)
      .eq('user_id', auth.currentUser.uid)
      .order('data_exportacao', { ascending: false });

    if (error) {
      console.error('Erro ao carregar anotações:', error.message);
      if (error.message.includes('A estrutura do banco de dados precisa ser atualizada')) {
        showError('A estrutura do banco de dados precisa ser atualizada. Use a opção "Corrigir Relação Apostila" no menu Workflow.');
      } else if (error.code === 'PGRST116') {
        showMessage('Nenhuma anotação encontrada. Exporte anotações do Caderno para começar.');
      } else if (error.code === '42501') {
        showError('Permissão negada. Verifique suas credenciais e tente novamente.');
      } else {
        showError(`Erro ao carregar anotações: ${error.message}`);
      }
      return [];
    }

    if (!anotacoes || anotacoes.length === 0) {
      showMessage('Nenhuma anotação encontrada. Exporte anotações do Caderno para começar.');
      return [];
    }

    // 2. Ajustar o formato dos dados, garantindo que apostila_pastas seja null se não houver pasta
    const anotacoesFormatadas = anotacoes.map(anotacao => ({
      ...anotacao,
      apostila_pastas: anotacao.apostila_pastas || null,
    }));

    // 3. Atualizar o estado do Modal com as anotações
    updateApostilaModal(anotacoesFormatadas);
    return anotacoesFormatadas;

  } catch (err) {
    console.error('Erro inesperado ao carregar anotações:', err.message);
    showError('Erro inesperado ao carregar anotações. Tente novamente.');
    return [];
  }
}
Adicionar Retry para Falhas Temporárias:
Para lidar com falhas de conexão ou cache de esquema ainda não atualizado, implemente um mecanismo de retry:
JavaScript

Copiar
async function carregarAnotacoesApostilaComRetry(retries = 3, delay = 1000) {
  for (let i = 0; i < retries; i++) {
    try {
      const anotacoes = await carregarAnotacoesApostila();
      return anotacoes;
    } catch (err) {
      if (i === retries - 1) {
        console.error('Falha após todas as tentativas:', err.message);
        showError('Não foi possível carregar as anotações. Verifique sua conexão e tente novamente.');
        return [];
      }
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
}
Validação:

Teste a função carregarAnotacoesApostila e confirme que as anotações são exibidas no Modal da Apostila, incluindo o nome da pasta (se pasta_id não for null ).
Teste com uma anotação sem pasta ( pasta_id: null ) e confirme que a consulta não falha.
5. Atualizar o Supabase Realtime
-se de que o Supabase Realtime lida corretamente com a estrutura atualizada do banco de dados.

Listener Atualizado:
Ajuste a função configurarRealtimeApostila :
JavaScript

Copiar
function configurarRealtimeApostila() {
  const channel = supabase
    .channel('apostila_anotacoes_changes')
    .on(
      'postgres_changes',
      {
        event: 'INSERT',
        schema: 'public',
        table: 'apostila_anotacoes',
        filter: `user_id=eq.${auth.currentUser.uid}`,
      },
      async (payload) => {
        console.log('Nova anotação adicionada:', payload.new);

        let pasta = null;
        if (payload.new.pasta_id) {
          const { data, error } = await supabase
            .from('apostila_pastas')
            .select('id, nome')
            .eq('id', payload.new.pasta_id)
            .eq('user_id', auth.currentUser.uid)
            .single();

          if (error) {
            console.error('Erro ao buscar pasta:', error.message);
          } else {
            pasta = data;
          }
        }

        const novaAnotacao = { ...payload.new, apostila_pastas: pasta };
        updateApostilaModalWithNewAnotacao(novaAnotacao);

        showNotification(`Nova anotação "${novaAnotacao.titulo}" adicionada!`, { type: 'success' });
      }
    )
    .subscribe();

  return () => {
    supabase.removeChannel(channel);
  };
}
Validação:

Exporte uma anotação do Caderno e confirme que o Modal da Apostila é atualizado automaticamente.