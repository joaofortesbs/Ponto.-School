Você é um programador experiente e seu objetivo é implementar um sistema COMPLETO de salvamento de atividades educacionais dentro da plataforma School Power. 
O sistema já possui a geração de links de atividades no formato (/atividade/{tipo}/{codigo}), e atualmente as atividades estão sendo salvas apenas no LocalStorage. 
Agora precisamos migrar esse salvamento para o banco de dados Neon (Postgres), mantendo toda a lógica já existente.

REQUISITOS ESSENCIAIS:
1. Criar no banco de dados Neon uma tabela "activities" com os seguintes campos:
   - id SERIAL PRIMARY KEY
   - user_id UUID NOT NULL (identificador único do usuário que criou a atividade)
   - activity_code TEXT UNIQUE NOT NULL (código único já existente, ex: "12a1n13j")
   - type TEXT NOT NULL (tipo da atividade: flash-cards, lista-exercicios, plano-aula, etc)
   - title TEXT (título dado pelo usuário)
   - content JSONB NOT NULL (todas as informações completas da atividade em formato JSON)
   - created_at TIMESTAMPTZ DEFAULT NOW()
   - updated_at TIMESTAMPTZ DEFAULT NOW()

2. Configurar o backend (Node.js + Express) para:
   - `POST /api/activities` → Criar uma nova atividade no banco. 
     Body: { user_id, activity_code, type, title, content } 
     Deve inserir os dados no Neon e retornar { success:true, activity_code }.
   - `GET /api/activities/:code` → Consultar a atividade existente a partir do activity_code. 
     Retorna todos os dados completos da atividade em JSON.
   - `PUT /api/activities/:code` → Atualizar os dados de uma atividade existente pelo activity_code. 
     Atualiza o campo content e também o updated_at.
   - `GET /api/activities/user/:user_id` → Listar todas as atividades criadas por um usuário específico.

3. Configurar o frontend para:
   - Sempre que o usuário criar ou editar uma atividade na interface de Criação de Atividades, ao invés de salvar apenas no LocalStorage, enviar automaticamente os dados para a API:
     - Se for nova: `POST /api/activities`
     - Se já existir (mesmo activity_code): `PUT /api/activities/:code`
   - Garantir que ao acessar uma URL (/atividade/{tipo}/{codigo}), a aplicação faça uma requisição `GET /api/activities/:code` e carregue os dados salvos do banco Neon, não mais do LocalStorage.
   - O LocalStorage poderá ser usado apenas como cache temporário offline, mas a fonte de verdade sempre será o banco Neon.

4. Regras de Sincronização:
   - Cada atividade está sempre associada a um user_id.
   - O campo activity_code é único e identifica a atividade em todos os lugares da plataforma.
   - Sempre que o usuário fizer alterações na atividade, o banco deve ser atualizado em tempo real (PUT).
   - Se a atividade não existir ainda no banco, deve ser criada automaticamente.

5. Boas práticas:
   - Usar consultas parametrizadas (SQL seguro contra injeção).
   - Usar JSONB no Neon para armazenar a estrutura completa da atividade.
   - Atualizar automaticamente o campo "updated_at" ao salvar edições.
   - Implementar logs de erro no backend para capturar problemas de sincronização.

ENTREGÁVEIS:
- Migration SQL para criar a tabela activities.
- Rotas Express para POST, GET, PUT.
- Código de integração frontend para substituir o salvamento em LocalStorage por chamadas à API.
- Garantir que ao acessar o link público (/atividade/{tipo}/{codigo}), os dados carreguem diretamente do Neon.

NÃO modifique outras partes do sistema fora do contexto da criação e salvamento de atividades.
NÃO altere a lógica de geração de códigos já existente, apenas integre o salvamento no banco.