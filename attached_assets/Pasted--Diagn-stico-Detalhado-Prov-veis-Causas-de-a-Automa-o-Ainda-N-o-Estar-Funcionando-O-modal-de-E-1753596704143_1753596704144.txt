🧠 Diagnóstico Detalhado – Prováveis Causas de a Automação Ainda Não Estar Funcionando

O modal de Editar Materiais pode não estar abrindo antes da tentativa de preenchimento.
→ Precisamos de um sistema que aguarde o DOM estar 100% carregado (com uso de MutationObserver ou um await até o modal ficar visível e interativo).

A IA (Gemini) pode estar entregando os dados corretos, mas com nomes de chaves não compatíveis com os nomes reais dos campos da interface.
→ É necessário um Field Mapper (tipo um dicionário) que converte os nomes lógicos da IA (ex: “objetivo_aprendizagem”) para os seletores reais do modal (ex: “#campoObjetivo”).

O sistema pode estar tentando preencher campos antes que eles estejam renderizados no DOM.
→ Solução: criar uma função waitForElement(selector) com timeout antes de interagir com qualquer campo.

Campos do tipo select, multi-select, checkbox, ou rich text precisam ser preenchidos com eventos extras para que o front-end reaja.
→ Exemplo: input.dispatchEvent(new Event('input', { bubbles: true }))

O clique automático no botão “Construir Atividade” pode estar sendo acionado antes dos dados estarem salvos corretamente.
→ Devemos garantir que todos os campos tenham sido modificados e validados antes de executar o click().

O sistema pode estar tentando aplicar lógica igual para atividades com campos diferentes.
→ Solução: cada tipo de atividade (ID) precisa ter um arquivo de automação próprio com seu próprio mapeamento e preenchimento customizado.

As informações do Plano de Ação podem não estar sendo transmitidas corretamente para o sistema de automação.
→ Precisamos de um JSON central, estruturado por atividade, com os dados da IA, acessível em tempo real no momento de iniciar o preenchimento.

✔️ O Que Fazer Agora — Passo a Passo Prático

Criar uma função que aguarde a abertura e carregamento total do modal de cada atividade:

function waitForModal(activityId) {
return new Promise((resolve) => {
const observer = new MutationObserver((mutations) => {
const modal = document.querySelector(#modal-${activityId});
if (modal && modal.style.display !== 'none') {
observer.disconnect();
resolve(modal);
}
});
observer.observe(document.body, { childList: true, subtree: true });
});
}

Criar um Field Mapper para cada tipo de atividade:

export const atividade_field_map = {
video: {
titulo: '#titulo-input',
descricao: '#descricao-area',
objetivo_aprendizado: '#objetivo-input',
disciplina: '#disciplina-select',
dificuldade: '#nivel-select',
entrega: '#formato-select',
duracao: '#tempo-select',
materiais: '#materiais-area'
},
quiz: {
// Mapeamentos diferentes...
},
// ...
};

Preencher os campos com segurança:

async function fillFields(activityId, tipo, iaData) {
const map = atividade_field_map[tipo];
let success = true;

for (let campo in map) {
const selector = map[campo];
await waitForElement(selector);
const el = document.querySelector(selector);

javascript
Copiar
Editar
if (el) {
  el.value = iaData[campo] || '';
  el.dispatchEvent(new Event('input', { bubbles: true }));
} else {
  console.warn(`Campo não encontrado: ${selector}`);
  success = false;
}
}

return success;
}

Validar se todos os campos foram preenchidos corretamente antes de construir:

async function construirSePronto(activityId, tipo, iaData) {
await waitForModal(activityId);
const preenchido = await fillFields(activityId, tipo, iaData);

if (preenchido) {
const botao = document.querySelector(#modal-${activityId} .btn-construir);
if (botao) {
botao.click();
} else {
console.warn('Botão Construir não encontrado.');
}
}
}

Centralizar os dados de cada atividade no JSON do Plano de Ação:

const planoDeAcaoAtividades = {
"atividade_123": {
tipo: "video",
iaData: {
titulo: "Como funciona a fotossíntese",
descricao: "Estudo da captação de luz solar...",
disciplina: "Ciências",
dificuldade: "Média",
entrega: "Vídeo",
duracao: "30 minutos",
objetivo_aprendizado: "Compreender a transformação da energia solar em energia química.",
materiais: "Caderno, celular, link do vídeo."
}
},
...
};

No momento da aprovação do Plano de Ação, disparar o processo para cada atividade:

Object.entries(planoDeAcaoAtividades).forEach(([id, data]) => {
construirSePronto(id, data.tipo, data.iaData);
});

🛠 Quer que eu monte um arquivo .ts com isso pronto para você?

É só pedir que eu escrevo o código completo da automação, pronto para ser importado e testado na plataforma.

✅ Resultado esperado:

Atividades são geradas automaticamente sem ação do usuário.

Campos corretos são preenchidos de acordo com o tipo da atividade.

A IA entrega os dados via JSON estruturado.

O botão “Construir Atividade” só é clicado após o sucesso no preenchimento.