[plugin:vite:react-swc] × the name `desenvolvimentoDataPadrao` is defined multiple times
     ╭─[/home/runner/workspace/src/features/schoolpower/activities/plano-aula/sections/desenvolvimento/DesenvolvimentoData.ts:18:1]
  18 │ }
  19 │ 
  20 │ // Dados padrão/fallback - GARANTINDO QUE SEMPRE EXISTE
  21 │ export const desenvolvimentoDataPadrao: DesenvolvimentoData = {
     ·              ────────────┬────────────
     ·                          ╰── previous definition of `desenvolvimentoDataPadrao` here
  22 │   etapas: [
  23 │     {
  24 │       id: "etapa_1",
  25 │       titulo: "1. Revisando Substantivos: Comuns e Próprios",
  26 │       descricao: "Início com uma breve revisão sobre substantivos comuns e próprios. Utilizar exemplos do cotidiano para facilitar a compreensão. Apresentar exemplos na lousa, solicitando exemplos dos alunos e classificando-os coletivamente. Esclarecer dúvidas e reforçar a diferença entre os tipos de substantivos com exemplos concretos (nome de pessoas, lugares, coisas, etc.).",
  27 │       tipoInteracao: "Apresentação dialogada e discussão",
  28 │       tempoEstimado: "10 minutos",
  29 │       recursosUsados: ["Lousa ou projetor", "Pincel ou caneta para lousa", "Quiz Interativo"],
  30 │       ordem: 1,
  31 │       expandida: false
  32 │     },
  33 │     {
  34 │       id: "etapa_2",
  35 │       titulo: "2. Introdução aos Verbos: Ação e Estado",
  36 │       descricao: "Apresentar o conceito de verbo como palavra que indica ação ou estado. Utilizar exemplos práticos e contextualizados, como frases simples que mostram ações (correr, pular, estudar) e estados (ser, estar, parecer). Explicar a importância dos verbos na construção de frases e narrativas.",
  37 │       tipoInteracao: "Apresentação expositiva com exemplos",
  38 │       tempoEstimado: "15 minutos",
  39 │       recursosUsados: ["Lousa ou projetor", "Pincel ou caneta para lousa", "Organizador Gráfico"],
  40 │       ordem: 2,
  41 │       expandida: false
  42 │     },
  43 │     {
  44 │       id: "etapa_3",
  45 │       titulo: "3. Atividade Prática: Identificando Classes Gramaticais",
  46 │       descricao: "Atividade em grupos onde os alunos receberão frases para identificar substantivos e verbos. Cada grupo apresentará suas respostas e justificativas. Promover discussão sobre as descobertas e corrigir possíveis dúvidas de forma colaborativa.",
  47 │       tipoInteracao: "Atividade em grupos e apresentação",
  48 │       tempoEstimado: "20 minutos",
  49 │       recursosUsados: ["Folhas com exercícios", "Quiz Interativo", "Mapa Mental"],
  50 │       ordem: 3,
  51 │       expandida: false
  52 │     }
  53 │   ],
  54 │   tempoTotalEstimado: "45min",
  55 │   observacoesGerais: "Manter foco na participação ativa dos alunos durante toda a aula. Utilizar exemplos do cotidiano para facilitar a compreensão. Estar atento às dúvidas e promover um ambiente colaborativo de aprendizado.",
  56 │   sugestoesIA: [
  57 │     "Considere usar jogos interativos para tornar a identificação de classes gramaticais mais dinâmica",
  58 │     "Adicione exemplos visuais ou cards com palavras para facilitar a compreensão",
  59 │     "Implemente um sistema de pontuação para motivar a participação dos alunos"
  60 │   ]
  61 │ };
  62 │ 
  63 │ // Função para calcular tempo total das etapas
  64 │ function calcularTempoTotal(etapas: EtapaDesenvolvimento[]): string {
  65 │   if (!etapas || etapas.length === 0) return "0 minutos";
  66 │   
  67 │   let totalMinutos = 0;
  68 │   etapas.forEach(etapa => {
  69 │     const match = etapa.tempoEstimado.match(/\d+/);
  70 │     if (match) {
  71 │       totalMinutos += parseInt(match[0], 10);
  72 │     }
  73 │   });
  74 │   
  75 │   return totalMinutos > 60 ? `${Math.floor(totalMinutos / 60)}h ${totalMinutos % 60}min` : `${totalMinutos}min`;
  76 │ }
  77 │ 
  78 │ // Classe para gerenciar dados de desenvolvimento via Gemini
  79 │ export class DesenvolvimentoGeminiService {
  80 │   private static readonly GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY || 'AIzaSyB0wPaEv6T0C-2_z3rOwRjlQ-HQXPPfXF8';
  81 │   private static readonly GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent';
  82 │ 
  83 │   static async gerarEtapasDesenvolvimento(contextoPlano: any): Promise<DesenvolvimentoData> {
  84 │     try {
  85 │       console.log('🚀 Iniciando geração de etapas via Gemini...', contextoPlano);
  86 │ 
  87 │       if (!contextoPlano) {
  88 │         console.warn('⚠️ Contexto do plano não fornecido, usando dados padrão');
  89 │         return desenvolvimentoDataPadrao;
  90 │       }
  91 │ 
  92 │       // Preparar prompt para o Gemini
  93 │       const prompt = this.criarPromptDesenvolvimento(contextoPlano);
  94 │       
  95 │       const response = await fetch(`${this.GEMINI_API_URL}?key=${this.GEMINI_API_KEY}`, {
  96 │         method: 'POST',
  97 │         headers: {
  98 │           'Content-Type': 'application/json',
  99 │         },
 100 │         body: JSON.stringify({
 101 │           contents: [{
 102 │             parts: [{
 103 │               text: prompt
 104 │             }]
 105 │           }],
 106 │           generationConfig: {
 107 │             temperature: 0.7,
 108 │             topK: 40,
 109 │             topP: 0.95,
 110 │             maxOutputTokens: 8192,
 111 │           }
 112 │         })
 113 │       });
 114 │ 
 115 │       if (!response.ok) {
 116 │         throw new Error(`Erro na API Gemini: ${response.status}`);
 117 │       }
 118 │ 
 119 │       const data = await response.json();
 120 │       
 121 │       if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
 122 │         throw new Error('Resposta inválida da API Gemini');
 123 │       }
 124 │ 
 125 │       const textoResposta = data.candidates[0].content.parts[0].text;
 126 │       console.log('📝 Resposta bruta do Gemini:', textoResposta);
 127 │ 
 128 │       return this.processarRespostaGemini(textoResposta);
 129 │ 
 130 │     } catch (error) {
 131 │       console.error('❌ Erro ao gerar etapas via Gemini:', error);
 132 │       return desenvolvimentoDataPadrao;
 133 │     }
 134 │   }
 135 │ 
 136 │   private static criarPromptDesenvolvimento(contextoPlano: any): string {
 137 │     return `
 138 │ Baseado no seguinte contexto de plano de aula, gere APENAS um JSON válido com as etapas de desenvolvimento:
 139 │ 
 140 │ CONTEXTO:
 141 │ - Disciplina: ${contextoPlano.disciplina || 'Não informado'}
 142 │ - Tema: ${contextoPlano.tema || 'Não informado'}
 143 │ - Série: ${contextoPlano.serie || 'Não informado'}
 144 │ - Duração: ${contextoPlano.duracao || '45 minutos'}
 145 │ - Objetivos: ${contextoPlano.objetivos || 'Não informado'}
 146 │ 
 147 │ Retorne APENAS um JSON válido seguindo esta estrutura exata:
 148 │ 
 149 │ {
 150 │   "etapas": [
 151 │     {
 152 │       "id": "etapa_1",
 153 │       "titulo": "Título da etapa",
 154 │       "descricao": "Descrição detalhada da etapa",
 155 │       "tipoInteracao": "Tipo de interação",
 156 │       "tempoEstimado": "X minutos",
 157 │       "recursosUsados": ["recurso1", "recurso2"],
 158 │       "ordem": 1,
 159 │       "expandida": false
 160 │     }
 161 │   ],
 162 │   "tempoTotalEstimado": "45min",
 163 │   "observacoesGerais": "Observações gerais do plano",
 164 │   "sugestoesIA": ["sugestão1", "sugestão2", "sugestão3"]
 165 │ }
 166 │ 
 167 │ IMPORTANTE: 
 168 │ - Retorne APENAS o JSON, sem texto adicional
 169 │ - Gere entre 3 a 5 etapas
 170 │ - O tempo total deve somar aproximadamente ${contextoPlano.duracao || '45 minutos'}
 171 │ - Use recursos variados e apropriados para a disciplina
 172 │ `;
 173 │   }
 174 │ 
 175 │   private static processarRespostaGemini(textoResposta: string): DesenvolvimentoData {
 176 │     try {
 177 │       console.log('🔄 Processando resposta do Gemini...');
 178 │       
 179 │       let cleanedText = textoResposta.trim();
 180 │       
 181 │       // Remover markdown se presente
 182 │       if (cleanedText.includes('```json')) {
 183 │         cleanedText = cleanedText.replace(/```json\s*/g, '').replace(/```\s*$/g, '');
 184 │       } else if (cleanedText.includes('```')) {
 185 │         cleanedText = cleanedText.replace(/```\s*/g, '').replace(/```\s*$/g, '');
 186 │       }
 187 │       
 188 │       // Remover texto antes e depois do JSON
 189 │       const jsonStart = cleanedText.indexOf('{');
 190 │       const jsonEnd = cleanedText.lastIndexOf('}');
 191 │       
 192 │       if (jsonStart !== -1 && jsonEnd !== -1) {
 193 │         cleanedText = cleanedText.substring(jsonStart, jsonEnd + 1);
 194 │       }
 195 │ 
 196 │       console.log('🔧 Texto limpo para parsing:', cleanedText);
 197 │       
 198 │       const parsedData = JSON.parse(cleanedText);
 199 │       
 200 │       // Validar estrutura básica
 201 │       if (!parsedData.etapas || !Array.isArray(parsedData.etapas)) {
 202 │         console.warn('⚠️ Estrutura inválida, usando dados padrão');
 203 │         return desenvolvimentoDataPadrao;
 204 │       }
 205 │ 
 206 │       // Validar e corrigir cada etapa
 207 │       parsedData.etapas = parsedData.etapas.map((etapa: any, index: number) => ({
 208 │         id: etapa.id || `etapa_${index + 1}`,
 209 │         titulo: etapa.titulo || `Etapa ${index + 1}`,
 210 │         descricao: etapa.descricao || 'Descrição não fornecida',
 211 │         tipoInteracao: etapa.tipoInteracao || 'Apresentação',
 212 │         tempoEstimado: etapa.tempoEstimado || '10 minutos',
 213 │         recursosUsados: Array.isArray(etapa.recursosUsados) ? etapa.recursosUsados : ['Recurso básico'],
 214 │         ordem: etapa.ordem || index + 1,
 215 │         expandida: false
 216 │       }));
 217 │ 
 218 │       // Adicionar recursos aleatórios do School Power se necessário
 219 │       const recursosSchoolPower = [
 220 │         "Quiz Interativo", "Mapa Mental", "Organizador Gráfico", 
 221 │         "Texto de Apoio", "Lista de Exercícios", "Proposta de Redação",
 222 │         "Simulado", "Jogos Educativos", "Apresentação de Slides"
 223 │       ];
 224 │ 
 225 │       parsedData.etapas.forEach((etapa: any) => {
 226 │         if (etapa.recursosUsados.length < 3 && Math.random() > 0.5) {
 227 │           const atividadeAleatoria = recursosSchoolPower[Math.floor(Math.random() * recursosSchoolPower.length)];
 228 │           if (!etapa.recursosUsados.includes(atividadeAleatoria)) {
 229 │             etapa.recursosUsados.push(atividadeAleatoria);
 230 │           }
 231 │         }
 232 │       });
 233 │ 
 234 │       // Calcular tempo total e ajustar se necessário
 235 │       const dadosBase: DesenvolvimentoData = {
 236 │         etapas: parsedData.etapas,
 237 │         tempoTotalEstimado: calcularTempoTotal(parsedData.etapas),
 238 │         observacoesGerais: parsedData.observacoesGerais || "Plano de aula gerado automaticamente. Adapte conforme necessário para sua turma.",
 239 │         sugestoesIA: Array.isArray(parsedData.sugestoesIA) ? parsedData.sugestoesIA : []
 240 │       };
 241 │ 
 242 │       // Ajuste de tempo se necessário
 243 │       let tempoAcumulado = 0;
 244 │       dadosBase.etapas.forEach((etapa, index) => {
 245 │         const tempoMatch = etapa.tempoEstimado.match(/\d+/);
 246 │         const tempoEtapa = tempoMatch ? parseInt(tempoMatch[0], 10) : 0;
 247 │         tempoAcumulado += tempoEtapa;
 248 │         
 249 │         if (index === dadosBase.etapas.length - 1) {
 250 │           // Ajusta a última etapa para fechar em 45 minutos
 251 │           etapa.tempoEstimado = `${45 - tempoAcumulado + (tempoMatch ? parseInt(tempoMatch[0], 10) : 0)} minutos`;
 252 │         }
 253 │       });
 254 │ 
 255 │       console.log('✅ Dados processados com sucesso:', dadosBase);
 256 │       return dadosBase;
 257 │ 
 258 │     } catch (error) {
 259 │       console.error('❌ Erro ao processar resposta:', error);
 260 │       console.error('📄 Texto original:', textoResposta);
 261 │       return desenvolvimentoDataPadrao;
 262 │     }
 263 │   }
 264 │ 
 265 │   static salvarEtapasDesenvolvimento(planoId: string, dados: DesenvolvimentoData): void {
 266 │     try {
 267 │       if (!planoId || !dados) {
 268 │         console.warn('⚠️ ID do plano ou dados inválidos para salvamento');
 269 │         return;
 270 │       }
 271 │       
 272 │       const key = `plano_desenvolvimento_${planoId}`;
 273 │       localStorage.setItem(key, JSON.stringify(dados));
 274 │       console.log('💾 Etapas de desenvolvimento salvas:', key);
 275 │     } catch (error) {
 276 │       console.error('❌ Erro ao salvar etapas de desenvolvimento:', error);
 277 │     }
 278 │   }
 279 │ 
 280 │   static carregarEtapasDesenvolvimento(planoId: string): DesenvolvimentoData | null {
 281 │     try {
 282 │       if (!planoId) {
 283 │         console.warn('⚠️ ID do plano inválido para carregamento');
 284 │         return null;
 285 │       }
 286 │       
 287 │       const key = `plano_desenvolvimento_${planoId}`;
 288 │       const dados = localStorage.getItem(key);
 289 │ 
 290 │       if (dados) {
 291 │         const parsedData = JSON.parse(dados);
 292 │         
 293 │         // Validar dados carregados
 294 │         if (!parsedData.etapas || !Array.isArray(parsedData.etapas)) {
 295 │           console.warn('⚠️ Dados carregados inválidos, usando dados padrão');
 296 │           return desenvolvimentoDataPadrao;
 297 │         }
 298 │         
 299 │         console.log('📂 Dados de desenvolvimento carregados:', parsedData);
 300 │         return parsedData;
 301 │       }
 302 │     } catch (error) {
 303 │       console.error('❌ Erro ao carregar etapas de desenvolvimento:', error);
 304 │     }
 305 │     return null;
 306 │   }
 307 │ 
 308 │   static limparDadosDesenvolvimento(planoId: string): void {
 309 │     try {
 310 │       if (!planoId) return;
 311 │       
 312 │       const key = `plano_desenvolvimento_${planoId}`;
 313 │       localStorage.removeItem(key);
 314 │       console.log('🗑️ Dados de desenvolvimento removidos:', key);
 315 │     } catch (error) {
 316 │       console.error('❌ Erro ao limpar dados de desenvolvimento:', error);
 317 │     }
 318 │   }
 319 │ 
 320 │   static criarEtapaPadrao(): EtapaDesenvolvimento {
 321 │     return {
 322 │       id: `etapa_${Date.now()}`,
 323 │       titulo: "Nova Etapa",
 324 │       descricao: "Descrição da etapa de desenvolvimento",
 325 │       tipoInteracao: "Apresentação",
 326 │       tempoEstimado: "10 minutos",
 327 │       recursosUsados: ["Lousa", "Quiz Interativo"],
 328 │       ordem: 1,
 329 │       expandida: false
 330 │     };
 331 │   }
 332 │ }
 333 │ // Dados estruturados para a seção de Desenvolvimento do Plano de Aula
 334 │ 
 335 │ export interface EtapaDesenvolvimento {
 336 │   id: string;
 337 │   titulo: string;
 338 │   descricao: string;
 339 │   tipoInteracao: string;
 340 │   tempoEstimado: string;
 341 │   recursosUsados: string[];
 342 │   ordem: number;
 343 │   expandida: boolean;
 344 │ }
 345 │ 
 346 │ export interface DesenvolvimentoData {
 347 │   etapas: EtapaDesenvolvimento[];
 348 │   observacoesGerais?: string;
 349 │   metodologiaGeral?: string;
 350 │   recursosComplementares?: string[];
 351 │ }
 352 │ 
 353 │ // Dados padrão/fallback - GARANTINDO QUE SEMPRE EXISTE
 354 │ export const desenvolvimentoDataPadrao: DesenvolvimentoData = {
     ·              ────────────┬────────────
     ·                          ╰── `desenvolvimentoDataPadrao` redefined here
 355 │   etapas: [
 356 │     {
 357 │       id: "etapa_1",
     ╰────
/home/runner/workspace/src/features/schoolpower/activities/plano-aula/sections/desenvolvimento/DesenvolvimentoData.ts:18:1
79 |  export class DesenvolvimentoGeminiService {
80 |    private static readonly GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY || 'AIzaSyB0wPaEv6T0C-2_z3rOwRjlQ-HQXPPfXF8';
81 |    private static readonly GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent';
   |                         ^
82 |  
83 |    static async gerarEtapasDesenvolvimento(contextoPlano: any): Promise<DesenvolvimentoData> {