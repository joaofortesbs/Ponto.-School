Objetivo: Ajustar o cabeçalho do card de chat de conversa na mini-seção "Discussões" da interface do grupo, acessível ao clicar em "Acessar Grupo" em "Meus Grupos". No lado esquerdo, exibir a quantidade de membros online dentro do grupo, configurando um sistema para rastrear usuários ativos na plataforma via navegador. No canto direito, adicionar:





Um ícone de pesquisa que expande uma barra de pesquisa funcional para buscar mensagens no chat.



Um ícone de três pontos que abre um mini-modal abaixo (com opções inativas por enquanto, conforme a imagem enviada). O design e layout da mini-seção "Grupos de Estudos" (incluindo modais de "Adicionar Grupo" e "Criar Novo Grupo") não devem ser alterados, e todas as funcionalidades existentes devem ser preservadas, sem introduzir erros ou bugs.



Instruções Gerais





Escopo Restrito: Foque exclusivamente na função accessGroup no frontend e configure um sistema de rastreamento de usuários online no Supabase. Não modifique o design, layout ou qualquer elemento da mini-seção "Grupos de Estudos", incluindo os modais de "Adicionar Grupo" e "Criar Novo Grupo", nem outras partes do código (ex.: createGroup, joinGroupByCode, loadAllGroups, modais existentes).



Preservação: Mantenha intactas todas as funcionalidades existentes (criação via modal, adesão via código/botão, saída/exclusão, chat), sem impacto no layout ou design atual.



Eficiência: Utilize Realtime do Supabase para rastrear usuários online e atualizar a contagem em tempo real, com validação e logs para evitar falhas. A barra de pesquisa deve filtrar mensagens existentes.



Testes Completos: Após as alterações, teste o cabeçalho e envie os logs.



Análise de Cenários





Cenário 1: Novo Usuário Entra no Grupo - Contagem de membros online deve atualizar em tempo real.



Cenário 2: Usuário Sai da Plataforma - Contagem deve diminuir após um tempo de inatividade (ex.: 30 segundos).



Cenário 3: Pesquisa de Mensagem - Barra de pesquisa deve filtrar mensagens corretamente.



Cenário 4: Clique nos Três Pontos - Mini-modal deve aparecer com opções inativas.



Cenário 5: Erro de Conexão - Implementar retry para reconexão ao Realtime.



Modificações no Banco de Dados (Supabase)

Tabela user_sessions (para rastrear online)

CREATE TABLE user_sessions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES auth.users(id),
  grupo_id UUID REFERENCES grupos_estudo(id),
  last_active TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE,
  CONSTRAINT fk_grupo FOREIGN KEY (grupo_id) REFERENCES grupos_estudo(id) ON DELETE CASCADE
);

ALTER TABLE user_sessions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Permitir inserção e atualização para o usuário" ON user_sessions
FOR ALL
TO authenticated
USING (user_id = auth.uid())
WITH CHECK (user_id = auth.uid());

-- Habilitar Realtime para atualizações
ALTER TABLE user_sessions REPLICA IDENTITY FULL;



Implementação no Frontend (JavaScript)

 // Atualizar accessGroup para incluir cabeçalho com contagem online, pesquisa e modal const accessGroup = async (groupId) => { try { console.log(`Acessando grupo ${groupId}...`); const userId = await validateUserAuth(); if (!userId) { console.error('Usuário não autenticado.'); alert('Usuário não autenticado.'); return; } 

// Cache para nomes e imagens de perfil
const userCache = new Map();
const { data: users } = await supabase
  .from('auth.users')
  .select('id, user_metadata')
  .in('id', (await supabase.from('membros_grupos').select('user_id').eq('grupo_id', groupId)).data.map(u => u.user_id));
users.forEach(user => {
  const metadata = user.user_metadata || {};
  userCache.set(user.id, {
    name: metadata.name || `Usuário ${user.id.slice(0, 5)}`,
    avatar_url: metadata.avatar_url || null
  });
});

// Atualizar status online
const updateOnlineStatus = async () => {
  const { error } = await supabase
    .from('user_sessions')
    .upsert({ user_id: userId, grupo_id: groupId, last_active: new Date() }, { onConflict: ['user_id', 'grupo_id'] });
  if (error) console.error('Erro ao atualizar status online:', error.message);
};
updateOnlineStatus();
setInterval(updateOnlineStatus, 15000); // Atualizar a cada 15 segundos

const groupInterface = document.createElement('div');
groupInterface.id = 'group-interface';
groupInterface.style.cssText = 'margin-left: 250px; padding: 20px;';
groupInterface.innerHTML = `
  <div id="chat-header" style="display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #ccc; padding: 10px;">
    <span id="online-count">Membros online: 0</span>
    <div>
      <button id="search-icon" style="background: none; border: none; cursor: pointer; margin-right: 10px;">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
      </button>
      <button id="menu-icon" style="background: none; border: none; cursor: pointer;">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="12" cy="12" r="1"></circle><circle cx="12" cy="5" r="1"></circle><circle cx="12" cy="19" r="1"></circle>
        </svg>
      </button>
    </div>
  </div>
  <div id="search-bar" style="display: none; margin: 10px 0; transition: all 0.3s;">
    <input id="search-input" type="text" placeholder="Pesquisar mensagens..." style="width: 200px; padding: 5px; border: 1px solid #ccc; border-radius: 5px;">
    <button onclick="hideSearchBar()" style="background: #e74c3c; color: white; border: none; padding: 5px 10px; border-radius: 5px; margin-left: 5px;">Fechar</button>
  </div>
  <div id="discussions-content" style="margin-top: 20px; height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
    <div id="chat-messages" style="display: flex; flex-direction: column-reverse;"></div>
  </div>
  <div style="margin-top: 10px; display: flex; align-items: center;">
    <input id="chat-input" type="text" placeholder="Digite sua mensagem..." style="flex-grow: 1; padding: 5px; border: 1px solid #ccc; border-radius: 5px; margin-right: 5px;">
    <button onclick="sendMessage('${groupId}')" style="background: #2ecc71; color: white; border: none; padding: 5px 10px; border-radius: 5px;">Enviar</button>
  </div>
  <div id="menu-modal" style="display: none; position: absolute; right: 10px; top: 50px; background: #fff; border: 1px solid #ccc; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); padding: 10px; z-index: 1000;">
    <div style="padding: 5px; color: #666;">Opção 1 (Inativa)</div>
    <div style="padding: 5px; color: #666;">Opção 2 (Inativa)</div>
    <div style="padding: 5px; color: #666;">Opção 3 (Inativa)</div>
  </div>
`;
document.getElementById('main-content').innerHTML = '';
document.getElementById('main-content').appendChild(groupInterface);

// Configurar Realtime para contagem de membros online
const channel = supabase
  .channel(`online-${groupId}`)
  .on('postgres_changes', { event: 'UPSERT', schema: 'public', table: 'user_sessions', filter: `grupo_id=eq.${groupId}` }, () => {
    updateOnlineCount(groupId);
  })
  .subscribe(async (status) => {
    if (status === 'SUBSCRIBED') {
      console.log(`Subscribed to online channel for group ${groupId}`);
      updateOnlineCount(groupId);
    }
  });

// Funções para controle de UI
document.getElementById('search-icon').addEventListener('click', () => {
  const searchBar = document.getElementById('search-bar');
  searchBar.style.display = 'flex';
  setTimeout(() => searchBar.style.width = '250px', 10); // Animação de expansão
});
document.getElementById('menu-icon').addEventListener('click', () => {
  const modal = document.getElementById('menu-modal');
  modal.style.display = modal.style.display === 'block' ? 'none' : 'block';
});
document.getElementById('chat-messages').addEventListener('click', () => {
  document.getElementById('menu-modal').style.display = 'none'; // Fechar modal ao clicar fora
});

// Função para atualizar contagem de membros online
const updateOnlineCount = async (groupId) => {
  const { data, error } = await supabase
    .from('user_sessions')
    .select('user_id')
    .eq('grupo_id', groupId)
    .gt('last_active', new Date(Date.now() - 30000)); // Ativos nos últimos 30 segundos
  if (error) {
    console.error('Erro ao contar membros online:', error.message);
    return;
  }
  document.getElementById('online-count').textContent = `Membros online: ${data.length}`;
};

// Função para esconder a barra de pesquisa
const hideSearchBar = () => {
  const searchBar = document.getElementById('search-bar');
  searchBar.style.width = '0';
  setTimeout(() => searchBar.style.display = 'none', 300); // Animação de colapso
};

// Configurar Realtime para carregar e atualizar mensagens
const chatChannel = supabase
  .channel(`chat-${groupId}`)
  .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'mensagens', filter: `grupo_id=eq.${groupId}` }, (payload) => {
    addMessageToChat(payload.new, userCache);
  })
  .subscribe(async (status) => {
    if (status === 'SUBSCRIBED') {
      console.log(`Subscribed to chat channel for group ${groupId}`);
      const { data: messages } = await supabase
        .from('mensagens')
        .select('*')
        .eq('grupo_id', groupId)
        .order('enviado_em', { ascending: false });
      messages.forEach(message => addMessageToChat(message, userCache));
    }
  });

// Função de pesquisa
document.getElementById('search-input').addEventListener('input', async (e) => {
  const query = e.target.value.toLowerCase();
  const { data: messages } = await supabase
    .from('mensagens')
    .select('*')
    .eq('grupo_id', groupId)
    .ilike('conteudo', `%${query}%`)
    .order('enviado_em', { ascending: false });
  const chatMessages = document.getElementById('chat-messages');
  chatMessages.innerHTML = '';
  messages.forEach(message => addMessageToChat(message, userCache));
});

console.log(`Interface do grupo ${groupId} carregada com cabeçalho configurado.`);

} catch (error) { console.error('Erro ao acessar grupo:', error.message, error.stack); alert('Erro ao acessar o grupo. Verifique o console.'); } };

// Função para adicionar mensagem ao chat const addMessageToChat = (message, userCache) => { const userId = validateUserAuth(); const userData = userCache.get(message.user_id) || { name: Usuário ${message.user_id.slice(0, 5)}, avatar_url: null }; const chatMessages = document.getElementById('chat-messages'); const messageDiv = document.createElement('div'); messageDiv.style.cssText = display: flex; align-items: flex-start; margin: 5px 0; ${message.user_id === userId ? 'flex-direction: row-reverse;' : 'flex-direction: row;'}; messageDiv.innerHTML = <div style="margin: ${message.user_id === userId ? '0 0 0 10px' : '0 10px 0 0'};"> <img src="${userData.avatar_url ||https://ui-avatars.com/api/?name=${encodeURIComponent(userData.name)}}" alt="${userData.name}" style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;"> </div> <div style="max-width: 70%; ${message.user_id === userId ? 'text-align: right;' : 'text-align: left;' }"> <strong>${userData.name}</strong><br> <div style="background: ${message.user_id === userId ? '#dcf8c6' : '#e9ecef'}; padding: 10px; border-radius: 10px; display: inline-block;"> ${message.conteudo} </div><br> <small>${new Date(message.enviado_em).toLocaleTimeString()}</small> </div> ; chatMessages.prepend(messageDiv); chatMessages.scrollTop = 0; };

// Função para enviar mensagem const sendMessage = async (groupId) => { try { const userId = await validateUserAuth(); if (!userId) { console.error('Usuário não autenticado.'); alert('Usuário não autenticado.'); return; } const input = document.getElementById('chat-input'); const content = input.value.trim(); if (!content) { alert('Digite uma mensagem.'); return; } const { error } = await supabase .from('mensagens') .insert({ grupo_id: groupId, user_id: userId, conteudo: content }); if (error) throw error; input.value = ''; console.log(Mensagem enviada para grupo ${groupId}.); } catch (error) { console.error('Erro ao enviar mensagem:', error.message, error.stack); alert('Erro ao enviar mensagem. Verifique o console.'); } };

// Chamar loadMyGroups manualmente para teste imediato loadMyGroups();

// Manter a inicialização existente document.addEventListener('DOMContentLoaded', () => { loadMyGroups(); });

// Manter outras funções existentes (ex.: createGroup, joinGroupByCode, loadAllGroups, showCelebrationModal, joinGroupDirectly, leaveGroup, deleteGroup, returnToGroups, showLeaveModal) sem alterações