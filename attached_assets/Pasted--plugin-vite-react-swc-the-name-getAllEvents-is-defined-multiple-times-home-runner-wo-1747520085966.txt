[plugin:vite:react-swc] × the name `getAllEvents` is defined multiple times
     ╭─[/home/runner/workspace/src/services/calendarEventService.ts:121:1]
 121 │ };
 122 │ 
 123 │ // Obter todos os eventos
 124 │ export const getAllEvents = async (): Promise<CalendarEvent[]> => {
     ·              ──────┬─────
     ·                    ╰── previous definition of `getAllEvents` here
 125 │   try {
 126 │     const { data, error } = await supabase
 127 │       .from("calendar_events")
 128 │       .select("*")
 129 │       .order("start_date", { ascending: true });
 130 │ 
 131 │     if (error) {
 132 │       console.error("Erro ao buscar todos os eventos:", error);
 133 │       return getAllLocalEvents();
 134 │     }
 135 │ 
 136 │     return (data || []).map(formatDBEventForApp);
 137 │   } catch (error) {
 138 │     console.error("Erro ao buscar todos os eventos:", error);
 139 │     return getAllLocalEvents();
 140 │   }
 141 │ };
 142 │ 
 143 │ // Obter todos os eventos de um usuário
 144 │ export const getEventsByUserId = async (userId: string): Promise<CalendarEvent[]> => {
 145 │   if (!userId) {
 146 │     console.error("UserId inválido:", userId);
 147 │     return [];
 148 │   }
 149 │ 
 150 │   try {
 151 │     console.log("Buscando eventos para o usuário:", userId);
 152 │ 
 153 │     const { data, error } = await supabase
 154 │       .from("calendar_events")
 155 │       .select("*")
 156 │       .eq("user_id", userId)
 157 │       .order("start_date", { ascending: true });
 158 │ 
 159 │     if (error) {
 160 │       console.error("Erro ao buscar eventos do usuário no DB:", error);
 161 │       // Fallback para armazenamento local em caso de erro
 162 │       const localEvents = getLocalEvents(userId);
 163 │       console.log("Eventos obtidos localmente:", localEvents.length);
 164 │       return localEvents;
 165 │     }
 166 │ 
 167 │     const formattedEvents = (data || []).map(formatDBEventForApp);
 168 │     console.log(`${formattedEvents.length} eventos encontrados para o usuário ${userId}`);
 169 │ 
 170 │     // Mesclar com eventos locais
 171 │     const localEvents = getLocalEvents(userId);
 172 │     const localOnlyEvents = localEvents.filter(le => 
 173 │       !formattedEvents.some(fe => fe.id === le.id)
 174 │     );
 175 │ 
 176 │     return [...formattedEvents, ...localOnlyEvents];
 177 │   } catch (error) {
 178 │     console.error("Erro ao buscar eventos do usuário:", error);
 179 │     // Fallback para armazenamento local em caso de erro
 180 │     return getLocalEvents(userId);
 181 │   }
 182 │ };
 183 │ 
 184 │ // Atualizar um evento existente
 185 │ export const updateEvent = async (event: CalendarEvent): Promise<CalendarEvent | null> => {
 186 │   try {
 187 │     if (!event.id) {
 188 │       console.error("ID é obrigatório para atualizar um evento");
 189 │       return null;
 190 │     }
 191 │ 
 192 │     if (event.id.startsWith('local-')) {
 193 │       // Para eventos locais, atualizar apenas no localStorage
 194 │       updateEventLocally(event);
 195 │       return event;
 196 │     }
 197 │ 
 198 │     const dbEvent = formatEventForDB({
 199 │       ...event,
 200 │       updatedAt: new Date().toISOString()
 201 │     });
 202 │ 
 203 │     const { data, error } = await supabase
 204 │       .from("calendar_events")
 205 │       .update(dbEvent)
 206 │       .eq("id", event.id)
 207 │       .select()
 208 │       .single();
 209 │ 
 210 │     if (error) {
 211 │       console.error("Erro ao atualizar evento:", error);
 212 │       // Fallback para armazenamento local em caso de erro
 213 │       updateEventLocally(event);
 214 │       return event;
 215 │     }
 216 │ 
 217 │     return formatDBEventForApp(data);
 218 │   } catch (error) {
 219 │     console.error("Erro ao atualizar evento:", error);
 220 │     // Fallback para armazenamento local em caso de erro
 221 │     updateEventLocally(event);
 222 │     return event;
 223 │   }
 224 │ };
 225 │ 
 226 │ // Remover um evento
 227 │ export const deleteEvent = async (eventId: string): Promise<boolean> => {
 228 │   try {
 229 │     // Obter uma cópia do evento antes de excluí-lo para notificação
 230 │     const events = getAllLocalEvents();
 231 │     const eventToDelete = events.find(event => event.id === eventId);
 232 │ 
 233 │     // Tentar excluir do Supabase se conectado
 234 │     const isConnected = await checkSupabaseConnection();
 235 │ 
 236 │     if (isConnected) {
 237 │       try {
 238 │         const { error } = await supabase
 239 │           .from('calendar_events')
 240 │           .delete()
 241 │           .eq('id', eventId);
 242 │ 
 243 │         if (error) {
 244 │           console.error("Erro ao excluir evento do Supabase:", error);
 245 │           console.log("Excluindo apenas localmente devido a erro no Supabase");
 246 │           deleteEventLocally(eventId);
 247 │ 
 248 │           // Notificar sobre a exclusão
 249 │           if (eventToDelete) {
 250 │             dispatchEventChangeNotification('event-deleted', { id: eventId, ...eventToDelete });
 251 │           }
 252 │ 
 253 │           return true;  // Consideramos sucesso se excluiu localmente
 254 │         }
 255 │ 
 256 │         console.log("Evento excluído com sucesso do Supabase:", eventId);
 257 │ 
 258 │         // Também excluímos localmente para manter sincronizado
 259 │         deleteEventLocally(eventId);
 260 │ 
 261 │         // Notificar sobre a exclusão
 262 │         if (eventToDelete) {
 263 │           dispatchEventChangeNotification('event-deleted', { id: eventId, ...eventToDelete });
 264 │         }
 265 │ 
 266 │         return true;
 267 │       } catch (error) {
 268 │         console.error("Erro ao excluir evento do Supabase:", error);
 269 │         deleteEventLocally(eventId);
 270 │ 
 271 │         // Notificar sobre a exclusão
 272 │         if (eventToDelete) {
 273 │           dispatchEventChangeNotification('event-deleted', { id: eventId, ...eventToDelete });
 274 │         }
 275 │ 
 276 │         return true;  // Consideramos sucesso se excluiu localmente
 277 │       }
 278 │     } else {
 279 │       // Se não estiver conectado, excluir apenas localmente
 280 │       console.log("Sem conexão com Supabase, excluindo evento apenas localmente");
 281 │       deleteEventLocally(eventId);
 282 │ 
 283 │       // Notificar sobre a exclusão
 284 │       if (eventToDelete) {
 285 │         dispatchEventChangeNotification('event-deleted', { id: eventId, ...eventToDelete });
 286 │       }
 287 │ 
 288 │       return true;
 289 │     }
 290 │   } catch (error) {
 291 │     console.error("Erro ao excluir evento:", error);
 292 │     return false;
 293 │   }
 294 │ };
 295 │ 
 296 │ // Funções para armazenamento local como backup
 297 │ const EVENTS_STORAGE_KEY = "calendar_events";
 298 │ 
 299 │ // Salvar todos os eventos localmente
 300 │ const saveEventsLocally = (events: CalendarEvent[]) => {
 301 │   try {
 302 │     localStorage.setItem(EVENTS_STORAGE_KEY, JSON.stringify(events));
 303 │     console.log("Eventos salvos localmente com sucesso", events.length);
 304 │     return true;
 305 │   } catch (error) {
 306 │     console.error("Erro ao salvar eventos localmente:", error);
 307 │     return false;
 308 │   }
 309 │ };
 310 │ 
 311 │ // Inicializar o armazenamento local se não existir
 312 │ export const initLocalStorage = () => {
 313 │   if (!localStorage.getItem(EVENTS_STORAGE_KEY)) {
 314 │     saveEventsLocally([]);
 315 │     console.log("Armazenamento local de eventos inicializado");
 316 │   } else {
 317 │     console.log("Armazenamento local de eventos já existe");
 318 │   }
 319 │ };
 320 │ 
 321 │ // Obter todos os eventos armazenados localmente
 322 │ const getAllLocalEvents = (): CalendarEvent[] => {
 323 │   try {
 324 │     const eventsJson = localStorage.getItem(EVENTS_STORAGE_KEY);
 325 │     if (!eventsJson) return [];
 326 │ 
 327 │     const events: CalendarEvent[] = JSON.parse(eventsJson);
 328 │     return events;
 329 │   } catch (error) {
 330 │     console.error("Erro ao obter todos os eventos locais:", error);
 331 │     return [];
 332 │   }
 333 │ };
 334 │ 
 335 │ // Exportar função para ser usada em outros componentes
 336 │ export const getAllEvents = async (): Promise<CalendarEvent[]> => {
     ·              ──────┬─────
     ·                    ╰── `getAllEvents` redefined here
 337 │   try {
 338 │     const { data, error } = await supabase
 339 │       .from("calendar_events")
     ╰────
/home/runner/workspace/src/services/calendarEventService.ts:121:1
