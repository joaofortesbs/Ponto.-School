[plugin:vite:react-swc] × the name `supabase` is defined multiple times
    ╭─[/home/runner/workspace/src/lib/generate-user-id.ts:1:1]
  1 │ import { supabase } from "@/lib/supabase";
    ·          ────┬───
    ·              ╰── previous definition of `supabase` here
  2 │ 
  3 │ /**
  4 │  * Gera um ID de usuário único com o formato especificado.
  5 │  * 
  6 │  * @param countryCode O código do país (ex: BR, US, etc)
  7 │  * @param planType O tipo de plano (1 = Premium, 2 = Standard, etc)
  8 │  * @returns Uma string contendo o ID gerado no formato BRXXXXXXXXXXXX
  9 │  */
 10 │ export async function generateUserId(countryCode: string, planType: number): Promise<string> {
 11 │   try {
 12 │     // Tentar buscar a sequência atual
 13 │     const { data, error } = await supabase
 14 │       .from('user_id_control')
 15 │       .select('last_sequence')
 16 │       .eq('country_code', countryCode)
 17 │       .eq('plan_type', planType)
 18 │       .single();
 19 │ 
 20 │     if (error) {
 21 │       // Em caso de erro, retornar um ID baseado em timestamp
 22 │       return `${countryCode}${planType}${Date.now().toString().slice(-10)}`;
 23 │     }
 24 │ 
 25 │     // Incrementar o último número de sequência
 26 │     const currentSequence = data?.last_sequence || 0;
 27 │     const newSequence = currentSequence + 1;
 28 │ 
 29 │     // Atualizar o registro com o novo número de sequência
 30 │     await supabase
 31 │       .from('user_id_control')
 32 │       .update({ last_sequence: newSequence })
 33 │       .eq('country_code', countryCode)
 34 │       .eq('plan_type', planType);
 35 │ 
 36 │     // Formatar o ID: país (2) + tipo de plano (1) + sequência (10 dígitos com zeros à esquerda)
 37 │     const paddedSequence = newSequence.toString().padStart(10, '0');
 38 │     return `${countryCode}${planType}${paddedSequence}`;
 39 │   } catch (error) {
 40 │     // Em caso de erro, retornar um ID baseado em timestamp
 41 │     return `${countryCode}${planType}${Date.now().toString().slice(-10)}`;
 42 │   }
 43 │ }
 44 │ 
 45 │ /**
 46 │  * Versão simplificada que não depende do banco de dados para gerar um ID único
 47 │  * Útil quando houver problemas de conexão com o Supabase
 48 │  */
 49 │ export function generateSimpleUserId(countryCode: string, planType: number): string {
 50 │   const timestamp = Date.now();
 51 │   const random = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
 52 │   return `${countryCode}${planType}${timestamp.toString().slice(-6)}${random}`;
 53 │ }
 54 │ import { supabase } from './supabase';
    ·          ────┬───
    ·              ╰── `supabase` redefined here
 55 │ 
 56 │ export const generateUserIdSupabase = async (planType: string): Promise<string> => {
 57 │   // Gerar um ID baseado no tipo de plano
    ╰────

  × the name `generateUserId` is defined multiple times
     ╭─[/home/runner/workspace/src/lib/generate-user-id.ts:7:1]
   7 │  * @param planType O tipo de plano (1 = Premium, 2 = Standard, etc)
   8 │  * @returns Uma string contendo o ID gerado no formato BRXXXXXXXXXXXX
   9 │  */
  10 │ export async function generateUserId(countryCode: string, planType: number): Promise<string> {
     ·                       ───────┬──────
     ·                              ╰── previous definition of `generateUserId` here
  11 │   try {
  12 │     // Tentar buscar a sequência atual
  13 │     const { data, error } = await supabase
  14 │       .from('user_id_control')
  15 │       .select('last_sequence')
  16 │       .eq('country_code', countryCode)
  17 │       .eq('plan_type', planType)
  18 │       .single();
  19 │ 
  20 │     if (error) {
  21 │       // Em caso de erro, retornar um ID baseado em timestamp
  22 │       return `${countryCode}${planType}${Date.now().toString().slice(-10)}`;
  23 │     }
  24 │ 
  25 │     // Incrementar o último número de sequência
  26 │     const currentSequence = data?.last_sequence || 0;
  27 │     const newSequence = currentSequence + 1;
  28 │ 
  29 │     // Atualizar o registro com o novo número de sequência
  30 │     await supabase
  31 │       .from('user_id_control')
  32 │       .update({ last_sequence: newSequence })
  33 │       .eq('country_code', countryCode)
  34 │       .eq('plan_type', planType);
  35 │ 
  36 │     // Formatar o ID: país (2) + tipo de plano (1) + sequência (10 dígitos com zeros à esquerda)
  37 │     const paddedSequence = newSequence.toString().padStart(10, '0');
  38 │     return `${countryCode}${planType}${paddedSequence}`;
  39 │   } catch (error) {
  40 │     // Em caso de erro, retornar um ID baseado em timestamp
  41 │     return `${countryCode}${planType}${Date.now().toString().slice(-10)}`;
  42 │   }
  43 │ }
  44 │ 
  45 │ /**
  46 │  * Versão simplificada que não depende do banco de dados para gerar um ID único
  47 │  * Útil quando houver problemas de conexão com o Supabase
  48 │  */
  49 │ export function generateSimpleUserId(countryCode: string, planType: number): string {
  50 │   const timestamp = Date.now();
  51 │   const random = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
  52 │   return `${countryCode}${planType}${timestamp.toString().slice(-6)}${random}`;
  53 │ }
  54 │ import { supabase } from './supabase';
  55 │ 
  56 │ export const generateUserIdSupabase = async (planType: string): Promise<string> => {
  57 │   // Gerar um ID baseado no tipo de plano
  58 │   // BR1 para premium, BR2 para lite/básico
  59 │   const prefix = `BR${planType === 'premium' ? '1' : '2'}`;
  60 │   const timestamp = Date.now();
  61 │   const randomSuffix = Math.floor(Math.random() * 10000);
  62 │   
  63 │   const generatedId = `${prefix}-${timestamp}-${randomSuffix}`;
  64 │   
  65 │   try {
  66 │     // Verificar se o ID já existe (raro, mas possível)
  67 │     const { data, error } = await supabase
  68 │       .from('profiles')
  69 │       .select('user_id')
  70 │       .eq('user_id', generatedId)
  71 │       .single();
  72 │     
  73 │     if (error) {
  74 │       console.error("Error checking for existing ID record:", error);
  75 │       // Se houver erro de consulta, retornamos o ID gerado mesmo assim
  76 │       return generatedId;
  77 │     }
  78 │     
  79 │     // Se o ID já existe (extremamente improvável), gere outro
  80 │     if (data) {
  81 │       console.log("ID already exists, generating a new one");
  82 │       // Chamada recursiva com baixíssima probabilidade de execução
  83 │       return generateUserIdSupabase(planType);
  84 │     }
  85 │     
  86 │     return generatedId;
  87 │   } catch (error) {
  88 │     console.error("Error generating user ID:", error);
  89 │     // Em caso de erro, retorne o ID gerado
  90 │     return generatedId;
  91 │   }
  92 │ };
  93 │ 
  94 │ /**
  95 │  * Gera um ID único para usuários baseado em timestamp e valores aleatórios
  96 │  * para garantir unicidade mesmo em caso de múltiplos registros simultâneos
  97 │  */
  98 │ export function generateUserId(): string {
     ·                 ───────┬──────
     ·                        ╰── `generateUserId` redefined here
  99 │   // Usar timestamp para garantir sequência crescente
 100 │   const timestamp = new Date().getTime();
     ╰────
/home/runner/workspace/src/lib/generate-user-id.ts:1:1
1  |  import { supabase } from "@/lib/supabase";
   |   ^
2  |  
3  |  /**