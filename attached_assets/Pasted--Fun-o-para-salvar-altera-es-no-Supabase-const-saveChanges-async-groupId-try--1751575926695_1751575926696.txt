

// Função para salvar alterações no Supabase
const saveChanges = async (groupId) => {
  try {
    const nameInput = document.querySelector('#group-name');
    const descriptionInput = document.querySelector('#group-description');
    const disciplineInput = document.querySelector('#group-discipline');
    const topicInput = document.querySelector('#group-topic');
    const tagsInput = document.querySelector('#group-tags');
    const privacySelect = document.querySelector('#group-privacy');

    if (!nameInput || !descriptionInput || !disciplineInput || !topicInput || !tagsInput || !privacySelect) {
      console.error(`Campos da mini-seção "Ajustes" não encontrados para salvar alterações no grupo ${groupId}.`);
      alert('Erro ao localizar campos para salvar. Verifique o console.');
      return;
    }

    if (!nameInput.value.trim()) {
      alert('O Nome do Grupo é obrigatório.');
      return;
    }

    const updates = {
      nome: nameInput.value.trim(),
      descricao: descriptionInput.value.trim(),
      disciplina: disciplineInput.value.trim(),
      topico_especifico: topicInput.value.trim(),
      tags: tagsInput.value.split(',').map(tag => tag.trim()).filter(tag => tag),
      privacidade: privacySelect.value
    };

    const { error } = await supabase
      .from('grupos')
      .update(updates)
      .eq('id', groupId);

    if (error) throw error;

    console.log(`Alterações salvas com sucesso para o grupo ${groupId}.`);
    alert('Alterações salvas com sucesso!');
    const updatedData = await fetchGroupData(groupId);
    fillAndEnableEditing(updatedData);
  } catch (error) {
    console.error(`Erro ao salvar alterações para o grupo ${groupId}:`, error.message);
    alert('Erro ao salvar as alterações. Verifique o console.');
  }
};

// Função para carregar membros com cache dinâmico
const loadMembers = async (groupId, userCache, currentUserId, isAdminOrOwner) => {
  try {
    const membersContent = document.getElementById('members-content');
    if (!membersContent) {
      console.error('Seção "Membros" não encontrada para o grupo ${groupId}.');
      return;
    }
    membersContent.innerHTML = ''; // Limpar conteúdo existente

    // Carregar do cache ou do Supabase
    let members = JSON.parse(localStorage.getItem(`members-${groupId}`)) || [];
    if (!members.length || Date.now() - (localStorage.getItem(`members-${groupId}-timestamp`) || 0) > 30000) {
      const { data, error: membersError } = await supabase
        .from('membros_grupos')
        .select('user_id, is_admin, is_owner')
        .eq('grupo_id', groupId);
      if (membersError) throw membersError;
      members = data;
      localStorage.setItem(`members-${groupId}`, JSON.stringify(members));
      localStorage.setItem(`members-${groupId}-timestamp`, Date.now());
      console.log(`Membros carregados do Supabase e salvos no cache para o grupo ${groupId}.`);
    } else {
      console.log(`Membros carregados do cache para o grupo ${groupId}.`);
    }

    members.forEach(member => {
      const user = userCache.get(member.user_id) || { name: `Usuário ${member.user_id.slice(0, 5)}`, avatar_url: null };
      const memberCard = document.createElement('div');
      memberCard.className = 'member-card';
      memberCard.dataset.userId = member.user_id; // Adicionar ID único ao card
      memberCard.innerHTML = `
        <img src="${user.avatar_url || 'default-avatar.png'}" alt="${user.name}">
        <span>${user.name}</span>
        ${member.user_id === currentUserId ? '' : '<i class="remove-member-icon" data-user-id="' + member.user_id + '"></i>'}
      `;
      membersContent.appendChild(memberCard);

      // Adicionar evento ao ícone de remover membro
      if (member.user_id !== currentUserId && isAdminOrOwner) {
        const removeIcon = memberCard.querySelector('.remove-member-icon');
        if (removeIcon) {
          removeIcon.style.cursor = 'pointer';
          removeIcon.addEventListener('click', () => showRemoveMemberModal(member.user_id, user.name));
        }
      }
    });
    console.log(`Membros renderizados para o grupo ${groupId} com ${members.length} entradas.`);
  } catch (error) {
    console.error(`Erro ao carregar membros para o grupo ${groupId}:`, error.message);
    alert('Erro ao carregar os membros. Verifique o console.');
  }
};

// Função para exibir o modal de confirmação
const showRemoveMemberModal = (userId, userName) => {
  const modal = document.createElement('div');
  modal.id = 'remove-member-modal';
  modal.style.cssText = `
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0,0,0,0.5);
    z-index: 1000;
    text-align: center;
  `;
  modal.innerHTML = `
    <p>Você realmente quer remover ${userName} do grupo de estudos?</p>
    <button id="cancel-remove" style="margin-right: 10px; background: #ddd; border: none; padding: 5px 10px; border-radius: 5px;">Cancelar</button>
    <button id="confirm-remove" style="background: #e74c3c; color: white; border: none; padding: 5px 10px; border-radius: 5px;">Remover</button>
  `;
  document.body.appendChild(modal);

  document.getElementById('cancel-remove').addEventListener('click', () => modal.remove());
  document.getElementById('confirm-remove').addEventListener('click', () => {
    const memberCard = document.querySelector(`.member-card[data-user-id="${userId}"]`);
    if (memberCard) {
      const cardClone = memberCard.cloneNode(true); // Cache para rollback
      localStorage.setItem(`rollback-${groupId}-${userId}`, cardClone.outerHTML);
      memberCard.remove(); // Remoção imediata
    }
    removeMember(groupId, userId).then(() => {
      localStorage.removeItem(`rollback-${groupId}-${userId}`); // Limpar cache se sucesso
      modal.remove();
    }).catch(() => {
      const membersContent = document.getElementById('members-content');
      if (membersContent && localStorage.getItem(`rollback-${groupId}-${userId}`)) {
        membersContent.innerHTML += localStorage.getItem(`rollback-${groupId}-${userId}`);
        localStorage.removeItem(`rollback-${groupId}-${userId}`);
        alert('Falha na remoção. Membro restaurado.');
      }
      modal.remove();
    });
  });

  // Fechar modal ao clicar fora
  modal.addEventListener('click', (e) => {
    if (e.target === modal) modal.remove();
  });
};

// Função para remover membro com validação assíncrona
const removeMember = async (groupId, userId, retries = 3, delay = 1000) => {
  try {
    // Shadow Log para debug
    const shadowLog = (message) => console.log(`[SHADOW] ${message} - Group: ${groupId}, User: ${userId}`);

    // Verificar autenticação
    const { data: session, error: sessionError } = await supabase.auth.getSession();
    if (sessionError || !session?.session) {
      shadowLog('Erro de autenticação detectado.');
      throw new Error('Autenticação falhou');
    }

    // Verificar permissões
    const { data: userMembership, error: membershipError } = await supabase
      .from('membros_grupos')
      .select('is_admin, is_owner')
      .eq('grupo_id', groupId)
      .eq('user_id', userId)
      .single();
    if (membershipError) throw membershipError;
    const isAdminOrOwner = (await supabase
      .from('membros_grupos')
      .select('is_admin, is_owner')
      .eq('grupo_id', groupId)
      .eq('user_id', userId)
      .single()).data?.is_admin || (await supabase
      .from('membros_grupos')
      .select('is_owner')
      .eq('grupo_id', groupId)
      .eq('user_id', userId)
      .single()).data?.is_owner;
    if (!isAdminOrOwner) {
      shadowLog('Permissão negada para remoção.');
      throw new Error('Permissão negada');
    }

    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        const { data, error } = await supabase
          .from('membros_grupos')
          .delete()
          .eq('grupo_id', groupId)
          .eq('user_id', userId);
        if (error) throw error;
        shadowLog(`Exclusão bem-sucedida na tentativa ${attempt}. Dados: ${JSON.stringify(data)}`);

        // Atualizar cache e recarregar membros
        const members = JSON.parse(localStorage.getItem(`members-${groupId}`)) || [];
        const updatedMembers = members.filter(m => m.user_id !== userId);
        localStorage.setItem(`members-${groupId}`, JSON.stringify(updatedMembers));
        loadMembers(groupId, userCache, userId, isAdminOrOwner);

        shadowLog('Membro removido e interface atualizada.');
        return Promise.resolve();
      } catch (error) {
        shadowLog(`Tentativa ${attempt} falhou: ${error.message}`);
        if (attempt === retries) throw error;
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  } catch (error) {
    shadowLog(`Erro geral: ${error.message}`);
    return Promise.reject(error);
  }
};

// Adicionar ou atualizar seção "Membros" dentro da mini-seção
const membersContent = document.getElementById('members-content');
if (membersContent) {
  let isAdminOrOwner = false;
  const { data: membership, error: membershipError } = await supabase
    .from('membros_grupos')
    .select('is_admin, is_owner')
    .eq('grupo_id', groupId)
    .eq('user_id', userId)
    .single();
  if (membershipError) throw membershipError;
  isAdminOrOwner = membership.is_admin || membership.is_owner;
  loadMembers(groupId, userCache, userId, isAdminOrOwner);
}

// Atualizar seção com preenchimento e edição
const switchSection = (section, groupId) => {
  const sections = ['discussions', 'members', 'settings'];
  sections.forEach(s => {
    const content = document.getElementById(`${s}-content`);
    if (content) content.style.display = s === section ? 'block' : 'none';
    const button = document.querySelector(`button[onclick*="switchSection('${s}'"]`);
    if (button) {
      button.style.background = s === section ? '#3498db' : '#ddd';
      button.style.color = s === section ? 'white' : '#666';
    }
  });
  if (section === 'members' && currentGroupId) {
    const isAdminOrOwner = (await supabase
      .from('membros_grupos')
      .select('is_admin, is_owner')
      .eq('grupo_id', groupId)
      .eq('user_id', userId)
      .single()).data?.is_admin || (await supabase
      .from('membros_grupos')
      .select('is_owner')
      .eq('grupo_id', groupId)
      .eq('user_id', userId)
      .single()).data?.is_owner;
    loadMembers(groupId, userCache, userId, isAdminOrOwner);
  }
  console.log(`Seção ${section} ativada para o grupo ${groupId}.`);
};

switchSection('discussions', groupId); // Iniciar com Discussões

// Configurar Realtime com confirmação bidirecional
const channel = supabase
  .channel(`members-${groupId}`)
  .on('postgres_changes', { event: 'DELETE', schema: 'public', table: 'membros_grupos', filter: `grupo_id=eq.${groupId}` }, (payload) => {
    if (payload.old.user_id) {
      const shadowLog = (message) => console.log(`[SHADOW] ${message} - Group: ${groupId}, User: ${payload.old.user_id}`);
      shadowLog('Evento DELETE recebido via Realtime.');
      const memberCard = document.querySelector(`.member-card[data-user-id="${payload.old.user_id}"]`);
      if (memberCard) memberCard.remove();
      else shadowLog('Mini-card não encontrado para remoção via Realtime.');
      loadMembers(groupId, userCache, userId, isAdminOrOwner); // Recarregar para sincronização
      shadowLog('Membro removido e interface atualizada via Realtime.');
    }
  })
  .subscribe((status) => {
    if (status === 'SUBSCRIBED') {
      console.log(`Subscribed to members channel for group ${groupId}`);
    }
  })
  .catch(err => console.error('Erro ao subscrever ao canal Realtime de membros:', err.message));

// Configurar Realtime para chat e online (mantido como está)
const chatChannel = supabase
  .channel(`chat-${groupId}`)
  .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'mensagens', filter: `grupo_id=eq.${groupId}` }, (payload) => {
    addMessageToChat(payload.new, userCache);
  })
  .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'user_sessions', filter: `grupo_id=eq.${groupId}` }, () => {
    updateOnlineCount().then(count => {
      const onlineNumber = document.getElementById('online-number');
      if (onlineNumber) onlineNumber.textContent = count;
    }).catch(err => console.error('Erro na atualização de online via Realtime:', err.message));
    loadMembers(groupId, userCache, userId, isAdminOrOwner);
  })
  .on('postgres_changes', { event: 'DELETE', schema: 'public', table: 'user_sessions', filter: `grupo_id=eq.${groupId}` }, () => {
    updateOnlineCount().then(count => {
      const onlineNumber = document.getElementById('online-number');
      if (onlineNumber) onlineNumber.textContent = count;
    }).catch(err => console.error('Erro na remoção de online via Realtime:', err.message));
    loadMembers(groupId, userCache, userId, isAdminOrOwner);
  })
  .subscribe(async (status) => {
    if (status === 'SUBSCRIBED') {
      console.log(`Subscribed to chat and online channel for group ${groupId}`);
      const { data: messages, error: messagesError } = await supabase
        .from('mensagens')
        .select('*')
        .eq('grupo_id', groupId)
        .order('enviado_em', { ascending: false });
      if (messagesError) throw messagesError;
      messages.forEach(message => addMessageToChat(message, userCache));
      updateOnlineCount().then(count => {
        const onlineNumber = document.getElementById('online-number');
        if (onlineNumber) onlineNumber.textContent = count;
      }).catch(err => console.error('Erro inicial na contagem de online:', err.message));
      loadMembers(groupId, userCache, userId, isAdminOrOwner);
    }
  })
  .catch(err => console.error('Erro ao subscrever ao canal Realtime:', err.message));

// Evento para ícone de pesquisa
const searchIcon = document.getElementById('search-icon');
if (searchIcon) {
  searchIcon.addEventListener('click', () => {
    const searchBar = document.getElementById('search-bar');
    if (searchBar) {
      searchBar.style.display = 'block';
      const searchInput = document.getElementById('search-input');
      if (searchInput) searchInput.focus();
      filterMessages(groupId);
    }
  });
}

// Evento para ícone de três pontos
const menuIcon = document.getElementById('menu-icon');
if (menuIcon && typeof showOptionsModal === 'function') {
  menuIcon.addEventListener('click', () => {
    try {
      console.log(`Abrindo modal de opções para o grupo ${groupId}...`);
      showOptionsModal(groupId);
    } catch (error) {
      console.error(`Erro ao abrir modal de opções para o grupo ${groupId}:`, error.message);
      alert('Erro ao abrir as opções. Verifique o console.');
    }
  });
} else if (menuIcon) {
  console.warn(`Função showOptionsModal não encontrada para o grupo ${groupId}. Ícone desativado.`);
  menuIcon.disabled = true;
}

console.log(`Interface do grupo ${groupId} carregada com solução criativa para remoção de membros.`);

} catch (error) { console.error('Erro ao acessar grupo:', error.message, error.stack); alert('Erro ao acessar o grupo. Verifique o console.'); const header = document.querySelector('.groups-header'); if (header) header.style.display = 'flex'; } };

// Funções existentes mantidas sem alterações (returnToGroups, updateOnlineCount, filterMessages, hideSearchBar, loadInitialMessages, showSettingsModal, showOptionsModal, addMessageToChat, sendMessage, etc.)