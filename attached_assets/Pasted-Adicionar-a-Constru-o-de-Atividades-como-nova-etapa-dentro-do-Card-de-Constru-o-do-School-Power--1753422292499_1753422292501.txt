Adicionar a Constru√ß√£o de Atividades como nova etapa dentro do Card de Constru√ß√£o do School Power

‚úÖ Resumo do que precisa ser feito:
Atualmente, a interface de Constru√ß√£o de Atividades est√° sendo exibida abaixo do Card de Constru√ß√£o dentro da mesma etapa do Plano de A√ß√£o.

Deve-se alterar o fluxo para:

1Ô∏è‚É£ Aparecer como uma nova etapa (Step 3) dentro do Card de Constru√ß√£o.
2Ô∏è‚É£ Somente ap√≥s o usu√°rio aprovar o Plano de A√ß√£o (Step 2), o sistema avan√ßa para a etapa de Constru√ß√£o de Atividades (Step 3).
3Ô∏è‚É£ A interface de Constru√ß√£o de Atividades aparecer√° dentro desta nova etapa, mantendo todas as funcionalidades implementadas.

üõ†Ô∏è Altera√ß√µes detalhadas (passo a passo):
1Ô∏è‚É£ Gerenciamento de etapas:
Arquivo:

src/features/schoolpower/construction/CardDeConstrucao.tsx

Adicionar uma nova etapa no sistema de steps do Card:

ts
Copiar
Editar
const [step, setStep] = useState(1); // se j√° existir, manter

// Step 1 = Mensagem Inicial
// Step 2 = Plano de A√ß√£o
// Step 3 = Constru√ß√£o de Atividades
Alterar o bot√£o de aprova√ß√£o do Plano de A√ß√£o para:

ts
Copiar
Editar
<button onClick={() => setStep(3)}>Aprovar Plano</button>
ou, se estiver utilizando Zustand ou Context para gerenciamento global, criar:

ts
Copiar
Editar
schoolPowerStore.setStep(3);
2Ô∏è‚É£ Renderiza√ß√£o condicional:
No CardDeConstrucao.tsx, usar renderiza√ß√£o clara:

tsx
Copiar
Editar
{step === 1 && <MensagemInicialComponent />}
{step === 2 && <PlanoDeAcaoComponent />}
{step === 3 && <ConstrucaoDeAtividadesComponent />}
3Ô∏è‚É£ Inserir a interface da Constru√ß√£o de Atividades na nova etapa:
Garantir que ConstrucaoDeAtividadesComponent (ou ConstructionActivities.tsx) esteja importado e renderizando corretamente.

Ele j√° deve estar puxando os dados de approvedActivities ou store.schoolPower.approvedActivities que foram definidos ao aprovar o plano de a√ß√£o.

4Ô∏è‚É£ Verificar dados para garantir consist√™ncia:
‚úÖ Conferir que os dados das atividades selecionadas continuam armazenados ao mudar de etapa, sem serem apagados.
‚úÖ Se estiver usando Zustand:

Validar que approvedActivities n√£o seja resetado ao trocar de etapa.

‚úÖ Se estiver usando localStorage/sessionStorage:

Conferir que o carregamento funcione ao recarregar a p√°gina.

5Ô∏è‚É£ Ajustes visuais (opcional para UX):
Atualizar o Header de etapas do School Power para exibir visualmente:

Etapa 1: Mensagem Inicial ‚úÖ

Etapa 2: Plano de A√ß√£o ‚úÖ

Etapa 3: Constru√ß√£o de Atividades üöÄ

Caso utilize componente de progresso (StepsProgress), atualizar para incluir o novo step.

üóÇÔ∏è Arquivos afetados:
‚úÖ src/features/schoolpower/construction/CardDeConstrucao.tsx (principal altera√ß√£o)
‚úÖ src/features/schoolpower/construction/ConstructionActivities.tsx (apenas realocado na nova etapa, sem altera√ß√£o interna)
‚úÖ Se necess√°rio:

src/store/schoolPowerStore.ts

src/components/StepsProgress.tsx

üñ•Ô∏è Resumo t√©cnico:
‚úÖ Adiciona uma nova etapa simples e limpa no fluxo do Card de Constru√ß√£o do School Power.
‚úÖ Utiliza renderiza√ß√£o condicional para alternar interfaces sem perder dados.
‚úÖ Garante modularidade, escalabilidade e n√£o gera conflitos com as funcionalidades j√° constru√≠das.
‚úÖ Deixa a plataforma pronta para a fase 3 de gera√ß√£o automatizada sem retrabalho.

‚úÖ Prompt para enviar ao Vibe Code:
‚ÄúRealize a altera√ß√£o no School Power para que a interface de Constru√ß√£o de Atividades seja exibida como uma nova etapa (Step 3) dentro do fluxo do Card de Constru√ß√£o, ap√≥s o usu√°rio aprovar o Plano de A√ß√£o (Step 2). Utilize renderiza√ß√£o condicional de steps, mantendo todos os dados das atividades selecionadas ao trocar de etapa, garantindo que a interface de constru√ß√£o n√£o apare√ßa abaixo do Plano de A√ß√£o, mas sim em uma etapa separada e limpa. Mantenha a responsividade, estilos e integra√ß√£o com o restante do sistema, sem gerar bugs ou perda de dados.‚Äù