[plugin:vite:react-swc] × the name `SequenciaDidaticaBuilder` is defined multiple times
     ╭─[/home/runner/workspace/src/features/schoolpower/activities/sequencia-didatica/SequenciaDidaticaBuilder.ts:1:1]
   1 │ import { sequenciaDidaticaGenerator, SequenciaDidaticaCompleta, SequenciaDidaticaGenerator } from './SequenciaDidaticaGenerator';
   2 │ import { SequenciaDidaticaData, processSequenciaDidaticaData, validateSequenciaDidaticaData } from './sequenciaDidaticaProcessor';
   3 │ 
   4 │ export class SequenciaDidaticaBuilder {
     ·              ────────────┬───────────
     ·                          ╰── previous definition of `SequenciaDidaticaBuilder` here
   5 │   static async saveSequencia(data: any): Promise<void> {
   6 │     try {
   7 │       console.log('💾 Salvando Sequência Didática:', data);
   8 │ 
   9 │       const sequenciaId = data.id || `seq_${Date.now()}`;
  10 │       const storageKey = `constructed_sequencia-didatica_${sequenciaId}`;
  11 │ 
  12 │       // Salvar no localStorage específico
  13 │       localStorage.setItem(storageKey, JSON.stringify(data));
  14 │ 
  15 │       // Também salvar na lista geral
  16 │       const savedSequencias = JSON.parse(localStorage.getItem('sequenciasDidaticas') || '[]');
  17 │       const existingIndex = savedSequencias.findIndex((s: any) => s.id === sequenciaId);
  18 │ 
  19 │       if (existingIndex >= 0) {
  20 │         savedSequencias[existingIndex] = data;
  21 │       } else {
  22 │         savedSequencias.push({
  23 │           ...data,
  24 │           id: sequenciaId,
  25 │           createdAt: new Date().toISOString()
  26 │         });
  27 │       }
  28 │ 
  29 │       localStorage.setItem('sequenciasDidaticas', JSON.stringify(savedSequencias));
  30 │ 
  31 │       console.log('✅ Sequência Didática salva com sucesso:', sequenciaId);
  32 │ 
  33 │     } catch (error) {
  34 │       console.error('❌ Erro ao salvar Sequência Didática:', error);
  35 │       throw error;
  36 │     }
  37 │   }
  38 │ 
  39 │   static async loadSequencia(id: string): Promise<any> {
  40 │     try {
  41 │       console.log('📂 Carregando Sequência Didática:', id);
  42 │ 
  43 │       // Tentar carregar do localStorage específico primeiro
  44 │       const specificKey = `constructed_sequencia-didatica_${id}`;
  45 │       const specificData = localStorage.getItem(specificKey);
  46 │ 
  47 │       if (specificData) {
  48 │         console.log('✅ Sequência encontrada no storage específico');
  49 │         return JSON.parse(specificData);
  50 │       }
  51 │ 
  52 │       // Fallback para lista geral
  53 │       const savedSequencias = JSON.parse(localStorage.getItem('sequenciasDidaticas') || '[]');
  54 │       const sequencia = savedSequencias.find((s: any) => s.id === id);
  55 │ 
  56 │       if (!sequencia) {
  57 │         console.warn(`⚠️ Sequência Didática com ID ${id} não encontrada`);
  58 │         return null;
  59 │       }
  60 │ 
  61 │       return sequencia;
  62 │ 
  63 │     } catch (error) {
  64 │       console.error('❌ Erro ao carregar sequência salva:', error);
  65 │       return null;
  66 │     }
  67 │   }
  68 │ 
  69 │   static async buildSequenciaDidatica(formData: any): Promise<any> {
  70 │     console.log('🔨 Iniciando construção da Sequência Didática:', formData);
  71 │ 
  72 │     try {
  73 │       // Processar e validar dados
  74 │       const processedData = processSequenciaDidaticaData(formData);
  75 │       console.log('📋 Dados processados:', processedData);
  76 │ 
  77 │       if (!validateSequenciaDidaticaData(processedData)) {
  78 │         throw new Error('Dados obrigatórios não preenchidos corretamente');
  79 │       }
  80 │ 
  81 │       // Gerar sequência completa usando o generator
  82 │       console.log('🎯 Chamando generator para criar sequência...');
  83 │       const sequenciaGerada = await SequenciaDidaticaGenerator.generateSequenciaDidatica(processedData);
  84 │ 
  85 │       // Criar estrutura completa da sequência didática
  86 │       const sequenciaCompleta = {
  87 │         // Metadados básicos
  88 │         id: `sequencia-didatica`,
  89 │         activityId: 'sequencia-didatica',
  90 │         tituloTemaAssunto: processedData.tituloTemaAssunto,
  91 │         disciplina: processedData.disciplina,
  92 │         anoSerie: processedData.anoSerie,
  93 │         objetivosAprendizagem: processedData.objetivosAprendizagem,
  94 │         publicoAlvo: processedData.publicoAlvo,
  95 │         bnccCompetencias: processedData.bnccCompetencias,
  96 │         quantidadeAulas: parseInt(processedData.quantidadeAulas) || 4,
  97 │         quantidadeDiagnosticos: parseInt(processedData.quantidadeDiagnosticos) || 2,
  98 │         quantidadeAvaliacoes: parseInt(processedData.quantidadeAvaliacoes) || 2,
  99 │ 
 100 │         // Dados gerados
 101 │         ...sequenciaGerada,
 102 │ 
 103 │         // Status e timestamps
 104 │         isBuilt: true,
 105 │         isGenerated: true,
 106 │         buildTimestamp: new Date().toISOString(),
 107 │         lastModified: new Date().toISOString()
 108 │       };
 109 │ 
 110 │       // Salvar automaticamente
 111 │       await this.saveSequencia(sequenciaCompleta);
 112 │ 
 113 │       console.log('✅ Sequência Didática construída e salva com sucesso:', sequenciaCompleta);
 114 │       return sequenciaCompleta;
 115 │ 
 116 │     } catch (error) {
 117 │       console.error('❌ Erro ao construir Sequência Didática:', error);
 118 │       throw new Error(`Erro na construção: ${error.message}`);
 119 │     }
 120 │   }
 121 │ 
 122 │   static async regenerateSequencia(activityId: string, newData: any): Promise<any> {
 123 │     console.log('🔄 Regenerando Sequência Didática:', activityId, newData);
 124 │ 
 125 │     try {
 126 │       // Carregar dados existentes
 127 │       const existingData = await this.loadSequencia(activityId);
 128 │ 
 129 │       // Mesclar com novos dados
 130 │       const mergedData = { ...existingData, ...newData };
 131 │ 
 132 │       // Reconstruir
 133 │       return await this.buildSequenciaDidatica(mergedData);
 134 │ 
 135 │     } catch (error) {
 136 │       console.error('❌ Erro ao regenerar Sequência Didática:', error);
 137 │       throw error;
 138 │     }
 139 │   }
 140 │ }
 141 │ 
 142 │ // Exportar instância singleton
 143 │ export const sequenciaDidaticaBuilder = new SequenciaDidaticaBuilder();
 144 │ export interface SequenciaDidaticaBuilderInterface {
 145 │   loadSequencia: (activityId: string) => Promise<any>;
 146 │   saveSequencia: (activityId: string, data: any) => Promise<void>;
 147 │   clearCache: (activityId: string) => void;
 148 │ }
 149 │ 
 150 │ export class SequenciaDidaticaBuilder implements SequenciaDidaticaBuilderInterface {
     ·              ────────────┬───────────
     ·                          ╰── `SequenciaDidaticaBuilder` redefined here
 151 │   private static instance: SequenciaDidaticaBuilder;
 152 │ 
 153 │   static getInstance(): SequenciaDidaticaBuilder {
     ╰────

  × the name `sequenciaDidaticaBuilder` is defined multiple times
     ╭─[/home/runner/workspace/src/features/schoolpower/activities/sequencia-didatica/SequenciaDidaticaBuilder.ts:140:1]
 140 │ }
 141 │ 
 142 │ // Exportar instância singleton
 143 │ export const sequenciaDidaticaBuilder = new SequenciaDidaticaBuilder();
     ·              ────────────┬───────────
     ·                          ╰── previous definition of `sequenciaDidaticaBuilder` here
 144 │ export interface SequenciaDidaticaBuilderInterface {
 145 │   loadSequencia: (activityId: string) => Promise<any>;
 146 │   saveSequencia: (activityId: string, data: any) => Promise<void>;
 147 │   clearCache: (activityId: string) => void;
 148 │ }
 149 │ 
 150 │ export class SequenciaDidaticaBuilder implements SequenciaDidaticaBuilderInterface {
 151 │   private static instance: SequenciaDidaticaBuilder;
 152 │ 
 153 │   static getInstance(): SequenciaDidaticaBuilder {
 154 │     if (!SequenciaDidaticaBuilder.instance) {
 155 │       SequenciaDidaticaBuilder.instance = new SequenciaDidaticaBuilder();
 156 │     }
 157 │     return SequenciaDidaticaBuilder.instance;
 158 │   }
 159 │ 
 160 │   async loadSequencia(activityId: string): Promise<any> {
 161 │     console.log(`🔍 SequenciaDidaticaBuilder: Carregando sequência para ID: ${activityId}`);
 162 │     
 163 │     const cacheKeys = [
 164 │       `constructed_sequencia-didatica_${activityId}`,
 165 │       `activity_${activityId}`,
 166 │       `schoolpower_sequencia-didatica_content`
 167 │     ];
 168 │ 
 169 │     for (const key of cacheKeys) {
 170 │       try {
 171 │         const cached = localStorage.getItem(key);
 172 │         if (cached) {
 173 │           const parsed = JSON.parse(cached);
 174 │           console.log(`✅ Sequência carregada de ${key}`);
 175 │           
 176 │           // Retornar o conteúdo gerado se existir, senão o objeto completo
 177 │           return parsed.generatedContent || parsed.content || parsed;
 178 │         }
 179 │       } catch (error) {
 180 │         console.warn(`⚠️ Erro ao carregar de ${key}:`, error);
 181 │       }
 182 │     }
 183 │ 
 184 │     console.log('⚠️ Nenhuma sequência encontrada no cache');
 185 │     return null;
 186 │   }
 187 │ 
 188 │   async saveSequencia(activityId: string, data: any): Promise<void> {
 189 │     console.log(`💾 SequenciaDidaticaBuilder: Salvando sequência para ID: ${activityId}`);
 190 │     
 191 │     const cacheKeys = [
 192 │       `constructed_sequencia-didatica_${activityId}`,
 193 │       `activity_${activityId}`,
 194 │       `schoolpower_sequencia-didatica_content`
 195 │     ];
 196 │ 
 197 │     const saveData = {
 198 │       id: activityId,
 199 │       generatedContent: data,
 200 │       content: data,
 201 │       savedAt: new Date().toISOString(),
 202 │       isBuilt: true
 203 │     };
 204 │ 
 205 │     // Salvar em múltiplas chaves para compatibilidade
 206 │     for (const key of cacheKeys) {
 207 │       try {
 208 │         localStorage.setItem(key, JSON.stringify(saveData));
 209 │         console.log(`✅ Sequência salva em ${key}`);
 210 │       } catch (error) {
 211 │         console.error(`❌ Erro ao salvar em ${key}:`, error);
 212 │       }
 213 │     }
 214 │   }
 215 │ 
 216 │   clearCache(activityId: string): void {
 217 │     console.log(`🗑️ SequenciaDidaticaBuilder: Limpando cache para ID: ${activityId}`);
 218 │     
 219 │     const cacheKeys = [
 220 │       `constructed_sequencia-didatica_${activityId}`,
 221 │       `activity_${activityId}`,
 222 │       `schoolpower_sequencia-didatica_content`
 223 │     ];
 224 │ 
 225 │     for (const key of cacheKeys) {
 226 │       try {
 227 │         localStorage.removeItem(key);
 228 │         console.log(`✅ Cache ${key} limpo`);
 229 │       } catch (error) {
 230 │         console.warn(`⚠️ Erro ao limpar ${key}:`, error);
 231 │       }
 232 │     }
 233 │   }
 234 │ 
 235 │   // Método estático para carregar sequência (compatibilidade)
 236 │   static async loadSequencia(activityId: string): Promise<any> {
 237 │     const instance = SequenciaDidaticaBuilder.getInstance();
 238 │     return instance.loadSequencia(activityId);
 239 │   }
 240 │ }
 241 │ 
 242 │ // Exportar instância singleton
 243 │ export const sequenciaDidaticaBuilder = SequenciaDidaticaBuilder.getInstance();
     ·              ────────────┬───────────
     ·                          ╰── `sequenciaDidaticaBuilder` redefined here
 244 │ 
 245 │ console.log('🏗️ [SEQUENCIA_DIDATICA_BUILDER] Inicializado');
     ╰────
/home/runner/workspace/src/features/schoolpower/activities/sequencia-didatica/SequenciaDidaticaBuilder.ts:1:1
1  |  import { sequenciaDidaticaGenerator, SequenciaDidaticaCompleta, SequenciaDidaticaGenerator } from './SequenciaDidaticaGenerator';
   |   ^
2  |  import { SequenciaDidaticaData, processSequenciaDidaticaData, validateSequenciaDidaticaData } from './sequenciaDidaticaProcessor';
3  |