[plugin:vite:react-swc] Ã— the name `generateAIResponse` is defined multiple times
      â•­â”€[/home/runner/workspace/src/services/aiChatService.ts:912:1]
  912 â”‚ }
  913 â”‚ 
  914 â”‚ // FunÃ§Ã£o principal para gerar resposta, tentando primeiro xAI e depois Gemini como fallback
  915 â”‚ export async function generateAIResponse(
      Â·                       â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€
      Â·                                â•°â”€â”€ previous definition of `generateAIResponse` here
  916 â”‚   message: string, 
  917 â”‚   sessionId: string, 
  918 â”‚   options?: { 
  919 â”‚     intelligenceLevel?: 'basic' | 'normal' | 'advanced',
  920 â”‚     languageStyle?: 'casual' | 'formal' | 'technical'
  921 â”‚   }
  922 â”‚ ): Promise<string> {
  923 â”‚   try {
  924 â”‚     // Verificar se o sessionId jÃ¡ existe
  925 â”‚     if (!conversationHistory[sessionId]) {
  926 â”‚       console.log(`Iniciando nova conversa com ID: ${sessionId}`);
  927 â”‚       // Carrega histÃ³rico do localStorage ou inicializa novo
  928 â”‚       const history = getConversationHistory(sessionId);
  929 â”‚       if (history.length === 0) {
  930 â”‚         console.log(`Nenhum histÃ³rico encontrado para ${sessionId}, inicializando...`);
  931 â”‚         initializeConversationHistory(sessionId);
  932 â”‚       } else {
  933 â”‚         console.log(`Carregado histÃ³rico existente com ${history.length} mensagens para ${sessionId}`);
  934 â”‚       }
  935 â”‚     } else {
  936 â”‚       console.log(`Usando conversa existente com ID: ${sessionId}, ${conversationHistory[sessionId].length} mensagens`);
  937 â”‚     }
  938 â”‚ 
  939 â”‚     const response = await generateXAIResponse(message, sessionId, options);
  940 â”‚     console.log(`Resposta gerada via xAI para ${sessionId}`);
  941 â”‚     return response;
  942 â”‚   } catch (error) {
  943 â”‚     console.error('Erro com xAI, tentando Gemini:', error);
  944 â”‚     const response = await generateGeminiResponse(message, sessionId, options);
  945 â”‚     console.log(`Resposta gerada via Gemini para ${sessionId} (fallback)`);
  946 â”‚     return response;
  947 â”‚   }
  948 â”‚ }
  949 â”‚ 
  950 â”‚ // Limpar histÃ³rico da conversa
  951 â”‚ export function clearConversationHistory(sessionId: string): void {
  952 â”‚   if (conversationHistory[sessionId]) {
  953 â”‚     // MantÃ©m apenas a mensagem do sistema
  954 â”‚     const systemMessage = conversationHistory[sessionId][0];
  955 â”‚     conversationHistory[sessionId] = [systemMessage];
  956 â”‚ 
  957 â”‚     // Limpar do localStorage tambÃ©m
  958 â”‚     try {
  959 â”‚       localStorage.removeItem(`conversationHistory_${sessionId}`);
  960 â”‚     } catch (error) {
  961 â”‚       console.error("Erro ao limpar histÃ³rico do localStorage:", error);
  962 â”‚     }
  963 â”‚   }
  964 â”‚ }
  965 â”‚ 
  966 â”‚ // Obter histÃ³rico da conversa
  967 â”‚ export function getConversationHistory(sessionId: string): ChatMessage[] {
  968 â”‚   // Primeiro verifica se jÃ¡ estÃ¡ carregado na memÃ³ria
  969 â”‚   if (conversationHistory[sessionId]) {
  970 â”‚     return conversationHistory[sessionId];
  971 â”‚   }
  972 â”‚ 
  973 â”‚   // Caso contrÃ¡rio, tenta recuperar do localStorage
  974 â”‚   try {
  975 â”‚     const savedHistory = localStorage.getItem(`conversationHistory_${sessionId}`);
  976 â”‚     if (savedHistory) {
  977 â”‚       const parsedHistory = JSON.parse(savedHistory) as ChatMessage[];
  978 â”‚       conversationHistory[sessionId] = parsedHistory;
  979 â”‚       return parsedHistory;
  980 â”‚     }
  981 â”‚   } catch (error) {
  982 â”‚     console.error("Erro ao recuperar histÃ³rico do localStorage:", error);
  983 â”‚   }
  984 â”‚ 
  985 â”‚   return [];
  986 â”‚ }
  987 â”‚ 
  988 â”‚ // FunÃ§Ã£o para corrigir links da plataforma
  989 â”‚ function fixPlatformLinks(text: string): string {
  990 â”‚   const platformLinks = {
  991 â”‚     'Portal': 'https://pontoschool.com/portal',
  992 â”‚     'Portal de Estudos': 'https://pontoschool.com/portal',
  993 â”‚     'Agenda': 'https://pontoschool.com/agenda',
  994 â”‚     'Turmas': 'https://pontoschool.com/turmas',
  995 â”‚     'Grupos de Estudo': 'https://pontoschool.com/turmas?view=estudos',
  996 â”‚     'Biblioteca': 'https://pontoschool.com/biblioteca',
  997 â”‚     'Perfil': 'https://pontoschool.com/profile',
  998 â”‚     'PÃ¡gina de Perfil': 'https://pontoschool.com/profile',
  999 â”‚     'ConfiguraÃ§Ãµes': 'https://pontoschool.com/configuracoes',
 1000 â”‚     'PÃ¡gina de ConfiguraÃ§Ãµes': 'https://pontoschool.com/configuracoes',
 1001 â”‚     'Dashboard': 'https://pontoschool.com/dashboard',
 1002 â”‚     'Epictus IA': 'https://pontoschool.com/epictus-ia',
 1003 â”‚     'Mentor IA': 'https://pontoschool.com/mentor-ia',
 1004 â”‚     'Planos de Estudo': 'https://pontoschool.com/planos-estudo',
 1005 â”‚     'Conquistas': 'https://pontoschool.com/conquistas',
 1006 â”‚     'Carteira': 'https://pontoschool.com/carteira',
 1007 â”‚     'Mercado': 'https://pontoschool.com/mercado',
 1008 â”‚     'OrganizaÃ§Ã£o': 'https://pontoschool.com/organizacao',
 1009 â”‚     'Comunidades': 'https://pontoschool.com/comunidades',
 1010 â”‚     'Chat IA': 'https://pontoschool.com/chat-ia',
 1011 â”‚     'School IA': 'https://pontoschool.com/school-ia',
 1012 â”‚     'Novidades': 'https://pontoschool.com/novidades',
 1013 â”‚     'Lembretes': 'https://pontoschool.com/lembretes',
 1014 â”‚     'Pedidos de Ajuda': 'https://pontoschool.com/pedidos-ajuda',
 1015 â”‚     'ConexÃ£o Expert': 'https://pontoschool.com/pedidos-ajuda',
 1016 â”‚     'Estudos': 'https://pontoschool.com/estudos',
 1017 â”‚     'Login': 'https://pontoschool.com/login',
 1018 â”‚     'Cadastro': 'https://pontoschool.com/register',
 1019 â”‚     'PÃ¡gina de Ajuda': 'https://pontoschool.com/ajuda',
 1020 â”‚     'Ajuda': 'https://pontoschool.com/ajuda'
 1021 â”‚   };
 1022 â”‚ 
 1023 â”‚   let newText = text;
 1024 â”‚   const alreadyReplaced = new Set<string>();
 1025 â”‚   const linkRegex = /\[(.+?)\]\((.+?)\)/g;
 1026 â”‚ 
 1027 â”‚   // Primeiro, coletar todos os links jÃ¡ presentes no texto e verificar se estÃ£o formatados corretamente
 1028 â”‚   let match;
 1029 â”‚ 
 1030 â”‚   // Armazenar os links que precisam ser corrigidos
 1031 â”‚   const linksToFix = [];
 1032 â”‚ 
 1033 â”‚   while ((match = linkRegex.exec(newText)) !== null) {
 1034 â”‚     const linkText = match[1];
 1035 â”‚     const url = match[2];
 1036 â”‚     alreadyReplaced.add(url.toLowerCase());
 1037 â”‚ 
 1038 â”‚     // TambÃ©m adicionar o texto do link para evitar duplicaÃ§Ã£o com diferentes textos
 1039 â”‚     for (const key in platformLinks) {
 1040 â”‚       if (linkText.toLowerCase() === key.toLowerCase()) {
 1041 â”‚         alreadyReplaced.add(platformLinks[key].toLowerCase());
 1042 â”‚       }
 1043 â”‚     }
 1044 â”‚   }
 1045 â”‚ 
 1046 â”‚   // Substituir expressÃµes mais especÃ­ficas, evitando duplicidades
 1047 â”‚   for (const key in platformLinks) {
 1048 â”‚     const url = platformLinks[key];
 1049 â”‚     // Pular se este URL jÃ¡ foi usado
 1050 â”‚     if (alreadyReplaced.has(url.toLowerCase())) continue;
 1051 â”‚ 
 1052 â”‚     const regex = new RegExp(`\\b(${key})\\b(?![^\\[]*\\])`, 'gi'); // Busca palavras inteiras que nÃ£o estÃ£o dentro de colchetes
 1053 â”‚     if (regex.test(newText)) {
 1054 â”‚       newText = newText.replace(regex, `[${key}](${url})`);
 1055 â”‚       alreadyReplaced.add(url.toLowerCase());
 1056 â”‚     }
 1057 â”‚   }
 1058 â”‚ 
 1059 â”‚   // Adicionar correÃ§Ã£o para URLs que podem ter sido escritas incorretamente
 1060 â”‚   newText = newText.replace(/\(https:\/\/pontoschool\.com(\s+)([^)]+)\)/g, '(https://pontoschool.com/$2)');
 1061 â”‚ 
 1062 â”‚   // Corrigir URLs que podem ter dupla barra
 1063 â”‚   newText = newText.replace(/\(https:\/\/pontoschool\.com\/\/([^)]+)\)/g, '(https://pontoschool.com/$1)');
 1064 â”‚ 
 1065 â”‚   // Garantir que os links estejam formatados corretamente com os parÃªnteses fora da URL clicÃ¡vel
 1066 â”‚   // Primeiro, encontrar todos os links no formato [texto](url)
 1067 â”‚   const markdownLinkRegex = /\[([^\]]+)\]\(([^)]+)\)/g;
 1068 â”‚   newText = newText.replace(markdownLinkRegex, (match, text, url) => {
 1069 â”‚     // Certificar-se de que apenas a URL estÃ¡ dentro dos parÃªnteses
 1070 â”‚     const cleanUrl = url.split(' ')[0]; // Pegar apenas a URL sem atributos adicionais
 1071 â”‚     return `[${text}](${cleanUrl})`;
 1072 â”‚   });
 1073 â”‚ 
 1074 â”‚   return newText;
 1075 â”‚ }
 1076 â”‚ 
 1077 â”‚ 
 1078 â”‚ // FunÃ§Ã£o para salvar o histÃ³rico da conversa no localStorage
 1079 â”‚ function saveConversationHistory(sessionId: string, history: ChatMessage[]): void {
 1080 â”‚   try {
 1081 â”‚     localStorage.setItem(`conversationHistory_${sessionId}`, JSON.stringify(history));
 1082 â”‚   } catch (error) {
 1083 â”‚     console.error("Erro ao salvar o histÃ³rico da conversa:", error);
 1084 â”‚   }
 1085 â”‚ }
 1086 â”‚ 
 1087 â”‚ // SimulaÃ§Ã£o de resposta da IA
 1088 â”‚ const getResponseForMessage = (message: string): string => {
 1089 â”‚   // AnÃ¡lise bÃ¡sica da mensagem para gerar uma resposta contextual
 1090 â”‚   const formattedMessage = message.toLowerCase();
 1091 â”‚ 
 1092 â”‚   if (formattedMessage.includes('olÃ¡') || formattedMessage.includes('oi') || formattedMessage.includes('bom dia') || formattedMessage.includes('boa tarde') || formattedMessage.includes('boa noite')) {
 1093 â”‚     return `**OlÃ¡, ${userInfo?.username || 'amigo'}!** ðŸ˜Š\n\nComo posso ajudar vocÃª hoje?`;
 1094 â”‚   } else if (formattedMessage.includes('funÃ§Ã£o') || formattedMessage.includes('o que vocÃª faz') || formattedMessage.includes('para que serve')) {
 1095 â”‚     return `**Eu sou o Assistente de Suporte da Ponto.School**, aqui para te ajudar em tudo que precisar na plataforma! ðŸš€\n\nPosso ajudar com:\n\nâ€¢ **NavegaÃ§Ã£o:** Encontrar qualquer recurso na plataforma.\nâ€¢ **Tutoriais:** Explicar o funcionamento de qualquer ferramenta.\nâ€¢ **DÃºvidas:** Responder qualquer questÃ£o sobre a plataforma ou o conteÃºdo.\n\nComo posso ajudar vocÃª agora?`;
 1096 â”‚   } else if (formattedMessage.includes('portal') || formattedMessage.includes('material') || formattedMessage.includes('acessar conteÃºdo')) {
 1097 â”‚     return `VocÃª pode acessar o **Portal** com todos os materiais em https://pontoschool.com/portal\n\nLÃ¡ vocÃª encontrarÃ¡ todos os seus cursos, materiais e recursos de estudo organizados por disciplina.\n\n_Basta clicar no link acima para ir direto para o Portal!_ ðŸ“š`;
 1098 â”‚   } else {
 1099 â”‚     return "Desculpe, nÃ£o entendi sua pergunta. Pode reformulÃ¡-la?";
 1100 â”‚   }
 1101 â”‚ };
 1102 â”‚ 
 1103 â”‚ // VariÃ¡vel para controlar se a resposta estÃ¡ pausada
 1104 â”‚ let isPaused: Record<string, boolean> = {};
 1105 â”‚ 
 1106 â”‚ // FunÃ§Ã£o para pausar a resposta da IA
 1107 â”‚ export const pauseResponse = async (sessionId: string): Promise<void> => {
 1108 â”‚   try {
 1109 â”‚     isPaused[sessionId] = true;
 1110 â”‚     isCancelled[sessionId] = false; // Garantir que nÃ£o estÃ¡ cancelada
 1111 â”‚     console.log(`Resposta da IA pausada para a sessÃ£o ${sessionId}. Estado atual:`, isPaused[sessionId]);
 1112 â”‚   } catch (error) {
 1113 â”‚     console.error('Erro ao pausar resposta da IA:', error);
 1114 â”‚     throw error;
 1115 â”‚   }
 1116 â”‚ };
 1117 â”‚ 
 1118 â”‚ // FunÃ§Ã£o para verificar se a resposta estÃ¡ pausada
 1119 â”‚ export const isResponsePaused = (sessionId: string): boolean => {
 1120 â”‚   const paused = isPaused[sessionId] || false;
 1121 â”‚   // Para debugging
 1122 â”‚   if (paused) {
 1123 â”‚     console.log(`VerificaÃ§Ã£o de pausa: sessÃ£o ${sessionId} estÃ¡ pausada`);
 1124 â”‚   }
 1125 â”‚   return paused;
 1126 â”‚ };
 1127 â”‚ 
 1128 â”‚ // VariÃ¡vel para controlar se a resposta foi cancelada
 1129 â”‚ let isCancelled: Record<string, boolean> = {};
 1130 â”‚ 
 1131 â”‚ // FunÃ§Ã£o para cancelar a resposta da IA
 1132 â”‚ export const cancelResponse = async (sessionId: string): Promise<void> => {
 1133 â”‚   try {
 1134 â”‚     isCancelled[sessionId] = true;
 1135 â”‚     isPaused[sessionId] = false; // Certifique-se de que nÃ£o estÃ¡ em pausa tambÃ©m
 1136 â”‚     console.log(`Resposta da IA cancelada para a sessÃ£o ${sessionId}. Estado atual:`, isCancelled[sessionId]);
 1137 â”‚   } catch (error) {
 1138 â”‚     console.error('Erro ao cancelar resposta da IA:', error);
 1139 â”‚     throw error;
 1140 â”‚   }
 1141 â”‚ };
 1142 â”‚ 
 1143 â”‚ // FunÃ§Ã£o para verificar se a resposta foi cancelada
 1144 â”‚ export const isResponseCancelled = (sessionId: string): boolean => {
 1145 â”‚   const cancelled = isCancelled[sessionId] || false;
 1146 â”‚   // Para debugging
 1147 â”‚   if (cancelled) {
 1148 â”‚     console.log(`VerificaÃ§Ã£o de cancelamento: sessÃ£o ${sessionId} estÃ¡ cancelada`);
 1149 â”‚   }
 1150 â”‚   return cancelled;
 1151 â”‚ };
 1152 â”‚ 
 1153 â”‚ // FunÃ§Ã£o para retomar a resposta da IA
 1154 â”‚ export const resumeResponse = async (sessionId: string): Promise<void> => {
 1155 â”‚   try {
 1156 â”‚     isPaused[sessionId] = false;
 1157 â”‚     console.log(`Resposta da IA retomada para a sessÃ£o ${sessionId}. Estado atual:`, isPaused[sessionId]);
 1158 â”‚   } catch (error) {
 1159 â”‚     console.error('Erro ao retomar resposta da IA:', error);
 1160 â”‚     throw error;
 1161 â”‚   }
 1162 â”‚ };
 1163 â”‚ 
 1164 â”‚ // FunÃ§Ã£o para resetar o estado de cancelamento/pausa (Ãºtil ao iniciar novas respostas)
 1165 â”‚ export const resetResponseState = (sessionId: string): void => {
 1166 â”‚   const wasPaused = isPaused[sessionId];
 1167 â”‚   const wasCancelled = isCancelled[sessionId];
 1168 â”‚ 
 1169 â”‚   isPaused[sessionId] = false;
 1170 â”‚   isCancelled[sessionId] = false;
 1171 â”‚ 
 1172 â”‚   console.log(`Estados resetados para a sessÃ£o ${sessionId}. 
 1173 â”‚     Estado anterior: pausado=${wasPaused}, cancelado=${wasCancelled}. 
 1174 â”‚     Estado atual: pausado=${isPaused[sessionId]}, cancelado=${isCancelled[sessionId]}`);
 1175 â”‚ };
 1176 â”‚ 
 1177 â”‚ export const generateAIResponse = async (prompt: string, sessionId?: string) => {
      Â·              â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€
      Â·                       â•°â”€â”€ `generateAIResponse` redefined here
 1178 â”‚   try {
 1179 â”‚     // Adicionar timeout para a requisiÃ§Ã£o
 1180 â”‚     const controller = new AbortController();
      â•°â”€â”€â”€â”€
/home/runner/workspace/src/services/aiChatService.ts:912:1