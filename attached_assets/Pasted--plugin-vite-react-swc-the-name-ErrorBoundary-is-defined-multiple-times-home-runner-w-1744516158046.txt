[plugin:vite:react-swc] × the name `ErrorBoundary` is defined multiple times
     ╭─[/home/runner/workspace/src/main.tsx:5:1]
   5 │ import { BrowserRouter } from "react-router-dom";
   6 │ import './lib/username-initializer.ts'
   7 │ import { preInitializeWebNodes } from './lib/web-persistence.ts'
   8 │ import ErrorBoundary from "./components/ErrorBoundary.tsx";
     ·        ──────┬──────
     ·              ╰── previous definition of `ErrorBoundary` here
   9 │ 
  10 │ // PRIORIDADE MÁXIMA: Inicializar teias antes de qualquer outro código
  11 │ // Esta função é executada imediatamente, antes mesmo da montagem do React
  12 │ function inicializarTeiasComPrioridadeMaxima() {
  13 │   console.log("Inicializando sistema de teias com prioridade máxima");
  14 │ 
  15 │   try {
  16 │     // Executa sincronamente para garantir disponibilidade imediata
  17 │     preInitializeWebNodes();
  18 │ 
  19 │     // Método para garantir disponibilidade em páginas de autenticação
  20 │     if (window.location.pathname.includes('/login') || window.location.pathname.includes('/register')) {
  21 │       console.log("Página de autenticação detectada, preparando teias prioritárias");
  22 │ 
  23 │       // Adiciona um fundo temporário para melhorar a experiência visual enquanto carrega
  24 │       document.body.classList.add('auth-page-loading');
  25 │ 
  26 │       // Adiciona um estilo global temporário para garantir que o container das teias seja visível imediatamente
  27 │       const style = document.createElement('style');
  28 │       style.textContent = `
  29 │         .auth-page-loading {
  30 │           background: linear-gradient(135deg, rgba(0,20,39,1) 0%, rgba(41,51,92,1) 100%);
  31 │         }
  32 │ 
  33 │         body::before {
  34 │           content: '';
  35 │           position: fixed;
  36 │           top: 0;
  37 │           left: 0;
  38 │           width: 100%;
  39 │           height: 100%;
  40 │           background: linear-gradient(135deg, rgba(0,20,39,0.95) 0%, rgba(41,51,92,0.95) 100%);
  41 │           z-index: -1;
  42 │         }
  43 │       `;
  44 │       document.head.appendChild(style);
  45 │ 
  46 │       // Remover o estilo quando a aplicação real estiver carregada
  47 │       window.addEventListener('load', () => {
  48 │         setTimeout(() => {
  49 │           document.body.classList.remove('auth-page-loading');
  50 │           style.remove();
  51 │         }, 300);
  52 │       });
  53 │ 
  54 │       // Disparar evento de teias prontas para garantir renderização dos componentes
  55 │       setTimeout(() => {
  56 │         document.dispatchEvent(new CustomEvent('WebTeiasProntas'));
  57 │       }, 100);
  58 │     }
  59 │   } catch (error) {
  60 │     console.error("Erro na inicialização das teias:", error);
  61 │   }
  62 │ }
  63 │ 
  64 │ // Executar inicialização prioritária
  65 │ inicializarTeiasComPrioridadeMaxima();
  66 │ 
  67 │ // Configuração de tratamento global de erros
  68 │ const handleGlobalError = (event: ErrorEvent) => {
  69 │   console.error("Erro global capturado:", event.error || event.message);
  70 │   // Não interrompe a aplicação aqui, apenas loga o erro
  71 │   event.preventDefault();
  72 │ };
  73 │ 
  74 │ // Registrar handler de erro global
  75 │ window.addEventListener('error', handleGlobalError);
  76 │ 
  77 │ // Adicionar tratamento para promessas não tratadas
  78 │ window.addEventListener('unhandledrejection', (event) => {
  79 │   console.warn('Promessa não tratada:', event.reason);
  80 │   // Não cancela o evento para permitir outros handlers
  81 │ });
  82 │ 
  83 │ console.log("Iniciando aplicação...");
  84 │ 
  85 │ // Inicializar a aplicação com otimização de renderização
  86 │ const initializeApp = () => {
  87 │   try {
  88 │     const rootElement = document.getElementById("root");
  89 │ 
  90 │     if (!rootElement) {
  91 │       throw new Error("Elemento root não encontrado");
  92 │     }
  93 │ 
  94 │     // Desativar o StrictMode em produção para evitar renderizações duplas
  95 │     const isDevMode = import.meta.env.MODE === 'development';
  96 │ 
  97 │     // Pré-renderizar um loading state para feedback visual imediato
  98 │     rootElement.innerHTML = `
  99 │       <div id="initial-loader" style="position: fixed; inset: 0; display: flex; align-items: center; justify-content: center; background: linear-gradient(135deg, #000000 0%, #1a0d00 50%, #0e0500 100%); z-index: 9999;">
 100 │         <div style="display: flex; flex-direction: column; align-items: center;">
 101 │           <div style="width: 50px; height: 50px; border: 3px solid transparent; border-top-color: #FF6B00; border-radius: 50%; animation: spin 1s linear infinite;"></div>
 102 │           <p style="color: white; margin-top: 20px; font-family: system-ui, sans-serif;">Carregando...</p>
 103 │         </div>
 104 │       </div>
 105 │       <style>
 106 │         @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
 107 │       </style>
 108 │     `;
 109 │ 
 110 │     // Pré-inicializar dados importantes
 111 │     window.preloadStartTime = Date.now();
 112 │ 
 113 │     // Renderização otimizada usando requestIdleCallback ou fallback
 114 │     const renderApp = () => {
 115 │       const AppRoot = (
 116 │         <ErrorBoundary>
 117 │           <BrowserRouter>
 118 │             <App />
 119 │           </BrowserRouter>
 120 │         </ErrorBoundary>
 121 │       );
 122 │ 
 123 │       ReactDOM.createRoot(rootElement).render(
 124 │         isDevMode ? <React.StrictMode>{AppRoot}</React.StrictMode> : AppRoot
 125 │       );
 126 │ 
 127 │       console.log('Aplicação inicializada com sucesso.');
 128 │ 
 129 │       // Remover o loader inicial após um breve período
 130 │       setTimeout(() => {
 131 │         const loader = document.getElementById('initial-loader');
 132 │         if (loader) {
 133 │           loader.style.opacity = '0';
 134 │           loader.style.transition = 'opacity 0.3s ease-out';
 135 │           setTimeout(() => loader.remove(), 300);
 136 │         }
 137 │       }, 200);
 138 │     };
 139 │ 
 140 │     // Renderizar imediatamente sem esperar por idle callback
 141 │     // para garantir carregamento rápido
 142 │     renderApp();
 143 │     
 144 │     // Timeout reduzido para garantir que a UI não fique presa em carregamento
 145 │     setTimeout(() => {
 146 │       if (document.getElementById('initial-loader')) {
 147 │         console.warn("Timeout de carregamento atingido. Forçando renderização.");
 148 │         renderApp();
 149 │       }
 150 │     }, 2000);
 151 │ 
 152 │   } catch (error) {
 153 │     console.error("Erro ao inicializar aplicação:", error);
 154 │ 
 155 │     // Tentar renderizar uma versão mínima da aplicação
 156 │     const rootElement = document.getElementById("root");
 157 │     if (rootElement) {
 158 │       rootElement.innerHTML = `
 159 │         <div style="font-family: system-ui, sans-serif; padding: 2rem; text-align: center; background: linear-gradient(135deg, rgba(0,20,39,1) 0%, rgba(41,51,92,1) 100%); min-height: 100vh; color: white;">
 160 │           <h1>Erro ao carregar aplicação</h1>
 161 │           <p>Ocorreu um erro ao inicializar a aplicação. Tente recarregar a página.</p>
 162 │           <button onclick="window.location.reload()" style="padding: 0.5rem 1rem; margin-top: 1rem; cursor: pointer; background: #FF6B00; color: white; border: none; border-radius: 4px;">
 163 │             Recarregar
 164 │           </button>
 165 │         </div>
 166 │       `;
 167 │     }
 168 │   }
 169 │ };
 170 │ 
 171 │ // Componente ErrorBoundary para capturar erros durante a renderização
 172 │ class ErrorBoundary extends React.Component {
     ·       ──────┬──────
     ·             ╰── `ErrorBoundary` redefined here
 173 │   constructor(props) {
 174 │     super(props);
 175 │     this.state = { hasError: false };
     ╰────
/home/runner/workspace/src/main.tsx:5:1
24 |        document.body.classList.add('auth-page-loading');
25 |  
26 |        // Adiciona um estilo global temporário para garantir que o container das teias seja visível imediatamente
   |                                                                            ^
27 |        const style = document.createElement('style');
28 |        style.textContent = `