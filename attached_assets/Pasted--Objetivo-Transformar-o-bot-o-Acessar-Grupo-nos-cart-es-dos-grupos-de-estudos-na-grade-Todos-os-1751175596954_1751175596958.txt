

Objetivo: Transformar o botão "Acessar Grupo" nos cartões dos grupos de estudos na grade "Todos os Grupos" da mini-seção "Grupos de Estudos" em um botão "Entrar no Grupo". Ao clicar, o usuário será automaticamente adicionado ao grupo (inserido em membros_grupos) e o grupo passará a aparecer na grade "Meus Grupos". A modificação deve ocorrer apenas na grade "Todos os Grupos", preservando o design, layout e todas as funcionalidades existentes, especialmente a criação de grupos via modal, sem introduzir erros ou bugs.



Instruções Gerais





Escopo Restrito: Foque exclusivamente na função loadAllGroups e adicione uma nova função joinGroupDirectly no frontend. Não modifique o design, layout ou outros componentes da mini-seção "Grupos de Estudos", nem outras partes do código (ex.: createGroup, joinGroupByCode, modal de comemoração).



Preservação: Mantenha intactas todas as funcionalidades existentes, incluindo a criação de grupos via modal, o comportamento de "Meus Grupos" e a adesão via código, sem impacto no layout ou design atual.



Eficiência: Implemente a lógica de adesão com validação, logs detalhados e um mecanismo de retry para evitar falhas.



Testes Completos: Após as alterações, teste a adesão via botão e envie os logs.



Problemas a Corrigir





Não Adição Automática: O botão "Acessar Grupo" não realiza a adesão, e a grade "Meus Grupos" não é atualizada.



Soluções:





Substituir o botão por "Entrar no Grupo" com lógica de adesão.



Validar a inserção e sincronizar "Meus Grupos" apenas para a grade "Todos os Grupos".



Evitar duplicatas e conflitos com retries.



Implementação no Frontend (JavaScript)

 // Nova função para adesão direta a partir do botão const joinGroupDirectly = async (groupId, retryCount = 0, maxRetries = 3) => { try { console.log(`Tentativa ${retryCount + 1} de entrar no grupo ${groupId}...`); const userId = await validateUserAuth(); if (!userId) { console.error('Usuário não autenticado.'); alert('Usuário não autenticado.'); return; } 

console.log('Validando adesão ao grupo...');
const { error: joinError } = await supabase
  .from('membros_grupos')
  .insert({ grupo_id: groupId, user_id: userId })
  .onConflict(['grupo_id', 'user_id']).doNothing();

if (joinError) {
  console.error('Erro ao associar usuário ao grupo:', joinError.message, joinError.details);
  if (retryCount < maxRetries) {
    console.log(`Tentando novamente em 1 segundo (tentativa ${retryCount + 2})...`);
    await new Promise(resolve => setTimeout(resolve, 1000));
    return joinGroupDirectly(groupId, retryCount + 1, maxRetries);
  }
  alert('Erro ao entrar no grupo. Verifique o console.');
  return;
}

console.log('Associação bem-sucedida. Atualizando Meus Grupos...');
await loadMyGroups(); // Atualizar a grade "Meus Grupos"
alert('Você entrou no grupo com sucesso!');

} catch (error) { console.error('Erro geral em joinGroupDirectly:', error.message, error.stack); if (retryCount < maxRetries) { console.log(Tentando novamente em 1 segundo (tentativa ${retryCount + 2})...); await new Promise(resolve => setTimeout(resolve, 1000)); return joinGroupDirectly(groupId, retryCount + 1, maxRetries); } alert('Erro ao processar adesão. Verifique o console.'); } };

// Função ajustada para renderizar cartões com botão "Entrar no Grupo" apenas em "Todos os Grupos" const loadAllGroups = async (retryCount = 0, maxRetries = 3) => { try { console.log(Tentativa ${retryCount + 1} de carregar grupos visíveis para todos...); const { data, error } = await supabase .from('grupos_estudo') .select('id, nome, tipo_grupo, codigo_unico, is_private, is_visible_to_all') .eq('is_visible_to_all', true) .order('created_at', { ascending: false});

if (error) {
  console.error('Erro ao carregar Todos os Grupos:', error.message, error.details);
  if (retryCount < maxRetries) {
    console.log(`Tentando novamente em 1 segundo (tentativa ${retryCount + 2})...`);
    await new Promise(resolve => setTimeout(resolve, 1000));
    return loadAllGroups(retryCount + 1, maxRetries);
  }
  return;
}

console.log('Dados retornados do Supabase:', data);
if (!data || data.length === 0) {
  console.warn('Nenhum grupo visível para todos encontrado.');
  return;
}

const grid = document.getElementById('all-groups');
if (!grid) {
  console.error('Elemento #all-groups não encontrado no DOM.');
  return;
}

if (!grid.classList.contains('group-grid')) {
  grid.classList.add('group-grid');
  grid.style.cssText = 'display: flex; flex-wrap: wrap; gap: 10px; padding: 10px;';
}

grid.innerHTML = data.map(group => `
  <div class="group-card" style="display: inline-block; margin: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; width: 200px; background: #f9f9f9; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
    <h3 style="margin: 0; font-size: 1.2em; color: #333;">${group.nome}</h3>
    <p><strong>Tipo:</strong> ${group.tipo_grupo}</p>
    <p><strong>Visibilidade:</strong> Público</p>
    <button onclick="joinGroupDirectly('${group.id}')" style="background: #3498db; color: white; border: none; padding: 5px 10px; border-radius: 5px; cursor: pointer; width: 100%; margin-top: 5px;">Entrar no Grupo</button>
  </div>
`).join('');

console.log(`Grade "Todos os Grupos" renderizada com ${data.length} grupos visíveis.`);

} catch (error) { console.error('Erro geral em loadAllGroups:', error.message, error.stack); if (retryCount < maxRetries) { console.log(Tentando novamente em 1 segundo (tentativa ${retryCount + 2})...); await new Promise(resolve => setTimeout(resolve, 1000)); return loadAllGroups(retryCount + 1, maxRetries); } } };

// Chamar loadAllGroups manualmente para teste imediato loadAllGroups();

// Manter a inicialização existente document.addEventListener('DOMContentLoaded', () => { loadAllGroups(); });

// Manter outras funções existentes (ex.: createGroup, joinGroupByCode, showCelebrationModal, loadMyGroups) sem alterações