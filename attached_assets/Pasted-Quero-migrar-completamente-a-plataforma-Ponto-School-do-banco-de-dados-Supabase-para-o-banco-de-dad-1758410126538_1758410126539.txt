Quero migrar completamente a plataforma Ponto. School do banco de dados Supabase para o banco de dados Neon nativo do Replit. As tabelas no Neon já foram criadas manualmente por mim, com os mesmos nomes, colunas, tipos de dados e conteúdos das tabelas do Supabase (incluindo usuários, cronômetros e quaisquer outros dados). Não faça migração de dados ou criação de tabelas – apenas substitua as integrações no código. Siga estes passos exatos:

Identifique todas as partes do código que usam o Supabase (ex.: importações do supabase-js, criações de cliente, queries, autenticação, inserts, updates, deletes, selects, ou qualquer referência a 'supabase' ou sua URL/credenciais).

Substitua o cliente Supabase por uma conexão ao Neon usando PostgreSQL nativo ou um ORM compatível (ex.: se o código usa Prisma, atualize o schema.prisma para apontar para o Neon; se usa SQL direto, use 'pg' ou 'postgres' com a DATABASE_URL dos Secrets do Replit).

Atualize a configuração de conexão: Use a variável de ambiente DATABASE_URL dos Secrets do Replit para conectar ao Neon. Remova qualquer referência a chaves do Supabase (ex.: SUPABASE_URL, SUPABASE_ANON_KEY).4. Ajuste todas as queries e operações para serem compatíveis com o Neon (PostgreSQL puro):

Para autenticação, se o Supabase auth estava sendo usado, implemente uma alternativa simples com tabelas de usuários no Neon (ex.: hashing de senhas com bcrypt e queries SQL para login/signup).
Para Realtime ou outras features do Supabase, remova ou substitua por polling/websockets no código, se necessário.
Mantenha a lógica de negócios intacta, apenas trocando o backend de dados.
Teste todas as funcionalidades do Scapy (ex.: cadastro de usuários, gerenciamento de cronômetros, leitura/escrita de dados) para garantir que funcionem com o Neon sem erros.

Forneça um relatório final: Liste as mudanças feitas no código (arquivos e linhas afetadas), eventuais erros encontrados e confirmação de que a migração foi concluída com sucesso. Se houver incompatibilidades, sugira soluções.