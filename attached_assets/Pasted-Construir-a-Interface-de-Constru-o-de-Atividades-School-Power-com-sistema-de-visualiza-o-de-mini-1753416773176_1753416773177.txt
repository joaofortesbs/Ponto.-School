Construir a Interface de Constru√ß√£o de Atividades (School Power) com sistema de visualiza√ß√£o de mini-cards funcionais

‚úÖ Contexto (decorado e mapeado)
Esta interface aparece ap√≥s o usu√°rio aprovar o Plano de A√ß√£o dentro do School Power.

Devem ser carregadas somente as atividades aprovadas pelo usu√°rio, puxadas via seus IDs gerados e armazenados no actionPlan.approvedActivities.

Cada atividade possui um ID √∫nico, t√≠tulo e descri√ß√£o gerados pela IA Gemini, e ser√° exibida no mini-card.

Cada atividade, no futuro, ter√° um sistema de constru√ß√£o √∫nico e independente.

Interface escal√°vel, permitindo edi√ß√£o futura de cada atividade.

Permitir f√°cil personaliza√ß√£o, modulariza√ß√£o e escalabilidade para integra√ß√£o posterior com APIs de IA e templates de constru√ß√£o.

ü™Ñ Objetivo desta entrega:
‚úÖ Criar a interface visual de Constru√ß√£o de Atividades, exibindo mini-cards responsivos:

Cada card exibir√°:

65%: pr√©-visualiza√ß√£o de constru√ß√£o (placeholder com loading progress circular).

Progresso de constru√ß√£o (% fake para UI inicialmente).

35%:

T√≠tulo da atividade.

Bot√µes:

Editar (futuro: abrir a tela de constru√ß√£o por atividade).

Visualizar (futuro).

Compartilhar (futuro).

Cards organizados em grade responsiva e suave, dentro do componente CardDeConstrucao.

Usar arquitetura desacoplada (hooks, stores, componentes reutiliz√°veis) para manter escalabilidade.

Puxar dinamicamente os dados das atividades aprovadas armazenados (mockar approvedActivities se necess√°rio).

Inserir na se√ß√£o School Power > CardDeConstrucao, com todos os arquivos separados corretamente.

üóÇÔ∏è Estrutura de arquivos solicitada:
1Ô∏è‚É£ src/features/schoolpower/construction/ConstructionGrid.tsx

Componente principal da grade responsiva dos mini-cards de constru√ß√£o.

2Ô∏è‚É£ src/features/schoolpower/construction/ConstructionCard.tsx

Componente de cada mini-card de atividade, recebendo props:

id, title, description, progress, type, status.

3Ô∏è‚É£ src/features/schoolpower/construction/useConstructionActivities.ts

Hook para puxar os dados das atividades aprovadas do plano de a√ß√£o (mock inicial ou integra√ß√£o se j√° existir store).

4Ô∏è‚É£ src/features/schoolpower/construction/ProgressCircle.tsx

Componente circular de progresso animado, reutiliz√°vel em todos os cards.

5Ô∏è‚É£ src/features/schoolpower/construction/index.tsx

Entrada da interface de Constru√ß√£o de Atividades, renderizando ConstructionGrid dentro de CardDeConstrucao.

6Ô∏è‚É£ Tailwind + Shadcn para estilos consistentes, seguindo UI atual do School Power.

7Ô∏è‚É£ Optionally: types.ts para tipagem consistente das atividades.

üñ•Ô∏è Detalhes de UI e UX:
‚úÖ Grid fluida e responsiva, 3 colunas em desktop, 2 em tablet, 1 em mobile.
‚úÖ Placeholder animado na pr√©-visualiza√ß√£o para mostrar progresso de constru√ß√£o.
‚úÖ Progresso circular centralizado sobre a pr√©-visualiza√ß√£o, exibindo % (fake loading inicialmente).
‚úÖ T√≠tulo e bot√µes alinhados √† direita, claros e intuitivos.
‚úÖ Bot√µes com cores consistentes:

Editar: cor prim√°ria (laranja).

Visualizar: cor secund√°ria (azul claro).

Compartilhar: cor neutra (cinza).

‚úÖ Skeleton ou shimmer para carregamento.
‚úÖ Anima√ß√µes suaves ao carregar, com transi√ß√µes ao abrir/fechar.
‚úÖ Tooltip ao passar o mouse nos bot√µes.

‚öôÔ∏è Back-end/API management (primeira fase):
Os dados ser√£o puxados de:

store.schoolPower.approvedActivities ou

localStorage como fallback para mock

ou GET /api/schoolpower/actionplan/approved (caso j√° esteja pronto).

Cada atividade retornada ter√°:

json
Copiar
Editar
{
  "id": "prova",
  "title": "Prova Bimestral Multidisciplinar",
  "description": "Elabore uma prova bimestral que avalie o conhecimento dos alunos...",
  "status": "pending", // pending | in_progress | completed
  "progress": 0 // inicia em 0, incrementa para 100 futuramente
}
Nenhuma gera√ß√£o de atividade ser√° feita ainda, foco apenas na exibi√ß√£o organizada e escal√°vel.

üõ†Ô∏è Requisitos t√©cnicos espec√≠ficos:
‚úÖ Next.js + React + Typescript + Tailwind + Zustand/Context API.
‚úÖ Respeitar estrutura modular clara para facilitar manuten√ß√£o.
‚úÖ Preparado para integra√ß√£o futura com o sistema de constru√ß√£o e APIs espec√≠ficas por atividade.
‚úÖ C√≥digo limpo, nomea√ß√£o clara, seguindo boas pr√°ticas do projeto Ponto. School.

ü™Ñ Prompt final para Vibe Code:
‚ÄúConstrua a interface de Constru√ß√£o de Atividades do School Power conforme descrito, criando todos os arquivos listados, garantindo que os mini-cards sejam exibidos corretamente a partir dos dados das atividades aprovadas, com pr√©-visualiza√ß√£o de constru√ß√£o e barra de progresso, utilizando Tailwind para responsividade, e preparando a estrutura para futuras integra√ß√µes de edi√ß√£o e constru√ß√£o din√¢mica.‚Äù

