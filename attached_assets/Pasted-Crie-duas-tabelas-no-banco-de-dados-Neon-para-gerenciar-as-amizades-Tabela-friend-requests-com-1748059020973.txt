Crie duas tabelas no banco de dados Neon para gerenciar as amizades:
- Tabela 'friend_requests' com as seguintes colunas:
  - id (SERIAL, chave primária)
  - sender_id (UUID, não nulo, ex.: "uuid1" do Supabase)
  - receiver_id (UUID, não nulo, ex.: "uuid2" do Supabase)
  - status (TEXT, CHECK (status IN ('pending', 'accepted', 'rejected')), padrão 'pending')
  - created_at (TIMESTAMP, padrão CURRENT_TIMESTAMP)
  - CONSTRAINT UNIQUE (sender_id, receiver_id) para evitar solicitações duplicadas
- Tabela 'friendships' com as seguintes colunas:
  - id (SERIAL, chave primária)
  - user1_id (UUID, não nulo, ex.: "uuid1")
  - user2_id (UUID, não nulo, ex.: "uuid2")
  - created_at (TIMESTAMP, padrão CURRENT_TIMESTAMP)
  - CONSTRAINT UNIQUE (user1_id, user2_id) para evitar amizades duplicadas

Habilite Row-Level Security (RLS) com as seguintes políticas:
- Política 'user_requests' para todas as operações (SELECT, INSERT, UPDATE, DELETE) na tabela 'friend_requests', usando (sender_id = current_user_id() OR receiver_id = current_user_id())
- Política 'user_friendships' para todas as operações na tabela 'friendships', usando (user1_id = current_user_id() OR user2_id = current_user_id())

Crie os seguintes índices para otimizar consultas:
- CREATE INDEX idx_friend_requests ON friend_requests (sender_id, receiver_id)
- CREATE INDEX idx_friendships ON friendships (user1_id, user2_id)

**Exemplo de Fluxo de Uso**:
1. Usuário "João" (uuid1) envia solicitação para "Maria" (uuid2).
2. Insere em 'friend_requests': { id: 1, sender_id: "uuid1", receiver_id: "uuid2", status: "pending", created_at: "2025-05-24 00:00:00" }.
3. Maria aceita, atualiza para { status: "accepted" } e insere em 'friendships': { id: 1, user1_id: "uuid1", user2_id: "uuid2", created_at: "2025-05-24 00:05:00" }.

**Considerações**:
- Use current_user_id() como função personalizada que extrai o ID do token JWT do Supabase.
- Teste RLS com um usuário não autorizado (ex.: "Pedro" tentando ver solicitações de João).
- O índice UNIQUE evita múltiplas solicitações entre os mesmos usuários.