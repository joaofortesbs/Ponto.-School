[plugin:vite:react-swc] × the name `generateAIResponse` is defined multiple times
     ╭─[/home/runner/workspace/src/services/aiChatService.ts:697:1]
 697 │ }
 698 │ 
 699 │ // Função principal para gerar resposta, tentando primeiro xAI e depois Gemini como fallback
 700 │ export async function generateAIResponse(
     ·                       ─────────┬────────
     ·                                ╰── previous definition of `generateAIResponse` here
 701 │   message: string,
 702 │   sessionId: string,
 703 │   options?: {
 704 │     intelligenceLevel?: 'basic' | 'normal' | 'advanced',
 705 │     languageStyle?: 'casual' | 'formal' | 'technical'
 706 │   }
 707 │ ): Promise<string> {
 708 │   try {
 709 │     return await generateXAIResponse(message, sessionId, options);
 710 │   } catch (error) {
 711 │     console.error('Erro com xAI, tentando Gemini:', error);
 712 │     return generateGeminiResponse(message, sessionId, options);
 713 │   }
 714 │ }
 715 │ 
 716 │ // Limpar histórico da conversa
 717 │ export function clearConversationHistory(sessionId: string): void {
 718 │   if (conversationHistory[sessionId]) {
 719 │     // Mantém apenas a mensagem do sistema
 720 │     const systemMessage = conversationHistory[sessionId][0];
 721 │     conversationHistory[sessionId] = [systemMessage];
 722 │ 
 723 │     // Limpar do localStorage também
 724 │     try {
 725 │       localStorage.removeItem(`conversationHistory_${sessionId}`);
 726 │     } catch (error) {
 727 │       console.error("Erro ao limpar histórico do localStorage:", error);
 728 │     }
 729 │   }
 730 │ }
 731 │ 
 732 │ // Obter histórico da conversa
 733 │ export function getConversationHistory(sessionId: string): ChatMessage[] {
 734 │   // Primeiro verifica se já está carregado na memória
 735 │   if (conversationHistory[sessionId]) {
 736 │     return conversationHistory[sessionId];
 737 │   }
 738 │ 
 739 │   // Caso contrário, tenta recuperar do localStorage
 740 │   try {
 741 │     const savedHistory = localStorage.getItem(`conversationHistory_${sessionId}`);
 742 │     if (savedHistory) {
 743 │       const parsedHistory = JSON.parse(savedHistory) as ChatMessage[];
 744 │       conversationHistory[sessionId] = parsedHistory;
 745 │       return parsedHistory;
 746 │     }
 747 │   } catch (error) {
 748 │     console.error("Erro ao recuperar histórico do localStorage:", error);
 749 │   }
 750 │ 
 751 │   return [];
 752 │ }
 753 │ 
 754 │ // Função para corrigir links da plataforma
 755 │ function fixPlatformLinks(text: string): string {
 756 │   const platformLinks = {
 757 │     'Portal': 'https://pontoschool.com/portal',
 758 │     'Portal de Estudos': 'https://pontoschool.com/portal',
 759 │     'Agenda': 'https://pontoschool.com/agenda',
 760 │     'Turmas': 'https://pontoschool.com/turmas',
 761 │     'Grupos de Estudo': 'https://pontoschool.com/turmas?view=estudos',
 762 │     'Biblioteca': 'https://pontoschool.com/biblioteca',
 763 │     'Perfil': 'https://pontoschool.com/profile',
 764 │     'Página de Perfil': 'https://pontoschool.com/profile',
 765 │     'Configurações': 'https://pontoschool.com/configuracoes',
 766 │     'Página de Configurações': 'https://pontoschool.com/configuracoes',
 767 │     'Dashboard': 'https://pontoschool.com/dashboard',
 768 │     'Epictus IA': 'https://pontoschool.com/epictus-ia',
 769 │     'Mentor IA': 'https://pontoschool.com/mentor-ia',
 770 │     'Planos de Estudo': 'https://pontoschool.com/planos-estudo',
 771 │     'Conquistas': 'https://pontoschool.com/conquistas',
 772 │     'Carteira': 'https://pontoschool.com/carteira',
 773 │     'Mercado': 'https://pontoschool.com/mercado',
 774 │     'Organização': 'https://pontoschool.com/organizacao',
 775 │     'Comunidades': 'https://pontoschool.com/comunidades',
 776 │     'Chat IA': 'https://pontoschool.com/chat-ia',
 777 │     'School IA': 'https://pontoschool.com/school-ia',
 778 │     'Novidades': 'https://pontoschool.com/novidades',
 779 │     'Lembretes': 'https://pontoschool.com/lembretes',
 780 │     'Pedidos de Ajuda': 'https://pontoschool.com/pedidos-ajuda',
 781 │     'Conexão Expert': 'https://pontoschool.com/pedidos-ajuda',
 782 │     'Estudos': 'https://pontoschool.com/estudos',
 783 │     'Login': 'https://pontoschool.com/login',
 784 │     'Cadastro': 'https://pontoschool.com/register',
 785 │     'Página de Ajuda': 'https://pontoschool.com/ajuda',
 786 │     'Ajuda': 'https://pontoschool.com/ajuda'
 787 │   };
 788 │ 
 789 │   let newText = text;
 790 │   const alreadyReplaced = new Set<string>();
 791 │   const linkRegex = /\[(.+?)\]\((.+?)\)/g;
 792 │ 
 793 │   // Primeiro, coletar todos os links já presentes no texto e verificar se estão formatados corretamente
 794 │   let match;
 795 │ 
 796 │   // Armazenar os links que precisam ser corrigidos
 797 │   const linksToFix = [];
 798 │ 
 799 │   while ((match = linkRegex.exec(newText)) !== null) {
 800 │     const linkText = match[1];
 801 │     const url = match[2];
 802 │     alreadyReplaced.add(url.toLowerCase());
 803 │ 
 804 │     // Também adicionar o texto do link para evitar duplicação com diferentes textos
 805 │     for (const key in platformLinks) {
 806 │       if (linkText.toLowerCase() === key.toLowerCase()) {
 807 │         alreadyReplaced.add(platformLinks[key].toLowerCase());
 808 │       }
 809 │     }
 810 │   }
 811 │ 
 812 │   // Substituir expressões mais específicas, evitando duplicidades
 813 │   for (const key in platformLinks) {
 814 │     const url = platformLinks[key];
 815 │     // Pular se este URL já foi usado
 816 │     if (alreadyReplaced.has(url.toLowerCase())) continue;
 817 │ 
 818 │     const regex = new RegExp(`\\b(${key})\\b(?![^\\[]*\\])`, 'gi'); // Busca palavras inteiras que não estão dentro de colchetes
 819 │     if (regex.test(newText)) {
 820 │       newText = newText.replace(regex, `[${key}](${url})`);
 821 │       alreadyReplaced.add(url.toLowerCase());
 822 │     }
 823 │   }
 824 │ 
 825 │   // Adicionar correção para URLs que podem ter sido escritas incorretamente
 826 │   newText = newText.replace(/\(https:\/\/pontoschool\.com(\s+)([^)]+)\)/g, '(https://pontoschool.com/$2)');
 827 │ 
 828 │   // Corrigir URLs que podem ter dupla barra
 829 │   newText = newText.replace(/\(https:\/\/pontoschool\.com\/\/([^)]+)\)/g, '(https://pontoschool.com/$1)');
 830 │ 
 831 │   // Garantir que os links estejam formatados corretamente com os parênteses fora da URL clicável
 832 │   // Primeiro, encontrar todos os links no formato [texto](url)
 833 │   const markdownLinkRegex = /\[([^\]]+)\]\(([^)]+)\)/g;
 834 │   newText = newText.replace(markdownLinkRegex, (match, text, url) => {
 835 │     // Certificar-se de que apenas a URL está dentro dos parênteses
 836 │     const cleanUrl = url.split(' ')[0]; // Pegar apenas a URL sem atributos adicionais
 837 │     return `[${text}](${cleanUrl})`;
 838 │   });
 839 │ 
 840 │   return newText;
 841 │ }
 842 │ 
 843 │ // Função para salvar o histórico da conversa no localStorage
 844 │ function saveConversationHistory(sessionId: string, history: ChatMessage[]): void {
 845 │   try {
 846 │     localStorage.setItem(`conversationHistory_${sessionId}`, JSON.stringify(history));
 847 │   } catch (error) {
 848 │     console.error("Erro ao salvar o histórico da conversa:", error);
 849 │   }
 850 │ }
 851 │ 
 852 │ // AI Chat Service for generating and managing responses
 853 │ let isCancelled = false;
 854 │ let isPaused = false;
 855 │ let isGenerating = false;
 856 │ 
 857 │ /**
 858 │  * Simulates AI response generation with streaming capability
 859 │  * @param message User message
 860 │  * @param onPartialResponse Callback for partial response updates
 861 │  * @param onCompleteResponse Callback for complete response
 862 │  */
 863 │ export const generateAIResponse = (
     ·              ─────────┬────────
     ·                       ╰── `generateAIResponse` redefined here
 864 │   message: string,
 865 │   onPartialResponse: (text: string) => void,
 866 │   onCompleteResponse: (text: string) => void
     ╰────
/home/runner/workspace/src/services/aiChatService.ts:697:1