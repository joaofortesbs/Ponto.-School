Crie um servidor Node.js usando Express que integre Supabase e Neon para a funcionalidade de adicionar amigos. Instale as dependências: '@supabase/supabase-js', 'pg', 'jsonwebtoken', e 'express'.

Configure o ambiente:
- Cliente Supabase com URL e chave anônima do ambiente (ex.: process.env.SUPABASE_URL, process.env.SUPABASE_KEY).
- Pool de conexão Neon com string de conexão do ambiente (ex.: process.env.NEON_CONNECTION_STRING).

Implemente as seguintes rotas:
- GET /api/search-users?query=:query
  - Middleware de autenticação: Valide o token JWT no header Authorization usando jwt.verify com a chave secreta do Supabase (process.env.SUPABASE_JWT_SECRET).
  - Busque no Supabase 'profiles' com SELECT id, username, full_name, bio, avatar_url WHERE username ILIKE '%' || :query || '%' OR full_name ILIKE '%' || :query || '%' OR email ILIKE '%' || :query || '%'.
  - Consulte o Neon com SELECT user2_id FROM friendships WHERE user1_id = auth.uid() UNION SELECT user1_id FROM friendships WHERE user2_id = auth.uid() para verificar amizades.
  - Combine os resultados em JSON: { id, username, full_name, bio, avatar_url, isFriend: boolean }.
  - Exemplo de retorno: [{ id: "uuid1", username: "joao123", full_name: "João da Silva", bio: "Estudante de Engenharia", avatar_url: "https://seu-supabase-url.storage/profile-pictures/uuid1/foto.jpg", isFriend: false }].
- POST /api/send-friend-request
  - Middleware de autenticação.
  - Receba { receiverId } no body (ex.: "uuid2").
  - Verifique se sender_id != receiverId para evitar auto-solicitações (retorne erro 400 com mensagem "Não pode adicionar a si mesmo").
  - Verifique se já existe uma solicitação pendente ou amizade (SELECT FROM friend_requests WHERE sender_id = auth.uid() AND receiver_id = :receiverId AND status = 'pending').
  - Insira em friend_requests no Neon: INSERT INTO friend_requests (sender_id, receiver_id, status) VALUES (auth.uid(), :receiverId, 'pending').
  - Retorne { success: true, message: "Solicitação enviada" } ou { success: false, error: "Solicitação já existe" }.
- POST /api/accept-friend-request
  - Middleware de autenticação.
  - Receba { senderId } no body (ex.: "uuid1").
  - Verifique se há uma solicitação pendente: SELECT FROM friend_requests WHERE receiver_id = auth.uid() AND sender_id = :senderId AND status = 'pending'.
  - Atualize friend_requests: UPDATE friend_requests SET status = 'accepted' WHERE sender_id = :senderId AND receiver_id = auth.uid() AND status = 'pending'.
  - Insira em friendships: INSERT INTO friendships (user1_id, user2_id) VALUES (LEAST(auth.uid(), :senderId), GREATEST(auth.uid(), :senderId)).
  - Retorne { success: true, message: "Amizade confirmada" }.
- GET /api/check-requests
  - Middleware de autenticação.
  - Consulte Neon: SELECT COUNT(*) FROM friend_requests WHERE receiver_id = auth.uid() AND status = 'pending'.
  - Retorne { count: number } (ex.: { count: 2 }).
- GET /api/get-requests
  - Middleware de autenticação.
  - Consulte Neon: SELECT sender_id FROM friend_requests WHERE receiver_id = auth.uid() AND status = 'pending'.
  - Busque no Supabase os perfis dos sender_id: SELECT id, username, full_name, avatar_url FROM profiles WHERE id IN (...sender_ids).
  - Retorne JSON: [{ id, username, full_name, avatar_url }].
- DELETE /api/reject-request
  - Middleware de autenticação.
  - Receba { senderId } no body.
  - Delete em Neon: DELETE FROM friend_requests WHERE sender_id = :senderId AND receiver_id = auth.uid() AND status = 'pending'.
  - Retorne { success: true, message: "Solicitação rejeitada" }.

**Exemplo de Fluxo de Uso**:
1. João (uuid1) busca "Maria" (query: "ma").
2. Backend retorna [{ id: "uuid2", username: "maria456", full_name: "Maria Oliveira", bio: "Estudante de Literatura", avatar_url: "url", isFriend: false }].
3. João envia solicitação POST /api/send-friend-request { receiverId: "uuid2" }.
4. Maria verifica solicitações com GET /api/check-requests, vê { count: 1 }, e lista com GET /api/get-requests.
5. Maria aceita com POST /api/accept-friend-request { senderId: "uuid1" }, e a amizade é registrada.

**Considerações**:
- Use try-catch para tratar erros (ex.: token inválido, usuário não encontrado).
- Adicione logs com console.log (ex.: "Usuário uuid1 buscou 'ma'").
- Configure CORS no Express para permitir requisições do frontend.
- Teste com múltiplos usuários simultâneos para garantir escalabilidade.