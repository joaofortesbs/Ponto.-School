
/**
 * Script para for√ßar a cria√ß√£o das tabelas de grupos e c√≥digos
 * Este script usa diferentes m√©todos para garantir que as tabelas existam
 */
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

// Verificar ambiente
if (!process.env.SUPABASE_URL || !process.env.SUPABASE_KEY) {
  console.error('‚ùå Credenciais do Supabase n√£o encontradas!');
  console.error('Por favor, defina as vari√°veis de ambiente SUPABASE_URL e SUPABASE_KEY');
  process.exit(1);
}

// Criar cliente Supabase
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

/**
 * M√©todo 1: Usa RPC execute_sql para criar tabelas
 */
async function criarTabelasViaRPC() {
  console.log('üîÑ M√©todo 1: Criando tabelas via RPC execute_sql...');
  
  try {
    // 1. Tentar criar tabela grupos_estudo
    const { error: gruposError } = await supabase.rpc('execute_sql', {
      sql_query: `
        CREATE TABLE IF NOT EXISTS public.grupos_estudo (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          user_id UUID NOT NULL,
          nome TEXT NOT NULL,
          descricao TEXT,
          cor TEXT NOT NULL DEFAULT '#FF6B00',
          membros INTEGER NOT NULL DEFAULT 1,
          membros_ids JSONB DEFAULT '[]'::jsonb,
          topico TEXT,
          topico_nome TEXT,
          topico_icon TEXT,
          privado BOOLEAN DEFAULT false,
          visibilidade TEXT DEFAULT 'todos',
          codigo TEXT,
          disciplina TEXT DEFAULT 'Geral',
          data_criacao TIMESTAMP WITH TIME ZONE DEFAULT now()
        );
        
        CREATE INDEX IF NOT EXISTS grupos_estudo_user_id_idx ON public.grupos_estudo(user_id);
        
        ALTER TABLE public.grupos_estudo ENABLE ROW LEVEL SECURITY;
        
        DROP POLICY IF EXISTS "Usu√°rios podem visualizar grupos" ON public.grupos_estudo;
        CREATE POLICY "Usu√°rios podem visualizar grupos"
          ON public.grupos_estudo FOR SELECT
          USING (true);
        
        DROP POLICY IF EXISTS "Usu√°rios podem inserir grupos" ON public.grupos_estudo;
        CREATE POLICY "Usu√°rios podem inserir grupos"
          ON public.grupos_estudo FOR INSERT
          WITH CHECK (true);
        
        DROP POLICY IF EXISTS "Usu√°rios podem atualizar grupos" ON public.grupos_estudo;
        CREATE POLICY "Usu√°rios podem atualizar grupos"
          ON public.grupos_estudo FOR UPDATE
          USING (true);
        
        DROP POLICY IF EXISTS "Usu√°rios podem excluir grupos" ON public.grupos_estudo;
        CREATE POLICY "Usu√°rios podem excluir grupos"
          ON public.grupos_estudo FOR DELETE
          USING (true);
      `
    });
    
    if (gruposError) {
      console.error('‚ùå Erro ao criar tabela grupos_estudo via RPC:', gruposError);
    } else {
      console.log('‚úÖ Tabela grupos_estudo criada com sucesso via RPC');
    }
    
    // 2. Tentar criar tabela codigos_grupos_estudo
    const { error: codigosError } = await supabase.rpc('execute_sql', {
      sql_query: `
        CREATE TABLE IF NOT EXISTS public.codigos_grupos_estudo (
          codigo VARCHAR(15) PRIMARY KEY,
          grupo_id UUID NOT NULL,
          nome VARCHAR(255) NOT NULL,
          descricao TEXT,
          data_criacao TIMESTAMP WITH TIME ZONE DEFAULT now(),
          user_id UUID,
          privado BOOLEAN DEFAULT false,
          membros INTEGER DEFAULT 1,
          visibilidade VARCHAR(50),
          disciplina VARCHAR(100),
          cor VARCHAR(50) DEFAULT '#FF6B00',
          membros_ids JSONB DEFAULT '[]'::jsonb,
          ultima_atualizacao TIMESTAMP WITH TIME ZONE DEFAULT now()
        );
        
        CREATE INDEX IF NOT EXISTS idx_codigos_grupos_estudo_grupo_id ON public.codigos_grupos_estudo(grupo_id);
        CREATE INDEX IF NOT EXISTS idx_codigos_grupos_estudo_user_id ON public.codigos_grupos_estudo(user_id);
        
        ALTER TABLE public.codigos_grupos_estudo ENABLE ROW LEVEL SECURITY;
        
        DROP POLICY IF EXISTS "Todos podem visualizar c√≥digos" ON public.codigos_grupos_estudo;
        CREATE POLICY "Todos podem visualizar c√≥digos"
          ON public.codigos_grupos_estudo FOR SELECT
          USING (true);
        
        DROP POLICY IF EXISTS "Todos podem inserir c√≥digos" ON public.codigos_grupos_estudo;
        CREATE POLICY "Todos podem inserir c√≥digos"
          ON public.codigos_grupos_estudo FOR INSERT
          WITH CHECK (true);
        
        DROP POLICY IF EXISTS "Todos podem atualizar c√≥digos" ON public.codigos_grupos_estudo;
        CREATE POLICY "Todos podem atualizar c√≥digos"
          ON public.codigos_grupos_estudo FOR UPDATE
          USING (true);
      `
    });
    
    if (codigosError) {
      console.error('‚ùå Erro ao criar tabela codigos_grupos_estudo via RPC:', codigosError);
      return false;
    } else {
      console.log('‚úÖ Tabela codigos_grupos_estudo criada com sucesso via RPC');
      return true;
    }
  } catch (error) {
    console.error('‚ùå Erro inesperado no m√©todo RPC:', error);
    return false;
  }
}

/**
 * M√©todo 2: Tenta criar tabelas usando query SQL direta
 */
async function criarTabelasViaQueryDireta() {
  console.log('üîÑ M√©todo 2: Criando tabelas via query SQL direta...');
  
  try {
    // 1. Criar tabela grupos_estudo
    try {
      await supabase.query(`
        CREATE TABLE IF NOT EXISTS public.grupos_estudo (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          user_id UUID NOT NULL,
          nome TEXT NOT NULL,
          descricao TEXT,
          cor TEXT NOT NULL DEFAULT '#FF6B00',
          membros INTEGER NOT NULL DEFAULT 1,
          membros_ids JSONB DEFAULT '[]'::jsonb,
          topico TEXT,
          topico_nome TEXT,
          topico_icon TEXT,
          privado BOOLEAN DEFAULT false,
          visibilidade TEXT DEFAULT 'todos',
          codigo TEXT,
          disciplina TEXT DEFAULT 'Geral',
          data_criacao TIMESTAMP WITH TIME ZONE DEFAULT now()
        );
      `);
      console.log('‚úÖ Tabela grupos_estudo criada com sucesso via query direta');
    } catch (gruposError) {
      console.error('‚ùå Erro ao criar tabela grupos_estudo via query direta:', gruposError);
    }
    
    // 2. Criar tabela codigos_grupos_estudo
    try {
      await supabase.query(`
        CREATE TABLE IF NOT EXISTS public.codigos_grupos_estudo (
          codigo VARCHAR(15) PRIMARY KEY,
          grupo_id UUID NOT NULL,
          nome VARCHAR(255) NOT NULL,
          descricao TEXT,
          data_criacao TIMESTAMP WITH TIME ZONE DEFAULT now(),
          user_id UUID,
          privado BOOLEAN DEFAULT false,
          membros INTEGER DEFAULT 1,
          visibilidade VARCHAR(50),
          disciplina VARCHAR(100),
          cor VARCHAR(50) DEFAULT '#FF6B00',
          membros_ids JSONB DEFAULT '[]'::jsonb,
          ultima_atualizacao TIMESTAMP WITH TIME ZONE DEFAULT now()
        );
      `);
      console.log('‚úÖ Tabela codigos_grupos_estudo criada com sucesso via query direta');
      return true;
    } catch (codigosError) {
      console.error('‚ùå Erro ao criar tabela codigos_grupos_estudo via query direta:', codigosError);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro inesperado no m√©todo query direta:', error);
    return false;
  }
}

/**
 * M√©todo 3: Tenta chamar nossa API para criar tabelas
 */
async function criarTabelasViaAPI() {
  console.log('üîÑ M√©todo 3: Criando tabelas via API...');
  
  try {
    // Determinar URL da API
    const apiUrl = process.env.API_URL || 'http://localhost:3000/api/fix-tables';
    console.log(`Chamando API em: ${apiUrl}`);
    
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: "Erro desconhecido" }));
      console.error('‚ùå API retornou erro:', errorData);
      return false;
    }
    
    const data = await response.json();
    console.log('‚úÖ API executada com sucesso:', data);
    return data.success === true;
  } catch (error) {
    console.error('‚ùå Erro ao chamar API:', error);
    return false;
  }
}

/**
 * M√©todo 4: Cria manualmente as tabelas usando migrations SQL
 */
async function criarTabelasViaMigrations() {
  console.log('üîÑ M√©todo 4: Criando tabelas via migrations SQL...');
  
  try {
    // Caminhos para os arquivos de migra√ß√£o
    const migrationPath = path.join(__dirname, '..', 'supabase', 'migrations');
    const gruposMigrationFile = path.join(migrationPath, '20240820000000_create_grupos_estudo_table.sql');
    const codigosMigrationFile = path.join(migrationPath, '20240830000000_add_grupo_codigo_column.sql');
    
    // Criar diret√≥rio de migrations se n√£o existir
    if (!fs.existsSync(migrationPath)) {
      fs.mkdirSync(migrationPath, { recursive: true });
      console.log('Diret√≥rio de migra√ß√µes criado');
    }
    
    // Criar arquivo de migra√ß√£o para grupos_estudo se n√£o existir
    if (!fs.existsSync(gruposMigrationFile)) {
      const gruposSql = `
        -- Cria√ß√£o da tabela de grupos de estudo
        CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
        
        CREATE TABLE IF NOT EXISTS public.grupos_estudo (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          user_id UUID NOT NULL,
          nome TEXT NOT NULL,
          descricao TEXT,
          cor TEXT NOT NULL DEFAULT '#FF6B00',
          membros INTEGER NOT NULL DEFAULT 1,
          membros_ids JSONB DEFAULT '[]'::jsonb,
          topico TEXT,
          topico_nome TEXT,
          topico_icon TEXT,
          privado BOOLEAN DEFAULT false,
          visibilidade TEXT DEFAULT 'todos',
          codigo TEXT,
          disciplina TEXT DEFAULT 'Geral',
          data_criacao TIMESTAMP WITH TIME ZONE DEFAULT now()
        );
        
        CREATE INDEX IF NOT EXISTS grupos_estudo_user_id_idx ON public.grupos_estudo(user_id);
        
        ALTER TABLE public.grupos_estudo ENABLE ROW LEVEL SECURITY;
        
        DROP POLICY IF EXISTS "Usu√°rios podem visualizar grupos" ON public.grupos_estudo;
        CREATE POLICY "Usu√°rios podem visualizar grupos"
          ON public.grupos_estudo FOR SELECT
          USING (true);
        
        DROP POLICY IF EXISTS "Usu√°rios podem inserir grupos" ON public.grupos_estudo;
        CREATE POLICY "Usu√°rios podem inserir grupos"
          ON public.grupos_estudo FOR INSERT
          WITH CHECK (true);
        
        DROP POLICY IF EXISTS "Usu√°rios podem atualizar grupos" ON public.grupos_estudo;
        CREATE POLICY "Usu√°rios podem atualizar grupos"
          ON public.grupos_estudo FOR UPDATE
          USING (true);
        
        DROP POLICY IF EXISTS "Usu√°rios podem excluir grupos" ON public.grupos_estudo;
        CREATE POLICY "Usu√°rios podem excluir grupos"
          ON public.grupos_estudo FOR DELETE
          USING (true);
      `;
      
      fs.writeFileSync(gruposMigrationFile, gruposSql);
      console.log('Arquivo de migra√ß√£o para grupos_estudo criado');
    }
    
    // Criar arquivo de migra√ß√£o para codigos_grupos_estudo se n√£o existir
    if (!fs.existsSync(codigosMigrationFile)) {
      const codigosSql = `
        -- Cria√ß√£o da tabela de c√≥digos de grupos de estudo
        CREATE TABLE IF NOT EXISTS public.codigos_grupos_estudo (
          codigo VARCHAR(15) PRIMARY KEY,
          grupo_id UUID NOT NULL,
          nome VARCHAR(255) NOT NULL,
          descricao TEXT,
          data_criacao TIMESTAMP WITH TIME ZONE DEFAULT now(),
          user_id UUID,
          privado BOOLEAN DEFAULT false,
          membros INTEGER DEFAULT 1,
          visibilidade VARCHAR(50),
          disciplina VARCHAR(100),
          cor VARCHAR(50) DEFAULT '#FF6B00',
          membros_ids JSONB DEFAULT '[]'::jsonb,
          ultima_atualizacao TIMESTAMP WITH TIME ZONE DEFAULT now()
        );
        
        CREATE INDEX IF NOT EXISTS idx_codigos_grupos_estudo_grupo_id ON public.codigos_grupos_estudo(grupo_id);
        CREATE INDEX IF NOT EXISTS idx_codigos_grupos_estudo_user_id ON public.codigos_grupos_estudo(user_id);
        
        ALTER TABLE public.codigos_grupos_estudo ENABLE ROW LEVEL SECURITY;
        
        DROP POLICY IF EXISTS "Todos podem visualizar c√≥digos" ON public.codigos_grupos_estudo;
        CREATE POLICY "Todos podem visualizar c√≥digos"
          ON public.codigos_grupos_estudo FOR SELECT
          USING (true);
        
        DROP POLICY IF EXISTS "Todos podem inserir c√≥digos" ON public.codigos_grupos_estudo;
        CREATE POLICY "Todos podem inserir c√≥digos"
          ON public.codigos_grupos_estudo FOR INSERT
          WITH CHECK (true);
        
        DROP POLICY IF EXISTS "Todos podem atualizar c√≥digos" ON public.codigos_grupos_estudo;
        CREATE POLICY "Todos podem atualizar c√≥digos"
          ON public.codigos_grupos_estudo FOR UPDATE
          USING (true);
      `;
      
      fs.writeFileSync(codigosMigrationFile, codigosSql);
      console.log('Arquivo de migra√ß√£o para codigos_grupos_estudo criado');
    }
    
    // Aplicar migrations manualmente usando RPC
    const gruposSql = fs.readFileSync(gruposMigrationFile, 'utf8');
    const codigosSql = fs.readFileSync(codigosMigrationFile, 'utf8');
    
    // Executar SQL de grupos_estudo
    try {
      const { error: gruposError } = await supabase.rpc('execute_sql', {
        sql_query: gruposSql
      }).catch(() => ({ error: { message: "RPC n√£o dispon√≠vel para grupos" } }));
      
      if (gruposError) {
        console.error('‚ùå Erro ao aplicar migra√ß√£o de grupos:', gruposError);
      } else {
        console.log('‚úÖ Migra√ß√£o de grupos aplicada com sucesso');
      }
    } catch (gruposError) {
      console.error('‚ùå Erro ao aplicar migra√ß√£o de grupos:', gruposError);
    }
    
    // Executar SQL de codigos_grupos_estudo
    try {
      const { error: codigosError } = await supabase.rpc('execute_sql', {
        sql_query: codigosSql
      }).catch(() => ({ error: { message: "RPC n√£o dispon√≠vel para c√≥digos" } }));
      
      if (codigosError) {
        console.error('‚ùå Erro ao aplicar migra√ß√£o de c√≥digos:', codigosError);
        return false;
      } else {
        console.log('‚úÖ Migra√ß√£o de c√≥digos aplicada com sucesso');
        return true;
      }
    } catch (codigosError) {
      console.error('‚ùå Erro ao aplicar migra√ß√£o de c√≥digos:', codigosError);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro inesperado no m√©todo migrations:', error);
    return false;
  }
}

/**
 * Verificar se as tabelas foram criadas com sucesso
 */
async function verificarTabelas() {
  console.log('üîç Verificando se as tabelas foram criadas...');
  
  try {
    // Verificar tabela grupos_estudo
    const { data: gruposData, error: gruposError } = await supabase
      .from('grupos_estudo')
      .select('id')
      .limit(1);
      
    if (gruposError) {
      console.error('‚ùå Tabela grupos_estudo n√£o est√° acess√≠vel:', gruposError);
      return false;
    }
    
    console.log('‚úÖ Tabela grupos_estudo est√° acess√≠vel');
    
    // Verificar tabela codigos_grupos_estudo
    const { data: codigosData, error: codigosError } = await supabase
      .from('codigos_grupos_estudo')
      .select('codigo')
      .limit(1);
      
    if (codigosError) {
      console.error('‚ùå Tabela codigos_grupos_estudo n√£o est√° acess√≠vel:', codigosError);
      return false;
    }
    
    console.log('‚úÖ Tabela codigos_grupos_estudo est√° acess√≠vel');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao verificar tabelas:', error);
    return false;
  }
}

/**
 * Fun√ß√£o principal que tenta todos os m√©todos em sequ√™ncia
 */
async function forceCriarTabelas() {
  console.log('üöÄ Iniciando processo de cria√ß√£o for√ßada de tabelas...');
  
  // Verificar se as tabelas j√° existem
  const tabelasExistem = await verificarTabelas();
  
  if (tabelasExistem) {
    console.log('‚úÖ As tabelas j√° existem e est√£o acess√≠veis!');
    return true;
  }
  
  console.log('‚ùå As tabelas n√£o existem ou n√£o est√£o acess√≠veis. Tentando criar...');
  
  // Tentar cada m√©todo em sequ√™ncia
  console.log('\n‚öôÔ∏è Tentando M√©todo 1: RPC execute_sql...');
  const sucessoRPC = await criarTabelasViaRPC();
  
  if (sucessoRPC && await verificarTabelas()) {
    console.log('üéâ M√©todo 1 (RPC) foi bem-sucedido!');
    return true;
  }
  
  console.log('\n‚öôÔ∏è Tentando M√©todo 2: Query SQL direta...');
  const sucessoQuery = await criarTabelasViaQueryDireta();
  
  if (sucessoQuery && await verificarTabelas()) {
    console.log('üéâ M√©todo 2 (Query direta) foi bem-sucedido!');
    return true;
  }
  
  console.log('\n‚öôÔ∏è Tentando M√©todo 3: API...');
  const sucessoAPI = await criarTabelasViaAPI();
  
  if (sucessoAPI && await verificarTabelas()) {
    console.log('üéâ M√©todo 3 (API) foi bem-sucedido!');
    return true;
  }
  
  console.log('\n‚öôÔ∏è Tentando M√©todo 4: Migrations SQL...');
  const sucessoMigrations = await criarTabelasViaMigrations();
  
  if (sucessoMigrations && await verificarTabelas()) {
    console.log('üéâ M√©todo 4 (Migrations) foi bem-sucedido!');
    return true;
  }
  
  // Verifica√ß√£o final
  const verificacaoFinal = await verificarTabelas();
  
  if (verificacaoFinal) {
    console.log('üéâ As tabelas foram criadas com sucesso por algum dos m√©todos!');
    return true;
  }
  
  console.error('‚ùå Todos os m√©todos falharam. As tabelas n√£o puderam ser criadas.');
  return false;
}

// Executar o script
forceCriarTabelas()
  .then(resultado => {
    if (resultado) {
      console.log('‚úÖ SUCESSO: Script conclu√≠do com √™xito!');
      process.exit(0);
    } else {
      console.error('‚ùå FALHA: Script n√£o conseguiu criar as tabelas.');
      process.exit(1);
    }
  })
  .catch(error => {
    console.error('‚ùå ERRO CR√çTICO:', error);
    process.exit(1);
  });
