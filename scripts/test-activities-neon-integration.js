
const { neonDB } = require('../api/neon-db.js');

async function testActivitiesIntegration() {
  console.log('üß™ Testando integra√ß√£o Activities + Neon...');
  
  try {
    // 1. Testar conex√£o
    console.log('\n1Ô∏è‚É£ Testando conex√£o...');
    const connectionOk = await neonDB.testConnection();
    if (!connectionOk) {
      throw new Error('Falha na conex√£o com Neon');
    }
    console.log('‚úÖ Conex√£o OK');

    // 2. Verificar se tabela existe
    console.log('\n2Ô∏è‚É£ Verificando tabela activities...');
    const tableExists = await neonDB.tableExists('activities');
    if (!tableExists) {
      console.log('‚ö†Ô∏è Tabela activities n√£o existe, criando...');
      await neonDB.createActivitiesTable();
    }
    console.log('‚úÖ Tabela activities OK');

    // 3. Teste de cria√ß√£o de atividade
    console.log('\n3Ô∏è‚É£ Testando cria√ß√£o de atividade...');
    const testActivity = {
      user_id: 'test_user_' + Date.now(),
      activity_code: 'test_sp_' + Date.now(),
      type: 'lista-exercicios',
      title: 'Atividade de Teste School Power',
      content: {
        originalData: { subject: 'Matem√°tica', theme: '√Ålgebra' },
        generatedContent: { exercises: ['Ex 1', 'Ex 2'] },
        schoolPowerMetadata: {
          constructedAt: new Date().toISOString(),
          source: 'test_script',
          isBuilt: true
        }
      }
    };

    const createResult = await neonDB.createActivity(testActivity);
    if (!createResult.success) {
      throw new Error('Falha ao criar atividade: ' + createResult.error);
    }
    console.log('‚úÖ Atividade criada:', createResult.data[0]?.activity_code);

    // 4. Teste de busca por c√≥digo
    console.log('\n4Ô∏è‚É£ Testando busca por c√≥digo...');
    const findResult = await neonDB.findActivityByCode(testActivity.activity_code);
    if (!findResult.success || findResult.data.length === 0) {
      throw new Error('Falha ao buscar atividade');
    }
    console.log('‚úÖ Atividade encontrada:', findResult.data[0].title);

    // 5. Teste de busca por usu√°rio
    console.log('\n5Ô∏è‚É£ Testando busca por usu√°rio...');
    const userActivities = await neonDB.findActivitiesByUser(testActivity.user_id);
    if (!userActivities.success) {
      throw new Error('Falha ao buscar atividades do usu√°rio');
    }
    console.log('‚úÖ Atividades do usu√°rio encontradas:', userActivities.data.length);

    // 6. Teste de atualiza√ß√£o
    console.log('\n6Ô∏è‚É£ Testando atualiza√ß√£o...');
    const updateResult = await neonDB.updateActivity(testActivity.activity_code, {
      title: 'Atividade Atualizada',
      content: {
        ...testActivity.content,
        updated: true,
        updatedAt: new Date().toISOString()
      }
    });
    if (!updateResult.success) {
      throw new Error('Falha ao atualizar atividade');
    }
    console.log('‚úÖ Atividade atualizada');

    // 7. Limpeza - deletar atividade de teste
    console.log('\n7Ô∏è‚É£ Limpando dados de teste...');
    const deleteResult = await neonDB.deleteActivity(testActivity.activity_code);
    if (!deleteResult.success) {
      console.warn('‚ö†Ô∏è Falha ao deletar atividade de teste');
    } else {
      console.log('‚úÖ Dados de teste removidos');
    }

    console.log('\nüéâ TODOS OS TESTES PASSARAM!');
    console.log('‚úÖ Integra√ß√£o Activities + Neon est√° funcionando corretamente');

  } catch (error) {
    console.error('\n‚ùå TESTE FALHOU:', error.message);
    process.exit(1);
  }
}

testActivitiesIntegration();
